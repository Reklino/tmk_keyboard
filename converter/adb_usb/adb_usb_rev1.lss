
adb_usb_rev1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  000057da  0000588e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000057da  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000022e  00800152  00800152  00005be0  2**0
                  ALLOC
  3 .noinit       00000004  00800380  00800380  00005be0  2**0
                  ALLOC
  4 .keymap       00000300  00006800  00006800  000058e0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .stab         000008b8  00000000  00000000  00005be0  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      000000a0  00000000  00000000  00006498  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .comment      00000011  00000000  00000000  00006538  2**0
                  CONTENTS, READONLY
  8 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000654c  2**2
                  CONTENTS, READONLY
  9 .debug_aranges 000009c0  00000000  00000000  00006590  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00012f69  00000000  00000000  00006f50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000508b  00000000  00000000  00019eb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00011b9e  00000000  00000000  0001ef44  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001bd0  00000000  00000000  00030ae4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000048a7  00000000  00000000  000326b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00009c20  00000000  00000000  00036f5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000012e8  00000000  00000000  00040b7b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c8 05 	jmp	0xb90	; 0xb90 <__ctors_end>
       4:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__bad_interrupt>
       8:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__bad_interrupt>
       c:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__bad_interrupt>
      10:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__bad_interrupt>
      14:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__bad_interrupt>
      18:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__bad_interrupt>
      1c:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__bad_interrupt>
      20:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__bad_interrupt>
      24:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__bad_interrupt>
      28:	0c 94 86 12 	jmp	0x250c	; 0x250c <__vector_10>
      2c:	0c 94 59 13 	jmp	0x26b2	; 0x26b2 <__vector_11>
      30:	0c 94 fd 22 	jmp	0x45fa	; 0x45fa <__vector_12>
      34:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__bad_interrupt>
      38:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__bad_interrupt>
      3c:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__bad_interrupt>
      40:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__bad_interrupt>
      44:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__bad_interrupt>
      48:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__bad_interrupt>
      4c:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__bad_interrupt>
      50:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__bad_interrupt>
      54:	0c 94 7e 23 	jmp	0x46fc	; 0x46fc <__vector_21>
      58:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__bad_interrupt>
      5c:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__bad_interrupt>
      60:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__bad_interrupt>
      64:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__bad_interrupt>
      68:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__bad_interrupt>
      6c:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__bad_interrupt>
      70:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__bad_interrupt>
      74:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__bad_interrupt>
      78:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__bad_interrupt>
      7c:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__bad_interrupt>
      80:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__bad_interrupt>
      84:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__bad_interrupt>
      88:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__bad_interrupt>
      8c:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__bad_interrupt>
      90:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__bad_interrupt>
      94:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__bad_interrupt>
      98:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__bad_interrupt>
      9c:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__bad_interrupt>
      a0:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__bad_interrupt>
      a4:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__bad_interrupt>
      a8:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__bad_interrupt>

000000ac <unimap_trans>:
      ac:	04 16 07 09 0b 0a 1d 1b 06 19 64 05 14 1a 08 15     ..........d.....
      bc:	1c 17 1e 1f 20 21 23 22 2e 26 24 2d 25 27 30 12     .... !#".&$-%'0.
      cc:	18 2f 0c 13 28 0f 0d 34 0e 33 31 36 38 11 10 37     ./..(..4.3168..7
      dc:	2b 2c 35 2a 58 29 78 7b 79 39 7a 50 4f 51 52 72     +,5*X)x{y9zPOQRr
      ec:	6c 63 68 56 80 66 80 53 02 01 03 55 58 80 57 6d     lchV.f.S...UX.Wm
      fc:	6e 54 62 59 5a 5b 5c 5d 5e 5f 6f 60 61 74 75 66     nTbYZ[\]^_o`atuf
     10c:	3e 3f 40 3c 41 42 77 44 76 46 6b 47 80 43 65 45     >?@<ABwDvFkG.CeE
     11c:	80 48 49 4a 4b 4c 3d 4d 3b 4e 3a 7d 7e 7c 7f 73     .HIJKL=M;N:}~|.s

0000012c <__c.2400>:
     12c:	0a 00                                               ..

0000012e <__c.2398>:
     12e:	25 30 34 58 00                                      %04X.

00000133 <__c.2396>:
     133:	61 64 62 5f 68 6f 73 74 5f 6b 62 64 5f 72 65 63     adb_host_kbd_rec
     143:	76 3a 20 00                                         v: .

00000147 <__c.2394>:
     147:	45 52 52 4f 52 3a 20 6d 65 64 69 61 20 6b 65 79     ERROR: media key
     157:	30 0a 00                                            0..

0000015a <__c.2386>:
     15a:	45 52 52 4f 52 3a 20 6d 65 64 69 61 20 6b 65 79     ERROR: media key
     16a:	31 0a 00                                            1..

0000016d <__c.2369>:
     16d:	5b 42 3a 25 30 32 58 2c 20 58 3a 25 64 28 25 64     [B:%02X, X:%d(%d
     17d:	29 2c 20 59 3a 25 64 28 25 64 29 2c 20 41 3a 25     ), Y:%d(%d), A:%
     18d:	64 5d 0a 00                                         d]..

00000191 <__c.2367>:
     191:	5d 20 00                                            ] .

00000194 <__c.2362>:
     194:	25 30 32 58 20 00                                   %02X .

0000019a <__c.2359>:
     19a:	4d 6f 75 73 65 3a 20 5b 00                          Mouse: [.

000001a3 <__c.2264>:
     1a3:	20 61 64 64 72 3a 25 64 2c 20 72 65 67 33 3a 25      addr:%d, reg3:%
     1b3:	30 34 58 0a 00                                      04X..

000001b8 <__c.2260>:
     1b8:	0a 53 63 61 6e 3a 0a 00                             .Scan:..

000001c0 <__c.2337>:
     1c0:	64 65 74 65 63 74 20 61 67 61 69 6e 0a 00           detect again..

000001ce <__c.2333>:
     1ce:	54 4d 35 3a 20 65 78 74 0a 00                       TM5: ext..

000001d8 <__c.2331>:
     1d8:	55 6e 6b 6e 6f 77 6e 0a 00                          Unknown..

000001e1 <__c.2329>:
     1e1:	54 4d 35 3a 20 64 65 66 61 75 6c 74 0a 00           TM5: default..

000001ef <__c.2327>:
     1ef:	5d 20 63 70 69 3d 25 64 0a 00                       ] cpi=%d..

000001f9 <__c.2322>:
     1f9:	25 30 32 58 20 00                                   %02X .

000001ff <__c.2319>:
     1ff:	45 78 74 3a 20 5b 00                                Ext: [.

00000206 <__c.2315>:
     206:	43 6c 61 73 73 69 63 20 32 30 30 63 70 69 0a 00     Classic 200cpi..

00000216 <__c.2313>:
     216:	43 6c 61 73 73 69 63 20 31 30 30 63 70 69 0a 00     Classic 100cpi..

00000226 <__c.2310>:
     226:	61 64 64 72 25 64 20 72 65 67 33 3a 20 25 30 32     addr%d reg3: %02
     236:	58 0a 00                                            X..

00000239 <__c.2308>:
     239:	6d 6f 76 65 20 66 61 69 6c 0a 00                    move fail..

00000244 <__c.2306>:
     244:	61 64 64 72 25 64 20 72 65 67 33 3a 20 25 30 32     addr%d reg3: %02
     254:	58 0a 00                                            X..

00000257 <__c.2293>:
     257:	0a 4d 6f 75 73 65 3a 0a 00                          .Mouse:..

00000260 <__c.2291>:
     260:	4d 65 64 69 61 20 6b 65 79 73 0a 00                 Media keys..

0000026c <__c.2289>:
     26c:	68 61 64 6c 65 72 3a 20 25 30 32 58 2c 20 49 53     hadler: %02X, IS
     27c:	4f 3a 20 25 73 0a 00                                O: %s..

00000283 <__c.2272>:
     283:	0a 4b 65 79 62 6f 61 72 64 3a 0a 00                 .Keyboard:..

0000028f <__c.1919>:
     28f:	73 00                                               s.

00000291 <__c.1917>:
     291:	53 00                                               S.

00000293 <__c.1915>:
     293:	52 00                                               R.

00000295 <__c.5033>:
     295:	0a 4b 65 79 62 6f 61 72 64 20 73 74 61 72 74 2e     .Keyboard start.
     2a5:	0a 00                                               ..

000002a7 <__c.5031>:
     2a7:	0a 55 53 42 20 63 6f 6e 66 69 67 75 72 65 64 2e     .USB configured.
     2b7:	0a 00                                               ..

000002b9 <__c.5026>:
     2b9:	0a 0a 54 4d 4b 3a 66 35 65 34 38 37 62 63 2f 4c     ..TMK:f5e487bc/L
     2c9:	55 46 41 0a 0a 00                                   UFA...

000002cf <ProductString>:
     2cf:	2e 03 41 00 44 00 42 00 20 00 6b 00 65 00 79 00     ..A.D.B. .k.e.y.
     2df:	62 00 6f 00 61 00 72 00 64 00 20 00 63 00 6f 00     b.o.a.r.d. .c.o.
     2ef:	6e 00 76 00 65 00 72 00 74 00 65 00 72 00 00 00     n.v.e.r.t.e.r...

000002ff <ManufacturerString>:
     2ff:	0e 03 74 00 2e 00 6d 00 2e 00 6b 00 2e 00 00 00     ..t...m...k.....

0000030f <LanguageString>:
     30f:	04 03 09 04                                         ....

00000313 <ConfigurationDescriptor>:
     313:	09 02 74 00 04 01 00 a0 32 09 04 00 00 01 03 01     ..t.....2.......
     323:	01 00 09 21 11 01 00 01 22 40 00 07 05 81 03 08     ...!...."@......
     333:	00 0a 09 04 01 00 01 03 01 02 00 09 21 11 01 00     ............!...
     343:	01 22 4d 00 07 05 82 03 08 00 0a 09 04 02 00 01     ."M.............
     353:	03 00 00 00 09 21 11 01 00 01 22 36 00 07 05 83     .....!...."6....
     363:	03 08 00 0a 09 04 03 00 02 03 00 00 00 09 21 11     ..............!.
     373:	01 00 01 22 22 00 07 05 84 03 20 00 01 07 05 04     ...""..... .....
     383:	03 20 00 01                                         . ..

00000387 <DeviceDescriptor>:
     387:	12 01 10 01 00 00 00 08 ed fe db 0a 01 01 01 02     ................
     397:	00 01                                               ..

00000399 <ConsoleReport>:
     399:	06 31 ff 09 74 a1 01 09 75 15 00 26 ff 00 95 20     .1..t...u..&... 
     3a9:	75 08 81 02 09 76 15 00 26 ff 00 95 20 75 08 91     u....v..&... u..
     3b9:	02 c0                                               ..

000003bb <ExtrakeyReport>:
     3bb:	05 01 09 80 a1 01 85 02 16 01 00 26 37 00 1a 81     ...........&7...
     3cb:	00 2a b7 00 75 10 95 01 81 00 c0 05 0c 09 01 a1     .*..u...........
     3db:	01 85 03 16 01 00 26 9c 02 1a 01 00 2a 9c 02 75     ......&.....*..u
     3eb:	10 95 01 81 00 c0                                   ......

000003f1 <MouseReport>:
     3f1:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 05     ..............).
     401:	15 00 25 01 95 05 75 01 81 02 95 01 75 03 81 01     ..%...u.....u...
     411:	05 01 09 30 09 31 15 81 25 7f 95 02 75 08 81 06     ...0.1..%...u...
     421:	09 38 15 81 25 7f 95 01 75 08 81 06 05 0c 0a 38     .8..%...u......8
     431:	02 15 81 25 7f 95 01 75 08 81 06 c0 c0              ...%...u.....

0000043e <KeyboardReport>:
     43e:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     44e:	95 08 75 01 81 02 95 01 75 08 81 01 05 08 19 01     ..u.....u.......
     45e:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 05 07     )...u.....u.....
     46e:	19 00 29 ff 15 00 26 ff 00 95 06 75 08 81 00 c0     ..)...&....u....

0000047e <__c.2142>:
     47e:	63 6f 6e 73 75 6d 65 72 3a 20 25 30 34 58 0a 00     consumer: %04X..

0000048e <__c.2137>:
     48e:	73 79 73 74 65 6d 3a 20 25 30 34 58 0a 00           system: %04X..

0000049c <__c.2129>:
     49c:	0a 00                                               ..

0000049e <__c.2124>:
     49e:	25 30 32 58 20 00                                   %02X .

000004a4 <__c.2121>:
     4a4:	6b 65 79 62 6f 61 72 64 3a 20 00                    keyboard: .

000004af <__c.2451>:
     4af:	4c 45 44 3a 20 25 30 32 58 0a 00                    LED: %02X..

000004ba <__c.1775>:
     4ba:	25 30 32 58 3a 20 25 30 38 62 25 73 0a 00           %02X: %08b%s..

000004c8 <__c.1772>:
     4c8:	72 2f 63 20 30 31 32 33 34 35 36 37 0a 00           r/c 01234567..

000004d6 <__c.2202>:
     4d6:	29 0a 00                                            )..

000004d9 <__c.2200>:
     4d9:	25 75 00                                            %u.

000004dc <__c.2198>:
     4dc:	2f 00                                               /.

000004de <__c.2196>:
     4de:	25 75 00                                            %u.

000004e1 <__c.2194>:
     4e1:	5d 28 00                                            ](.

000004e4 <__c.2192>:
     4e4:	25 64 00                                            %d.

000004e7 <__c.2190>:
     4e7:	20 00                                                .

000004e9 <__c.2188>:
     4e9:	25 64 00                                            %d.

000004ec <__c.2186>:
     4ec:	20 00                                                .

000004ee <__c.2184>:
     4ee:	25 64 00                                            %d.

000004f1 <__c.2182>:
     4f1:	20 00                                                .

000004f3 <__c.2180>:
     4f3:	25 64 00                                            %d.

000004f6 <__c.2178>:
     4f6:	7c 00                                               |.

000004f8 <__c.2176>:
     4f8:	25 30 32 58 00                                      %02X.

000004fd <__c.2174>:
     4fd:	6d 6f 75 73 65 6b 65 79 20 5b 62 74 6e 7c 78 20     mousekey [btn|x 
     50d:	79 20 76 20 68 5d 28 72 65 70 2f 61 63 6c 29 3a     y v h](rep/acl):
     51d:	20 5b 00                                             [.

00000520 <__c.2823>:
     520:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     530:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

0000053b <__c.2820>:
     53b:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     54b:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

00000554 <__c.2817>:
     554:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     564:	20 25 64 0a 00                                       %d..

00000569 <__c.2814>:
     569:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     579:	64 0a 00                                            d..

0000057c <__c.2811>:
     57c:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     58c:	0a 00                                               ..

0000058e <__c.2807>:
     58e:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

0000059d <__c.2800>:
     59d:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     5ad:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

000005b8 <__c.2797>:
     5b8:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     5c8:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

000005d1 <__c.2794>:
     5d1:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     5e1:	20 25 64 0a 00                                       %d..

000005e6 <__c.2791>:
     5e6:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     5f6:	64 0a 00                                            d..

000005f9 <__c.2788>:
     5f9:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     609:	0a 00                                               ..

0000060b <__c.2784>:
     60b:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

0000061a <__c.2777>:
     61a:	0a 00                                               ..

0000061c <__c.2775>:
     61c:	25 75 00                                            %u.

0000061f <__c.2773>:
     61f:	36 3a 20 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     6: wheel_time_to
     62f:	5f 6d 61 78 3a 20 00                                _max: .

00000636 <__c.2771>:
     636:	0a 00                                               ..

00000638 <__c.2769>:
     638:	25 75 00                                            %u.

0000063b <__c.2767>:
     63b:	35 3a 20 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     5: wheel_max_spe
     64b:	65 64 3a 20 00                                      ed: .

00000650 <__c.2765>:
     650:	0a 00                                               ..

00000652 <__c.2763>:
     652:	25 75 00                                            %u.

00000655 <__c.2761>:
     655:	34 3a 20 74 69 6d 65 5f 74 6f 5f 6d 61 78 3a 20     4: time_to_max: 
     665:	00                                                  .

00000666 <__c.2759>:
     666:	0a 00                                               ..

00000668 <__c.2757>:
     668:	25 75 00                                            %u.

0000066b <__c.2755>:
     66b:	33 3a 20 6d 61 78 5f 73 70 65 65 64 3a 20 00        3: max_speed: .

0000067a <__c.2753>:
     67a:	0a 00                                               ..

0000067c <__c.2751>:
     67c:	25 75 00                                            %u.

0000067f <__c.2749>:
     67f:	32 3a 20 69 6e 74 65 72 76 61 6c 28 6d 73 29 3a     2: interval(ms):
     68f:	20 00                                                .

00000691 <__c.2747>:
     691:	0a 00                                               ..

00000693 <__c.2745>:
     693:	25 75 00                                            %u.

00000696 <__c.2743>:
     696:	31 3a 20 64 65 6c 61 79 28 2a 31 30 6d 73 29 3a     1: delay(*10ms):
     6a6:	20 00                                                .

000006a8 <__c.2741>:
     6a8:	0a 09 2d 20 56 61 6c 75 65 73 20 2d 0a 00           ..- Values -..

000006b6 <__c.2861>:
     6b6:	4d 3e 00                                            M>.

000006b9 <__c.2859>:
     6b9:	4d 25 64 3e 20 00                                   M%d> .

000006bf <__c.2857>:
     6bf:	3f 00                                               ?.

000006c1 <__c.2854>:
     6c1:	73 65 74 20 64 65 66 61 75 6c 74 0a 00              set default..

000006ce <__c.2840>:
     6ce:	43 3e 20 00                                         C> .

000006d2 <__c.2830>:
     6d2:	77 68 65 72 65 20 64 65 6c 74 61 3a 20 63 75 72     where delta: cur
     6e2:	73 6f 72 3d 25 64 2c 20 77 68 65 65 6c 3d 25 64     sor=%d, wheel=%d
     6f2:	0a 53 65 65 20 68 74 74 70 3a 2f 2f 65 6e 2e 77     .See http://en.w
     702:	69 6b 69 70 65 64 69 61 2e 6f 72 67 2f 77 69 6b     ikipedia.org/wik
     712:	69 2f 4d 6f 75 73 65 5f 6b 65 79 73 0a 00           i/Mouse_keys..

00000720 <__c.2828>:
     720:	0a 09 2d 20 4d 6f 75 73 65 6b 65 79 20 2d 0a 45     ..- Mousekey -.E
     730:	53 43 2f 71 3a 09 71 75 69 74 0a 31 3a 09 64 65     SC/q:.quit.1:.de
     740:	6c 61 79 28 2a 31 30 6d 73 29 0a 32 3a 09 69 6e     lay(*10ms).2:.in
     750:	74 65 72 76 61 6c 28 6d 73 29 0a 33 3a 09 6d 61     terval(ms).3:.ma
     760:	78 5f 73 70 65 65 64 0a 34 3a 09 74 69 6d 65 5f     x_speed.4:.time_
     770:	74 6f 5f 6d 61 78 0a 35 3a 09 77 68 65 65 6c 5f     to_max.5:.wheel_
     780:	6d 61 78 5f 73 70 65 65 64 0a 36 3a 09 77 68 65     max_speed.6:.whe
     790:	65 6c 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 0a 0a     el_time_to_max..
     7a0:	70 3a 09 70 72 69 6e 74 20 76 61 6c 75 65 73 0a     p:.print values.
     7b0:	64 3a 09 73 65 74 20 64 65 66 61 75 6c 74 73 0a     d:.set defaults.
     7c0:	75 70 3a 09 2b 31 0a 64 6f 77 6e 3a 09 2d 31 0a     up:.+1.down:.-1.
     7d0:	70 67 75 70 3a 09 2b 31 30 0a 70 67 64 6f 77 6e     pgup:.+10.pgdown
     7e0:	3a 09 2d 31 30 0a 0a 73 70 65 65 64 20 3d 20 64     :.-10..speed = d
     7f0:	65 6c 74 61 20 2a 20 6d 61 78 5f 73 70 65 65 64     elta * max_speed
     800:	20 2a 20 28 72 65 70 65 61 74 20 2f 20 74 69 6d      * (repeat / tim
     810:	65 5f 74 6f 5f 6d 61 78 29 0a 00                    e_to_max)..

0000081b <__c.2733>:
     81b:	3f 00                                               ?.

0000081d <__c.2730>:
     81d:	4d 3e 20 00                                         M> .

00000821 <__c.2735>:
     821:	43 3e 20 00                                         C> .

00000825 <__c.2879>:
     825:	4c 25 64 0a 00                                      L%d..

0000082a <__c.2719>:
     82a:	0a 09 2d 20 43 6f 6e 73 6f 6c 65 20 2d 0a 45 53     ..- Console -.ES
     83a:	43 2f 71 3a 09 71 75 69 74 0a 6d 3a 09 6d 6f 75     C/q:.quit.m:.mou
     84a:	73 65 6b 65 79 0a 00                                sekey..

00000851 <__c.2649>:
     851:	0a 09 2d 20 4d 61 67 69 63 20 2d 0a 64 3a 09 64     ..- Magic -.d:.d
     861:	65 62 75 67 0a 78 3a 09 64 65 62 75 67 20 6d 61     ebug.x:.debug ma
     871:	74 72 69 78 0a 6b 3a 09 64 65 62 75 67 20 6b 65     trix.k:.debug ke
     881:	79 62 6f 61 72 64 0a 6d 3a 09 64 65 62 75 67 20     yboard.m:.debug 
     891:	6d 6f 75 73 65 0a 76 3a 09 76 65 72 73 69 6f 6e     mouse.v:.version
     8a1:	0a 73 3a 09 73 74 61 74 75 73 0a 63 3a 09 63 6f     .s:.status.c:.co
     8b1:	6e 73 6f 6c 65 20 6d 6f 64 65 0a 30 2d 34 3a 09     nsole mode.0-4:.
     8c1:	6c 61 79 65 72 30 2d 34 28 46 31 30 2d 46 34 29     layer0-4(F10-F4)
     8d1:	0a 50 61 75 73 3a 09 62 6f 6f 74 6c 6f 61 64 65     .Paus:.bootloade
     8e1:	72 0a 00                                            r..

000008e4 <__c.2714>:
     8e4:	3f 00                                               ?.

000008e6 <__c.2705>:
     8e6:	74 69 6d 65 72 5f 72 65 61 64 33 32 28 29 3a 20     timer_read32(): 
     8f6:	25 30 34 6c 58 0a 00                                %04lX..

000008fd <__c.2703>:
     8fd:	6b 65 79 62 6f 61 72 64 5f 69 64 6c 65 3a 20 25     keyboard_idle: %
     90d:	58 0a 00                                            X..

00000910 <__c.2701>:
     910:	6b 65 79 62 6f 61 72 64 5f 70 72 6f 74 6f 63 6f     keyboard_protoco
     920:	6c 3a 20 25 58 0a 00                                l: %X..

00000927 <__c.2699>:
     927:	68 6f 73 74 5f 6b 65 79 62 6f 61 72 64 5f 6c 65     host_keyboard_le
     937:	64 73 28 29 3a 20 25 58 0a 00                       ds(): %X..

00000941 <__c.2697>:
     941:	0a 09 2d 20 53 74 61 74 75 73 20 2d 0a 00           ..- Status -..

0000094f <__c.2694>:
     94f:	47 43 43 3a 20 39 2e 31 2e 30 20 41 56 52 2d 4c     GCC: 9.1.0 AVR-L
     95f:	49 42 43 3a 20 32 2e 30 2e 30 20 41 56 52 5f 41     IBC: 2.0.0 AVR_A
     96f:	52 43 48 3a 20 61 76 72 35 0a 00                    RCH: avr5..

0000097a <__c.2692>:
     97a:	4f 50 54 49 4f 4e 53 3a 20 4c 55 46 41 20 4d 4f     OPTIONS: LUFA MO
     98a:	55 53 45 4b 45 59 20 45 58 54 52 41 4b 45 59 20     USEKEY EXTRAKEY 
     99a:	43 4f 4e 53 4f 4c 45 20 43 4f 4d 4d 41 4e 44 20     CONSOLE COMMAND 
     9aa:	4b 45 59 4d 41 50 5f 53 45 43 54 49 4f 4e 20 34     KEYMAP_SECTION 4
     9ba:	30 39 36 0a 00                                      096..

000009bf <__c.2690>:
     9bf:	42 55 49 4c 44 3a 20 66 35 65 34 38 37 62 63 20     BUILD: f5e487bc 
     9cf:	28 31 39 3a 31 38 3a 30 32 20 53 65 70 20 31 30     (19:18:02 Sep 10
     9df:	20 32 30 31 39 29 0a 00                              2019)..

000009e7 <__c.2688>:
     9e7:	56 49 44 3a 20 30 78 46 45 45 44 28 74 2e 6d 2e     VID: 0xFEED(t.m.
     9f7:	6b 2e 29 20 50 49 44 3a 20 30 78 30 41 44 42 28     k.) PID: 0x0ADB(
     a07:	41 44 42 20 6b 65 79 62 6f 61 72 64 20 63 6f 6e     ADB keyboard con
     a17:	76 65 72 74 65 72 29 20 56 45 52 3a 20 30 78 30     verter) VER: 0x0
     a27:	31 30 31 0a 00                                      101..

00000a2c <__c.2686>:
     a2c:	44 45 53 43 3a 20 63 6f 6e 76 65 72 74 20 41 44     DESC: convert AD
     a3c:	42 20 6b 65 79 62 6f 61 72 64 20 74 6f 20 55 53     B keyboard to US
     a4c:	42 0a 00                                            B..

00000a4f <__c.2684>:
     a4f:	0a 09 2d 20 56 65 72 73 69 6f 6e 20 2d 0a 00        ..- Version -..

00000a5e <__c.2681>:
     a5e:	0a 6d 6f 75 73 65 3a 20 6f 66 66 0a 00              .mouse: off..

00000a6b <__c.2679>:
     a6b:	0a 6d 6f 75 73 65 3a 20 6f 6e 0a 00                 .mouse: on..

00000a77 <__c.2676>:
     a77:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 66 66 0a 00     .keyboard: off..

00000a87 <__c.2674>:
     a87:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 6e 0a 00        .keyboard: on..

00000a96 <__c.2671>:
     a96:	0a 6d 61 74 72 69 78 3a 20 6f 66 66 0a 00           .matrix: off..

00000aa4 <__c.2669>:
     aa4:	0a 6d 61 74 72 69 78 3a 20 6f 6e 0a 00              .matrix: on..

00000ab1 <__c.2666>:
     ab1:	0a 64 65 62 75 67 3a 20 6f 6e 0a 00                 .debug: on..

00000abd <__c.2664>:
     abd:	0a 64 65 62 75 67 3a 20 6f 66 66 0a 00              .debug: off..

00000aca <__c.2661>:
     aca:	0a 0a 62 6f 6f 74 6c 6f 61 64 65 72 2e 2e 2e 20     ..bootloader... 
     ada:	00                                                  .

00000adb <__c.2658>:
     adb:	43 3e 20 00 00                                      C> ..

00000ae0 <__trampolines_end>:
     ae0:	35 0b       	sbc	r19, r21
     ae2:	35 0b       	sbc	r19, r21
     ae4:	88 0b       	sbc	r24, r24
     ae6:	35 0b       	sbc	r19, r21
     ae8:	88 0b       	sbc	r24, r24
     aea:	35 0b       	sbc	r19, r21
     aec:	88 0b       	sbc	r24, r24
     aee:	88 0b       	sbc	r24, r24
     af0:	88 0b       	sbc	r24, r24
     af2:	35 0b       	sbc	r19, r21
     af4:	88 0b       	sbc	r24, r24
     af6:	88 0b       	sbc	r24, r24
     af8:	88 0b       	sbc	r24, r24
     afa:	35 0b       	sbc	r19, r21
     afc:	88 0b       	sbc	r24, r24
     afe:	88 0b       	sbc	r24, r24
     b00:	35 0b       	sbc	r19, r21
     b02:	88 0b       	sbc	r24, r24
     b04:	88 0b       	sbc	r24, r24
     b06:	88 0b       	sbc	r24, r24
     b08:	88 0b       	sbc	r24, r24
     b0a:	35 0b       	sbc	r19, r21
     b0c:	88 0b       	sbc	r24, r24
     b0e:	88 0b       	sbc	r24, r24
     b10:	88 0b       	sbc	r24, r24
     b12:	35 0b       	sbc	r19, r21
     b14:	c6 13       	cpse	r28, r22
     b16:	eb 13       	cpse	r30, r27
     b18:	cf 14       	cp	r12, r15
     b1a:	eb 13       	cpse	r30, r27
     b1c:	cf 14       	cp	r12, r15
     b1e:	1b 14       	cp	r1, r11
     b20:	3c 14       	cp	r3, r12
     b22:	cf 14       	cp	r12, r15
     b24:	91 14       	cp	r9, r1
     b26:	9d 14       	cp	r9, r13
     b28:	40 18       	sub	r4, r0
     b2a:	40 18       	sub	r4, r0
     b2c:	7e 18       	sub	r7, r14
     b2e:	7e 18       	sub	r7, r14
     b30:	07 19       	sub	r16, r7
     b32:	3f 19       	sub	r19, r15
     b34:	2f 18       	sub	r2, r15
     b36:	2f 18       	sub	r2, r15
     b38:	59 19       	sub	r21, r9
     b3a:	2f 18       	sub	r2, r15
     b3c:	7b 1a       	sub	r7, r27
     b3e:	7b 1a       	sub	r7, r27
     b40:	25 1b       	sub	r18, r21
     b42:	2f 18       	sub	r2, r15
     b44:	2f 18       	sub	r2, r15
     b46:	3d 1b       	sub	r19, r29
     b48:	92 28       	or	r9, r2
     b4a:	a3 28       	or	r10, r3
     b4c:	6f 28       	or	r6, r15
     b4e:	6f 28       	or	r6, r15
     b50:	6f 28       	or	r6, r15
     b52:	8d 28       	or	r8, r13
     b54:	6f 28       	or	r6, r15
     b56:	6f 28       	or	r6, r15
     b58:	c9 28       	or	r12, r9
     b5a:	6f 28       	or	r6, r15
     b5c:	d9 28       	or	r13, r9
     b5e:	6f 28       	or	r6, r15
     b60:	6f 28       	or	r6, r15
     b62:	6f 28       	or	r6, r15
     b64:	6f 28       	or	r6, r15
     b66:	6f 28       	or	r6, r15
     b68:	00 29       	or	r16, r0
     b6a:	6f 28       	or	r6, r15
     b6c:	6f 28       	or	r6, r15
     b6e:	e9 28       	or	r14, r9
     b70:	6f 28       	or	r6, r15
     b72:	b9 28       	or	r11, r9
     b74:	6f 28       	or	r6, r15
     b76:	6f 28       	or	r6, r15
     b78:	3b 29       	or	r19, r11
     b7a:	3b 29       	or	r19, r11
     b7c:	3b 29       	or	r19, r11
     b7e:	3b 29       	or	r19, r11
     b80:	3b 29       	or	r19, r11
     b82:	3b 29       	or	r19, r11
     b84:	3b 29       	or	r19, r11
     b86:	3b 29       	or	r19, r11
     b88:	3b 29       	or	r19, r11
     b8a:	37 29       	or	r19, r7
     b8c:	6f 28       	or	r6, r15
     b8e:	37 29       	or	r19, r7

00000b90 <__ctors_end>:
     b90:	11 24       	eor	r1, r1
     b92:	1f be       	out	0x3f, r1	; 63
     b94:	cf ef       	ldi	r28, 0xFF	; 255
     b96:	da e0       	ldi	r29, 0x0A	; 10
     b98:	de bf       	out	0x3e, r29	; 62
     b9a:	cd bf       	out	0x3d, r28	; 61

00000b9c <bootloader_jump_after_watchdog_reset>:

/* this runs before main() */
void bootloader_jump_after_watchdog_reset(void) __attribute__ ((used, naked, section (".init3")));
void bootloader_jump_after_watchdog_reset(void)
{
    if ((MCUSR & (1<<WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
     b9c:	04 b6       	in	r0, 0x34	; 52
     b9e:	03 fe       	sbrs	r0, 3
     ba0:	27 c0       	rjmp	.+78     	; 0xbf0 <__do_copy_data>
     ba2:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <__bss_end>
     ba6:	90 91 81 03 	lds	r25, 0x0381	; 0x800381 <__bss_end+0x1>
     baa:	a0 91 82 03 	lds	r26, 0x0382	; 0x800382 <__bss_end+0x2>
     bae:	b0 91 83 03 	lds	r27, 0x0383	; 0x800383 <__bss_end+0x3>
     bb2:	87 30       	cpi	r24, 0x07	; 7
     bb4:	90 4b       	sbci	r25, 0xB0	; 176
     bb6:	a7 40       	sbci	r26, 0x07	; 7
     bb8:	b0 4b       	sbci	r27, 0xB0	; 176
     bba:	d1 f4       	brne	.+52     	; 0xbf0 <__do_copy_data>
        reset_key = 0;
     bbc:	10 92 80 03 	sts	0x0380, r1	; 0x800380 <__bss_end>
     bc0:	10 92 81 03 	sts	0x0381, r1	; 0x800381 <__bss_end+0x1>
     bc4:	10 92 82 03 	sts	0x0382, r1	; 0x800382 <__bss_end+0x2>
     bc8:	10 92 83 03 	sts	0x0383, r1	; 0x800383 <__bss_end+0x3>

        // My custom USBasploader requires this to come up.
        MCUSR = 0;
     bcc:	14 be       	out	0x34, r1	; 52

        // Seems like Teensy halfkay loader requires clearing WDRF and disabling watchdog.
        MCUSR &= ~(1<<WDRF);
     bce:	84 b7       	in	r24, 0x34	; 52
     bd0:	87 7f       	andi	r24, 0xF7	; 247
     bd2:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     bd4:	0f b6       	in	r0, 0x3f	; 63
     bd6:	f8 94       	cli
     bd8:	a8 95       	wdr
     bda:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <actionmaps+0x7f9860>
     bde:	88 61       	ori	r24, 0x18	; 24
     be0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <actionmaps+0x7f9860>
     be4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <actionmaps+0x7f9860>
     be8:	0f be       	out	0x3f, r0	; 63
        wdt_disable();

        // This is compled into 'icall', address should be in word unit, not byte.
        ((void (*)(void))(BOOTLOADER_START/2))();
     bea:	e0 e0       	ldi	r30, 0x00	; 0
     bec:	f8 e3       	ldi	r31, 0x38	; 56
     bee:	09 95       	icall

00000bf0 <__do_copy_data>:
     bf0:	11 e0       	ldi	r17, 0x01	; 1
     bf2:	a0 e0       	ldi	r26, 0x00	; 0
     bf4:	b1 e0       	ldi	r27, 0x01	; 1
     bf6:	ea ed       	ldi	r30, 0xDA	; 218
     bf8:	f7 e5       	ldi	r31, 0x57	; 87
     bfa:	02 c0       	rjmp	.+4      	; 0xc00 <__do_copy_data+0x10>
     bfc:	05 90       	lpm	r0, Z+
     bfe:	0d 92       	st	X+, r0
     c00:	a2 35       	cpi	r26, 0x52	; 82
     c02:	b1 07       	cpc	r27, r17
     c04:	d9 f7       	brne	.-10     	; 0xbfc <__do_copy_data+0xc>

00000c06 <__do_clear_bss>:
     c06:	23 e0       	ldi	r18, 0x03	; 3
     c08:	a2 e5       	ldi	r26, 0x52	; 82
     c0a:	b1 e0       	ldi	r27, 0x01	; 1
     c0c:	01 c0       	rjmp	.+2      	; 0xc10 <.do_clear_bss_start>

00000c0e <.do_clear_bss_loop>:
     c0e:	1d 92       	st	X+, r1

00000c10 <.do_clear_bss_start>:
     c10:	a0 38       	cpi	r26, 0x80	; 128
     c12:	b2 07       	cpc	r27, r18
     c14:	e1 f7       	brne	.-8      	; 0xc0e <.do_clear_bss_loop>
     c16:	0e 94 57 0f 	call	0x1eae	; 0x1eae <main>
     c1a:	0c 94 eb 2b 	jmp	0x57d6	; 0x57d6 <_exit>

00000c1e <__bad_interrupt>:
     c1e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000c22 <xputc>:
	ldi	r24, 13		;
	rcall	1f		;
	ldi	r24, 10		;/
1:
#endif
	push	ZH
     c22:	ff 93       	push	r31
	push	ZL
     c24:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
     c26:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <__data_end>
	lds	ZH, xfunc_out+1	;/
     c2a:	f0 91 53 01 	lds	r31, 0x0153	; 0x800153 <__data_end+0x1>
	sbiw	ZL, 0		;Skip if null
     c2e:	30 97       	sbiw	r30, 0x00	; 0
	breq	2f		;/
     c30:	09 f0       	breq	.+2      	; 0xc34 <xputc+0x12>
	icall
     c32:	09 95       	icall
2:	pop	ZL
     c34:	ef 91       	pop	r30
	pop	ZH
     c36:	ff 91       	pop	r31
	ret
     c38:	08 95       	ret

00000c3a <xputs>:
;			);

.func xputs
.global xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
     c3a:	fc 01       	movw	r30, r24
1:	_LPMI	r24
     c3c:	85 91       	lpm	r24, Z+
	cpi	r24, 0
     c3e:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
     c40:	11 f0       	breq	.+4      	; 0xc46 <xputs+0xc>
	rcall	xputc
     c42:	ef df       	rcall	.-34     	; 0xc22 <xputc>
	rjmp	1b
     c44:	fb cf       	rjmp	.-10     	; 0xc3c <xputs+0x2>
2:	ret
     c46:	08 95       	ret

00000c48 <xitoa>:

.func xitoa
.global xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
     c48:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
     c4a:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
     c4c:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
     c4e:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
     c50:	0c c0       	rjmp	.+24     	; 0xc6a <xitoa+0x22>
	neg	r20		;
     c52:	41 95       	neg	r20
	sbrs	r25, 7		;
     c54:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
     c56:	09 c0       	rjmp	.+18     	; 0xc6a <xitoa+0x22>
	ldi	r30, '-'	;
     c58:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
     c5a:	60 95       	com	r22
	com	r23		;
     c5c:	70 95       	com	r23
	com	r24		;
     c5e:	80 95       	com	r24
	com	r25		;
     c60:	90 95       	com	r25
	adc	r22, r1		;
     c62:	61 1d       	adc	r22, r1
	adc	r23, r1		;
     c64:	71 1d       	adc	r23, r1
	adc	r24, r1		;
     c66:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
     c68:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
     c6a:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
     c6c:	02 c0       	rjmp	.+4      	; 0xc72 <xitoa+0x2a>
	neg	r18		;
     c6e:	21 95       	neg	r18
	ldi	r19, '0'	;/
     c70:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
     c72:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
     c74:	aa 27       	eor	r26, r26
2:	lsl	r22		;
     c76:	66 0f       	add	r22, r22
	rol	r23		;
     c78:	77 1f       	adc	r23, r23
	rol	r24		;
     c7a:	88 1f       	adc	r24, r24
	rol	r25		;
     c7c:	99 1f       	adc	r25, r25
	rol	r26		;
     c7e:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
     c80:	a4 17       	cp	r26, r20
	brcs	3f		;
     c82:	10 f0       	brcs	.+4      	; 0xc88 <xitoa+0x40>
	sub	r26, r20	;
     c84:	a4 1b       	sub	r26, r20
	inc	r22		;
     c86:	63 95       	inc	r22
3:	dec	r21		;
     c88:	5a 95       	dec	r21
	brne	2b		;/
     c8a:	a9 f7       	brne	.-22     	; 0xc76 <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
     c8c:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
     c8e:	08 f0       	brcs	.+2      	; 0xc92 <xitoa+0x4a>
	subi	r26, -7		;
     c90:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
     c92:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
     c94:	af 93       	push	r26
	inc	r31		;/
     c96:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
     c98:	61 15       	cp	r22, r1
	cpc	r23, r1		;
     c9a:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
     c9c:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
     c9e:	91 05       	cpc	r25, r1
	brne	1b		;/
     ca0:	41 f7       	brne	.-48     	; 0xc72 <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
     ca2:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
     ca4:	11 f4       	brne	.+4      	; 0xcaa <xitoa+0x62>
	push	r30		;
     ca6:	ef 93       	push	r30
	inc	r31		;/
     ca8:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
     caa:	f2 17       	cp	r31, r18
	brcc	6f		;
     cac:	18 f4       	brcc	.+6      	; 0xcb4 <xitoa+0x6c>
	push	r19		;
     cae:	3f 93       	push	r19
	inc	r31		;
     cb0:	f3 95       	inc	r31
	rjmp	5b		;/
     cb2:	fb cf       	rjmp	.-10     	; 0xcaa <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
     cb4:	8f 91       	pop	r24
	rcall	xputc		;
     cb6:	b5 df       	rcall	.-150    	; 0xc22 <xputc>
	dec	r31		;
     cb8:	fa 95       	dec	r31
	brne	6b		;/
     cba:	e1 f7       	brne	.-8      	; 0xcb4 <xitoa+0x6c>

	ret
     cbc:	08 95       	ret

00000cbe <xvprintf>:

#if USE_XPRINTF

.func xvprintf
xvprintf:
	ld	ZL, Y+		;Z = pointer to format string
     cbe:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
     cc0:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
     cc2:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
     cc4:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
     cc6:	21 f0       	breq	.+8      	; 0xcd0 <xvprintf+0x12>
	cpi	r24, '%'	;Is format?
     cc8:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
     cca:	19 f0       	breq	.+6      	; 0xcd2 <xvprintf+0x14>
1:	rcall	xputc		;Put a normal character
     ccc:	aa df       	rcall	.-172    	; 0xc22 <xputc>
	rjmp	0b		;/
     cce:	f9 cf       	rjmp	.-14     	; 0xcc2 <xvprintf+0x4>
90:	ret
     cd0:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
     cd2:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
     cd4:	e8 94       	clt
	_LPMI	r21		;Get flags
     cd6:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
     cd8:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
     cda:	c1 f3       	breq	.-16     	; 0xccc <xvprintf+0xe>
	cpi	r21, '0'	;Zero filled?
     cdc:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
     cde:	11 f4       	brne	.+4      	; 0xce4 <xvprintf+0x26>
	set			;/
     ce0:	68 94       	set
22:	_LPMI	r21		;Get width
     ce2:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
     ce4:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
     ce6:	48 f4       	brcc	.+18     	; 0xcfa <xvprintf+0x3c>
	subi	r21, '0'	;
     ce8:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
     cea:	90 f3       	brcs	.-28     	; 0xcd0 <xvprintf+0x12>
	lsl	r18		;
     cec:	22 0f       	add	r18, r18
	mov	r0, r18		;
     cee:	02 2e       	mov	r0, r18
	lsl	r18		;
     cf0:	22 0f       	add	r18, r18
	lsl	r18		;
     cf2:	22 0f       	add	r18, r18
	add	r18, r0		;
     cf4:	20 0d       	add	r18, r0
	add	r18, r21	;
     cf6:	25 0f       	add	r18, r21
	rjmp	22b		;/
     cf8:	f4 cf       	rjmp	.-24     	; 0xce2 <xvprintf+0x24>

24:	brtc	25f		;get value (low word)
     cfa:	0e f4       	brtc	.+2      	; 0xcfe <xvprintf+0x40>
	neg	r18		;
     cfc:	21 95       	neg	r18
25:	ld	r24, Y+		;
     cfe:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
     d00:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
     d02:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
     d04:	19 f3       	breq	.-58     	; 0xccc <xvprintf+0xe>
	cpi	r21, 's'	;Is type RAM string?
     d06:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
     d08:	29 f1       	breq	.+74     	; 0xd54 <xvprintf+0x96>
	cpi	r21, 'S'	;Is type ROM string?
     d0a:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
     d0c:	59 f1       	breq	.+86     	; 0xd64 <xvprintf+0xa6>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
     d0e:	bc 01       	movw	r22, r24
	clr	r24		;
     d10:	88 27       	eor	r24, r24
	clr	r25		;
     d12:	99 27       	eor	r25, r25
	clt			;/
     d14:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
     d16:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
     d18:	21 f4       	brne	.+8      	; 0xd22 <xvprintf+0x64>
	ld	r24, Y+		;get value (high word)
     d1a:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
     d1c:	99 91       	ld	r25, Y+
	set			;
     d1e:	68 94       	set
	_LPMI	r21		;/
     d20:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
     d22:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
     d24:	39 f4       	brne	.+14     	; 0xd34 <xvprintf+0x76>
	ldi	r20, -10	;
     d26:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
     d28:	7e f0       	brts	.+30     	; 0xd48 <xvprintf+0x8a>
	sbrs	r23, 7		;
     d2a:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
     d2c:	0d c0       	rjmp	.+26     	; 0xd48 <xvprintf+0x8a>
	ldi	r24, -1		;
     d2e:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
     d30:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
     d32:	0a c0       	rjmp	.+20     	; 0xd48 <xvprintf+0x8a>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
     d34:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
     d36:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
     d38:	39 f0       	breq	.+14     	; 0xd48 <xvprintf+0x8a>
	cpi	r21, 'X'	;Is type hexdecimal?
     d3a:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
     d3c:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
     d3e:	21 f0       	breq	.+8      	; 0xd48 <xvprintf+0x8a>
	cpi	r21, 'b'	;Is type binary?
     d40:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
     d42:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
     d44:	09 f0       	breq	.+2      	; 0xd48 <xvprintf+0x8a>
	ret			;abort
     d46:	08 95       	ret
40:	push	ZH		;Output the value
     d48:	ff 93       	push	r31
	push	ZL		;
     d4a:	ef 93       	push	r30
	rcall	xitoa		;
     d4c:	7d df       	rcall	.-262    	; 0xc48 <xitoa>
42:	pop	ZL		;
     d4e:	ef 91       	pop	r30
	pop	ZH		;
     d50:	ff 91       	pop	r31
	rjmp	0b		;/
     d52:	b7 cf       	rjmp	.-146    	; 0xcc2 <xvprintf+0x4>

50:	push	ZH		;Put a string on the RAM
     d54:	ff 93       	push	r31
	push	ZL
     d56:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
     d58:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
     d5a:	81 91       	ld	r24, Z+
	cpi	r24, 0
     d5c:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
     d5e:	b9 f3       	breq	.-18     	; 0xd4e <xvprintf+0x90>
	rcall	xputc
     d60:	60 df       	rcall	.-320    	; 0xc22 <xputc>
	rjmp	51b
     d62:	fb cf       	rjmp	.-10     	; 0xd5a <xvprintf+0x9c>

60:	push	ZH		;Put a string on the ROM
     d64:	ff 93       	push	r31
	push	ZL
     d66:	ef 93       	push	r30
	rcall	xputs
     d68:	68 df       	rcall	.-304    	; 0xc3a <xputs>
	rjmp	42b
     d6a:	f1 cf       	rjmp	.-30     	; 0xd4e <xvprintf+0x90>

00000d6c <__xprintf>:


.func __xprintf
.global __xprintf
__xprintf:
	push	YH
     d6c:	df 93       	push	r29
	push	YL
     d6e:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
     d70:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
     d72:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
	adiw	YL, 5		;Y = pointer to arguments
     d74:	25 96       	adiw	r28, 0x05	; 5
	rcall	xvprintf
     d76:	a3 df       	rcall	.-186    	; 0xcbe <xvprintf>
	pop	YL
     d78:	cf 91       	pop	r28
	pop	YH
     d7a:	df 91       	pop	r29
	ret
     d7c:	08 95       	ret

00000d7e <register_key>:
inline
static void register_key(uint8_t key)
{
    uint8_t col, row;
    col = key&0x07;
    row = (key>>3)&0x0F;
     d7e:	e8 2f       	mov	r30, r24
     d80:	e6 95       	lsr	r30
     d82:	e6 95       	lsr	r30
     d84:	e6 95       	lsr	r30
     d86:	ef 70       	andi	r30, 0x0F	; 15
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	e0 5a       	subi	r30, 0xA0	; 160
     d8c:	fe 4f       	sbci	r31, 0xFE	; 254
     d8e:	90 81       	ld	r25, Z
    col = key&0x07;
     d90:	48 2f       	mov	r20, r24
     d92:	47 70       	andi	r20, 0x07	; 7
     d94:	21 e0       	ldi	r18, 0x01	; 1
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	01 c0       	rjmp	.+2      	; 0xd9c <register_key+0x1e>
     d9a:	22 0f       	add	r18, r18
     d9c:	4a 95       	dec	r20
     d9e:	ea f7       	brpl	.-6      	; 0xd9a <register_key+0x1c>
    if (key&0x80) {
     da0:	87 ff       	sbrs	r24, 7
     da2:	04 c0       	rjmp	.+8      	; 0xdac <register_key+0x2e>
        matrix[row] &= ~(1<<col);
     da4:	20 95       	com	r18
     da6:	29 23       	and	r18, r25
    } else {
        matrix[row] |=  (1<<col);
     da8:	20 83       	st	Z, r18
    }
}
     daa:	08 95       	ret
        matrix[row] |=  (1<<col);
     dac:	29 2b       	or	r18, r25
     dae:	fc cf       	rjmp	.-8      	; 0xda8 <register_key+0x2a>

00000db0 <device_scan>:
{
     db0:	0f 93       	push	r16
     db2:	1f 93       	push	r17
     db4:	cf 93       	push	r28
     db6:	df 93       	push	r29
    xprintf("\nScan:\n");
     db8:	88 eb       	ldi	r24, 0xB8	; 184
     dba:	91 e0       	ldi	r25, 0x01	; 1
     dbc:	9f 93       	push	r25
     dbe:	8f 93       	push	r24
     dc0:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__xprintf>
     dc4:	0f 90       	pop	r0
     dc6:	0f 90       	pop	r0
     dc8:	d0 e0       	ldi	r29, 0x00	; 0
     dca:	c0 e0       	ldi	r28, 0x00	; 0
            xprintf(" addr:%d, reg3:%04X\n", addr, reg3);
     dcc:	03 ea       	ldi	r16, 0xA3	; 163
     dce:	11 e0       	ldi	r17, 0x01	; 1
        uint16_t reg3 = adb_host_talk(addr, ADB_REG_3);
     dd0:	63 e0       	ldi	r22, 0x03	; 3
     dd2:	8c 2f       	mov	r24, r28
     dd4:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <adb_host_talk>
     dd8:	9c 01       	movw	r18, r24
        if (reg3) {
     dda:	00 97       	sbiw	r24, 0x00	; 0
     ddc:	71 f0       	breq	.+28     	; 0xdfa <device_scan+0x4a>
            xprintf(" addr:%d, reg3:%04X\n", addr, reg3);
     dde:	3f 93       	push	r19
     de0:	8f 93       	push	r24
     de2:	df 93       	push	r29
     de4:	cf 93       	push	r28
     de6:	1f 93       	push	r17
     de8:	0f 93       	push	r16
     dea:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__xprintf>
     dee:	0f 90       	pop	r0
     df0:	0f 90       	pop	r0
     df2:	0f 90       	pop	r0
     df4:	0f 90       	pop	r0
     df6:	0f 90       	pop	r0
     df8:	0f 90       	pop	r0
     dfa:	21 96       	adiw	r28, 0x01	; 1
    for (uint8_t addr = 0; addr < 16; addr++) {
     dfc:	c0 31       	cpi	r28, 0x10	; 16
     dfe:	d1 05       	cpc	r29, r1
     e00:	39 f7       	brne	.-50     	; 0xdd0 <device_scan+0x20>
}
     e02:	df 91       	pop	r29
     e04:	cf 91       	pop	r28
     e06:	1f 91       	pop	r17
     e08:	0f 91       	pop	r16
     e0a:	08 95       	ret

00000e0c <mouse_init.constprop.0>:
static void mouse_init(uint8_t orig_addr)
     e0c:	3f 92       	push	r3
     e0e:	4f 92       	push	r4
     e10:	5f 92       	push	r5
     e12:	6f 92       	push	r6
     e14:	7f 92       	push	r7
     e16:	8f 92       	push	r8
     e18:	9f 92       	push	r9
     e1a:	af 92       	push	r10
     e1c:	bf 92       	push	r11
     e1e:	cf 92       	push	r12
     e20:	df 92       	push	r13
     e22:	ef 92       	push	r14
     e24:	ff 92       	push	r15
     e26:	0f 93       	push	r16
     e28:	1f 93       	push	r17
     e2a:	cf 93       	push	r28
     e2c:	df 93       	push	r29
     e2e:	cd b7       	in	r28, 0x3d	; 61
     e30:	de b7       	in	r29, 0x3e	; 62
     e32:	28 97       	sbiw	r28, 0x08	; 8
     e34:	0f b6       	in	r0, 0x3f	; 63
     e36:	f8 94       	cli
     e38:	de bf       	out	0x3e, r29	; 62
     e3a:	0f be       	out	0x3f, r0	; 63
     e3c:	cd bf       	out	0x3d, r28	; 61
        xprintf("TM5: ext\n");
     e3e:	9e ec       	ldi	r25, 0xCE	; 206
     e40:	49 2e       	mov	r4, r25
     e42:	91 e0       	ldi	r25, 0x01	; 1
     e44:	59 2e       	mov	r5, r25
            xprintf("Unknown\n");
     e46:	28 ed       	ldi	r18, 0xD8	; 216
     e48:	62 2e       	mov	r6, r18
     e4a:	21 e0       	ldi	r18, 0x01	; 1
     e4c:	72 2e       	mov	r7, r18
            xprintf("TM5: default\n");
     e4e:	31 ee       	ldi	r19, 0xE1	; 225
     e50:	c3 2e       	mov	r12, r19
     e52:	31 e0       	ldi	r19, 0x01	; 1
     e54:	d3 2e       	mov	r13, r19
            for (int8_t i = 0; i < len; i++) xprintf("%02X ", buf[i]);
     e56:	49 ef       	ldi	r20, 0xF9	; 249
     e58:	a4 2e       	mov	r10, r20
     e5a:	41 e0       	ldi	r20, 0x01	; 1
     e5c:	b4 2e       	mov	r11, r20
    mouse_handler = (reg3  = adb_host_talk(orig_addr, ADB_REG_3)) & 0xFF;
     e5e:	63 e0       	ldi	r22, 0x03	; 3
     e60:	83 e0       	ldi	r24, 0x03	; 3
     e62:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <adb_host_talk>
     e66:	8c 01       	movw	r16, r24
    if (!reg3) return;
     e68:	89 2b       	or	r24, r25
     e6a:	09 f4       	brne	.+2      	; 0xe6e <mouse_init.constprop.0+0x62>
     e6c:	4a c1       	rjmp	.+660    	; 0x1102 <mouse_init.constprop.0+0x2f6>
    dmprintf("addr%d reg3: %02X\n", orig_addr, reg3);
     e6e:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <debug_config>
     e72:	83 ff       	sbrs	r24, 3
     e74:	11 c0       	rjmp	.+34     	; 0xe98 <mouse_init.constprop.0+0x8c>
     e76:	1f 93       	push	r17
     e78:	0f 93       	push	r16
     e7a:	1f 92       	push	r1
     e7c:	83 e0       	ldi	r24, 0x03	; 3
     e7e:	8f 93       	push	r24
     e80:	84 e4       	ldi	r24, 0x44	; 68
     e82:	92 e0       	ldi	r25, 0x02	; 2
     e84:	9f 93       	push	r25
     e86:	8f 93       	push	r24
     e88:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__xprintf>
     e8c:	0f 90       	pop	r0
     e8e:	0f 90       	pop	r0
     e90:	0f 90       	pop	r0
     e92:	0f 90       	pop	r0
     e94:	0f 90       	pop	r0
     e96:	0f 90       	pop	r0
    adb_host_flush(orig_addr);
     e98:	83 e0       	ldi	r24, 0x03	; 3
     e9a:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <adb_host_flush>
    adb_host_listen(orig_addr, ADB_REG_3, ((reg3 >> 8) & 0xF0) | ADB_ADDR_TMP, 0xFE);
     e9e:	41 2f       	mov	r20, r17
     ea0:	4f 60       	ori	r20, 0x0F	; 15
     ea2:	2e ef       	ldi	r18, 0xFE	; 254
     ea4:	63 e0       	ldi	r22, 0x03	; 3
     ea6:	83 e0       	ldi	r24, 0x03	; 3
     ea8:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <adb_host_listen>
    adb_host_flush(ADB_ADDR_TMP);
     eac:	8f e0       	ldi	r24, 0x0F	; 15
     eae:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <adb_host_flush>
    mouse_handler = (reg3  = adb_host_talk(ADB_ADDR_TMP, ADB_REG_3)) & 0xFF;
     eb2:	63 e0       	ldi	r22, 0x03	; 3
     eb4:	8f e0       	ldi	r24, 0x0F	; 15
     eb6:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <adb_host_talk>
     eba:	8c 01       	movw	r16, r24
    if (!reg3) {
     ebc:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <debug_config>
     ec0:	01 15       	cp	r16, r1
     ec2:	11 05       	cpc	r17, r1
     ec4:	59 f4       	brne	.+22     	; 0xedc <mouse_init.constprop.0+0xd0>
        dmprintf("move fail\n");
     ec6:	83 ff       	sbrs	r24, 3
     ec8:	ca cf       	rjmp	.-108    	; 0xe5e <mouse_init.constprop.0+0x52>
     eca:	89 e3       	ldi	r24, 0x39	; 57
     ecc:	92 e0       	ldi	r25, 0x02	; 2
     ece:	9f 93       	push	r25
     ed0:	8f 93       	push	r24
     ed2:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__xprintf>
     ed6:	0f 90       	pop	r0
     ed8:	0f 90       	pop	r0
     eda:	c1 cf       	rjmp	.-126    	; 0xe5e <mouse_init.constprop.0+0x52>
    dmprintf("addr%d reg3: %02X\n", addr, reg3);
     edc:	83 ff       	sbrs	r24, 3
     ede:	11 c0       	rjmp	.+34     	; 0xf02 <mouse_init.constprop.0+0xf6>
     ee0:	1f 93       	push	r17
     ee2:	0f 93       	push	r16
     ee4:	1f 92       	push	r1
     ee6:	8f e0       	ldi	r24, 0x0F	; 15
     ee8:	8f 93       	push	r24
     eea:	86 e2       	ldi	r24, 0x26	; 38
     eec:	92 e0       	ldi	r25, 0x02	; 2
     eee:	9f 93       	push	r25
     ef0:	8f 93       	push	r24
     ef2:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__xprintf>
     ef6:	0f 90       	pop	r0
     ef8:	0f 90       	pop	r0
     efa:	0f 90       	pop	r0
     efc:	0f 90       	pop	r0
     efe:	0f 90       	pop	r0
     f00:	0f 90       	pop	r0
    mouse_handler = (reg3  = adb_host_talk(ADB_ADDR_TMP, ADB_REG_3)) & 0xFF;
     f02:	90 2e       	mov	r9, r16
            mouse_cpi = 100;
     f04:	84 e6       	ldi	r24, 0x64	; 100
     f06:	e8 2e       	mov	r14, r24
     f08:	f1 2c       	mov	r15, r1
    if (mouse_handler == ADB_HANDLER_CLASSIC1_MOUSE || mouse_handler == ADB_HANDLER_CLASSIC2_MOUSE) {
     f0a:	8f ef       	ldi	r24, 0xFF	; 255
     f0c:	89 0d       	add	r24, r9
     f0e:	82 30       	cpi	r24, 0x02	; 2
     f10:	08 f0       	brcs	.+2      	; 0xf14 <mouse_init.constprop.0+0x108>
     f12:	64 c0       	rjmp	.+200    	; 0xfdc <mouse_init.constprop.0+0x1d0>
        adb_host_flush(addr);
     f14:	8f e0       	ldi	r24, 0x0F	; 15
     f16:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <adb_host_flush>
        adb_host_listen(addr, ADB_REG_3, (reg3 >> 8), ADB_HANDLER_EXTENDED_MOUSE);
     f1a:	24 e0       	ldi	r18, 0x04	; 4
     f1c:	41 2f       	mov	r20, r17
     f1e:	63 e0       	ldi	r22, 0x03	; 3
     f20:	8f e0       	ldi	r24, 0x0F	; 15
     f22:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <adb_host_listen>
        mouse_handler = (reg3  = adb_host_talk(addr, ADB_REG_3)) & 0xFF;
     f26:	63 e0       	ldi	r22, 0x03	; 3
     f28:	8f e0       	ldi	r24, 0x0F	; 15
     f2a:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <adb_host_talk>
     f2e:	8c 01       	movw	r16, r24
     f30:	98 2e       	mov	r9, r24
        if (mouse_handler == ADB_HANDLER_CLASSIC1_MOUSE) {
     f32:	21 e0       	ldi	r18, 0x01	; 1
     f34:	82 13       	cpse	r24, r18
     f36:	12 c0       	rjmp	.+36     	; 0xf5c <mouse_init.constprop.0+0x150>
            adb_host_flush(addr);
     f38:	8f e0       	ldi	r24, 0x0F	; 15
     f3a:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <adb_host_flush>
            adb_host_listen(addr, ADB_REG_3, (reg3 >> 8), ADB_HANDLER_CLASSIC2_MOUSE);
     f3e:	22 e0       	ldi	r18, 0x02	; 2
     f40:	41 2f       	mov	r20, r17
     f42:	63 e0       	ldi	r22, 0x03	; 3
     f44:	8f e0       	ldi	r24, 0x0F	; 15
     f46:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <adb_host_listen>
            mouse_handler = (reg3  = adb_host_talk(addr, ADB_REG_3)) & 0xFF;
     f4a:	63 e0       	ldi	r22, 0x03	; 3
     f4c:	8f e0       	ldi	r24, 0x0F	; 15
     f4e:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <adb_host_talk>
     f52:	8c 01       	movw	r16, r24
     f54:	98 2e       	mov	r9, r24
        if (mouse_handler == ADB_HANDLER_CLASSIC1_MOUSE) {
     f56:	31 e0       	ldi	r19, 0x01	; 1
     f58:	83 17       	cp	r24, r19
     f5a:	81 f0       	breq	.+32     	; 0xf7c <mouse_init.constprop.0+0x170>
        if (mouse_handler == ADB_HANDLER_CLASSIC2_MOUSE) {
     f5c:	82 e0       	ldi	r24, 0x02	; 2
     f5e:	98 12       	cpse	r9, r24
     f60:	3d c0       	rjmp	.+122    	; 0xfdc <mouse_init.constprop.0+0x1d0>
            xprintf("Classic 200cpi\n");
     f62:	86 e0       	ldi	r24, 0x06	; 6
     f64:	92 e0       	ldi	r25, 0x02	; 2
     f66:	9f 93       	push	r25
     f68:	8f 93       	push	r24
     f6a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__xprintf>
            mouse_cpi = 200;
     f6e:	28 ec       	ldi	r18, 0xC8	; 200
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	30 93 13 01 	sts	0x0113, r19	; 0x800113 <mouse_cpi+0x1>
     f76:	20 93 12 01 	sts	0x0112, r18	; 0x800112 <mouse_cpi>
    if (mouse_handler == ADB_HANDLER_EXTENDED_MOUSE) {
     f7a:	0a c0       	rjmp	.+20     	; 0xf90 <mouse_init.constprop.0+0x184>
            xprintf("Classic 100cpi\n");
     f7c:	e6 e1       	ldi	r30, 0x16	; 22
     f7e:	f2 e0       	ldi	r31, 0x02	; 2
     f80:	ff 93       	push	r31
     f82:	ef 93       	push	r30
     f84:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__xprintf>
            mouse_cpi = 100;
     f88:	f0 92 13 01 	sts	0x0113, r15	; 0x800113 <mouse_cpi+0x1>
     f8c:	e0 92 12 01 	sts	0x0112, r14	; 0x800112 <mouse_cpi>
        adb_host_listen_buf(addr, ADB_REG_2, cmd2, sizeof(cmd2));
     f90:	0f 90       	pop	r0
     f92:	0f 90       	pop	r0
    adb_host_flush(addr);
     f94:	8f e0       	ldi	r24, 0x0F	; 15
     f96:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <adb_host_flush>
    adb_host_listen(addr, ADB_REG_3, ((reg3 >> 8) & 0xF0) | ADB_ADDR_MOUSE_POLL, 0xFE);
     f9a:	41 2f       	mov	r20, r17
     f9c:	40 7f       	andi	r20, 0xF0	; 240
     f9e:	4a 60       	ori	r20, 0x0A	; 10
     fa0:	2e ef       	ldi	r18, 0xFE	; 254
     fa2:	63 e0       	ldi	r22, 0x03	; 3
     fa4:	8f e0       	ldi	r24, 0x0F	; 15
     fa6:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <adb_host_listen>
    adb_host_flush(ADB_ADDR_MOUSE_POLL);
     faa:	8a e0       	ldi	r24, 0x0A	; 10
     fac:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <adb_host_flush>
    mouse_handler = (reg3  = adb_host_talk(addr, ADB_REG_3)) & 0xFF;
     fb0:	63 e0       	ldi	r22, 0x03	; 3
     fb2:	8f e0       	ldi	r24, 0x0F	; 15
     fb4:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <adb_host_talk>
     fb8:	8c 01       	movw	r16, r24
     fba:	98 2e       	mov	r9, r24
    if (reg3) {
     fbc:	89 2b       	or	r24, r25
     fbe:	09 f4       	brne	.+2      	; 0xfc2 <mouse_init.constprop.0+0x1b6>
     fc0:	4e cf       	rjmp	.-356    	; 0xe5e <mouse_init.constprop.0+0x52>
        dmprintf("detect again\n");
     fc2:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <debug_config>
     fc6:	83 ff       	sbrs	r24, 3
     fc8:	a0 cf       	rjmp	.-192    	; 0xf0a <mouse_init.constprop.0+0xfe>
     fca:	e0 ec       	ldi	r30, 0xC0	; 192
     fcc:	f1 e0       	ldi	r31, 0x01	; 1
     fce:	ff 93       	push	r31
     fd0:	ef 93       	push	r30
     fd2:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__xprintf>
     fd6:	0f 90       	pop	r0
     fd8:	0f 90       	pop	r0
     fda:	97 cf       	rjmp	.-210    	; 0xf0a <mouse_init.constprop.0+0xfe>
    if (mouse_handler == ADB_HANDLER_EXTENDED_MOUSE) {
     fdc:	34 e0       	ldi	r19, 0x04	; 4
     fde:	93 12       	cpse	r9, r19
     fe0:	74 c0       	rjmp	.+232    	; 0x10ca <mouse_init.constprop.0+0x2be>
        len = adb_host_talk_buf(addr, ADB_REG_1, buf, sizeof(buf));
     fe2:	28 e0       	ldi	r18, 0x08	; 8
     fe4:	ae 01       	movw	r20, r28
     fe6:	4f 5f       	subi	r20, 0xFF	; 255
     fe8:	5f 4f       	sbci	r21, 0xFF	; 255
     fea:	61 e0       	ldi	r22, 0x01	; 1
     fec:	8f e0       	ldi	r24, 0x0F	; 15
     fee:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <adb_host_talk_buf>
        if (len > 5) {
     ff2:	86 30       	cpi	r24, 0x06	; 6
     ff4:	80 f1       	brcs	.+96     	; 0x1056 <mouse_init.constprop.0+0x24a>
            mouse_cpi = (buf[4]<<8) | buf[5];
     ff6:	2d 81       	ldd	r18, Y+5	; 0x05
     ff8:	3e 81       	ldd	r19, Y+6	; 0x06
     ffa:	32 27       	eor	r19, r18
     ffc:	23 27       	eor	r18, r19
     ffe:	32 27       	eor	r19, r18
    1000:	30 93 13 01 	sts	0x0113, r19	; 0x800113 <mouse_cpi+0x1>
    1004:	20 93 12 01 	sts	0x0112, r18	; 0x800112 <mouse_cpi>
            xprintf("Ext: [", len);
    1008:	88 2e       	mov	r8, r24
    100a:	91 2c       	mov	r9, r1
    100c:	1f 92       	push	r1
    100e:	8f 93       	push	r24
    1010:	8f ef       	ldi	r24, 0xFF	; 255
    1012:	91 e0       	ldi	r25, 0x01	; 1
    1014:	9f 93       	push	r25
    1016:	8f 93       	push	r24
    1018:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__xprintf>
            for (int8_t i = 0; i < len; i++) xprintf("%02X ", buf[i]);
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	0f 90       	pop	r0
    1024:	31 2c       	mov	r3, r1
    1026:	83 2d       	mov	r24, r3
    1028:	03 2c       	mov	r0, r3
    102a:	00 0c       	add	r0, r0
    102c:	99 0b       	sbc	r25, r25
    102e:	88 15       	cp	r24, r8
    1030:	99 05       	cpc	r25, r9
    1032:	94 f1       	brlt	.+100    	; 0x1098 <mouse_init.constprop.0+0x28c>
            xprintf("] cpi=%d\n", mouse_cpi);
    1034:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <mouse_cpi+0x1>
    1038:	8f 93       	push	r24
    103a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <mouse_cpi>
    103e:	8f 93       	push	r24
    1040:	2f ee       	ldi	r18, 0xEF	; 239
    1042:	31 e0       	ldi	r19, 0x01	; 1
    1044:	3f 93       	push	r19
    1046:	2f 93       	push	r18
    1048:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__xprintf>
    104c:	0f 90       	pop	r0
    104e:	0f 90       	pop	r0
    1050:	0f 90       	pop	r0
    1052:	0f 90       	pop	r0
    1054:	06 c0       	rjmp	.+12     	; 0x1062 <mouse_init.constprop.0+0x256>
            mouse_cpi = 100;
    1056:	f0 92 13 01 	sts	0x0113, r15	; 0x800113 <mouse_cpi+0x1>
    105a:	e0 92 12 01 	sts	0x0112, r14	; 0x800112 <mouse_cpi>
        if (len) {
    105e:	81 11       	cpse	r24, r1
    1060:	d3 cf       	rjmp	.-90     	; 0x1008 <mouse_init.constprop.0+0x1fc>
        if (buf[0] == 0x4B && buf[1] == 0x4D && buf[2] == 0x4C && buf[3] == 0x31) {
    1062:	89 81       	ldd	r24, Y+1	; 0x01
    1064:	8b 34       	cpi	r24, 0x4B	; 75
    1066:	61 f5       	brne	.+88     	; 0x10c0 <mouse_init.constprop.0+0x2b4>
    1068:	8a 81       	ldd	r24, Y+2	; 0x02
    106a:	8d 34       	cpi	r24, 0x4D	; 77
    106c:	49 f5       	brne	.+82     	; 0x10c0 <mouse_init.constprop.0+0x2b4>
    106e:	8b 81       	ldd	r24, Y+3	; 0x03
    1070:	8c 34       	cpi	r24, 0x4C	; 76
    1072:	31 f5       	brne	.+76     	; 0x10c0 <mouse_init.constprop.0+0x2b4>
    1074:	8c 81       	ldd	r24, Y+4	; 0x04
    1076:	81 33       	cpi	r24, 0x31	; 49
    1078:	19 f5       	brne	.+70     	; 0x10c0 <mouse_init.constprop.0+0x2b4>
            xprintf("TM5: default\n");
    107a:	df 92       	push	r13
    107c:	cf 92       	push	r12
    107e:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__xprintf>
            adb_host_flush(addr);
    1082:	8f e0       	ldi	r24, 0x0F	; 15
    1084:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <adb_host_flush>
            adb_host_listen(addr, ADB_REG_3, ((reg3 >> 8) & 0xF0) | ADB_ADDR_0, 0xFE);
    1088:	2e ef       	ldi	r18, 0xFE	; 254
    108a:	41 2f       	mov	r20, r17
    108c:	40 7f       	andi	r20, 0xF0	; 240
    108e:	63 e0       	ldi	r22, 0x03	; 3
    1090:	8f e0       	ldi	r24, 0x0F	; 15
    1092:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <adb_host_listen>
    1096:	7c cf       	rjmp	.-264    	; 0xf90 <mouse_init.constprop.0+0x184>
            for (int8_t i = 0; i < len; i++) xprintf("%02X ", buf[i]);
    1098:	21 e0       	ldi	r18, 0x01	; 1
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	2c 0f       	add	r18, r28
    109e:	3d 1f       	adc	r19, r29
    10a0:	82 0f       	add	r24, r18
    10a2:	93 1f       	adc	r25, r19
    10a4:	fc 01       	movw	r30, r24
    10a6:	80 81       	ld	r24, Z
    10a8:	1f 92       	push	r1
    10aa:	8f 93       	push	r24
    10ac:	bf 92       	push	r11
    10ae:	af 92       	push	r10
    10b0:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__xprintf>
    10b4:	33 94       	inc	r3
    10b6:	0f 90       	pop	r0
    10b8:	0f 90       	pop	r0
    10ba:	0f 90       	pop	r0
    10bc:	0f 90       	pop	r0
    10be:	b3 cf       	rjmp	.-154    	; 0x1026 <mouse_init.constprop.0+0x21a>
            xprintf("Unknown\n");
    10c0:	7f 92       	push	r7
    10c2:	6f 92       	push	r6
    10c4:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__xprintf>
    10c8:	63 cf       	rjmp	.-314    	; 0xf90 <mouse_init.constprop.0+0x184>
    if (mouse_handler == ADB_HANDLER_TURBO_MOUSE) {
    10ca:	92 e3       	ldi	r25, 0x32	; 50
    10cc:	99 12       	cpse	r9, r25
    10ce:	62 cf       	rjmp	.-316    	; 0xf94 <mouse_init.constprop.0+0x188>
        xprintf("TM5: ext\n");
    10d0:	5f 92       	push	r5
    10d2:	4f 92       	push	r4
    10d4:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__xprintf>
        adb_host_flush(addr);
    10d8:	8f e0       	ldi	r24, 0x0F	; 15
    10da:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <adb_host_flush>
        adb_host_listen_buf(addr, ADB_REG_2, cmd1, sizeof(cmd1));
    10de:	28 e0       	ldi	r18, 0x08	; 8
    10e0:	4a e0       	ldi	r20, 0x0A	; 10
    10e2:	51 e0       	ldi	r21, 0x01	; 1
    10e4:	62 e0       	ldi	r22, 0x02	; 2
    10e6:	8f e0       	ldi	r24, 0x0F	; 15
    10e8:	0e 94 9f 0c 	call	0x193e	; 0x193e <adb_host_listen_buf>
        adb_host_flush(addr);
    10ec:	8f e0       	ldi	r24, 0x0F	; 15
    10ee:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <adb_host_flush>
        adb_host_listen_buf(addr, ADB_REG_2, cmd2, sizeof(cmd2));
    10f2:	28 e0       	ldi	r18, 0x08	; 8
    10f4:	42 e0       	ldi	r20, 0x02	; 2
    10f6:	51 e0       	ldi	r21, 0x01	; 1
    10f8:	62 e0       	ldi	r22, 0x02	; 2
    10fa:	8f e0       	ldi	r24, 0x0F	; 15
    10fc:	0e 94 9f 0c 	call	0x193e	; 0x193e <adb_host_listen_buf>
    1100:	47 cf       	rjmp	.-370    	; 0xf90 <mouse_init.constprop.0+0x184>
}
    1102:	28 96       	adiw	r28, 0x08	; 8
    1104:	0f b6       	in	r0, 0x3f	; 63
    1106:	f8 94       	cli
    1108:	de bf       	out	0x3e, r29	; 62
    110a:	0f be       	out	0x3f, r0	; 63
    110c:	cd bf       	out	0x3d, r28	; 61
    110e:	df 91       	pop	r29
    1110:	cf 91       	pop	r28
    1112:	1f 91       	pop	r17
    1114:	0f 91       	pop	r16
    1116:	ff 90       	pop	r15
    1118:	ef 90       	pop	r14
    111a:	df 90       	pop	r13
    111c:	cf 90       	pop	r12
    111e:	bf 90       	pop	r11
    1120:	af 90       	pop	r10
    1122:	9f 90       	pop	r9
    1124:	8f 90       	pop	r8
    1126:	7f 90       	pop	r7
    1128:	6f 90       	pop	r6
    112a:	5f 90       	pop	r5
    112c:	4f 90       	pop	r4
    112e:	3f 90       	pop	r3
    1130:	08 95       	ret

00001132 <adb_mouse_task>:
{
    1132:	9f 92       	push	r9
    1134:	af 92       	push	r10
    1136:	bf 92       	push	r11
    1138:	cf 92       	push	r12
    113a:	df 92       	push	r13
    113c:	ef 92       	push	r14
    113e:	ff 92       	push	r15
    1140:	0f 93       	push	r16
    1142:	1f 93       	push	r17
    1144:	cf 93       	push	r28
    1146:	df 93       	push	r29
    1148:	00 d0       	rcall	.+0      	; 0x114a <adb_mouse_task+0x18>
    114a:	00 d0       	rcall	.+0      	; 0x114c <adb_mouse_task+0x1a>
    114c:	0f 92       	push	r0
    114e:	cd b7       	in	r28, 0x3d	; 61
    1150:	de b7       	in	r29, 0x3e	; 62
    if (timer_elapsed(tick_ms) < 12) return;
    1152:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <tick_ms.2348>
    1156:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <tick_ms.2348+0x1>
    115a:	0e 94 59 23 	call	0x46b2	; 0x46b2 <timer_elapsed>
    115e:	0c 97       	sbiw	r24, 0x0c	; 12
    1160:	08 f4       	brcc	.+2      	; 0x1164 <adb_mouse_task+0x32>
    1162:	14 c1       	rjmp	.+552    	; 0x138c <adb_mouse_task+0x25a>
    tick_ms = timer_read();
    1164:	0e 94 2d 23 	call	0x465a	; 0x465a <timer_read>
    1168:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <tick_ms.2348+0x1>
    116c:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <tick_ms.2348>
    if (timer_elapsed(detect_ms) > 1000) {
    1170:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <detect_ms.2349>
    1174:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <detect_ms.2349+0x1>
    1178:	0e 94 59 23 	call	0x46b2	; 0x46b2 <timer_elapsed>
    117c:	89 3e       	cpi	r24, 0xE9	; 233
    117e:	93 40       	sbci	r25, 0x03	; 3
    1180:	40 f0       	brcs	.+16     	; 0x1192 <adb_mouse_task+0x60>
        detect_ms = timer_read();
    1182:	0e 94 2d 23 	call	0x465a	; 0x465a <timer_read>
    1186:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <detect_ms.2349+0x1>
    118a:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <detect_ms.2349>
        mouse_init(ADB_ADDR_MOUSE);
    118e:	0e 94 06 07 	call	0xe0c	; 0xe0c <mouse_init.constprop.0>
    len = adb_host_talk_buf(ADB_ADDR_MOUSE_POLL, ADB_REG_0, buf, sizeof(buf));
    1192:	25 e0       	ldi	r18, 0x05	; 5
    1194:	ae 01       	movw	r20, r28
    1196:	4f 5f       	subi	r20, 0xFF	; 255
    1198:	5f 4f       	sbci	r21, 0xFF	; 255
    119a:	60 e0       	ldi	r22, 0x00	; 0
    119c:	8a e0       	ldi	r24, 0x0A	; 10
    119e:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <adb_host_talk_buf>
    11a2:	a8 2e       	mov	r10, r24
    if (len < 2) {
    11a4:	31 e0       	ldi	r19, 0x01	; 1
        mouseacc = 1;
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    if (len < 2) {
    11a8:	3a 15       	cp	r19, r10
    11aa:	08 f0       	brcs	.+2      	; 0x11ae <adb_mouse_task+0x7c>
    11ac:	ed c0       	rjmp	.+474    	; 0x1388 <adb_mouse_task+0x256>
    if (len == 2) {
    11ae:	b9 81       	ldd	r27, Y+1	; 0x01
    11b0:	aa 81       	ldd	r26, Y+2	; 0x02
    11b2:	42 e0       	ldi	r20, 0x02	; 2
    11b4:	a4 12       	cpse	r10, r20
    11b6:	fb c0       	rjmp	.+502    	; 0x13ae <adb_mouse_task+0x27c>
        if (buf[0] & 0x40) yneg = true;
    11b8:	b6 fb       	bst	r27, 6
    11ba:	44 27       	eor	r20, r20
    11bc:	40 f9       	bld	r20, 0
        if (buf[1] & 0x40) xneg = true;
    11be:	a6 fb       	bst	r26, 6
    11c0:	22 27       	eor	r18, r18
    11c2:	20 f9       	bld	r18, 0
    for (int8_t i = len; i < sizeof(buf); i++) {
    11c4:	3a 2d       	mov	r19, r10
        if (yneg) buf[i] |= 0x70;
    11c6:	58 ef       	ldi	r21, 0xF8	; 248
        buf[i] = 0x88;
    11c8:	68 e8       	ldi	r22, 0x88	; 136
    for (int8_t i = len; i < sizeof(buf); i++) {
    11ca:	35 30       	cpi	r19, 0x05	; 5
    11cc:	08 f4       	brcc	.+2      	; 0x11d0 <adb_mouse_task+0x9e>
    11ce:	fa c0       	rjmp	.+500    	; 0x13c4 <adb_mouse_task+0x292>
    if (!(buf[4] & 0x08)) buttons |= MOUSE_BTN8;
    11d0:	8d 81       	ldd	r24, Y+5	; 0x05
    11d2:	08 2f       	mov	r16, r24
    11d4:	10 e0       	ldi	r17, 0x00	; 0
    11d6:	90 e8       	ldi	r25, 0x80	; 128
    11d8:	83 fd       	sbrc	r24, 3
    uint8_t buttons = 0;
    11da:	90 e0       	ldi	r25, 0x00	; 0
    if (!(buf[4] & 0x80)) buttons |= MOUSE_BTN7;
    11dc:	87 ff       	sbrs	r24, 7
    11de:	90 64       	ori	r25, 0x40	; 64
    if (!(buf[3] & 0x08)) buttons |= MOUSE_BTN6;
    11e0:	8c 81       	ldd	r24, Y+4	; 0x04
    11e2:	48 2f       	mov	r20, r24
    11e4:	50 e0       	ldi	r21, 0x00	; 0
    11e6:	83 ff       	sbrs	r24, 3
    11e8:	90 62       	ori	r25, 0x20	; 32
    if (!(buf[3] & 0x80)) buttons |= MOUSE_BTN5;
    11ea:	87 ff       	sbrs	r24, 7
    11ec:	90 61       	ori	r25, 0x10	; 16
    if (!(buf[2] & 0x08)) buttons |= MOUSE_BTN4;
    11ee:	8b 81       	ldd	r24, Y+3	; 0x03
    11f0:	68 2f       	mov	r22, r24
    11f2:	70 e0       	ldi	r23, 0x00	; 0
    11f4:	83 ff       	sbrs	r24, 3
    11f6:	98 60       	ori	r25, 0x08	; 8
    if (!(buf[2] & 0x80)) buttons |= MOUSE_BTN3;
    11f8:	87 ff       	sbrs	r24, 7
    11fa:	94 60       	ori	r25, 0x04	; 4
    if (!(buf[1] & 0x80)) buttons |= MOUSE_BTN2;
    11fc:	a7 ff       	sbrs	r26, 7
    11fe:	92 60       	ori	r25, 0x02	; 2
    if (!(buf[0] & 0x80)) buttons |= MOUSE_BTN1;
    1200:	b7 ff       	sbrs	r27, 7
    1202:	91 60       	ori	r25, 0x01	; 1
    mouse_report.buttons = buttons;
    1204:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <mouse_report>
    yy = (buf[0] & 0x7F) | (buf[2] & 0x70) << 3 | (buf[3] & 0x70) << 6 | (buf[4] & 0x70) << 9;
    1208:	7b 01       	movw	r14, r22
    120a:	93 e0       	ldi	r25, 0x03	; 3
    120c:	ee 0c       	add	r14, r14
    120e:	ff 1c       	adc	r15, r15
    1210:	9a 95       	dec	r25
    1212:	e1 f7       	brne	.-8      	; 0x120c <adb_mouse_task+0xda>
    1214:	80 e8       	ldi	r24, 0x80	; 128
    1216:	e8 22       	and	r14, r24
    1218:	83 e0       	ldi	r24, 0x03	; 3
    121a:	f8 22       	and	r15, r24
    121c:	ca 01       	movw	r24, r20
    121e:	26 e0       	ldi	r18, 0x06	; 6
    1220:	88 0f       	add	r24, r24
    1222:	99 1f       	adc	r25, r25
    1224:	2a 95       	dec	r18
    1226:	e1 f7       	brne	.-8      	; 0x1220 <adb_mouse_task+0xee>
    1228:	88 27       	eor	r24, r24
    122a:	9c 71       	andi	r25, 0x1C	; 28
    122c:	e8 2a       	or	r14, r24
    122e:	f9 2a       	or	r15, r25
    1230:	bf 77       	andi	r27, 0x7F	; 127
    1232:	eb 2a       	or	r14, r27
    1234:	c8 01       	movw	r24, r16
    1236:	98 2f       	mov	r25, r24
    1238:	88 27       	eor	r24, r24
    123a:	99 0f       	add	r25, r25
    123c:	88 27       	eor	r24, r24
    123e:	90 7e       	andi	r25, 0xE0	; 224
    1240:	e8 2a       	or	r14, r24
    1242:	f9 2a       	or	r15, r25
    xx = (buf[1] & 0x7F) | (buf[2] & 0x07) << 7 | (buf[3] & 0x07) << 10 | (buf[4] & 0x07) << 13;
    1244:	af 77       	andi	r26, 0x7F	; 127
    1246:	10 2f       	mov	r17, r16
    1248:	00 27       	eor	r16, r16
    124a:	12 95       	swap	r17
    124c:	11 0f       	add	r17, r17
    124e:	10 7e       	andi	r17, 0xE0	; 224
    1250:	0a 2b       	or	r16, r26
    1252:	76 95       	lsr	r23
    1254:	76 2f       	mov	r23, r22
    1256:	66 27       	eor	r22, r22
    1258:	77 95       	ror	r23
    125a:	67 95       	ror	r22
    125c:	60 78       	andi	r22, 0x80	; 128
    125e:	73 70       	andi	r23, 0x03	; 3
    1260:	06 2b       	or	r16, r22
    1262:	17 2b       	or	r17, r23
    1264:	54 2f       	mov	r21, r20
    1266:	44 27       	eor	r20, r20
    1268:	55 0f       	add	r21, r21
    126a:	55 0f       	add	r21, r21
    126c:	44 27       	eor	r20, r20
    126e:	5c 71       	andi	r21, 0x1C	; 28
    1270:	04 2b       	or	r16, r20
    1272:	15 2b       	or	r17, r21
    x = xx * mouseacc;
    1274:	40 91 56 01 	lds	r20, 0x0156	; 0x800156 <mouseacc.2347>
    1278:	40 03       	mulsu	r20, r16
    127a:	90 01       	movw	r18, r0
    127c:	41 9f       	mul	r20, r17
    127e:	30 0d       	add	r19, r0
    1280:	11 24       	eor	r1, r1
    y = yy * mouseacc;
    1282:	b7 01       	movw	r22, r14
    1284:	46 03       	mulsu	r20, r22
    1286:	c0 01       	movw	r24, r0
    1288:	47 9f       	mul	r20, r23
    128a:	90 0d       	add	r25, r0
    128c:	11 24       	eor	r1, r1
    mouse_report.x = -MAX(-MAX(x, -127), -127);
    128e:	2f 37       	cpi	r18, 0x7F	; 127
    1290:	31 05       	cpc	r19, r1
    1292:	0c f0       	brlt	.+2      	; 0x1296 <adb_mouse_task+0x164>
    1294:	b3 c0       	rjmp	.+358    	; 0x13fc <adb_mouse_task+0x2ca>
    1296:	21 38       	cpi	r18, 0x81	; 129
    1298:	7f ef       	ldi	r23, 0xFF	; 255
    129a:	37 07       	cpc	r19, r23
    129c:	14 f4       	brge	.+4      	; 0x12a2 <adb_mouse_task+0x170>
    129e:	21 e8       	ldi	r18, 0x81	; 129
    12a0:	3f ef       	ldi	r19, 0xFF	; 255
    12a2:	20 93 5c 01 	sts	0x015C, r18	; 0x80015c <mouse_report+0x1>
    mouse_report.y = -MAX(-MAX(y, -127), -127);
    12a6:	8f 37       	cpi	r24, 0x7F	; 127
    12a8:	91 05       	cpc	r25, r1
    12aa:	0c f0       	brlt	.+2      	; 0x12ae <adb_mouse_task+0x17c>
    12ac:	a9 c0       	rjmp	.+338    	; 0x1400 <adb_mouse_task+0x2ce>
    12ae:	81 38       	cpi	r24, 0x81	; 129
    12b0:	ef ef       	ldi	r30, 0xFF	; 255
    12b2:	9e 07       	cpc	r25, r30
    12b4:	14 f4       	brge	.+4      	; 0x12ba <adb_mouse_task+0x188>
    12b6:	81 e8       	ldi	r24, 0x81	; 129
    12b8:	9f ef       	ldi	r25, 0xFF	; 255
    12ba:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <mouse_report+0x2>
    if (debug_mouse) {
    12be:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <debug_config>
    12c2:	83 ff       	sbrs	r24, 3
    12c4:	47 c0       	rjmp	.+142    	; 0x1354 <adb_mouse_task+0x222>
        xprintf("Mouse: [");
    12c6:	8a e9       	ldi	r24, 0x9A	; 154
    12c8:	91 e0       	ldi	r25, 0x01	; 1
    12ca:	9f 93       	push	r25
    12cc:	8f 93       	push	r24
    12ce:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__xprintf>
        for (int8_t i = 0; i < len; i++) xprintf("%02X ", buf[i]);
    12d2:	0f 90       	pop	r0
    12d4:	0f 90       	pop	r0
    12d6:	91 2c       	mov	r9, r1
    12d8:	b1 2c       	mov	r11, r1
    12da:	84 e9       	ldi	r24, 0x94	; 148
    12dc:	c8 2e       	mov	r12, r24
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	d8 2e       	mov	r13, r24
    12e2:	89 2d       	mov	r24, r9
    12e4:	09 2c       	mov	r0, r9
    12e6:	00 0c       	add	r0, r0
    12e8:	99 0b       	sbc	r25, r25
    12ea:	8a 15       	cp	r24, r10
    12ec:	9b 05       	cpc	r25, r11
    12ee:	0c f4       	brge	.+2      	; 0x12f2 <adb_mouse_task+0x1c0>
    12f0:	89 c0       	rjmp	.+274    	; 0x1404 <adb_mouse_task+0x2d2>
        xprintf("] ");
    12f2:	81 e9       	ldi	r24, 0x91	; 145
    12f4:	91 e0       	ldi	r25, 0x01	; 1
    12f6:	9f 93       	push	r25
    12f8:	8f 93       	push	r24
    12fa:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__xprintf>
        xprintf("[B:%02X, X:%d(%d), Y:%d(%d), A:%d]\n", mouse_report.buttons, mouse_report.x, xx, mouse_report.y, yy, mouseacc);
    12fe:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <mouseacc.2347>
    1302:	28 2f       	mov	r18, r24
    1304:	08 2e       	mov	r0, r24
    1306:	00 0c       	add	r0, r0
    1308:	33 0b       	sbc	r19, r19
    130a:	3f 93       	push	r19
    130c:	8f 93       	push	r24
    130e:	ff 92       	push	r15
    1310:	ef 92       	push	r14
    1312:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <mouse_report+0x2>
    1316:	28 2f       	mov	r18, r24
    1318:	08 2e       	mov	r0, r24
    131a:	00 0c       	add	r0, r0
    131c:	33 0b       	sbc	r19, r19
    131e:	3f 93       	push	r19
    1320:	8f 93       	push	r24
    1322:	1f 93       	push	r17
    1324:	0f 93       	push	r16
    1326:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <mouse_report+0x1>
    132a:	28 2f       	mov	r18, r24
    132c:	08 2e       	mov	r0, r24
    132e:	00 0c       	add	r0, r0
    1330:	33 0b       	sbc	r19, r19
    1332:	3f 93       	push	r19
    1334:	8f 93       	push	r24
    1336:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <mouse_report>
    133a:	1f 92       	push	r1
    133c:	8f 93       	push	r24
    133e:	8d e6       	ldi	r24, 0x6D	; 109
    1340:	91 e0       	ldi	r25, 0x01	; 1
    1342:	9f 93       	push	r25
    1344:	8f 93       	push	r24
    1346:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__xprintf>
    134a:	0f b6       	in	r0, 0x3f	; 63
    134c:	f8 94       	cli
    134e:	de bf       	out	0x3e, r29	; 62
    1350:	0f be       	out	0x3f, r0	; 63
    1352:	cd bf       	out	0x3d, r28	; 61
    host_mouse_send(&mouse_report);
    1354:	8b e5       	ldi	r24, 0x5B	; 91
    1356:	91 e0       	ldi	r25, 0x01	; 1
    1358:	0e 94 44 15 	call	0x2a88	; 0x2a88 <host_mouse_send>
    mouseacc += ( mouseacc < (mouse_cpi < 200 ? ADB_MOUSE_MAXACC : ADB_MOUSE_MAXACC/2) ? 1 : 0 );
    135c:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <mouseacc.2347>
    1360:	49 2f       	mov	r20, r25
    1362:	09 2e       	mov	r0, r25
    1364:	00 0c       	add	r0, r0
    1366:	55 0b       	sbc	r21, r21
    1368:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <mouse_cpi>
    136c:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <mouse_cpi+0x1>
    1370:	28 3c       	cpi	r18, 0xC8	; 200
    1372:	31 05       	cpc	r19, r1
    1374:	08 f4       	brcc	.+2      	; 0x1378 <adb_mouse_task+0x246>
    1376:	5a c0       	rjmp	.+180    	; 0x142c <adb_mouse_task+0x2fa>
    1378:	24 e0       	ldi	r18, 0x04	; 4
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	42 17       	cp	r20, r18
    1380:	53 07       	cpc	r21, r19
    1382:	0c f0       	brlt	.+2      	; 0x1386 <adb_mouse_task+0x254>
    1384:	80 e0       	ldi	r24, 0x00	; 0
    1386:	89 0f       	add	r24, r25
    1388:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <mouseacc.2347>
}
    138c:	0f 90       	pop	r0
    138e:	0f 90       	pop	r0
    1390:	0f 90       	pop	r0
    1392:	0f 90       	pop	r0
    1394:	0f 90       	pop	r0
    1396:	df 91       	pop	r29
    1398:	cf 91       	pop	r28
    139a:	1f 91       	pop	r17
    139c:	0f 91       	pop	r16
    139e:	ff 90       	pop	r15
    13a0:	ef 90       	pop	r14
    13a2:	df 90       	pop	r13
    13a4:	cf 90       	pop	r12
    13a6:	bf 90       	pop	r11
    13a8:	af 90       	pop	r10
    13aa:	9f 90       	pop	r9
    13ac:	08 95       	ret
        if (buf[len - 1] & 0x40) yneg = true;
    13ae:	fe 01       	movw	r30, r28
    13b0:	ea 0d       	add	r30, r10
    13b2:	f1 1d       	adc	r31, r1
    13b4:	20 81       	ld	r18, Z
    13b6:	26 fb       	bst	r18, 6
    13b8:	44 27       	eor	r20, r20
    13ba:	40 f9       	bld	r20, 0
        if (buf[len - 1] & 0x04) xneg = true;
    13bc:	22 fb       	bst	r18, 2
    13be:	22 27       	eor	r18, r18
    13c0:	20 f9       	bld	r18, 0
    13c2:	00 cf       	rjmp	.-512    	; 0x11c4 <adb_mouse_task+0x92>
        buf[i] = 0x88;
    13c4:	83 2f       	mov	r24, r19
    13c6:	03 2e       	mov	r0, r19
    13c8:	00 0c       	add	r0, r0
    13ca:	99 0b       	sbc	r25, r25
        if (yneg) buf[i] |= 0x70;
    13cc:	e1 e0       	ldi	r30, 0x01	; 1
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	ec 0f       	add	r30, r28
    13d2:	fd 1f       	adc	r31, r29
    13d4:	e8 0f       	add	r30, r24
    13d6:	f9 1f       	adc	r31, r25
    13d8:	41 11       	cpse	r20, r1
    13da:	0e c0       	rjmp	.+28     	; 0x13f8 <adb_mouse_task+0x2c6>
        buf[i] = 0x88;
    13dc:	60 83       	st	Z, r22
        if (xneg) buf[i] |= 0x07;
    13de:	22 23       	and	r18, r18
    13e0:	49 f0       	breq	.+18     	; 0x13f4 <adb_mouse_task+0x2c2>
    13e2:	e1 e0       	ldi	r30, 0x01	; 1
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	ec 0f       	add	r30, r28
    13e8:	fd 1f       	adc	r31, r29
    13ea:	e8 0f       	add	r30, r24
    13ec:	f9 1f       	adc	r31, r25
    13ee:	80 81       	ld	r24, Z
    13f0:	87 60       	ori	r24, 0x07	; 7
    13f2:	80 83       	st	Z, r24
    13f4:	3f 5f       	subi	r19, 0xFF	; 255
    13f6:	e9 ce       	rjmp	.-558    	; 0x11ca <adb_mouse_task+0x98>
        if (yneg) buf[i] |= 0x70;
    13f8:	50 83       	st	Z, r21
    13fa:	f1 cf       	rjmp	.-30     	; 0x13de <adb_mouse_task+0x2ac>
    mouse_report.x = -MAX(-MAX(x, -127), -127);
    13fc:	2f e7       	ldi	r18, 0x7F	; 127
    13fe:	51 cf       	rjmp	.-350    	; 0x12a2 <adb_mouse_task+0x170>
    mouse_report.y = -MAX(-MAX(y, -127), -127);
    1400:	8f e7       	ldi	r24, 0x7F	; 127
    1402:	5b cf       	rjmp	.-330    	; 0x12ba <adb_mouse_task+0x188>
        for (int8_t i = 0; i < len; i++) xprintf("%02X ", buf[i]);
    1404:	21 e0       	ldi	r18, 0x01	; 1
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	2c 0f       	add	r18, r28
    140a:	3d 1f       	adc	r19, r29
    140c:	82 0f       	add	r24, r18
    140e:	93 1f       	adc	r25, r19
    1410:	fc 01       	movw	r30, r24
    1412:	80 81       	ld	r24, Z
    1414:	1f 92       	push	r1
    1416:	8f 93       	push	r24
    1418:	df 92       	push	r13
    141a:	cf 92       	push	r12
    141c:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__xprintf>
    1420:	93 94       	inc	r9
    1422:	0f 90       	pop	r0
    1424:	0f 90       	pop	r0
    1426:	0f 90       	pop	r0
    1428:	0f 90       	pop	r0
    142a:	5b cf       	rjmp	.-330    	; 0x12e2 <adb_mouse_task+0x1b0>
    mouseacc += ( mouseacc < (mouse_cpi < 200 ? ADB_MOUSE_MAXACC : ADB_MOUSE_MAXACC/2) ? 1 : 0 );
    142c:	28 e0       	ldi	r18, 0x08	; 8
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	a5 cf       	rjmp	.-182    	; 0x137c <adb_mouse_task+0x24a>

00001432 <matrix_scan>:
{
    1432:	1f 93       	push	r17
    1434:	cf 93       	push	r28
    1436:	df 93       	push	r29
    codes = extra_key;
    1438:	c0 91 00 01 	lds	r28, 0x0100	; 0x800100 <__data_start>
    143c:	d0 91 01 01 	lds	r29, 0x0101	; 0x800101 <__data_start+0x1>
    extra_key = 0xFFFF;
    1440:	8f ef       	ldi	r24, 0xFF	; 255
    1442:	9f ef       	ldi	r25, 0xFF	; 255
    1444:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    1448:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    if ( codes == 0xFFFF )
    144c:	cf 3f       	cpi	r28, 0xFF	; 255
    144e:	dc 07       	cpc	r29, r28
    1450:	09 f0       	breq	.+2      	; 0x1454 <matrix_scan+0x22>
    1452:	6d c0       	rjmp	.+218    	; 0x152e <matrix_scan+0xfc>
        if (timer_elapsed(tick_ms) < 12) return 0;
    1454:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <tick_ms.2378>
    1458:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <tick_ms.2378+0x1>
    145c:	0e 94 59 23 	call	0x46b2	; 0x46b2 <timer_elapsed>
    1460:	0c 97       	sbiw	r24, 0x0c	; 12
    1462:	28 f4       	brcc	.+10     	; 0x146e <matrix_scan+0x3c>
    1464:	80 e0       	ldi	r24, 0x00	; 0
}
    1466:	df 91       	pop	r29
    1468:	cf 91       	pop	r28
    146a:	1f 91       	pop	r17
    146c:	08 95       	ret
        tick_ms = timer_read();
    146e:	0e 94 2d 23 	call	0x465a	; 0x465a <timer_read>
    1472:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <tick_ms.2378+0x1>
    1476:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <tick_ms.2378>
        codes = adb_host_kbd_recv(ADB_ADDR_KEYBOARD);
    147a:	82 e0       	ldi	r24, 0x02	; 2
    147c:	0e 94 9c 0c 	call	0x1938	; 0x1938 <adb_host_kbd_recv>
    1480:	ec 01       	movw	r28, r24
        if (codes == 0 && has_media_keys &&
    1482:	89 2b       	or	r24, r25
    1484:	09 f0       	breq	.+2      	; 0x1488 <matrix_scan+0x56>
    1486:	53 c0       	rjmp	.+166    	; 0x152e <matrix_scan+0xfc>
    1488:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <has_media_keys>
    148c:	88 23       	and	r24, r24
    148e:	09 f4       	brne	.+2      	; 0x1492 <matrix_scan+0x60>
    1490:	4e c0       	rjmp	.+156    	; 0x152e <matrix_scan+0xfc>
                (codes = adb_host_kbd_recv(ADB_ADDR_APPLIANCE))) {
    1492:	87 e0       	ldi	r24, 0x07	; 7
    1494:	0e 94 9c 0c 	call	0x1938	; 0x1938 <adb_host_kbd_recv>
    1498:	9c 01       	movw	r18, r24
        if (codes == 0 && has_media_keys &&
    149a:	00 97       	sbiw	r24, 0x00	; 0
    149c:	09 f4       	brne	.+2      	; 0x14a0 <matrix_scan+0x6e>
    149e:	47 c0       	rjmp	.+142    	; 0x152e <matrix_scan+0xfc>
            switch (codes & 0x7f ) {
    14a0:	8f 77       	andi	r24, 0x7F	; 127
    14a2:	99 27       	eor	r25, r25
    14a4:	82 30       	cpi	r24, 0x02	; 2
    14a6:	91 05       	cpc	r25, r1
    14a8:	99 f1       	breq	.+102    	; 0x1510 <matrix_scan+0xde>
    14aa:	70 f4       	brcc	.+28     	; 0x14c8 <matrix_scan+0x96>
    14ac:	00 97       	sbiw	r24, 0x00	; 0
    14ae:	51 f1       	breq	.+84     	; 0x1504 <matrix_scan+0xd2>
    14b0:	01 97       	sbiw	r24, 0x01	; 1
    14b2:	59 f1       	breq	.+86     	; 0x150a <matrix_scan+0xd8>
                xprintf("ERROR: media key1\n");
    14b4:	8a e5       	ldi	r24, 0x5A	; 90
    14b6:	91 e0       	ldi	r25, 0x01	; 1
    14b8:	9f 93       	push	r25
    14ba:	8f 93       	push	r24
    14bc:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__xprintf>
                return 0x11;
    14c0:	0f 90       	pop	r0
    14c2:	0f 90       	pop	r0
    14c4:	81 e1       	ldi	r24, 0x11	; 17
    14c6:	cf cf       	rjmp	.-98     	; 0x1466 <matrix_scan+0x34>
            switch (codes & 0x7f ) {
    14c8:	83 30       	cpi	r24, 0x03	; 3
    14ca:	91 05       	cpc	r25, r1
    14cc:	21 f1       	breq	.+72     	; 0x1516 <matrix_scan+0xe4>
    14ce:	8f 37       	cpi	r24, 0x7F	; 127
    14d0:	91 05       	cpc	r25, r1
    14d2:	81 f7       	brne	.-32     	; 0x14b4 <matrix_scan+0x82>
            switch ((codes >> 8) & 0x7f ) {
    14d4:	83 2f       	mov	r24, r19
    14d6:	99 27       	eor	r25, r25
    14d8:	8f 77       	andi	r24, 0x7F	; 127
    14da:	99 27       	eor	r25, r25
    14dc:	82 30       	cpi	r24, 0x02	; 2
    14de:	91 05       	cpc	r25, r1
    14e0:	09 f4       	brne	.+2      	; 0x14e4 <matrix_scan+0xb2>
    14e2:	4c c0       	rjmp	.+152    	; 0x157c <matrix_scan+0x14a>
    14e4:	d8 f4       	brcc	.+54     	; 0x151c <matrix_scan+0xea>
    14e6:	00 97       	sbiw	r24, 0x00	; 0
    14e8:	f9 f0       	breq	.+62     	; 0x1528 <matrix_scan+0xf6>
    14ea:	01 97       	sbiw	r24, 0x01	; 1
    14ec:	09 f4       	brne	.+2      	; 0x14f0 <matrix_scan+0xbe>
    14ee:	42 c0       	rjmp	.+132    	; 0x1574 <matrix_scan+0x142>
                xprintf("ERROR: media key0\n");
    14f0:	87 e4       	ldi	r24, 0x47	; 71
    14f2:	91 e0       	ldi	r25, 0x01	; 1
    14f4:	9f 93       	push	r25
    14f6:	8f 93       	push	r24
    14f8:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__xprintf>
                return 0x10;
    14fc:	0f 90       	pop	r0
    14fe:	0f 90       	pop	r0
    1500:	80 e1       	ldi	r24, 0x10	; 16
    1502:	b1 cf       	rjmp	.-158    	; 0x1466 <matrix_scan+0x34>
                codes = (codes & ~0x007f) | 0x42;
    1504:	20 78       	andi	r18, 0x80	; 128
    1506:	22 64       	ori	r18, 0x42	; 66
                break;
    1508:	e5 cf       	rjmp	.-54     	; 0x14d4 <matrix_scan+0xa2>
                codes = (codes & ~0x007f) | 0x4a;
    150a:	20 78       	andi	r18, 0x80	; 128
    150c:	2a 64       	ori	r18, 0x4A	; 74
                break;
    150e:	e2 cf       	rjmp	.-60     	; 0x14d4 <matrix_scan+0xa2>
                codes = (codes & ~0x007f) | 0x49;
    1510:	20 78       	andi	r18, 0x80	; 128
    1512:	29 64       	ori	r18, 0x49	; 73
                break;
    1514:	df cf       	rjmp	.-66     	; 0x14d4 <matrix_scan+0xa2>
                codes = (codes & ~0x007f) | 0x48;
    1516:	20 78       	andi	r18, 0x80	; 128
    1518:	28 64       	ori	r18, 0x48	; 72
                break;
    151a:	dc cf       	rjmp	.-72     	; 0x14d4 <matrix_scan+0xa2>
            switch ((codes >> 8) & 0x7f ) {
    151c:	03 97       	sbiw	r24, 0x03	; 3
    151e:	41 f7       	brne	.-48     	; 0x14f0 <matrix_scan+0xbe>
                codes = (codes & ~0x7f00) | (0x48 << 8);
    1520:	30 78       	andi	r19, 0x80	; 128
    1522:	e9 01       	movw	r28, r18
    1524:	d8 64       	ori	r29, 0x48	; 72
                break;
    1526:	03 c0       	rjmp	.+6      	; 0x152e <matrix_scan+0xfc>
                codes = (codes & ~0x7f00) | (0x42 << 8);
    1528:	30 78       	andi	r19, 0x80	; 128
    152a:	e9 01       	movw	r28, r18
    152c:	d2 64       	ori	r29, 0x42	; 66
    if (debug_matrix && codes) {
    152e:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <debug_config>
    1532:	81 ff       	sbrs	r24, 1
    1534:	27 c0       	rjmp	.+78     	; 0x1584 <matrix_scan+0x152>
    1536:	20 97       	sbiw	r28, 0x00	; 0
    1538:	09 f4       	brne	.+2      	; 0x153c <matrix_scan+0x10a>
    153a:	94 cf       	rjmp	.-216    	; 0x1464 <matrix_scan+0x32>
        print("adb_host_kbd_recv: "); phex16(codes); print("\n");
    153c:	83 e3       	ldi	r24, 0x33	; 51
    153e:	91 e0       	ldi	r25, 0x01	; 1
    1540:	0e 94 1d 06 	call	0xc3a	; 0xc3a <xputs>
    1544:	df 93       	push	r29
    1546:	cf 93       	push	r28
    1548:	8e e2       	ldi	r24, 0x2E	; 46
    154a:	91 e0       	ldi	r25, 0x01	; 1
    154c:	9f 93       	push	r25
    154e:	8f 93       	push	r24
    1550:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__xprintf>
    1554:	8c e2       	ldi	r24, 0x2C	; 44
    1556:	91 e0       	ldi	r25, 0x01	; 1
    1558:	0e 94 1d 06 	call	0xc3a	; 0xc3a <xputs>
    155c:	0f 90       	pop	r0
    155e:	0f 90       	pop	r0
    1560:	0f 90       	pop	r0
    1562:	0f 90       	pop	r0
    } else if (codes == 0x7F7F) {   // power key press
    1564:	cf 37       	cpi	r28, 0x7F	; 127
    1566:	dc 07       	cpc	r29, r28
    1568:	81 f4       	brne	.+32     	; 0x158a <matrix_scan+0x158>
        register_key(0x7F);
    156a:	8f e7       	ldi	r24, 0x7F	; 127
        register_key(0xFF);
    156c:	0e 94 bf 06 	call	0xd7e	; 0xd7e <register_key>
    return 1;
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	79 cf       	rjmp	.-270    	; 0x1466 <matrix_scan+0x34>
                codes = (codes & ~0x7f00) | (0x4a << 8);
    1574:	30 78       	andi	r19, 0x80	; 128
    1576:	e9 01       	movw	r28, r18
    1578:	da 64       	ori	r29, 0x4A	; 74
                break;
    157a:	d9 cf       	rjmp	.-78     	; 0x152e <matrix_scan+0xfc>
                codes = (codes & ~0x7f00) | (0x49 << 8);
    157c:	30 78       	andi	r19, 0x80	; 128
    157e:	e9 01       	movw	r28, r18
    1580:	d9 64       	ori	r29, 0x49	; 73
                break;
    1582:	d5 cf       	rjmp	.-86     	; 0x152e <matrix_scan+0xfc>
    if (codes == 0) {                           // no keys
    1584:	20 97       	sbiw	r28, 0x00	; 0
    1586:	71 f7       	brne	.-36     	; 0x1564 <matrix_scan+0x132>
    1588:	6d cf       	rjmp	.-294    	; 0x1464 <matrix_scan+0x32>
    } else if (codes == 0xFFFF) {   // power key release
    158a:	cf 3f       	cpi	r28, 0xFF	; 255
    158c:	dc 07       	cpc	r29, r28
    158e:	11 f4       	brne	.+4      	; 0x1594 <matrix_scan+0x162>
        register_key(0xFF);
    1590:	8f ef       	ldi	r24, 0xFF	; 255
    1592:	ec cf       	rjmp	.-40     	; 0x156c <matrix_scan+0x13a>
    key0 = codes>>8;
    1594:	8d 2f       	mov	r24, r29
    key1 = codes&0xFF;
    1596:	1c 2f       	mov	r17, r28
        if (key0 == 0xFF) {
    1598:	df 3f       	cpi	r29, 0xFF	; 255
    159a:	11 f4       	brne	.+4      	; 0x15a0 <matrix_scan+0x16e>
    key1 = codes&0xFF;
    159c:	8c 2f       	mov	r24, r28
            key1 = 0xFF;
    159e:	1f ef       	ldi	r17, 0xFF	; 255
        if (is_iso_layout) {
    15a0:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <is_iso_layout>
    15a4:	99 23       	and	r25, r25
    15a6:	31 f0       	breq	.+12     	; 0x15b4 <matrix_scan+0x182>
            if ((key0 & 0x7F) == 0x32) {
    15a8:	98 2f       	mov	r25, r24
    15aa:	9f 77       	andi	r25, 0x7F	; 127
    15ac:	92 33       	cpi	r25, 0x32	; 50
    15ae:	81 f4       	brne	.+32     	; 0x15d0 <matrix_scan+0x19e>
                key0 = (key0 & 0x80) | 0x0A;
    15b0:	80 78       	andi	r24, 0x80	; 128
    15b2:	8a 60       	ori	r24, 0x0A	; 10
        register_key(key0);
    15b4:	0e 94 bf 06 	call	0xd7e	; 0xd7e <register_key>
        if (key1 != 0xFF)       // key1 is 0xFF when no second key.
    15b8:	1f 3f       	cpi	r17, 0xFF	; 255
    15ba:	d1 f2       	breq	.-76     	; 0x1570 <matrix_scan+0x13e>
            extra_key = key1<<8 | 0xFF; // process in a separate call
    15bc:	81 2f       	mov	r24, r17
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	98 2f       	mov	r25, r24
    15c2:	88 27       	eor	r24, r24
    15c4:	8f 6f       	ori	r24, 0xFF	; 255
    15c6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    15ca:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    15ce:	d0 cf       	rjmp	.-96     	; 0x1570 <matrix_scan+0x13e>
            } else if ((key0 & 0x7F) == 0x0A) {
    15d0:	9a 30       	cpi	r25, 0x0A	; 10
    15d2:	81 f7       	brne	.-32     	; 0x15b4 <matrix_scan+0x182>
                key0 = (key0 & 0x80) | 0x32;
    15d4:	80 78       	andi	r24, 0x80	; 128
    15d6:	82 63       	ori	r24, 0x32	; 50
    15d8:	ed cf       	rjmp	.-38     	; 0x15b4 <matrix_scan+0x182>

000015da <matrix_get_row>:
    return matrix[row];
    15da:	e8 2f       	mov	r30, r24
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	e0 5a       	subi	r30, 0xA0	; 160
    15e0:	fe 4f       	sbci	r31, 0xFE	; 254
}
    15e2:	80 81       	ld	r24, Z
    15e4:	08 95       	ret

000015e6 <led_set>:

void led_set(uint8_t usb_led)
{
    adb_host_kbd_led(ADB_ADDR_KEYBOARD, ~usb_led);
    15e6:	68 2f       	mov	r22, r24
    15e8:	60 95       	com	r22
    15ea:	82 e0       	ldi	r24, 0x02	; 2
    15ec:	0c 94 00 0d 	jmp	0x1a00	; 0x1a00 <adb_host_kbd_led>

000015f0 <matrix_init>:
    debug_enable = true;
    15f0:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <debug_config>
    15f4:	81 60       	ori	r24, 0x01	; 1
    15f6:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <debug_config>
    DDRD |= (1<<6); PORTD |= (1<<6);
    15fa:	56 9a       	sbi	0x0a, 6	; 10
    15fc:	5e 9a       	sbi	0x0b, 6	; 11
    adb_host_init();
    15fe:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <adb_host_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1602:	2f ef       	ldi	r18, 0xFF	; 255
    1604:	81 ee       	ldi	r24, 0xE1	; 225
    1606:	94 e0       	ldi	r25, 0x04	; 4
    1608:	21 50       	subi	r18, 0x01	; 1
    160a:	80 40       	sbci	r24, 0x00	; 0
    160c:	90 40       	sbci	r25, 0x00	; 0
    160e:	e1 f7       	brne	.-8      	; 0x1608 <matrix_init+0x18>
    1610:	00 c0       	rjmp	.+0      	; 0x1612 <matrix_init+0x22>
    1612:	00 00       	nop
    device_scan();
    1614:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <device_scan>
    xprintf("\nKeyboard:\n");
    1618:	83 e8       	ldi	r24, 0x83	; 131
    161a:	92 e0       	ldi	r25, 0x02	; 2
    161c:	9f 93       	push	r25
    161e:	8f 93       	push	r24
    1620:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__xprintf>
    uint8_t handler_id = (uint8_t) adb_host_talk(ADB_ADDR_KEYBOARD, ADB_REG_3);
    1624:	63 e0       	ldi	r22, 0x03	; 3
    1626:	82 e0       	ldi	r24, 0x02	; 2
    1628:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <adb_host_talk>
    162c:	9c 01       	movw	r18, r24
    switch (handler_id) {
    162e:	ac 01       	movw	r20, r24
    1630:	55 27       	eor	r21, r21
    1632:	0f 90       	pop	r0
    1634:	0f 90       	pop	r0
    1636:	8e 31       	cpi	r24, 0x1E	; 30
    1638:	08 f0       	brcs	.+2      	; 0x163c <matrix_init+0x4c>
    163a:	63 c0       	rjmp	.+198    	; 0x1702 <matrix_init+0x112>
    163c:	2c 7f       	andi	r18, 0xFC	; 252
    163e:	33 27       	eor	r19, r19
    1640:	23 2b       	or	r18, r19
    1642:	09 f4       	brne	.+2      	; 0x1646 <matrix_init+0x56>
    1644:	65 c0       	rjmp	.+202    	; 0x1710 <matrix_init+0x120>
    1646:	fa 01       	movw	r30, r20
    1648:	34 97       	sbiw	r30, 0x04	; 4
    164a:	ea 31       	cpi	r30, 0x1A	; 26
    164c:	f1 05       	cpc	r31, r1
    164e:	08 f0       	brcs	.+2      	; 0x1652 <matrix_init+0x62>
    1650:	5f c0       	rjmp	.+190    	; 0x1710 <matrix_init+0x120>
    1652:	e0 59       	subi	r30, 0x90	; 144
    1654:	fa 4f       	sbci	r31, 0xFA	; 250
    1656:	0c 94 d1 2b 	jmp	0x57a2	; 0x57a2 <__tablejump2__>
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	01 c0       	rjmp	.+2      	; 0x1660 <matrix_init+0x70>
    165e:	88 0f       	add	r24, r24
    1660:	2a 95       	dec	r18
    1662:	ea f7       	brpl	.-6      	; 0x165e <matrix_init+0x6e>
    1664:	89 74       	andi	r24, 0x49	; 73
    1666:	09 f4       	brne	.+2      	; 0x166a <matrix_init+0x7a>
    1668:	53 c0       	rjmp	.+166    	; 0x1710 <matrix_init+0x120>
        is_iso_layout = true;
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <is_iso_layout>
    xprintf("hadler: %02X, ISO: %s\n", handler_id, (is_iso_layout ? "yes" : "no"));
    1670:	8c e2       	ldi	r24, 0x2C	; 44
    1672:	91 e0       	ldi	r25, 0x01	; 1
    1674:	9f 93       	push	r25
    1676:	8f 93       	push	r24
    1678:	5f 93       	push	r21
    167a:	4f 93       	push	r20
    167c:	8c e6       	ldi	r24, 0x6C	; 108
    167e:	92 e0       	ldi	r25, 0x02	; 2
    1680:	9f 93       	push	r25
    1682:	8f 93       	push	r24
    1684:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__xprintf>
    has_media_keys = (0x02 == (adb_host_talk(ADB_ADDR_APPLIANCE, ADB_REG_3) & 0xff));
    1688:	63 e0       	ldi	r22, 0x03	; 3
    168a:	87 e0       	ldi	r24, 0x07	; 7
    168c:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <adb_host_talk>
    1690:	28 2f       	mov	r18, r24
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	91 e0       	ldi	r25, 0x01	; 1
    1696:	0f 90       	pop	r0
    1698:	0f 90       	pop	r0
    169a:	0f 90       	pop	r0
    169c:	0f 90       	pop	r0
    169e:	0f 90       	pop	r0
    16a0:	0f 90       	pop	r0
    16a2:	82 30       	cpi	r24, 0x02	; 2
    16a4:	09 f0       	breq	.+2      	; 0x16a8 <matrix_init+0xb8>
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <has_media_keys>
    if (has_media_keys) {
    16ac:	22 30       	cpi	r18, 0x02	; 2
    16ae:	31 05       	cpc	r19, r1
    16b0:	41 f4       	brne	.+16     	; 0x16c2 <matrix_init+0xd2>
        xprintf("Media keys\n");
    16b2:	80 e6       	ldi	r24, 0x60	; 96
    16b4:	92 e0       	ldi	r25, 0x02	; 2
    16b6:	9f 93       	push	r25
    16b8:	8f 93       	push	r24
    16ba:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__xprintf>
    16be:	0f 90       	pop	r0
    16c0:	0f 90       	pop	r0
    adb_host_listen(ADB_ADDR_KEYBOARD, ADB_REG_3, ADB_ADDR_KEYBOARD, ADB_HANDLER_EXTENDED_KEYBOARD);
    16c2:	23 e0       	ldi	r18, 0x03	; 3
    16c4:	42 e0       	ldi	r20, 0x02	; 2
    16c6:	63 e0       	ldi	r22, 0x03	; 3
    16c8:	82 e0       	ldi	r24, 0x02	; 2
    16ca:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <adb_host_listen>
    xprintf("\nMouse:\n");
    16ce:	87 e5       	ldi	r24, 0x57	; 87
    16d0:	92 e0       	ldi	r25, 0x02	; 2
    16d2:	9f 93       	push	r25
    16d4:	8f 93       	push	r24
    16d6:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__xprintf>
    mouse_init(ADB_ADDR_MOUSE);
    16da:	0e 94 06 07 	call	0xe0c	; 0xe0c <mouse_init.constprop.0>
    device_scan();
    16de:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <device_scan>
    for (uint8_t i=0; i < MATRIX_ROWS; i++) matrix[i] = 0x00;
    16e2:	e0 e6       	ldi	r30, 0x60	; 96
    16e4:	f1 e0       	ldi	r31, 0x01	; 1
    16e6:	0f 90       	pop	r0
    16e8:	0f 90       	pop	r0
    16ea:	11 92       	st	Z+, r1
    16ec:	21 e0       	ldi	r18, 0x01	; 1
    16ee:	e0 37       	cpi	r30, 0x70	; 112
    16f0:	f2 07       	cpc	r31, r18
    16f2:	d9 f7       	brne	.-10     	; 0x16ea <matrix_init+0xfa>
    led_set(host_keyboard_leds());
    16f4:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <host_keyboard_leds>
    16f8:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <led_set>
    DDRD |= (1<<6); PORTD &= ~(1<<6);
    16fc:	56 9a       	sbi	0x0a, 6	; 10
    16fe:	5e 98       	cbi	0x0b, 6	; 11
}
    1700:	08 95       	ret
    switch (handler_id) {
    1702:	9a 01       	movw	r18, r20
    1704:	21 5c       	subi	r18, 0xC1	; 193
    1706:	31 09       	sbc	r19, r1
    1708:	27 30       	cpi	r18, 0x07	; 7
    170a:	31 05       	cpc	r19, r1
    170c:	08 f4       	brcc	.+2      	; 0x1710 <matrix_init+0x120>
    170e:	a5 cf       	rjmp	.-182    	; 0x165a <matrix_init+0x6a>
        is_iso_layout = false;
    1710:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <is_iso_layout>
    xprintf("hadler: %02X, ISO: %s\n", handler_id, (is_iso_layout ? "yes" : "no"));
    1714:	80 e3       	ldi	r24, 0x30	; 48
    1716:	91 e0       	ldi	r25, 0x01	; 1
    1718:	ad cf       	rjmp	.-166    	; 0x1674 <matrix_init+0x84>

0000171a <place_bit0>:
    place_bit1();
}

static inline void place_bit0(void)
{
    data_lo();
    171a:	50 9a       	sbi	0x0a, 0	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    171c:	83 e0       	ldi	r24, 0x03	; 3
    171e:	91 e0       	ldi	r25, 0x01	; 1
    1720:	01 97       	sbiw	r24, 0x01	; 1
    1722:	f1 f7       	brne	.-4      	; 0x1720 <place_bit0+0x6>
    1724:	00 c0       	rjmp	.+0      	; 0x1726 <place_bit0+0xc>
    1726:	00 00       	nop
    _delay_us(65);
    data_hi();
    1728:	50 98       	cbi	0x0a, 0	; 10
    172a:	9a eb       	ldi	r25, 0xBA	; 186
    172c:	9a 95       	dec	r25
    172e:	f1 f7       	brne	.-4      	; 0x172c <place_bit0+0x12>
    1730:	00 c0       	rjmp	.+0      	; 0x1732 <place_bit0+0x18>
    _delay_us(35);
}
    1732:	08 95       	ret

00001734 <place_bit1>:

static inline void place_bit1(void)
{
    data_lo();
    1734:	50 9a       	sbi	0x0a, 0	; 10
    1736:	8a eb       	ldi	r24, 0xBA	; 186
    1738:	8a 95       	dec	r24
    173a:	f1 f7       	brne	.-4      	; 0x1738 <place_bit1+0x4>
    173c:	00 c0       	rjmp	.+0      	; 0x173e <place_bit1+0xa>
    _delay_us(35);
    data_hi();
    173e:	50 98       	cbi	0x0a, 0	; 10
    1740:	83 e0       	ldi	r24, 0x03	; 3
    1742:	91 e0       	ldi	r25, 0x01	; 1
    1744:	01 97       	sbiw	r24, 0x01	; 1
    1746:	f1 f7       	brne	.-4      	; 0x1744 <place_bit1+0x10>
    1748:	00 c0       	rjmp	.+0      	; 0x174a <place_bit1+0x16>
    174a:	00 00       	nop
    _delay_us(65);
}
    174c:	08 95       	ret

0000174e <send_byte>:

static inline void send_byte(uint8_t data)
{
    174e:	ef 92       	push	r14
    1750:	ff 92       	push	r15
    1752:	0f 93       	push	r16
    1754:	1f 93       	push	r17
    1756:	cf 93       	push	r28
    1758:	df 93       	push	r29
    for (int i = 0; i < 8; i++) {
    175a:	d0 e0       	ldi	r29, 0x00	; 0
    175c:	c0 e0       	ldi	r28, 0x00	; 0
        if (data&(0x80>>i))
    175e:	90 e8       	ldi	r25, 0x80	; 128
    1760:	e9 2e       	mov	r14, r25
    1762:	f1 2c       	mov	r15, r1
    1764:	08 2f       	mov	r16, r24
    1766:	10 e0       	ldi	r17, 0x00	; 0
    1768:	c7 01       	movw	r24, r14
    176a:	0c 2e       	mov	r0, r28
    176c:	02 c0       	rjmp	.+4      	; 0x1772 <send_byte+0x24>
    176e:	95 95       	asr	r25
    1770:	87 95       	ror	r24
    1772:	0a 94       	dec	r0
    1774:	e2 f7       	brpl	.-8      	; 0x176e <send_byte+0x20>
    1776:	80 23       	and	r24, r16
    1778:	91 23       	and	r25, r17
    177a:	89 2b       	or	r24, r25
    177c:	69 f0       	breq	.+26     	; 0x1798 <send_byte+0x4a>
            place_bit1();
    177e:	0e 94 9a 0b 	call	0x1734	; 0x1734 <place_bit1>
    for (int i = 0; i < 8; i++) {
    1782:	21 96       	adiw	r28, 0x01	; 1
    1784:	c8 30       	cpi	r28, 0x08	; 8
    1786:	d1 05       	cpc	r29, r1
    1788:	79 f7       	brne	.-34     	; 0x1768 <send_byte+0x1a>
        else
            place_bit0();
    }
}
    178a:	df 91       	pop	r29
    178c:	cf 91       	pop	r28
    178e:	1f 91       	pop	r17
    1790:	0f 91       	pop	r16
    1792:	ff 90       	pop	r15
    1794:	ef 90       	pop	r14
    1796:	08 95       	ret
            place_bit0();
    1798:	0e 94 8d 0b 	call	0x171a	; 0x171a <place_bit0>
    179c:	f2 cf       	rjmp	.-28     	; 0x1782 <send_byte+0x34>

0000179e <attention>:
    data_lo();
    179e:	50 9a       	sbi	0x0a, 0	; 10
    17a0:	83 ef       	ldi	r24, 0xF3	; 243
    17a2:	9b e0       	ldi	r25, 0x0B	; 11
    17a4:	01 97       	sbiw	r24, 0x01	; 1
    17a6:	f1 f7       	brne	.-4      	; 0x17a4 <attention+0x6>
    17a8:	00 c0       	rjmp	.+0      	; 0x17aa <attention+0xc>
    17aa:	00 00       	nop
    place_bit1();
    17ac:	0c 94 9a 0b 	jmp	0x1734	; 0x1734 <place_bit1>

000017b0 <wait_data_lo>:
// These are carefully coded to take 6 cycles of overhead.
// inline asm approach became too convoluted
static inline uint16_t wait_data_lo(uint16_t us)
{
    do {
        if ( !data_in() )
    17b0:	48 9b       	sbis	0x09, 0	; 9
    17b2:	06 c0       	rjmp	.+12     	; 0x17c0 <wait_data_lo+0x10>
    17b4:	23 e0       	ldi	r18, 0x03	; 3
    17b6:	2a 95       	dec	r18
    17b8:	f1 f7       	brne	.-4      	; 0x17b6 <wait_data_lo+0x6>
    17ba:	00 00       	nop
            break;
        _delay_us(1 - (6 * 1000000.0 / F_CPU));
    }
    while ( --us );
    17bc:	01 97       	sbiw	r24, 0x01	; 1
    17be:	c1 f7       	brne	.-16     	; 0x17b0 <wait_data_lo>
    return us;
}
    17c0:	08 95       	ret

000017c2 <wait_data_hi>:

static inline uint16_t wait_data_hi(uint16_t us)
{
    do {
        if ( data_in() )
    17c2:	48 99       	sbic	0x09, 0	; 9
    17c4:	06 c0       	rjmp	.+12     	; 0x17d2 <wait_data_hi+0x10>
    17c6:	23 e0       	ldi	r18, 0x03	; 3
    17c8:	2a 95       	dec	r18
    17ca:	f1 f7       	brne	.-4      	; 0x17c8 <wait_data_hi+0x6>
    17cc:	00 00       	nop
            break;
        _delay_us(1 - (6 * 1000000.0 / F_CPU));
    }
    while ( --us );
    17ce:	01 97       	sbiw	r24, 0x01	; 1
    17d0:	c1 f7       	brne	.-16     	; 0x17c2 <wait_data_hi>
    return us;
}
    17d2:	08 95       	ret

000017d4 <adb_host_init>:
    ADB_PORT &= ~(1<<ADB_DATA_BIT);
    17d4:	58 98       	cbi	0x0b, 0	; 11
    data_hi();
    17d6:	50 98       	cbi	0x0a, 0	; 10
}
    17d8:	08 95       	ret

000017da <adb_mouse_init>:
    17da:	08 95       	ret

000017dc <adb_host_talk_buf>:
{
    17dc:	df 92       	push	r13
    17de:	ef 92       	push	r14
    17e0:	ff 92       	push	r15
    17e2:	0f 93       	push	r16
    17e4:	1f 93       	push	r17
    17e6:	cf 93       	push	r28
    17e8:	df 93       	push	r29
    17ea:	d8 2f       	mov	r29, r24
    17ec:	c6 2f       	mov	r28, r22
    17ee:	7a 01       	movw	r14, r20
    17f0:	d2 2e       	mov	r13, r18
    for (int8_t i =0; i < len; i++) buf[i] = 0;
    17f2:	20 e0       	ldi	r18, 0x00	; 0
    17f4:	4d 2d       	mov	r20, r13
    17f6:	50 e0       	ldi	r21, 0x00	; 0
    17f8:	82 2f       	mov	r24, r18
    17fa:	02 2e       	mov	r0, r18
    17fc:	00 0c       	add	r0, r0
    17fe:	99 0b       	sbc	r25, r25
    1800:	84 17       	cp	r24, r20
    1802:	95 07       	cpc	r25, r21
    1804:	ec f0       	brlt	.+58     	; 0x1840 <adb_host_talk_buf+0x64>
    cli();
    1806:	f8 94       	cli
    attention();
    1808:	0e 94 cf 0b 	call	0x179e	; 0x179e <attention>
    send_byte((addr<<4) | ADB_CMD_TALK | reg);
    180c:	f0 e1       	ldi	r31, 0x10	; 16
    180e:	df 9f       	mul	r29, r31
    1810:	c0 01       	movw	r24, r0
    1812:	11 24       	eor	r1, r1
    1814:	8c 2b       	or	r24, r28
    1816:	8c 60       	ori	r24, 0x0C	; 12
    1818:	0e 94 a7 0b 	call	0x174e	; 0x174e <send_byte>
    place_bit0();               // Stopbit(0)
    181c:	0e 94 8d 0b 	call	0x171a	; 0x171a <place_bit0>
    if (!wait_data_hi(500)) {    // Service Request(310us Adjustable Keyboard): just ignored
    1820:	84 ef       	ldi	r24, 0xF4	; 244
    1822:	91 e0       	ldi	r25, 0x01	; 1
    1824:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <wait_data_hi>
    1828:	89 2b       	or	r24, r25
    182a:	81 f4       	brne	.+32     	; 0x184c <adb_host_talk_buf+0x70>
        xprintf("R");
    182c:	83 e9       	ldi	r24, 0x93	; 147
    182e:	92 e0       	ldi	r25, 0x02	; 2
        xprintf("s");
    1830:	9f 93       	push	r25
    1832:	8f 93       	push	r24
    1834:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__xprintf>
        sei();
    1838:	78 94       	sei
        return 0;
    183a:	0f 90       	pop	r0
    183c:	0f 90       	pop	r0
    183e:	0d c0       	rjmp	.+26     	; 0x185a <adb_host_talk_buf+0x7e>
    for (int8_t i =0; i < len; i++) buf[i] = 0;
    1840:	8e 0d       	add	r24, r14
    1842:	9f 1d       	adc	r25, r15
    1844:	fc 01       	movw	r30, r24
    1846:	10 82       	st	Z, r1
    1848:	2f 5f       	subi	r18, 0xFF	; 255
    184a:	d6 cf       	rjmp	.-84     	; 0x17f8 <adb_host_talk_buf+0x1c>
    if (!wait_data_lo(500)) {   // Tlt/Stop to Start(140-260us)
    184c:	84 ef       	ldi	r24, 0xF4	; 244
    184e:	91 e0       	ldi	r25, 0x01	; 1
    1850:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <wait_data_lo>
    1854:	89 2b       	or	r24, r25
    1856:	51 f4       	brne	.+20     	; 0x186c <adb_host_talk_buf+0x90>
        sei();
    1858:	78 94       	sei
        return 0;
    185a:	80 e0       	ldi	r24, 0x00	; 0
}
    185c:	df 91       	pop	r29
    185e:	cf 91       	pop	r28
    1860:	1f 91       	pop	r17
    1862:	0f 91       	pop	r16
    1864:	ff 90       	pop	r15
    1866:	ef 90       	pop	r14
    1868:	df 90       	pop	r13
    186a:	08 95       	ret
    if (!wait_data_hi(40)) {
    186c:	88 e2       	ldi	r24, 0x28	; 40
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <wait_data_hi>
    1874:	89 2b       	or	r24, r25
    1876:	19 f4       	brne	.+6      	; 0x187e <adb_host_talk_buf+0xa2>
        xprintf("S");
    1878:	81 e9       	ldi	r24, 0x91	; 145
    187a:	92 e0       	ldi	r25, 0x02	; 2
    187c:	d9 cf       	rjmp	.-78     	; 0x1830 <adb_host_talk_buf+0x54>
    if (!wait_data_lo(100)) {
    187e:	84 e6       	ldi	r24, 0x64	; 100
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <wait_data_lo>
    uint8_t n = 0; // bit count
    1886:	c0 e0       	ldi	r28, 0x00	; 0
    if (!wait_data_lo(100)) {
    1888:	89 2b       	or	r24, r25
    188a:	21 f4       	brne	.+8      	; 0x1894 <adb_host_talk_buf+0xb8>
        xprintf("s");
    188c:	8f e8       	ldi	r24, 0x8F	; 143
    188e:	92 e0       	ldi	r25, 0x02	; 2
    1890:	cf cf       	rjmp	.-98     	; 0x1830 <adb_host_talk_buf+0x54>
    1892:	c8 2f       	mov	r28, r24
        uint8_t lo = (uint8_t) wait_data_hi(130);
    1894:	82 e8       	ldi	r24, 0x82	; 130
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <wait_data_hi>
    189c:	8c 01       	movw	r16, r24
        if (!lo)
    189e:	dc 2f       	mov	r29, r28
    18a0:	d6 95       	lsr	r29
    18a2:	d6 95       	lsr	r29
    18a4:	d6 95       	lsr	r29
    18a6:	88 23       	and	r24, r24
    18a8:	e1 f0       	breq	.+56     	; 0x18e2 <adb_host_talk_buf+0x106>
        uint8_t hi = (uint8_t) wait_data_lo(lo);
    18aa:	11 27       	eor	r17, r17
    18ac:	c8 01       	movw	r24, r16
    18ae:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <wait_data_lo>
        if (!hi)
    18b2:	88 23       	and	r24, r24
    18b4:	b1 f0       	breq	.+44     	; 0x18e2 <adb_host_talk_buf+0x106>
        if (n/8 >= len) continue; // can't store in buf
    18b6:	dd 15       	cp	r29, r13
    18b8:	78 f4       	brcc	.+30     	; 0x18d8 <adb_host_talk_buf+0xfc>
        buf[n/8] <<= 1;
    18ba:	f7 01       	movw	r30, r14
    18bc:	ed 0f       	add	r30, r29
    18be:	f1 1d       	adc	r31, r1
    18c0:	90 81       	ld	r25, Z
    18c2:	99 0f       	add	r25, r25
        if ((130 - lo) < (lo - hi)) {
    18c4:	22 e8       	ldi	r18, 0x82	; 130
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	20 1b       	sub	r18, r16
    18ca:	31 0b       	sbc	r19, r17
    18cc:	08 1b       	sub	r16, r24
    18ce:	11 09       	sbc	r17, r1
    18d0:	20 17       	cp	r18, r16
    18d2:	31 07       	cpc	r19, r17
    18d4:	64 f0       	brlt	.+24     	; 0x18ee <adb_host_talk_buf+0x112>
            buf[n/8] |= 1;
    18d6:	90 83       	st	Z, r25
    while ( ++n );
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	8c 0f       	add	r24, r28
    18dc:	cf 3f       	cpi	r28, 0xFF	; 255
    18de:	c9 f6       	brne	.-78     	; 0x1892 <adb_host_talk_buf+0xb6>
error:
    18e0:	c0 e0       	ldi	r28, 0x00	; 0
    sei();
    18e2:	78 94       	sei
    return n/8;
    18e4:	8c 2f       	mov	r24, r28
    18e6:	86 95       	lsr	r24
    18e8:	86 95       	lsr	r24
    18ea:	86 95       	lsr	r24
    18ec:	b7 cf       	rjmp	.-146    	; 0x185c <adb_host_talk_buf+0x80>
            buf[n/8] |= 1;
    18ee:	91 60       	ori	r25, 0x01	; 1
    18f0:	f2 cf       	rjmp	.-28     	; 0x18d6 <adb_host_talk_buf+0xfa>

000018f2 <adb_host_talk>:
{
    18f2:	cf 93       	push	r28
    18f4:	df 93       	push	r29
    18f6:	cd b7       	in	r28, 0x3d	; 61
    18f8:	de b7       	in	r29, 0x3e	; 62
    18fa:	28 97       	sbiw	r28, 0x08	; 8
    18fc:	0f b6       	in	r0, 0x3f	; 63
    18fe:	f8 94       	cli
    1900:	de bf       	out	0x3e, r29	; 62
    1902:	0f be       	out	0x3f, r0	; 63
    1904:	cd bf       	out	0x3d, r28	; 61
    len = adb_host_talk_buf(addr, reg, buf, 8);
    1906:	28 e0       	ldi	r18, 0x08	; 8
    1908:	ae 01       	movw	r20, r28
    190a:	4f 5f       	subi	r20, 0xFF	; 255
    190c:	5f 4f       	sbci	r21, 0xFF	; 255
    190e:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <adb_host_talk_buf>
    if (len != 2) return 0;
    1912:	82 30       	cpi	r24, 0x02	; 2
    1914:	71 f4       	brne	.+28     	; 0x1932 <adb_host_talk+0x40>
    return (buf[0]<<8 | buf[1]);
    1916:	89 81       	ldd	r24, Y+1	; 0x01
    1918:	9a 81       	ldd	r25, Y+2	; 0x02
    191a:	98 27       	eor	r25, r24
    191c:	89 27       	eor	r24, r25
    191e:	98 27       	eor	r25, r24
}
    1920:	28 96       	adiw	r28, 0x08	; 8
    1922:	0f b6       	in	r0, 0x3f	; 63
    1924:	f8 94       	cli
    1926:	de bf       	out	0x3e, r29	; 62
    1928:	0f be       	out	0x3f, r0	; 63
    192a:	cd bf       	out	0x3d, r28	; 61
    192c:	df 91       	pop	r29
    192e:	cf 91       	pop	r28
    1930:	08 95       	ret
    if (len != 2) return 0;
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	80 e0       	ldi	r24, 0x00	; 0
    1936:	f4 cf       	rjmp	.-24     	; 0x1920 <adb_host_talk+0x2e>

00001938 <adb_host_kbd_recv>:
    return adb_host_talk(addr, ADB_REG_0);
    1938:	60 e0       	ldi	r22, 0x00	; 0
    193a:	0c 94 79 0c 	jmp	0x18f2	; 0x18f2 <adb_host_talk>

0000193e <adb_host_listen_buf>:
{
    193e:	ff 92       	push	r15
    1940:	0f 93       	push	r16
    1942:	1f 93       	push	r17
    1944:	cf 93       	push	r28
    1946:	df 93       	push	r29
    1948:	f8 2e       	mov	r15, r24
    194a:	d6 2f       	mov	r29, r22
    194c:	8a 01       	movw	r16, r20
    194e:	c2 2f       	mov	r28, r18
    cli();
    1950:	f8 94       	cli
    attention();
    1952:	0e 94 cf 0b 	call	0x179e	; 0x179e <attention>
    send_byte((addr<<4) | ADB_CMD_LISTEN | reg);
    1956:	20 e1       	ldi	r18, 0x10	; 16
    1958:	f2 9e       	mul	r15, r18
    195a:	c0 01       	movw	r24, r0
    195c:	11 24       	eor	r1, r1
    195e:	8d 2b       	or	r24, r29
    1960:	88 60       	ori	r24, 0x08	; 8
    1962:	0e 94 a7 0b 	call	0x174e	; 0x174e <send_byte>
    place_bit0();               // Stopbit(0)
    1966:	0e 94 8d 0b 	call	0x171a	; 0x171a <place_bit0>
    196a:	8f e1       	ldi	r24, 0x1F	; 31
    196c:	93 e0       	ldi	r25, 0x03	; 3
    196e:	01 97       	sbiw	r24, 0x01	; 1
    1970:	f1 f7       	brne	.-4      	; 0x196e <adb_host_listen_buf+0x30>
    1972:	00 c0       	rjmp	.+0      	; 0x1974 <adb_host_listen_buf+0x36>
    1974:	00 00       	nop
    place_bit1();               // Startbit(1)
    1976:	0e 94 9a 0b 	call	0x1734	; 0x1734 <place_bit1>
    for (int8_t i = 0; i < len; i++) {
    197a:	f1 2c       	mov	r15, r1
    197c:	d0 e0       	ldi	r29, 0x00	; 0
    197e:	8f 2d       	mov	r24, r15
    1980:	0f 2c       	mov	r0, r15
    1982:	00 0c       	add	r0, r0
    1984:	99 0b       	sbc	r25, r25
    1986:	8c 17       	cp	r24, r28
    1988:	9d 07       	cpc	r25, r29
    198a:	4c f0       	brlt	.+18     	; 0x199e <adb_host_listen_buf+0x60>
    place_bit0();               // Stopbit(0);
    198c:	0e 94 8d 0b 	call	0x171a	; 0x171a <place_bit0>
    sei();
    1990:	78 94       	sei
}
    1992:	df 91       	pop	r29
    1994:	cf 91       	pop	r28
    1996:	1f 91       	pop	r17
    1998:	0f 91       	pop	r16
    199a:	ff 90       	pop	r15
    199c:	08 95       	ret
        send_byte(buf[i]);
    199e:	80 0f       	add	r24, r16
    19a0:	91 1f       	adc	r25, r17
    19a2:	fc 01       	movw	r30, r24
    19a4:	80 81       	ld	r24, Z
    19a6:	0e 94 a7 0b 	call	0x174e	; 0x174e <send_byte>
    19aa:	f3 94       	inc	r15
    19ac:	e8 cf       	rjmp	.-48     	; 0x197e <adb_host_listen_buf+0x40>

000019ae <adb_host_listen>:
{
    19ae:	cf 93       	push	r28
    19b0:	df 93       	push	r29
    19b2:	00 d0       	rcall	.+0      	; 0x19b4 <adb_host_listen+0x6>
    19b4:	cd b7       	in	r28, 0x3d	; 61
    19b6:	de b7       	in	r29, 0x3e	; 62
    uint8_t buf[2] = { data_h, data_l };
    19b8:	49 83       	std	Y+1, r20	; 0x01
    19ba:	2a 83       	std	Y+2, r18	; 0x02
    adb_host_listen_buf(addr, reg, buf, 2);
    19bc:	22 e0       	ldi	r18, 0x02	; 2
    19be:	ae 01       	movw	r20, r28
    19c0:	4f 5f       	subi	r20, 0xFF	; 255
    19c2:	5f 4f       	sbci	r21, 0xFF	; 255
    19c4:	0e 94 9f 0c 	call	0x193e	; 0x193e <adb_host_listen_buf>
}
    19c8:	0f 90       	pop	r0
    19ca:	0f 90       	pop	r0
    19cc:	df 91       	pop	r29
    19ce:	cf 91       	pop	r28
    19d0:	08 95       	ret

000019d2 <adb_host_flush>:
{
    19d2:	cf 93       	push	r28
    19d4:	c8 2f       	mov	r28, r24
    cli();
    19d6:	f8 94       	cli
    attention();
    19d8:	0e 94 cf 0b 	call	0x179e	; 0x179e <attention>
    send_byte((addr<<4) | ADB_CMD_FLUSH);
    19dc:	20 e1       	ldi	r18, 0x10	; 16
    19de:	c2 9f       	mul	r28, r18
    19e0:	c0 01       	movw	r24, r0
    19e2:	11 24       	eor	r1, r1
    19e4:	81 60       	ori	r24, 0x01	; 1
    19e6:	0e 94 a7 0b 	call	0x174e	; 0x174e <send_byte>
    place_bit0();               // Stopbit(0)
    19ea:	0e 94 8d 0b 	call	0x171a	; 0x171a <place_bit0>
    19ee:	8f e1       	ldi	r24, 0x1F	; 31
    19f0:	93 e0       	ldi	r25, 0x03	; 3
    19f2:	01 97       	sbiw	r24, 0x01	; 1
    19f4:	f1 f7       	brne	.-4      	; 0x19f2 <adb_host_flush+0x20>
    19f6:	00 c0       	rjmp	.+0      	; 0x19f8 <adb_host_flush+0x26>
    19f8:	00 00       	nop
    sei();
    19fa:	78 94       	sei
}
    19fc:	cf 91       	pop	r28
    19fe:	08 95       	ret

00001a00 <adb_host_kbd_led>:
    adb_host_listen(addr, 2, 0, led & 0x07);
    1a00:	26 2f       	mov	r18, r22
    1a02:	27 70       	andi	r18, 0x07	; 7
    1a04:	40 e0       	ldi	r20, 0x00	; 0
    1a06:	62 e0       	ldi	r22, 0x02	; 2
    1a08:	0c 94 d7 0c 	jmp	0x19ae	; 0x19ae <adb_host_listen>

00001a0c <keyboard_leds>:
 * Host driver
 ******************************************************************************/
static uint8_t keyboard_leds(void)
{
    return keyboard_led_stats;
}
    1a0c:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <keyboard_led_stats>
    1a10:	08 95       	ret

00001a12 <send_consumer>:
    Endpoint_ClearIN();
#endif
}

static void send_consumer(uint16_t data)
{
    1a12:	cf 93       	push	r28
    1a14:	df 93       	push	r29
    1a16:	00 d0       	rcall	.+0      	; 0x1a18 <send_consumer+0x6>
    1a18:	0f 92       	push	r0
    1a1a:	cd b7       	in	r28, 0x3d	; 61
    1a1c:	de b7       	in	r29, 0x3e	; 62
#ifdef EXTRAKEY_ENABLE
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1a1e:	20 91 77 03 	lds	r18, 0x0377	; 0x800377 <USB_DeviceState>
    1a22:	24 30       	cpi	r18, 0x04	; 4
    1a24:	19 f5       	brne	.+70     	; 0x1a6c <send_consumer+0x5a>
        return;

    report_extra_t r = {
    1a26:	23 e0       	ldi	r18, 0x03	; 3
    1a28:	29 83       	std	Y+1, r18	; 0x01
    1a2a:	8a 83       	std	Y+2, r24	; 0x02
    1a2c:	9b 83       	std	Y+3, r25	; 0x03
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1a2e:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <actionmaps+0x7f98e9>
    1a32:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1a34:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    1a38:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1a3a:	95 fd       	sbrc	r25, 5
    1a3c:	06 c0       	rjmp	.+12     	; 0x1a4a <send_consumer+0x38>
    1a3e:	95 ed       	ldi	r25, 0xD5	; 213
    1a40:	9a 95       	dec	r25
    1a42:	f1 f7       	brne	.-4      	; 0x1a40 <send_consumer+0x2e>
    1a44:	00 00       	nop
    1a46:	81 11       	cpse	r24, r1
    1a48:	f5 cf       	rjmp	.-22     	; 0x1a34 <send_consumer+0x22>
    1a4a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    if (!Endpoint_IsReadWriteAllowed()) return;
    1a4e:	85 ff       	sbrs	r24, 5
    1a50:	0d c0       	rjmp	.+26     	; 0x1a6c <send_consumer+0x5a>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    1a52:	50 e0       	ldi	r21, 0x00	; 0
    1a54:	40 e0       	ldi	r20, 0x00	; 0
    1a56:	63 e0       	ldi	r22, 0x03	; 3
    1a58:	70 e0       	ldi	r23, 0x00	; 0
    1a5a:	ce 01       	movw	r24, r28
    1a5c:	01 96       	adiw	r24, 0x01	; 1
    1a5e:	0e 94 83 10 	call	0x2106	; 0x2106 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a62:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    1a66:	8e 77       	andi	r24, 0x7E	; 126
    1a68:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <actionmaps+0x7f98e8>
    Endpoint_ClearIN();
#endif
}
    1a6c:	0f 90       	pop	r0
    1a6e:	0f 90       	pop	r0
    1a70:	0f 90       	pop	r0
    1a72:	df 91       	pop	r29
    1a74:	cf 91       	pop	r28
    1a76:	08 95       	ret

00001a78 <send_system>:
{
    1a78:	cf 93       	push	r28
    1a7a:	df 93       	push	r29
    1a7c:	00 d0       	rcall	.+0      	; 0x1a7e <send_system+0x6>
    1a7e:	0f 92       	push	r0
    1a80:	cd b7       	in	r28, 0x3d	; 61
    1a82:	de b7       	in	r29, 0x3e	; 62
    1a84:	9c 01       	movw	r18, r24
    if (USB_DeviceState != DEVICE_STATE_Configured)
    1a86:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <USB_DeviceState>
    1a8a:	84 30       	cpi	r24, 0x04	; 4
    1a8c:	31 f5       	brne	.+76     	; 0x1ada <send_system+0x62>
    report_extra_t r = {
    1a8e:	82 e0       	ldi	r24, 0x02	; 2
    1a90:	89 83       	std	Y+1, r24	; 0x01
        .usage = data - SYSTEM_POWER_DOWN + 1
    1a92:	20 58       	subi	r18, 0x80	; 128
    1a94:	31 09       	sbc	r19, r1
    report_extra_t r = {
    1a96:	3b 83       	std	Y+3, r19	; 0x03
    1a98:	2a 83       	std	Y+2, r18	; 0x02
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1a9a:	83 e0       	ldi	r24, 0x03	; 3
    1a9c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <actionmaps+0x7f98e9>
    1aa0:	8f ef       	ldi	r24, 0xFF	; 255
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1aa2:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    1aa6:	81 50       	subi	r24, 0x01	; 1
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1aa8:	95 fd       	sbrc	r25, 5
    1aaa:	06 c0       	rjmp	.+12     	; 0x1ab8 <send_system+0x40>
    1aac:	95 ed       	ldi	r25, 0xD5	; 213
    1aae:	9a 95       	dec	r25
    1ab0:	f1 f7       	brne	.-4      	; 0x1aae <send_system+0x36>
    1ab2:	00 00       	nop
    1ab4:	81 11       	cpse	r24, r1
    1ab6:	f5 cf       	rjmp	.-22     	; 0x1aa2 <send_system+0x2a>
    1ab8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    if (!Endpoint_IsReadWriteAllowed()) return;
    1abc:	85 ff       	sbrs	r24, 5
    1abe:	0d c0       	rjmp	.+26     	; 0x1ada <send_system+0x62>
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    1ac0:	50 e0       	ldi	r21, 0x00	; 0
    1ac2:	40 e0       	ldi	r20, 0x00	; 0
    1ac4:	63 e0       	ldi	r22, 0x03	; 3
    1ac6:	70 e0       	ldi	r23, 0x00	; 0
    1ac8:	ce 01       	movw	r24, r28
    1aca:	01 96       	adiw	r24, 0x01	; 1
    1acc:	0e 94 83 10 	call	0x2106	; 0x2106 <Endpoint_Write_Stream_LE>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1ad0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    1ad4:	8e 77       	andi	r24, 0x7E	; 126
    1ad6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <actionmaps+0x7f98e8>
}
    1ada:	0f 90       	pop	r0
    1adc:	0f 90       	pop	r0
    1ade:	0f 90       	pop	r0
    1ae0:	df 91       	pop	r29
    1ae2:	cf 91       	pop	r28
    1ae4:	08 95       	ret

00001ae6 <send_mouse>:
    if (USB_DeviceState != DEVICE_STATE_Configured)
    1ae6:	20 91 77 03 	lds	r18, 0x0377	; 0x800377 <USB_DeviceState>
    1aea:	24 30       	cpi	r18, 0x04	; 4
    1aec:	f1 f4       	brne	.+60     	; 0x1b2a <send_mouse+0x44>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1aee:	22 e0       	ldi	r18, 0x02	; 2
    1af0:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <actionmaps+0x7f98e9>
    1af4:	2f ef       	ldi	r18, 0xFF	; 255
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1af6:	30 91 e8 00 	lds	r19, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    1afa:	21 50       	subi	r18, 0x01	; 1
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1afc:	35 fd       	sbrc	r19, 5
    1afe:	06 c0       	rjmp	.+12     	; 0x1b0c <send_mouse+0x26>
    1b00:	35 ed       	ldi	r19, 0xD5	; 213
    1b02:	3a 95       	dec	r19
    1b04:	f1 f7       	brne	.-4      	; 0x1b02 <send_mouse+0x1c>
    1b06:	00 00       	nop
    1b08:	21 11       	cpse	r18, r1
    1b0a:	f5 cf       	rjmp	.-22     	; 0x1af6 <send_mouse+0x10>
    1b0c:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    if (!Endpoint_IsReadWriteAllowed()) return;
    1b10:	25 ff       	sbrs	r18, 5
    1b12:	0b c0       	rjmp	.+22     	; 0x1b2a <send_mouse+0x44>
    Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
    1b14:	50 e0       	ldi	r21, 0x00	; 0
    1b16:	40 e0       	ldi	r20, 0x00	; 0
    1b18:	65 e0       	ldi	r22, 0x05	; 5
    1b1a:	70 e0       	ldi	r23, 0x00	; 0
    1b1c:	0e 94 83 10 	call	0x2106	; 0x2106 <Endpoint_Write_Stream_LE>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1b20:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    1b24:	8e 77       	andi	r24, 0x7E	; 126
    1b26:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <actionmaps+0x7f98e8>
}
    1b2a:	08 95       	ret

00001b2c <send_keyboard>:
{
    1b2c:	cf 93       	push	r28
    1b2e:	df 93       	push	r29
    1b30:	d8 2f       	mov	r29, r24
    1b32:	c9 2f       	mov	r28, r25
    if (USB_DeviceState != DEVICE_STATE_Configured)
    1b34:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <USB_DeviceState>
    1b38:	84 30       	cpi	r24, 0x04	; 4
    1b3a:	21 f5       	brne	.+72     	; 0x1b84 <send_keyboard+0x58>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <actionmaps+0x7f98e9>
			}
    1b42:	81 e8       	ldi	r24, 0x81	; 129
    1b44:	81 50       	subi	r24, 0x01	; 1
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(80);
    1b46:	21 f0       	breq	.+8      	; 0x1b50 <send_keyboard+0x24>
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1b48:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    1b4c:	95 ff       	sbrs	r25, 5
    1b4e:	1d c0       	rjmp	.+58     	; 0x1b8a <send_keyboard+0x5e>
    1b50:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
        if (!Endpoint_IsReadWriteAllowed()) return;
    1b54:	85 ff       	sbrs	r24, 5
    1b56:	16 c0       	rjmp	.+44     	; 0x1b84 <send_keyboard+0x58>
        Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
    1b58:	50 e0       	ldi	r21, 0x00	; 0
    1b5a:	40 e0       	ldi	r20, 0x00	; 0
    1b5c:	68 e0       	ldi	r22, 0x08	; 8
    1b5e:	70 e0       	ldi	r23, 0x00	; 0
    1b60:	8d 2f       	mov	r24, r29
    1b62:	9c 2f       	mov	r25, r28
    1b64:	0e 94 83 10 	call	0x2106	; 0x2106 <Endpoint_Write_Stream_LE>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1b68:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    1b6c:	8e 77       	andi	r24, 0x7E	; 126
    1b6e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <actionmaps+0x7f98e8>
    keyboard_report_sent = *report;
    1b72:	88 e0       	ldi	r24, 0x08	; 8
    1b74:	ed 2f       	mov	r30, r29
    1b76:	fc 2f       	mov	r31, r28
    1b78:	a6 e7       	ldi	r26, 0x76	; 118
    1b7a:	b2 e0       	ldi	r27, 0x02	; 2
    1b7c:	01 90       	ld	r0, Z+
    1b7e:	0d 92       	st	X+, r0
    1b80:	8a 95       	dec	r24
    1b82:	e1 f7       	brne	.-8      	; 0x1b7c <send_keyboard+0x50>
}
    1b84:	df 91       	pop	r29
    1b86:	cf 91       	pop	r28
    1b88:	08 95       	ret
    1b8a:	ef e3       	ldi	r30, 0x3F	; 63
    1b8c:	f1 e0       	ldi	r31, 0x01	; 1
    1b8e:	31 97       	sbiw	r30, 0x01	; 1
    1b90:	f1 f7       	brne	.-4      	; 0x1b8e <send_keyboard+0x62>
    1b92:	00 c0       	rjmp	.+0      	; 0x1b94 <send_keyboard+0x68>
    1b94:	00 00       	nop
	}
	else
		__ticks = (uint8_t)__tmp;
	_delay_loop_1(__ticks);
#endif
}
    1b96:	d6 cf       	rjmp	.-84     	; 0x1b44 <send_keyboard+0x18>

00001b98 <console_is_ready>:
{
    1b98:	cf 93       	push	r28
    1b9a:	df 93       	push	r29
    1b9c:	00 d0       	rcall	.+0      	; 0x1b9e <console_is_ready+0x6>
    1b9e:	00 d0       	rcall	.+0      	; 0x1ba0 <console_is_ready+0x8>
    1ba0:	0f 92       	push	r0
    1ba2:	cd b7       	in	r28, 0x3d	; 61
    1ba4:	de b7       	in	r29, 0x3e	; 62
    if (!hid_listen_ready) {
    1ba6:	20 91 74 01 	lds	r18, 0x0174	; 0x800174 <hid_listen_ready.4910>
    1baa:	2d 83       	std	Y+5, r18	; 0x05
    1bac:	21 11       	cpse	r18, r1
    1bae:	0c c0       	rjmp	.+24     	; 0x1bc8 <console_is_ready+0x30>
        if (timer_read32() < 2500)
    1bb0:	0e 94 39 23 	call	0x4672	; 0x4672 <timer_read32>
    1bb4:	64 3c       	cpi	r22, 0xC4	; 196
    1bb6:	79 40       	sbci	r23, 0x09	; 9
    1bb8:	81 05       	cpc	r24, r1
    1bba:	91 05       	cpc	r25, r1
    1bbc:	28 f0       	brcs	.+10     	; 0x1bc8 <console_is_ready+0x30>
        hid_listen_ready = true;
    1bbe:	81 e0       	ldi	r24, 0x01	; 1
    1bc0:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <hid_listen_ready.4910>
    return true;
    1bc4:	b1 e0       	ldi	r27, 0x01	; 1
    1bc6:	bd 83       	std	Y+5, r27	; 0x05
}
    1bc8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bca:	0f 90       	pop	r0
    1bcc:	0f 90       	pop	r0
    1bce:	0f 90       	pop	r0
    1bd0:	0f 90       	pop	r0
    1bd2:	0f 90       	pop	r0
    1bd4:	df 91       	pop	r29
    1bd6:	cf 91       	pop	r28
    1bd8:	08 95       	ret

00001bda <sendchar>:

/*******************************************************************************
 * sendchar
 ******************************************************************************/
int8_t sendchar(uint8_t c)
{
    1bda:	cf 93       	push	r28
    1bdc:	c8 2f       	mov	r28, r24
    if (!console_is_ready())
    1bde:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <console_is_ready>
    1be2:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <sendbuf+0x2>
    1be6:	88 23       	and	r24, r24
    1be8:	f9 f0       	breq	.+62     	; 0x1c28 <sendchar+0x4e>
    if (!(SREG & (1<<SREG_I)))
    1bea:	0f b6       	in	r0, 0x3f	; 63
    1bec:	07 fe       	sbrs	r0, 7
    1bee:	1c c0       	rjmp	.+56     	; 0x1c28 <sendchar+0x4e>
    if (USB_DeviceState != DEVICE_STATE_Configured)
    1bf0:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <USB_DeviceState>
    1bf4:	84 30       	cpi	r24, 0x04	; 4
    1bf6:	c1 f4       	brne	.+48     	; 0x1c28 <sendchar+0x4e>
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1bf8:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <actionmaps+0x7f98e9>
    1bfc:	8f 70       	andi	r24, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1bfe:	20 91 ec 00 	lds	r18, 0x00EC	; 0x8000ec <actionmaps+0x7f98ec>
    1c02:	92 2f       	mov	r25, r18
    1c04:	91 70       	andi	r25, 0x01	; 1
    1c06:	20 fd       	sbrc	r18, 0
    1c08:	90 e8       	ldi	r25, 0x80	; 128
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1c0a:	98 2b       	or	r25, r24
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1c0c:	84 e0       	ldi	r24, 0x04	; 4
    1c0e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <actionmaps+0x7f98e9>
				return ((UECONX & (1 << EPEN)) ? true : false);
    1c12:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <actionmaps+0x7f98eb>
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    1c16:	80 ff       	sbrs	r24, 0
    1c18:	04 c0       	rjmp	.+8      	; 0x1c22 <sendchar+0x48>
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1c1a:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <actionmaps+0x7f98ee>
    1c1e:	87 fd       	sbrc	r24, 7
    1c20:	3e c0       	rjmp	.+124    	; 0x1c9e <sendchar+0xc4>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1c22:	9f 70       	andi	r25, 0x0F	; 15
    1c24:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <actionmaps+0x7f98e9>
{
    return (buf->head == buf->tail);
}
static inline bool ringbuf_is_full(ringbuf_t *buf)
{
    return (((buf->head + 1) & buf->size_mask) == buf->tail);
    1c28:	23 2f       	mov	r18, r19
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	c9 01       	movw	r24, r18
    1c2e:	01 96       	adiw	r24, 0x01	; 1
    1c30:	40 91 18 01 	lds	r20, 0x0118	; 0x800118 <sendbuf+0x4>
    1c34:	50 e0       	ldi	r21, 0x00	; 0
    1c36:	84 23       	and	r24, r20
    1c38:	95 23       	and	r25, r21
    1c3a:	40 91 17 01 	lds	r20, 0x0117	; 0x800117 <sendbuf+0x3>
    if (ringbuf_is_full(buf)) {
    1c3e:	48 17       	cp	r20, r24
    1c40:	19 06       	cpc	r1, r25
    1c42:	e9 f1       	breq	.+122    	; 0x1cbe <sendchar+0xe4>
    buf->buffer[buf->head] = data;
    1c44:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <sendbuf>
    1c48:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <sendbuf+0x1>
    1c4c:	28 0f       	add	r18, r24
    1c4e:	39 1f       	adc	r19, r25
    1c50:	f9 01       	movw	r30, r18
    1c52:	c0 83       	st	Z, r28
    buf->head++;
    1c54:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <sendbuf+0x2>
    1c58:	8f 5f       	subi	r24, 0xFF	; 255
    buf->head &= buf->size_mask;
    1c5a:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <sendbuf+0x4>
    1c5e:	89 23       	and	r24, r25
    1c60:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <sendbuf+0x2>

    #ifdef CONSOLE_ENABLE
    console_putc(c);
    #endif

    return 0;
    1c64:	2c c0       	rjmp	.+88     	; 0x1cbe <sendchar+0xe4>
    uint8_t data = buf->buffer[buf->tail];
    1c66:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <sendbuf>
    1c6a:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <sendbuf+0x1>
    1c6e:	e2 0f       	add	r30, r18
    1c70:	f1 1d       	adc	r31, r1
    1c72:	80 81       	ld	r24, Z
    buf->tail++;
    1c74:	2f 5f       	subi	r18, 0xFF	; 255
    buf->tail &= buf->size_mask;
    1c76:	40 91 18 01 	lds	r20, 0x0118	; 0x800118 <sendbuf+0x4>
    1c7a:	24 23       	and	r18, r20
    1c7c:	20 93 17 01 	sts	0x0117, r18	; 0x800117 <sendbuf+0x3>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1c80:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <actionmaps+0x7f98f1>
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1c84:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
        if (!Endpoint_IsReadWriteAllowed() && Endpoint_IsINReady()) {
    1c88:	85 fd       	sbrc	r24, 5
    1c8a:	09 c0       	rjmp	.+18     	; 0x1c9e <sendchar+0xc4>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1c8c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    1c90:	80 ff       	sbrs	r24, 0
    1c92:	05 c0       	rjmp	.+10     	; 0x1c9e <sendchar+0xc4>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1c94:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    1c98:	8e 77       	andi	r24, 0x7E	; 126
    1c9a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <actionmaps+0x7f98e8>
    return (buf->head == buf->tail);
    1c9e:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <sendbuf+0x3>
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1ca2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    while (!ringbuf_is_empty(&sendbuf) && Endpoint_IsReadWriteAllowed()) {
    1ca6:	32 17       	cp	r19, r18
    1ca8:	19 f0       	breq	.+6      	; 0x1cb0 <sendchar+0xd6>
    1caa:	85 fd       	sbrc	r24, 5
    1cac:	dc cf       	rjmp	.-72     	; 0x1c66 <sendchar+0x8c>
    1cae:	b9 cf       	rjmp	.-142    	; 0x1c22 <sendchar+0x48>
    if (ringbuf_is_empty(&sendbuf) && Endpoint_IsReadWriteAllowed()) {
    1cb0:	85 ff       	sbrs	r24, 5
    1cb2:	b7 cf       	rjmp	.-146    	; 0x1c22 <sendchar+0x48>
				UEDATX = Data;
    1cb4:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <actionmaps+0x7f98f1>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1cb8:	9f 70       	andi	r25, 0x0F	; 15
    1cba:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <actionmaps+0x7f98e9>
}
    1cbe:	80 e0       	ldi	r24, 0x00	; 0
    1cc0:	cf 91       	pop	r28
    1cc2:	08 95       	ret

00001cc4 <EVENT_USB_Device_Connect>:
    if (!USB_IsInitialized) {
    1cc4:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <USB_IsInitialized>
    1cc8:	81 11       	cpse	r24, r1
    1cca:	09 c0       	rjmp	.+18     	; 0x1cde <EVENT_USB_Device_Connect+0x1a>
        USB_Disable();
    1ccc:	0e 94 0b 12 	call	0x2416	; 0x2416 <USB_Disable>
        USB_Init();
    1cd0:	0e 94 68 12 	call	0x24d0	; 0x24d0 <USB_Init>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
    1cd4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <actionmaps+0x7f98e2>
    1cd8:	84 60       	ori	r24, 0x04	; 4
    1cda:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <actionmaps+0x7f98e2>
}
    1cde:	08 95       	ret

00001ce0 <EVENT_USB_Device_Disconnect>:
    USB_IsInitialized = false;
    1ce0:	10 92 76 03 	sts	0x0376, r1	; 0x800376 <USB_IsInitialized>
}
    1ce4:	08 95       	ret

00001ce6 <EVENT_USB_Device_Reset>:
}
    1ce6:	08 95       	ret

00001ce8 <EVENT_USB_Device_StartOfFrame>:
    1ce8:	08 95       	ret

00001cea <EVENT_USB_Device_ConfigurationChanged>:
				return Endpoint_ConfigureEndpoint_Prv(Number,
    1cea:	42 e0       	ldi	r20, 0x02	; 2
    1cec:	61 ec       	ldi	r22, 0xC1	; 193
    1cee:	81 e0       	ldi	r24, 0x01	; 1
    1cf0:	0e 94 87 11 	call	0x230e	; 0x230e <Endpoint_ConfigureEndpoint_Prv>
    1cf4:	42 e0       	ldi	r20, 0x02	; 2
    1cf6:	61 ec       	ldi	r22, 0xC1	; 193
    1cf8:	82 e0       	ldi	r24, 0x02	; 2
    1cfa:	0e 94 87 11 	call	0x230e	; 0x230e <Endpoint_ConfigureEndpoint_Prv>
    1cfe:	42 e0       	ldi	r20, 0x02	; 2
    1d00:	61 ec       	ldi	r22, 0xC1	; 193
    1d02:	83 e0       	ldi	r24, 0x03	; 3
    1d04:	0e 94 87 11 	call	0x230e	; 0x230e <Endpoint_ConfigureEndpoint_Prv>
    1d08:	42 e2       	ldi	r20, 0x22	; 34
    1d0a:	61 ec       	ldi	r22, 0xC1	; 193
    1d0c:	84 e0       	ldi	r24, 0x04	; 4
    1d0e:	0c 94 87 11 	jmp	0x230e	; 0x230e <Endpoint_ConfigureEndpoint_Prv>

00001d12 <EVENT_USB_Device_ControlRequest>:
    switch (USB_ControlRequest.bRequest)
    1d12:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <USB_ControlRequest+0x1>
    1d16:	89 30       	cpi	r24, 0x09	; 9
    1d18:	81 f1       	breq	.+96     	; 0x1d7a <EVENT_USB_Device_ControlRequest+0x68>
    1d1a:	48 f4       	brcc	.+18     	; 0x1d2e <EVENT_USB_Device_ControlRequest+0x1c>
    1d1c:	82 30       	cpi	r24, 0x02	; 2
    1d1e:	09 f4       	brne	.+2      	; 0x1d22 <EVENT_USB_Device_ControlRequest+0x10>
    1d20:	91 c0       	rjmp	.+290    	; 0x1e44 <EVENT_USB_Device_ControlRequest+0x132>
    1d22:	83 30       	cpi	r24, 0x03	; 3
    1d24:	09 f4       	brne	.+2      	; 0x1d28 <EVENT_USB_Device_ControlRequest+0x16>
    1d26:	4c c0       	rjmp	.+152    	; 0x1dc0 <EVENT_USB_Device_ControlRequest+0xae>
    1d28:	81 30       	cpi	r24, 0x01	; 1
    1d2a:	41 f0       	breq	.+16     	; 0x1d3c <EVENT_USB_Device_ControlRequest+0x2a>
    1d2c:	08 95       	ret
    1d2e:	8a 30       	cpi	r24, 0x0A	; 10
    1d30:	09 f4       	brne	.+2      	; 0x1d34 <EVENT_USB_Device_ControlRequest+0x22>
    1d32:	78 c0       	rjmp	.+240    	; 0x1e24 <EVENT_USB_Device_ControlRequest+0x112>
    1d34:	8b 30       	cpi	r24, 0x0B	; 11
    1d36:	09 f4       	brne	.+2      	; 0x1d3a <EVENT_USB_Device_ControlRequest+0x28>
    1d38:	5e c0       	rjmp	.+188    	; 0x1df6 <EVENT_USB_Device_ControlRequest+0xe4>
    1d3a:	08 95       	ret
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1d3c:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <USB_ControlRequest>
    1d40:	81 3a       	cpi	r24, 0xA1	; 161
    1d42:	e9 f5       	brne	.+122    	; 0x1dbe <EVENT_USB_Device_ControlRequest+0xac>
				UEINTX &= ~(1 << RXSTPI);
    1d44:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    1d48:	87 7f       	andi	r24, 0xF7	; 247
    1d4a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <actionmaps+0x7f98e8>
                switch (USB_ControlRequest.wIndex) {
    1d4e:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <USB_ControlRequest+0x4>
    1d52:	90 91 7d 03 	lds	r25, 0x037D	; 0x80037d <USB_ControlRequest+0x5>
    1d56:	89 2b       	or	r24, r25
    1d58:	61 f4       	brne	.+24     	; 0x1d72 <EVENT_USB_Device_ControlRequest+0x60>
                    ReportSize = sizeof(keyboard_report_sent);
    1d5a:	68 e0       	ldi	r22, 0x08	; 8
                    ReportData = (uint8_t*)&keyboard_report_sent;
    1d5c:	86 e7       	ldi	r24, 0x76	; 118
    1d5e:	92 e0       	ldi	r25, 0x02	; 2
                Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    1d60:	70 e0       	ldi	r23, 0x00	; 0
    1d62:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <Endpoint_Write_Control_Stream_LE>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1d66:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    1d6a:	8b 77       	andi	r24, 0x7B	; 123
    1d6c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <actionmaps+0x7f98e8>
			}
    1d70:	08 95       	ret
    uint8_t  ReportSize = 0;
    1d72:	60 e0       	ldi	r22, 0x00	; 0
    uint8_t* ReportData = NULL;
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	80 e0       	ldi	r24, 0x00	; 0
    1d78:	f3 cf       	rjmp	.-26     	; 0x1d60 <EVENT_USB_Device_ControlRequest+0x4e>
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1d7a:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <USB_ControlRequest>
    1d7e:	81 32       	cpi	r24, 0x21	; 33
    1d80:	f1 f4       	brne	.+60     	; 0x1dbe <EVENT_USB_Device_ControlRequest+0xac>
                switch (USB_ControlRequest.wIndex) {
    1d82:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <USB_ControlRequest+0x4>
    1d86:	90 91 7d 03 	lds	r25, 0x037D	; 0x80037d <USB_ControlRequest+0x5>
    1d8a:	89 2b       	or	r24, r25
    1d8c:	c1 f4       	brne	.+48     	; 0x1dbe <EVENT_USB_Device_ControlRequest+0xac>
				UEINTX &= ~(1 << RXSTPI);
    1d8e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    1d92:	87 7f       	andi	r24, 0xF7	; 247
    1d94:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <actionmaps+0x7f98e8>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1d98:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
                    while (!(Endpoint_IsOUTReceived())) {
    1d9c:	82 ff       	sbrs	r24, 2
    1d9e:	0b c0       	rjmp	.+22     	; 0x1db6 <EVENT_USB_Device_ControlRequest+0xa4>
				return UEDATX;
    1da0:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <actionmaps+0x7f98f1>
                    keyboard_led_stats = Endpoint_Read_8();
    1da4:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <keyboard_led_stats>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1da8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    1dac:	8b 77       	andi	r24, 0x7B	; 123
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1dae:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <actionmaps+0x7f98e8>
                Endpoint_ClearStatusStage();
    1db2:	0c 94 bb 11 	jmp	0x2376	; 0x2376 <Endpoint_ClearStatusStage>
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
    1db6:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <USB_DeviceState>
    1dba:	81 11       	cpse	r24, r1
    1dbc:	ed cf       	rjmp	.-38     	; 0x1d98 <EVENT_USB_Device_ControlRequest+0x86>
}
    1dbe:	08 95       	ret
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1dc0:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <USB_ControlRequest>
    1dc4:	81 3a       	cpi	r24, 0xA1	; 161
    1dc6:	d9 f7       	brne	.-10     	; 0x1dbe <EVENT_USB_Device_ControlRequest+0xac>
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    1dc8:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <USB_ControlRequest+0x4>
    1dcc:	90 91 7d 03 	lds	r25, 0x037D	; 0x80037d <USB_ControlRequest+0x5>
    1dd0:	89 2b       	or	r24, r25
    1dd2:	a9 f7       	brne	.-22     	; 0x1dbe <EVENT_USB_Device_ControlRequest+0xac>
				UEINTX &= ~(1 << RXSTPI);
    1dd4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    1dd8:	87 7f       	andi	r24, 0xF7	; 247
    1dda:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <actionmaps+0x7f98e8>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1dde:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
                    while (!(Endpoint_IsINReady()));
    1de2:	80 ff       	sbrs	r24, 0
    1de4:	fc cf       	rjmp	.-8      	; 0x1dde <EVENT_USB_Device_ControlRequest+0xcc>
                    Endpoint_Write_8(keyboard_protocol);
    1de6:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <keyboard_protocol>
				UEDATX = Data;
    1dea:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <actionmaps+0x7f98f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1dee:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    1df2:	8e 77       	andi	r24, 0x7E	; 126
    1df4:	dc cf       	rjmp	.-72     	; 0x1dae <EVENT_USB_Device_ControlRequest+0x9c>
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1df6:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <USB_ControlRequest>
    1dfa:	81 32       	cpi	r24, 0x21	; 33
    1dfc:	01 f7       	brne	.-64     	; 0x1dbe <EVENT_USB_Device_ControlRequest+0xac>
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    1dfe:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <USB_ControlRequest+0x4>
    1e02:	90 91 7d 03 	lds	r25, 0x037D	; 0x80037d <USB_ControlRequest+0x5>
    1e06:	89 2b       	or	r24, r25
    1e08:	d1 f6       	brne	.-76     	; 0x1dbe <EVENT_USB_Device_ControlRequest+0xac>
				UEINTX &= ~(1 << RXSTPI);
    1e0a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    1e0e:	87 7f       	andi	r24, 0xF7	; 247
    1e10:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <actionmaps+0x7f98e8>
                    Endpoint_ClearStatusStage();
    1e14:	0e 94 bb 11 	call	0x2376	; 0x2376 <Endpoint_ClearStatusStage>
                    keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
    1e18:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <USB_ControlRequest+0x2>
    1e1c:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <keyboard_protocol>
                    clear_keyboard();
    1e20:	0c 94 7e 1b 	jmp	0x36fc	; 0x36fc <clear_keyboard>
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1e24:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <USB_ControlRequest>
    1e28:	81 32       	cpi	r24, 0x21	; 33
    1e2a:	49 f6       	brne	.-110    	; 0x1dbe <EVENT_USB_Device_ControlRequest+0xac>
    1e2c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    1e30:	87 7f       	andi	r24, 0xF7	; 247
    1e32:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <actionmaps+0x7f98e8>
                Endpoint_ClearStatusStage();
    1e36:	0e 94 bb 11 	call	0x2376	; 0x2376 <Endpoint_ClearStatusStage>
                keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
    1e3a:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <USB_ControlRequest+0x3>
    1e3e:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <keyboard_idle>
    1e42:	08 95       	ret
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1e44:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <USB_ControlRequest>
    1e48:	81 3a       	cpi	r24, 0xA1	; 161
    1e4a:	09 f0       	breq	.+2      	; 0x1e4e <EVENT_USB_Device_ControlRequest+0x13c>
    1e4c:	b8 cf       	rjmp	.-144    	; 0x1dbe <EVENT_USB_Device_ControlRequest+0xac>
    1e4e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    1e52:	87 7f       	andi	r24, 0xF7	; 247
    1e54:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <actionmaps+0x7f98e8>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1e58:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
                while (!(Endpoint_IsINReady()));
    1e5c:	80 ff       	sbrs	r24, 0
    1e5e:	fc cf       	rjmp	.-8      	; 0x1e58 <EVENT_USB_Device_ControlRequest+0x146>
                Endpoint_Write_8(keyboard_idle);
    1e60:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <keyboard_idle>
    1e64:	c2 cf       	rjmp	.-124    	; 0x1dea <EVENT_USB_Device_ControlRequest+0xd8>

00001e66 <hook_early_init>:
}


/* hooks */
__attribute__((weak))
void hook_early_init(void) {}
    1e66:	08 95       	ret

00001e68 <hook_late_init>:
    1e68:	08 95       	ret

00001e6a <hook_usb_suspend_entry>:
 __attribute__((weak))
void hook_usb_suspend_entry(void)
{
    // Turn off LED to save power and keep its status to resotre it later.
    // LED status will be updated by keyboard_task() in main loop hopefully.
    _led_stats = keyboard_led_stats;
    1e6a:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <keyboard_led_stats>
    1e6e:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <_led_stats>
    keyboard_led_stats = 0;
    1e72:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <keyboard_led_stats>

    // Calling long task here can prevent USB state transition

    matrix_clear();
    1e76:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <matrix_clear>
    clear_keyboard();
    1e7a:	0c 94 7e 1b 	jmp	0x36fc	; 0x36fc <clear_keyboard>

00001e7e <EVENT_USB_Device_Suspend>:
    hook_usb_suspend_entry();
    1e7e:	0c 94 35 0f 	jmp	0x1e6a	; 0x1e6a <hook_usb_suspend_entry>

00001e82 <hook_usb_suspend_loop>:
__attribute__((weak))
void hook_usb_suspend_loop(void)
{
#ifndef LUFA_DEBUG_UART
    // This corrupts debug print when suspend
    suspend_power_down();
    1e82:	0e 94 bc 22 	call	0x4578	; 0x4578 <suspend_power_down>
#endif
    if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
    1e86:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <USB_Device_RemoteWakeupEnabled>
    1e8a:	88 23       	and	r24, r24
    1e8c:	29 f0       	breq	.+10     	; 0x1e98 <hook_usb_suspend_loop+0x16>
    1e8e:	0e 94 e5 22 	call	0x45ca	; 0x45ca <suspend_wakeup_condition>
    1e92:	81 11       	cpse	r24, r1
        USB_Device_SendRemoteWakeup();
    1e94:	0c 94 6d 10 	jmp	0x20da	; 0x20da <USB_Device_SendRemoteWakeup>
    }
}
    1e98:	08 95       	ret

00001e9a <hook_usb_wakeup>:

__attribute__((weak))
void hook_usb_wakeup(void)
{
    suspend_wakeup_init();
    1e9a:	0e 94 f9 22 	call	0x45f2	; 0x45f2 <suspend_wakeup_init>
#ifdef SLEEP_LED_ENABLE
    sleep_led_disable();
#endif

    // Restore LED status and update at keyboard_task() in main loop
    keyboard_led_stats = _led_stats;
    1e9e:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <_led_stats>
    1ea2:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <keyboard_led_stats>

    // Calling long task here can prevent USB state transition
}
    1ea6:	08 95       	ret

00001ea8 <EVENT_USB_Device_WakeUp>:
    hook_usb_wakeup();
    1ea8:	0c 94 4d 0f 	jmp	0x1e9a	; 0x1e9a <hook_usb_wakeup>

00001eac <hook_usb_startup_wait_loop>:
    1eac:	08 95       	ret

00001eae <main>:
    MCUSR &= ~(1 << WDRF);
    1eae:	84 b7       	in	r24, 0x34	; 52
    1eb0:	87 7f       	andi	r24, 0xF7	; 247
    1eb2:	84 bf       	out	0x34, r24	; 52
    1eb4:	0f b6       	in	r0, 0x3f	; 63
    1eb6:	f8 94       	cli
    1eb8:	a8 95       	wdr
    1eba:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <actionmaps+0x7f9860>
    1ebe:	88 61       	ori	r24, 0x18	; 24
    1ec0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <actionmaps+0x7f9860>
    1ec4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <actionmaps+0x7f9860>
    1ec8:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    1eca:	80 e8       	ldi	r24, 0x80	; 128
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	0f b6       	in	r0, 0x3f	; 63
    1ed0:	f8 94       	cli
    1ed2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <actionmaps+0x7f9861>
    1ed6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <actionmaps+0x7f9861>
    1eda:	0f be       	out	0x3f, r0	; 63
    print_set_sendchar(sendchar);
    1edc:	8d ee       	ldi	r24, 0xED	; 237
    1ede:	9d e0       	ldi	r25, 0x0D	; 13
    1ee0:	0e 94 8d 22 	call	0x451a	; 0x451a <print_set_sendchar>
    host_set_driver(&lufa_driver);
    1ee4:	89 e1       	ldi	r24, 0x19	; 25
    1ee6:	91 e0       	ldi	r25, 0x01	; 1
    1ee8:	0e 94 e7 14 	call	0x29ce	; 0x29ce <host_set_driver>
    print("\n\nTMK:" STR(TMK_VERSION) "/LUFA\n\n");
    1eec:	89 eb       	ldi	r24, 0xB9	; 185
    1eee:	92 e0       	ldi	r25, 0x02	; 2
    1ef0:	0e 94 1d 06 	call	0xc3a	; 0xc3a <xputs>
    hook_early_init();
    1ef4:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <hook_early_init>
    keyboard_setup();
    1ef8:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <keyboard_setup>
    USB_Disable();
    1efc:	0e 94 0b 12 	call	0x2416	; 0x2416 <USB_Disable>
    USB_Init();
    1f00:	0e 94 68 12 	call	0x24d0	; 0x24d0 <USB_Init>
    1f04:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <actionmaps+0x7f98e2>
    1f08:	84 60       	ori	r24, 0x04	; 4
    1f0a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <actionmaps+0x7f98e2>
    sei();
    1f0e:	78 94       	sei
    keyboard_init();
    1f10:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <keyboard_init>
    while (USB_DeviceState != DEVICE_STATE_Configured) {
    1f14:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <USB_DeviceState>
    1f18:	84 30       	cpi	r24, 0x04	; 4
    1f1a:	09 f0       	breq	.+2      	; 0x1f1e <main+0x70>
    1f1c:	44 c0       	rjmp	.+136    	; 0x1fa6 <main+0xf8>
    print("\nUSB configured.\n");
    1f1e:	87 ea       	ldi	r24, 0xA7	; 167
    1f20:	92 e0       	ldi	r25, 0x02	; 2
    1f22:	0e 94 1d 06 	call	0xc3a	; 0xc3a <xputs>
    hook_late_init();
    1f26:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <hook_late_init>
    print("\nKeyboard start.\n");
    1f2a:	85 e9       	ldi	r24, 0x95	; 149
    1f2c:	92 e0       	ldi	r25, 0x02	; 2
    1f2e:	0e 94 1d 06 	call	0xc3a	; 0xc3a <xputs>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f32:	c4 e0       	ldi	r28, 0x04	; 4
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
    1f34:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <USB_DeviceState>
    1f38:	85 30       	cpi	r24, 0x05	; 5
    1f3a:	c1 f1       	breq	.+112    	; 0x1fac <main+0xfe>
        keyboard_task();
    1f3c:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <keyboard_task>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1f40:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <actionmaps+0x7f98e4>
    1f44:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <actionmaps+0x7f98e5>
    if (fn == USB_Device_GetFrameNumber()) {
    1f48:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <fn.4933>
    1f4c:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <fn.4933+0x1>
    1f50:	28 17       	cp	r18, r24
    1f52:	39 07       	cpc	r19, r25
    1f54:	79 f3       	breq	.-34     	; 0x1f34 <main+0x86>
    1f56:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <actionmaps+0x7f98e4>
    1f5a:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <actionmaps+0x7f98e5>
    fn = USB_Device_GetFrameNumber();
    1f5e:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <fn.4933+0x1>
    1f62:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <fn.4933>
    if (!console_is_ready())
    1f66:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <console_is_ready>
    1f6a:	88 23       	and	r24, r24
    1f6c:	19 f3       	breq	.-58     	; 0x1f34 <main+0x86>
    if (USB_DeviceState != DEVICE_STATE_Configured)
    1f6e:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <USB_DeviceState>
    1f72:	84 30       	cpi	r24, 0x04	; 4
    1f74:	f9 f6       	brne	.-66     	; 0x1f34 <main+0x86>
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1f76:	90 91 e9 00 	lds	r25, 0x00E9	; 0x8000e9 <actionmaps+0x7f98e9>
    1f7a:	9f 70       	andi	r25, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1f7c:	20 91 ec 00 	lds	r18, 0x00EC	; 0x8000ec <actionmaps+0x7f98ec>
    1f80:	82 2f       	mov	r24, r18
    1f82:	81 70       	andi	r24, 0x01	; 1
    1f84:	20 fd       	sbrc	r18, 0
    1f86:	80 e8       	ldi	r24, 0x80	; 128
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1f88:	89 2b       	or	r24, r25
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f8a:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <actionmaps+0x7f98e9>
				return ((UECONX & (1 << EPEN)) ? true : false);
    1f8e:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <actionmaps+0x7f98eb>
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    1f92:	90 ff       	sbrs	r25, 0
    1f94:	04 c0       	rjmp	.+8      	; 0x1f9e <main+0xf0>
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1f96:	90 91 ee 00 	lds	r25, 0x00EE	; 0x8000ee <actionmaps+0x7f98ee>
    1f9a:	97 fd       	sbrc	r25, 7
    1f9c:	26 c0       	rjmp	.+76     	; 0x1fea <main+0x13c>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f9e:	8f 70       	andi	r24, 0x0F	; 15
    1fa0:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <actionmaps+0x7f98e9>
			}
    1fa4:	c7 cf       	rjmp	.-114    	; 0x1f34 <main+0x86>
        hook_usb_startup_wait_loop();
    1fa6:	0e 94 56 0f 	call	0x1eac	; 0x1eac <hook_usb_startup_wait_loop>
    1faa:	b4 cf       	rjmp	.-152    	; 0x1f14 <main+0x66>
            hook_usb_suspend_loop();
    1fac:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <hook_usb_suspend_loop>
    1fb0:	c1 cf       	rjmp	.-126    	; 0x1f34 <main+0x86>
    uint8_t data = buf->buffer[buf->tail];
    1fb2:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <sendbuf>
    1fb6:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <sendbuf+0x1>
    1fba:	e9 0f       	add	r30, r25
    1fbc:	f1 1d       	adc	r31, r1
    1fbe:	20 81       	ld	r18, Z
    buf->tail++;
    1fc0:	9f 5f       	subi	r25, 0xFF	; 255
    buf->tail &= buf->size_mask;
    1fc2:	30 91 18 01 	lds	r19, 0x0118	; 0x800118 <sendbuf+0x4>
    1fc6:	93 23       	and	r25, r19
    1fc8:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <sendbuf+0x3>
				UEDATX = Data;
    1fcc:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <actionmaps+0x7f98f1>
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1fd0:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
        if (!Endpoint_IsReadWriteAllowed() && Endpoint_IsINReady()) {
    1fd4:	95 fd       	sbrc	r25, 5
    1fd6:	09 c0       	rjmp	.+18     	; 0x1fea <main+0x13c>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1fd8:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    1fdc:	90 ff       	sbrs	r25, 0
    1fde:	05 c0       	rjmp	.+10     	; 0x1fea <main+0x13c>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1fe0:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    1fe4:	9e 77       	andi	r25, 0x7E	; 126
    1fe6:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <actionmaps+0x7f98e8>
    return (buf->head == buf->tail);
    1fea:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <sendbuf+0x3>
    while (!ringbuf_is_empty(&sendbuf) && Endpoint_IsReadWriteAllowed()) {
    1fee:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <sendbuf+0x2>
    1ff2:	29 17       	cp	r18, r25
    1ff4:	21 f0       	breq	.+8      	; 0x1ffe <main+0x150>
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1ff6:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    1ffa:	25 fd       	sbrc	r18, 5
    1ffc:	da cf       	rjmp	.-76     	; 0x1fb2 <main+0x104>
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1ffe:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <actionmaps+0x7f98f3>
    2002:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <actionmaps+0x7f98f2>
    2006:	39 2f       	mov	r19, r25
    if (Endpoint_BytesInEndpoint() && Endpoint_IsINReady()) {
    2008:	23 2b       	or	r18, r19
    200a:	49 f2       	breq	.-110    	; 0x1f9e <main+0xf0>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    200c:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    2010:	90 ff       	sbrs	r25, 0
    2012:	c5 cf       	rjmp	.-118    	; 0x1f9e <main+0xf0>
				return ((UEINTX & (1 << RWAL)) ? true : false);
    2014:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
        while (Endpoint_IsReadWriteAllowed()) {
    2018:	95 fd       	sbrc	r25, 5
    201a:	06 c0       	rjmp	.+12     	; 0x2028 <main+0x17a>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    201c:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    2020:	9e 77       	andi	r25, 0x7E	; 126
    2022:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <actionmaps+0x7f98e8>
			}
    2026:	bb cf       	rjmp	.-138    	; 0x1f9e <main+0xf0>
				UEDATX = Data;
    2028:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <actionmaps+0x7f98f1>
			}
    202c:	f3 cf       	rjmp	.-26     	; 0x2014 <main+0x166>

0000202e <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
    202e:	9c 01       	movw	r18, r24
    2030:	da 01       	movw	r26, r20
    const uint8_t  DescriptorType   = (wValue >> 8);
    2032:	89 2f       	mov	r24, r25
    2034:	99 27       	eor	r25, r25
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    2036:	83 30       	cpi	r24, 0x03	; 3
    2038:	91 05       	cpc	r25, r1
    203a:	c1 f0       	breq	.+48     	; 0x206c <CALLBACK_USB_GetDescriptor+0x3e>
    203c:	68 f4       	brcc	.+26     	; 0x2058 <CALLBACK_USB_GetDescriptor+0x2a>
    203e:	81 30       	cpi	r24, 0x01	; 1
    2040:	91 05       	cpc	r25, r1
    2042:	09 f4       	brne	.+2      	; 0x2046 <CALLBACK_USB_GetDescriptor+0x18>
    2044:	45 c0       	rjmp	.+138    	; 0x20d0 <CALLBACK_USB_GetDescriptor+0xa2>
    2046:	02 97       	sbiw	r24, 0x02	; 2
    2048:	61 f4       	brne	.+24     	; 0x2062 <CALLBACK_USB_GetDescriptor+0x34>
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
    204a:	84 e7       	ldi	r24, 0x74	; 116
    204c:	90 e0       	ldi	r25, 0x00	; 0
            Address = &ConfigurationDescriptor;
    204e:	23 e1       	ldi	r18, 0x13	; 19
    2050:	33 e0       	ldi	r19, 0x03	; 3
#endif
            }
            break;
    }

    *DescriptorAddress = Address;
    2052:	2d 93       	st	X+, r18
    2054:	3c 93       	st	X, r19
    return Size;
}
    2056:	08 95       	ret
    switch (DescriptorType)
    2058:	81 32       	cpi	r24, 0x21	; 33
    205a:	91 05       	cpc	r25, r1
    205c:	e1 f0       	breq	.+56     	; 0x2096 <CALLBACK_USB_GetDescriptor+0x68>
    205e:	82 97       	sbiw	r24, 0x22	; 34
    2060:	39 f1       	breq	.+78     	; 0x20b0 <CALLBACK_USB_GetDescriptor+0x82>
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	80 e0       	ldi	r24, 0x00	; 0
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	20 e0       	ldi	r18, 0x00	; 0
    206a:	f3 cf       	rjmp	.-26     	; 0x2052 <CALLBACK_USB_GetDescriptor+0x24>
            switch (DescriptorIndex )
    206c:	c9 01       	movw	r24, r18
    206e:	99 27       	eor	r25, r25
    2070:	21 30       	cpi	r18, 0x01	; 1
    2072:	59 f0       	breq	.+22     	; 0x208a <CALLBACK_USB_GetDescriptor+0x5c>
    2074:	82 30       	cpi	r24, 0x02	; 2
    2076:	91 05       	cpc	r25, r1
    2078:	59 f0       	breq	.+22     	; 0x2090 <CALLBACK_USB_GetDescriptor+0x62>
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
    207a:	ef e0       	ldi	r30, 0x0F	; 15
    207c:	f3 e0       	ldi	r31, 0x03	; 3
    207e:	89 2b       	or	r24, r25
    2080:	81 f7       	brne	.-32     	; 0x2062 <CALLBACK_USB_GetDescriptor+0x34>
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    2082:	84 91       	lpm	r24, Z
    2084:	90 e0       	ldi	r25, 0x00	; 0
                    Address = &ProductString;
    2086:	9f 01       	movw	r18, r30
                    break;
    2088:	e4 cf       	rjmp	.-56     	; 0x2052 <CALLBACK_USB_GetDescriptor+0x24>
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    208a:	ef ef       	ldi	r30, 0xFF	; 255
    208c:	f2 e0       	ldi	r31, 0x02	; 2
    208e:	f9 cf       	rjmp	.-14     	; 0x2082 <CALLBACK_USB_GetDescriptor+0x54>
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    2090:	ef ec       	ldi	r30, 0xCF	; 207
    2092:	f2 e0       	ldi	r31, 0x02	; 2
    2094:	f6 cf       	rjmp	.-20     	; 0x2082 <CALLBACK_USB_GetDescriptor+0x54>
            switch (wIndex) {
    2096:	64 30       	cpi	r22, 0x04	; 4
    2098:	20 f7       	brcc	.-56     	; 0x2062 <CALLBACK_USB_GetDescriptor+0x34>
    209a:	e6 2f       	mov	r30, r22
    209c:	f0 e0       	ldi	r31, 0x00	; 0
    209e:	ee 0f       	add	r30, r30
    20a0:	ff 1f       	adc	r31, r31
    20a2:	e1 5c       	subi	r30, 0xC1	; 193
    20a4:	fe 4f       	sbci	r31, 0xFE	; 254
    20a6:	20 81       	ld	r18, Z
    20a8:	31 81       	ldd	r19, Z+1	; 0x01
    switch (DescriptorType)
    20aa:	89 e0       	ldi	r24, 0x09	; 9
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	d1 cf       	rjmp	.-94     	; 0x2052 <CALLBACK_USB_GetDescriptor+0x24>
            switch (wIndex) {
    20b0:	64 30       	cpi	r22, 0x04	; 4
    20b2:	b8 f6       	brcc	.-82     	; 0x2062 <CALLBACK_USB_GetDescriptor+0x34>
    20b4:	70 e0       	ldi	r23, 0x00	; 0
    20b6:	fb 01       	movw	r30, r22
    20b8:	ee 0f       	add	r30, r30
    20ba:	ff 1f       	adc	r31, r31
    20bc:	e9 5c       	subi	r30, 0xC9	; 201
    20be:	fe 4f       	sbci	r31, 0xFE	; 254
    20c0:	20 81       	ld	r18, Z
    20c2:	31 81       	ldd	r19, Z+1	; 0x01
    20c4:	6d 5c       	subi	r22, 0xCD	; 205
    20c6:	7e 4f       	sbci	r23, 0xFE	; 254
    20c8:	fb 01       	movw	r30, r22
    20ca:	80 81       	ld	r24, Z
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	c1 cf       	rjmp	.-126    	; 0x2052 <CALLBACK_USB_GetDescriptor+0x24>
    switch (DescriptorType)
    20d0:	82 e1       	ldi	r24, 0x12	; 18
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	27 e8       	ldi	r18, 0x87	; 135
    20d6:	33 e0       	ldi	r19, 0x03	; 3
    20d8:	bc cf       	rjmp	.-136    	; 0x2052 <CALLBACK_USB_GetDescriptor+0x24>

000020da <USB_Device_SendRemoteWakeup>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    20da:	80 e1       	ldi	r24, 0x10	; 16
    20dc:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    20de:	82 e1       	ldi	r24, 0x12	; 18
    20e0:	89 bd       	out	0x29, r24	; 41
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    20e2:	09 b4       	in	r0, 0x29	; 41
    20e4:	00 fe       	sbrs	r0, 0
    20e6:	fd cf       	rjmp	.-6      	; 0x20e2 <USB_Device_SendRemoteWakeup+0x8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    20e8:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <actionmaps+0x7f98d8>
    20ec:	8f 7d       	andi	r24, 0xDF	; 223
    20ee:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <actionmaps+0x7f98d8>
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
    20f2:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <actionmaps+0x7f98e0>
    20f6:	82 60       	ori	r24, 0x02	; 2
    20f8:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <actionmaps+0x7f98e0>
	while (UDCON & (1 << RMWKUP));
    20fc:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <actionmaps+0x7f98e0>
    2100:	81 fd       	sbrc	r24, 1
    2102:	fc cf       	rjmp	.-8      	; 0x20fc <USB_Device_SendRemoteWakeup+0x22>
}
    2104:	08 95       	ret

00002106 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    2106:	af 92       	push	r10
    2108:	bf 92       	push	r11
    210a:	cf 92       	push	r12
    210c:	df 92       	push	r13
    210e:	ff 92       	push	r15
    2110:	0f 93       	push	r16
    2112:	1f 93       	push	r17
    2114:	cf 93       	push	r28
    2116:	df 93       	push	r29
    2118:	6c 01       	movw	r12, r24
    211a:	eb 01       	movw	r28, r22
    211c:	8a 01       	movw	r16, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    211e:	0e 94 da 11 	call	0x23b4	; 0x23b4 <Endpoint_WaitUntilReady>
    2122:	f8 2e       	mov	r15, r24
    2124:	81 11       	cpse	r24, r1
    2126:	23 c0       	rjmp	.+70     	; 0x216e <Endpoint_Write_Stream_LE+0x68>
	  return ErrorCode;

	if (BytesProcessed != NULL)
    2128:	01 15       	cp	r16, r1
    212a:	11 05       	cpc	r17, r1
    212c:	39 f0       	breq	.+14     	; 0x213c <Endpoint_Write_Stream_LE+0x36>
	{
		Length -= *BytesProcessed;
    212e:	f8 01       	movw	r30, r16
    2130:	80 81       	ld	r24, Z
    2132:	91 81       	ldd	r25, Z+1	; 0x01
    2134:	c8 1b       	sub	r28, r24
    2136:	d9 0b       	sbc	r29, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    2138:	c8 0e       	add	r12, r24
    213a:	d9 1e       	adc	r13, r25
{
    213c:	b1 2c       	mov	r11, r1
    213e:	a1 2c       	mov	r10, r1
	}

	while (Length)
    2140:	20 97       	sbiw	r28, 0x00	; 0
    2142:	a9 f0       	breq	.+42     	; 0x216e <Endpoint_Write_Stream_LE+0x68>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    2144:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    2148:	85 fd       	sbrc	r24, 5
    214a:	22 c0       	rjmp	.+68     	; 0x2190 <Endpoint_Write_Stream_LE+0x8a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    214c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    2150:	8e 77       	andi	r24, 0x7E	; 126
    2152:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <actionmaps+0x7f98e8>

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    2156:	01 15       	cp	r16, r1
    2158:	11 05       	cpc	r17, r1
    215a:	a1 f0       	breq	.+40     	; 0x2184 <Endpoint_Write_Stream_LE+0x7e>
			{
				*BytesProcessed += BytesInTransfer;
    215c:	f8 01       	movw	r30, r16
    215e:	80 81       	ld	r24, Z
    2160:	91 81       	ldd	r25, Z+1	; 0x01
    2162:	a8 0e       	add	r10, r24
    2164:	b9 1e       	adc	r11, r25
    2166:	b1 82       	std	Z+1, r11	; 0x01
    2168:	a0 82       	st	Z, r10
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    216a:	85 e0       	ldi	r24, 0x05	; 5
    216c:	f8 2e       	mov	r15, r24
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    216e:	8f 2d       	mov	r24, r15
    2170:	df 91       	pop	r29
    2172:	cf 91       	pop	r28
    2174:	1f 91       	pop	r17
    2176:	0f 91       	pop	r16
    2178:	ff 90       	pop	r15
    217a:	df 90       	pop	r13
    217c:	cf 90       	pop	r12
    217e:	bf 90       	pop	r11
    2180:	af 90       	pop	r10
    2182:	08 95       	ret
			if ((ErrorCode = Endpoint_WaitUntilReady()))
    2184:	0e 94 da 11 	call	0x23b4	; 0x23b4 <Endpoint_WaitUntilReady>
    2188:	88 23       	and	r24, r24
    218a:	d1 f2       	breq	.-76     	; 0x2140 <Endpoint_Write_Stream_LE+0x3a>
    218c:	f8 2e       	mov	r15, r24
    218e:	ef cf       	rjmp	.-34     	; 0x216e <Endpoint_Write_Stream_LE+0x68>
			TEMPLATE_TRANSFER_BYTE(DataStream);
    2190:	f6 01       	movw	r30, r12
    2192:	81 91       	ld	r24, Z+
    2194:	6f 01       	movw	r12, r30
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2196:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <actionmaps+0x7f98f1>
			Length--;
    219a:	21 97       	sbiw	r28, 0x01	; 1
			BytesInTransfer++;
    219c:	ff ef       	ldi	r31, 0xFF	; 255
    219e:	af 1a       	sub	r10, r31
    21a0:	bf 0a       	sbc	r11, r31
    21a2:	ce cf       	rjmp	.-100    	; 0x2140 <Endpoint_Write_Stream_LE+0x3a>

000021a4 <Endpoint_Write_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    21a4:	fc 01       	movw	r30, r24
    21a6:	cb 01       	movw	r24, r22
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    21a8:	20 91 7e 03 	lds	r18, 0x037E	; 0x80037e <USB_ControlRequest+0x6>
    21ac:	30 91 7f 03 	lds	r19, 0x037F	; 0x80037f <USB_ControlRequest+0x7>
    21b0:	26 17       	cp	r18, r22
    21b2:	37 07       	cpc	r19, r23
    21b4:	90 f0       	brcs	.+36     	; 0x21da <Endpoint_Write_Control_Stream_LE+0x36>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    21b6:	00 97       	sbiw	r24, 0x00	; 0
    21b8:	29 f4       	brne	.+10     	; 0x21c4 <Endpoint_Write_Control_Stream_LE+0x20>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    21ba:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    21be:	2e 77       	andi	r18, 0x7E	; 126
    21c0:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <actionmaps+0x7f98e8>
    21c4:	40 e0       	ldi	r20, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    21c6:	00 97       	sbiw	r24, 0x00	; 0
    21c8:	51 f4       	brne	.+20     	; 0x21de <Endpoint_Write_Control_Stream_LE+0x3a>
    21ca:	41 11       	cpse	r20, r1
    21cc:	08 c0       	rjmp	.+16     	; 0x21de <Endpoint_Write_Control_Stream_LE+0x3a>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    21ce:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    21d2:	82 ff       	sbrs	r24, 2
    21d4:	31 c0       	rjmp	.+98     	; 0x2238 <Endpoint_Write_Control_Stream_LE+0x94>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    21d6:	80 e0       	ldi	r24, 0x00	; 0
    21d8:	08 95       	ret
    21da:	c9 01       	movw	r24, r18
    21dc:	f3 cf       	rjmp	.-26     	; 0x21c4 <Endpoint_Write_Control_Stream_LE+0x20>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    21de:	20 91 77 03 	lds	r18, 0x0377	; 0x800377 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    21e2:	22 23       	and	r18, r18
    21e4:	a9 f1       	breq	.+106    	; 0x2250 <Endpoint_Write_Control_Stream_LE+0xac>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    21e6:	25 30       	cpi	r18, 0x05	; 5
    21e8:	a9 f1       	breq	.+106    	; 0x2254 <Endpoint_Write_Control_Stream_LE+0xb0>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    21ea:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
		else if (Endpoint_IsSETUPReceived())
    21ee:	23 fd       	sbrc	r18, 3
    21f0:	2d c0       	rjmp	.+90     	; 0x224c <Endpoint_Write_Control_Stream_LE+0xa8>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    21f2:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
		else if (Endpoint_IsOUTReceived())
    21f6:	22 fd       	sbrc	r18, 2
    21f8:	ea cf       	rjmp	.-44     	; 0x21ce <Endpoint_Write_Control_Stream_LE+0x2a>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    21fa:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
		if (Endpoint_IsINReady())
    21fe:	20 ff       	sbrs	r18, 0
    2200:	e2 cf       	rjmp	.-60     	; 0x21c6 <Endpoint_Write_Control_Stream_LE+0x22>
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    2202:	30 91 f3 00 	lds	r19, 0x00F3	; 0x8000f3 <actionmaps+0x7f98f3>
    2206:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <actionmaps+0x7f98f2>
			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    220a:	00 97       	sbiw	r24, 0x00	; 0
    220c:	19 f0       	breq	.+6      	; 0x2214 <Endpoint_Write_Control_Stream_LE+0x70>
    220e:	28 30       	cpi	r18, 0x08	; 8
    2210:	31 05       	cpc	r19, r1
    2212:	58 f0       	brcs	.+22     	; 0x222a <Endpoint_Write_Control_Stream_LE+0x86>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    2214:	41 e0       	ldi	r20, 0x01	; 1
    2216:	28 30       	cpi	r18, 0x08	; 8
    2218:	31 05       	cpc	r19, r1
    221a:	09 f0       	breq	.+2      	; 0x221e <Endpoint_Write_Control_Stream_LE+0x7a>
    221c:	40 e0       	ldi	r20, 0x00	; 0
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    221e:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    2222:	2e 77       	andi	r18, 0x7E	; 126
    2224:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <actionmaps+0x7f98e8>
			}
    2228:	ce cf       	rjmp	.-100    	; 0x21c6 <Endpoint_Write_Control_Stream_LE+0x22>
				TEMPLATE_TRANSFER_BYTE(DataStream);
    222a:	41 91       	ld	r20, Z+
				UEDATX = Data;
    222c:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <actionmaps+0x7f98f1>
				Length--;
    2230:	01 97       	sbiw	r24, 0x01	; 1
				BytesInEndpoint++;
    2232:	2f 5f       	subi	r18, 0xFF	; 255
    2234:	3f 4f       	sbci	r19, 0xFF	; 255
    2236:	e9 cf       	rjmp	.-46     	; 0x220a <Endpoint_Write_Control_Stream_LE+0x66>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2238:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    223c:	88 23       	and	r24, r24
    223e:	41 f0       	breq	.+16     	; 0x2250 <Endpoint_Write_Control_Stream_LE+0xac>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2240:	85 30       	cpi	r24, 0x05	; 5
    2242:	41 f0       	breq	.+16     	; 0x2254 <Endpoint_Write_Control_Stream_LE+0xb0>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2244:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
		else if (Endpoint_IsSETUPReceived())
    2248:	83 ff       	sbrs	r24, 3
    224a:	c1 cf       	rjmp	.-126    	; 0x21ce <Endpoint_Write_Control_Stream_LE+0x2a>
		  return ENDPOINT_RWCSTREAM_HostAborted;
    224c:	81 e0       	ldi	r24, 0x01	; 1
}
    224e:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    2250:	82 e0       	ldi	r24, 0x02	; 2
    2252:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    2254:	83 e0       	ldi	r24, 0x03	; 3
    2256:	08 95       	ret

00002258 <Endpoint_Write_Control_PStream_LE>:
{
    2258:	fc 01       	movw	r30, r24
    225a:	cb 01       	movw	r24, r22
	if (Length > USB_ControlRequest.wLength)
    225c:	20 91 7e 03 	lds	r18, 0x037E	; 0x80037e <USB_ControlRequest+0x6>
    2260:	30 91 7f 03 	lds	r19, 0x037F	; 0x80037f <USB_ControlRequest+0x7>
    2264:	26 17       	cp	r18, r22
    2266:	37 07       	cpc	r19, r23
    2268:	90 f0       	brcs	.+36     	; 0x228e <Endpoint_Write_Control_PStream_LE+0x36>
	else if (!(Length))
    226a:	00 97       	sbiw	r24, 0x00	; 0
    226c:	29 f4       	brne	.+10     	; 0x2278 <Endpoint_Write_Control_PStream_LE+0x20>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    226e:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    2272:	2e 77       	andi	r18, 0x7E	; 126
    2274:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <actionmaps+0x7f98e8>
    2278:	40 e0       	ldi	r20, 0x00	; 0
	while (Length || LastPacketFull)
    227a:	00 97       	sbiw	r24, 0x00	; 0
    227c:	51 f4       	brne	.+20     	; 0x2292 <Endpoint_Write_Control_PStream_LE+0x3a>
    227e:	41 11       	cpse	r20, r1
    2280:	08 c0       	rjmp	.+16     	; 0x2292 <Endpoint_Write_Control_PStream_LE+0x3a>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2282:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
	while (!(Endpoint_IsOUTReceived()))
    2286:	82 ff       	sbrs	r24, 2
    2288:	32 c0       	rjmp	.+100    	; 0x22ee <Endpoint_Write_Control_PStream_LE+0x96>
	return ENDPOINT_RWCSTREAM_NoError;
    228a:	80 e0       	ldi	r24, 0x00	; 0
    228c:	08 95       	ret
    228e:	c9 01       	movw	r24, r18
    2290:	f3 cf       	rjmp	.-26     	; 0x2278 <Endpoint_Write_Control_PStream_LE+0x20>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2292:	20 91 77 03 	lds	r18, 0x0377	; 0x800377 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2296:	22 23       	and	r18, r18
    2298:	b1 f1       	breq	.+108    	; 0x2306 <Endpoint_Write_Control_PStream_LE+0xae>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    229a:	25 30       	cpi	r18, 0x05	; 5
    229c:	b1 f1       	breq	.+108    	; 0x230a <Endpoint_Write_Control_PStream_LE+0xb2>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    229e:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
		else if (Endpoint_IsSETUPReceived())
    22a2:	23 fd       	sbrc	r18, 3
    22a4:	2e c0       	rjmp	.+92     	; 0x2302 <Endpoint_Write_Control_PStream_LE+0xaa>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    22a6:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
		else if (Endpoint_IsOUTReceived())
    22aa:	22 fd       	sbrc	r18, 2
    22ac:	ea cf       	rjmp	.-44     	; 0x2282 <Endpoint_Write_Control_PStream_LE+0x2a>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    22ae:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
		if (Endpoint_IsINReady())
    22b2:	20 ff       	sbrs	r18, 0
    22b4:	e2 cf       	rjmp	.-60     	; 0x227a <Endpoint_Write_Control_PStream_LE+0x22>
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    22b6:	30 91 f3 00 	lds	r19, 0x00F3	; 0x8000f3 <actionmaps+0x7f98f3>
    22ba:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <actionmaps+0x7f98f2>
			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    22be:	00 97       	sbiw	r24, 0x00	; 0
    22c0:	19 f0       	breq	.+6      	; 0x22c8 <Endpoint_Write_Control_PStream_LE+0x70>
    22c2:	28 30       	cpi	r18, 0x08	; 8
    22c4:	31 05       	cpc	r19, r1
    22c6:	58 f0       	brcs	.+22     	; 0x22de <Endpoint_Write_Control_PStream_LE+0x86>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    22c8:	41 e0       	ldi	r20, 0x01	; 1
    22ca:	28 30       	cpi	r18, 0x08	; 8
    22cc:	31 05       	cpc	r19, r1
    22ce:	09 f0       	breq	.+2      	; 0x22d2 <Endpoint_Write_Control_PStream_LE+0x7a>
    22d0:	40 e0       	ldi	r20, 0x00	; 0
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    22d2:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    22d6:	2e 77       	andi	r18, 0x7E	; 126
    22d8:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <actionmaps+0x7f98e8>
			}
    22dc:	ce cf       	rjmp	.-100    	; 0x227a <Endpoint_Write_Control_PStream_LE+0x22>
				TEMPLATE_TRANSFER_BYTE(DataStream);
    22de:	44 91       	lpm	r20, Z
				UEDATX = Data;
    22e0:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <actionmaps+0x7f98f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    22e4:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    22e6:	01 97       	sbiw	r24, 0x01	; 1
				BytesInEndpoint++;
    22e8:	2f 5f       	subi	r18, 0xFF	; 255
    22ea:	3f 4f       	sbci	r19, 0xFF	; 255
    22ec:	e8 cf       	rjmp	.-48     	; 0x22be <Endpoint_Write_Control_PStream_LE+0x66>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    22ee:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    22f2:	88 23       	and	r24, r24
    22f4:	41 f0       	breq	.+16     	; 0x2306 <Endpoint_Write_Control_PStream_LE+0xae>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    22f6:	85 30       	cpi	r24, 0x05	; 5
    22f8:	41 f0       	breq	.+16     	; 0x230a <Endpoint_Write_Control_PStream_LE+0xb2>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    22fa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
		else if (Endpoint_IsSETUPReceived())
    22fe:	83 ff       	sbrs	r24, 3
    2300:	c0 cf       	rjmp	.-128    	; 0x2282 <Endpoint_Write_Control_PStream_LE+0x2a>
		  return ENDPOINT_RWCSTREAM_HostAborted;
    2302:	81 e0       	ldi	r24, 0x01	; 1
}
    2304:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    2306:	82 e0       	ldi	r24, 0x02	; 2
    2308:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    230a:	83 e0       	ldi	r24, 0x03	; 3
    230c:	08 95       	ret

0000230e <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    230e:	98 2f       	mov	r25, r24
    2310:	97 30       	cpi	r25, 0x07	; 7
    2312:	28 f0       	brcs	.+10     	; 0x231e <Endpoint_ConfigureEndpoint_Prv+0x10>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2314:	8f 70       	andi	r24, 0x0F	; 15
    2316:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <actionmaps+0x7f98e9>
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    231a:	81 e0       	ldi	r24, 0x01	; 1
    231c:	08 95       	ret
    231e:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <actionmaps+0x7f98e9>
			UECFG1XTemp = UECFG1XData;
    2322:	24 2f       	mov	r18, r20
			UECFG0XTemp = UECFG0XData;
    2324:	76 2f       	mov	r23, r22
			UEIENXTemp  = 0;
    2326:	50 e0       	ldi	r21, 0x00	; 0
		if (EPNum == Number)
    2328:	98 17       	cp	r25, r24
    232a:	31 f0       	breq	.+12     	; 0x2338 <Endpoint_ConfigureEndpoint_Prv+0x2a>
			UECFG0XTemp = UECFG0X;
    232c:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <actionmaps+0x7f98ec>
			UECFG1XTemp = UECFG1X;
    2330:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <actionmaps+0x7f98ed>
			UEIENXTemp  = UEIENX;
    2334:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <actionmaps+0x7f98f0>
		if (!(UECFG1XTemp & (1 << ALLOC)))
    2338:	21 fd       	sbrc	r18, 1
    233a:	02 c0       	rjmp	.+4      	; 0x2340 <Endpoint_ConfigureEndpoint_Prv+0x32>
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    233c:	9f 5f       	subi	r25, 0xFF	; 255
    233e:	e8 cf       	rjmp	.-48     	; 0x2310 <Endpoint_ConfigureEndpoint_Prv+0x2>
				UECONX &= ~(1 << EPEN);
    2340:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <actionmaps+0x7f98eb>
    2344:	3e 7f       	andi	r19, 0xFE	; 254
    2346:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <actionmaps+0x7f98eb>
		UECFG1X &= ~(1 << ALLOC);
    234a:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <actionmaps+0x7f98ed>
    234e:	3d 7f       	andi	r19, 0xFD	; 253
    2350:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <actionmaps+0x7f98ed>
				UECONX |= (1 << EPEN);
    2354:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <actionmaps+0x7f98eb>
    2358:	31 60       	ori	r19, 0x01	; 1
    235a:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <actionmaps+0x7f98eb>
		UECFG0X = UECFG0XTemp;
    235e:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <actionmaps+0x7f98ec>
		UECFG1X = UECFG1XTemp;
    2362:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <actionmaps+0x7f98ed>
		UEIENX  = UEIENXTemp;
    2366:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <actionmaps+0x7f98f0>
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    236a:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <actionmaps+0x7f98ee>
		if (!(Endpoint_IsConfigured()))
    236e:	27 fd       	sbrc	r18, 7
    2370:	e5 cf       	rjmp	.-54     	; 0x233c <Endpoint_ConfigureEndpoint_Prv+0x2e>
		  return false;
    2372:	80 e0       	ldi	r24, 0x00	; 0
#endif
}
    2374:	08 95       	ret

00002376 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    2376:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <USB_ControlRequest>
    237a:	87 ff       	sbrs	r24, 7
    237c:	13 c0       	rjmp	.+38     	; 0x23a4 <Endpoint_ClearStatusStage+0x2e>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    237e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
	{
		while (!(Endpoint_IsOUTReceived()))
    2382:	82 ff       	sbrs	r24, 2
    2384:	06 c0       	rjmp	.+12     	; 0x2392 <Endpoint_ClearStatusStage+0x1c>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2386:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    238a:	8b 77       	andi	r24, 0x7B	; 123
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    238c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <actionmaps+0x7f98e8>
			}
    2390:	04 c0       	rjmp	.+8      	; 0x239a <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    2392:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <USB_DeviceState>
    2396:	81 11       	cpse	r24, r1
    2398:	f2 cf       	rjmp	.-28     	; 0x237e <Endpoint_ClearStatusStage+0x8>
			  return;
		}

		Endpoint_ClearIN();
	}
}
    239a:	08 95       	ret
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    239c:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <USB_DeviceState>
    23a0:	88 23       	and	r24, r24
    23a2:	d9 f3       	breq	.-10     	; 0x239a <Endpoint_ClearStatusStage+0x24>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    23a4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
		while (!(Endpoint_IsINReady()))
    23a8:	80 ff       	sbrs	r24, 0
    23aa:	f8 cf       	rjmp	.-16     	; 0x239c <Endpoint_ClearStatusStage+0x26>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    23ac:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    23b0:	8e 77       	andi	r24, 0x7E	; 126
    23b2:	ec cf       	rjmp	.-40     	; 0x238c <Endpoint_ClearStatusStage+0x16>

000023b4 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    23b4:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <actionmaps+0x7f98e4>
    23b8:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <actionmaps+0x7f98e5>
    23bc:	95 e6       	ldi	r25, 0x65	; 101
    23be:	a9 01       	movw	r20, r18
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    23c0:	20 91 ec 00 	lds	r18, 0x00EC	; 0x8000ec <actionmaps+0x7f98ec>
    23c4:	82 2f       	mov	r24, r18
    23c6:	81 70       	andi	r24, 0x01	; 1
    23c8:	20 ff       	sbrs	r18, 0
    23ca:	06 c0       	rjmp	.+12     	; 0x23d8 <Endpoint_WaitUntilReady+0x24>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    23cc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    23d0:	80 ff       	sbrs	r24, 0
    23d2:	06 c0       	rjmp	.+12     	; 0x23e0 <Endpoint_WaitUntilReady+0x2c>
			  return ENDPOINT_READYWAIT_NoError;
    23d4:	80 e0       	ldi	r24, 0x00	; 0
    23d6:	08 95       	ret
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    23d8:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    23dc:	22 fd       	sbrc	r18, 2
    23de:	1a c0       	rjmp	.+52     	; 0x2414 <Endpoint_WaitUntilReady+0x60>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    23e0:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    23e4:	88 23       	and	r24, r24
    23e6:	89 f0       	breq	.+34     	; 0x240a <Endpoint_WaitUntilReady+0x56>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    23e8:	85 30       	cpi	r24, 0x05	; 5
    23ea:	89 f0       	breq	.+34     	; 0x240e <Endpoint_WaitUntilReady+0x5a>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    23ec:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <actionmaps+0x7f98eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    23f0:	85 fd       	sbrc	r24, 5
    23f2:	0f c0       	rjmp	.+30     	; 0x2412 <Endpoint_WaitUntilReady+0x5e>
    23f4:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <actionmaps+0x7f98e4>
    23f8:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <actionmaps+0x7f98e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    23fc:	42 17       	cp	r20, r18
    23fe:	53 07       	cpc	r21, r19
    2400:	f9 f2       	breq	.-66     	; 0x23c0 <Endpoint_WaitUntilReady+0xc>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    2402:	91 50       	subi	r25, 0x01	; 1
    2404:	e1 f6       	brne	.-72     	; 0x23be <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    2406:	84 e0       	ldi	r24, 0x04	; 4
    2408:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    240a:	82 e0       	ldi	r24, 0x02	; 2
    240c:	08 95       	ret
		  return ENDPOINT_READYWAIT_BusSuspended;
    240e:	83 e0       	ldi	r24, 0x03	; 3
    2410:	08 95       	ret
		  return ENDPOINT_READYWAIT_EndpointStalled;
    2412:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
}
    2414:	08 95       	ret

00002416 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    2416:	0e 94 79 12 	call	0x24f2	; 0x24f2 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    241a:	0e 94 81 12 	call	0x2502	; 0x2502 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    241e:	e0 ee       	ldi	r30, 0xE0	; 224
    2420:	f0 e0       	ldi	r31, 0x00	; 0
    2422:	80 81       	ld	r24, Z
    2424:	81 60       	ori	r24, 0x01	; 1
    2426:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    2428:	e8 ed       	ldi	r30, 0xD8	; 216
    242a:	f0 e0       	ldi	r31, 0x00	; 0
    242c:	80 81       	ld	r24, Z
    242e:	8f 77       	andi	r24, 0x7F	; 127
    2430:	80 83       	st	Z, r24
				PLLCSR = 0;
    2432:	19 bc       	out	0x29, r1	; 41
				UHWCON &= ~(1 << UVREGE);
    2434:	a7 ed       	ldi	r26, 0xD7	; 215
    2436:	b0 e0       	ldi	r27, 0x00	; 0
    2438:	8c 91       	ld	r24, X
    243a:	8e 7f       	andi	r24, 0xFE	; 254
    243c:	8c 93       	st	X, r24
				USBCON &= ~(1 << OTGPADE);
    243e:	80 81       	ld	r24, Z
    2440:	8f 7e       	andi	r24, 0xEF	; 239
    2442:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    2444:	10 92 76 03 	sts	0x0376, r1	; 0x800376 <USB_IsInitialized>
}
    2448:	08 95       	ret

0000244a <USB_ResetInterface>:

void USB_ResetInterface(void)
{
    244a:	0f 93       	push	r16
    244c:	1f 93       	push	r17
    244e:	cf 93       	push	r28
    2450:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    2452:	0e 94 79 12 	call	0x24f2	; 0x24f2 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    2456:	0e 94 81 12 	call	0x2502	; 0x2502 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    245a:	c8 ed       	ldi	r28, 0xD8	; 216
    245c:	d0 e0       	ldi	r29, 0x00	; 0
    245e:	88 81       	ld	r24, Y
    2460:	8f 77       	andi	r24, 0x7F	; 127
    2462:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    2464:	88 81       	ld	r24, Y
    2466:	80 68       	ori	r24, 0x80	; 128
    2468:	88 83       	st	Y, r24
				USBCON &= ~(1 << FRZCLK);
    246a:	88 81       	ld	r24, Y
    246c:	8f 7d       	andi	r24, 0xDF	; 223
    246e:	88 83       	st	Y, r24
				PLLCSR = 0;
    2470:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    2472:	10 92 77 03 	sts	0x0377, r1	; 0x800377 <USB_DeviceState>
	USB_Device_ConfigurationNumber  = 0;
    2476:	10 92 73 03 	sts	0x0373, r1	; 0x800373 <USB_Device_ConfigurationNumber>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    247a:	10 92 75 03 	sts	0x0375, r1	; 0x800375 <USB_Device_RemoteWakeupEnabled>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    247e:	10 92 74 03 	sts	0x0374, r1	; 0x800374 <USB_Device_CurrentlySelfPowered>
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    2482:	00 ee       	ldi	r16, 0xE0	; 224
    2484:	10 e0       	ldi	r17, 0x00	; 0
    2486:	f8 01       	movw	r30, r16
    2488:	80 81       	ld	r24, Z
    248a:	8b 7f       	andi	r24, 0xFB	; 251
    248c:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    248e:	88 81       	ld	r24, Y
    2490:	81 60       	ori	r24, 0x01	; 1
    2492:	88 83       	st	Y, r24
				return Endpoint_ConfigureEndpoint_Prv(Number,
    2494:	42 e0       	ldi	r20, 0x02	; 2
    2496:	60 e0       	ldi	r22, 0x00	; 0
    2498:	80 e0       	ldi	r24, 0x00	; 0
    249a:	0e 94 87 11 	call	0x230e	; 0x230e <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    249e:	e1 ee       	ldi	r30, 0xE1	; 225
    24a0:	f0 e0       	ldi	r31, 0x00	; 0
    24a2:	80 81       	ld	r24, Z
    24a4:	8e 7f       	andi	r24, 0xFE	; 254
    24a6:	80 83       	st	Z, r24
						UDIEN  |= (1 << SUSPE);
    24a8:	e2 ee       	ldi	r30, 0xE2	; 226
    24aa:	f0 e0       	ldi	r31, 0x00	; 0
    24ac:	80 81       	ld	r24, Z
    24ae:	81 60       	ori	r24, 0x01	; 1
    24b0:	80 83       	st	Z, r24
						UDIEN  |= (1 << EORSTE);
    24b2:	80 81       	ld	r24, Z
    24b4:	88 60       	ori	r24, 0x08	; 8
    24b6:	80 83       	st	Z, r24
				UDCON  &= ~(1 << DETACH);
    24b8:	f8 01       	movw	r30, r16
    24ba:	80 81       	ld	r24, Z
    24bc:	8e 7f       	andi	r24, 0xFE	; 254
    24be:	80 83       	st	Z, r24
				USBCON |=  (1 << OTGPADE);
    24c0:	88 81       	ld	r24, Y
    24c2:	80 61       	ori	r24, 0x10	; 16
    24c4:	88 83       	st	Y, r24
}
    24c6:	df 91       	pop	r29
    24c8:	cf 91       	pop	r28
    24ca:	1f 91       	pop	r17
    24cc:	0f 91       	pop	r16
    24ce:	08 95       	ret

000024d0 <USB_Init>:
				USBCON &= ~(1 << OTGPADE);
    24d0:	e8 ed       	ldi	r30, 0xD8	; 216
    24d2:	f0 e0       	ldi	r31, 0x00	; 0
    24d4:	80 81       	ld	r24, Z
    24d6:	8f 7e       	andi	r24, 0xEF	; 239
    24d8:	80 83       	st	Z, r24
				UHWCON |=  (1 << UVREGE);
    24da:	e7 ed       	ldi	r30, 0xD7	; 215
    24dc:	f0 e0       	ldi	r31, 0x00	; 0
    24de:	80 81       	ld	r24, Z
    24e0:	81 60       	ori	r24, 0x01	; 1
    24e2:	80 83       	st	Z, r24
		PLLFRQ = (1 << PDIV2);
    24e4:	84 e0       	ldi	r24, 0x04	; 4
    24e6:	82 bf       	out	0x32, r24	; 50
	USB_IsInitialized = true;
    24e8:	81 e0       	ldi	r24, 0x01	; 1
    24ea:	80 93 76 03 	sts	0x0376, r24	; 0x800376 <USB_IsInitialized>
	USB_ResetInterface();
    24ee:	0c 94 25 12 	jmp	0x244a	; 0x244a <USB_ResetInterface>

000024f2 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    24f2:	e8 ed       	ldi	r30, 0xD8	; 216
    24f4:	f0 e0       	ldi	r31, 0x00	; 0
    24f6:	80 81       	ld	r24, Z
    24f8:	8e 7f       	andi	r24, 0xFE	; 254
    24fa:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    24fc:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <actionmaps+0x7f98e2>
	#endif
}
    2500:	08 95       	ret

00002502 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    2502:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <actionmaps+0x7f98da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    2506:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <actionmaps+0x7f98e1>
	#endif
}
    250a:	08 95       	ret

0000250c <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    250c:	1f 92       	push	r1
    250e:	0f 92       	push	r0
    2510:	0f b6       	in	r0, 0x3f	; 63
    2512:	0f 92       	push	r0
    2514:	11 24       	eor	r1, r1
    2516:	2f 93       	push	r18
    2518:	3f 93       	push	r19
    251a:	4f 93       	push	r20
    251c:	5f 93       	push	r21
    251e:	6f 93       	push	r22
    2520:	7f 93       	push	r23
    2522:	8f 93       	push	r24
    2524:	9f 93       	push	r25
    2526:	af 93       	push	r26
    2528:	bf 93       	push	r27
    252a:	ef 93       	push	r30
    252c:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    252e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <actionmaps+0x7f98e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    2532:	82 ff       	sbrs	r24, 2
    2534:	0b c0       	rjmp	.+22     	; 0x254c <__vector_10+0x40>
						return (UDIEN  & (1 << SOFE));
    2536:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <actionmaps+0x7f98e2>
    253a:	82 ff       	sbrs	r24, 2
    253c:	07 c0       	rjmp	.+14     	; 0x254c <__vector_10+0x40>
						UDINT  &= ~(1 << SOFI);
    253e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <actionmaps+0x7f98e1>
    2542:	8b 7f       	andi	r24, 0xFB	; 251
    2544:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <actionmaps+0x7f98e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    2548:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <EVENT_USB_Device_StartOfFrame>
						return (USBINT & (1 << VBUSTI));
    254c:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <actionmaps+0x7f98da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    2550:	80 ff       	sbrs	r24, 0
    2552:	19 c0       	rjmp	.+50     	; 0x2586 <__vector_10+0x7a>
						return (USBCON & (1 << VBUSTE));
    2554:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <actionmaps+0x7f98d8>
    2558:	80 ff       	sbrs	r24, 0
    255a:	15 c0       	rjmp	.+42     	; 0x2586 <__vector_10+0x7a>
						USBINT &= ~(1 << VBUSTI);
    255c:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <actionmaps+0x7f98da>
    2560:	8e 7f       	andi	r24, 0xFE	; 254
    2562:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <actionmaps+0x7f98da>
					return ((USBSTA & (1 << VBUS)) ? true : false);
    2566:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <actionmaps+0x7f98d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    256a:	80 ff       	sbrs	r24, 0
    256c:	94 c0       	rjmp	.+296    	; 0x2696 <__vector_10+0x18a>
				PLLCSR = USB_PLL_PSC;
    256e:	80 e1       	ldi	r24, 0x10	; 16
    2570:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    2572:	82 e1       	ldi	r24, 0x12	; 18
    2574:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    2576:	09 b4       	in	r0, 0x29	; 41
    2578:	00 fe       	sbrs	r0, 0
    257a:	fd cf       	rjmp	.-6      	; 0x2576 <__vector_10+0x6a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    257c:	81 e0       	ldi	r24, 0x01	; 1
    257e:	80 93 77 03 	sts	0x0377, r24	; 0x800377 <USB_DeviceState>
			EVENT_USB_Device_Connect();
    2582:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <EVENT_USB_Device_Connect>
						return (UDINT  & (1 << SUSPI));
    2586:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <actionmaps+0x7f98e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    258a:	80 ff       	sbrs	r24, 0
    258c:	19 c0       	rjmp	.+50     	; 0x25c0 <__vector_10+0xb4>
						return (UDIEN  & (1 << SUSPE));
    258e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <actionmaps+0x7f98e2>
    2592:	80 ff       	sbrs	r24, 0
    2594:	15 c0       	rjmp	.+42     	; 0x25c0 <__vector_10+0xb4>
						UDIEN  &= ~(1 << SUSPE);
    2596:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <actionmaps+0x7f98e2>
    259a:	8e 7f       	andi	r24, 0xFE	; 254
    259c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <actionmaps+0x7f98e2>
						UDIEN  |= (1 << WAKEUPE);
    25a0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <actionmaps+0x7f98e2>
    25a4:	80 61       	ori	r24, 0x10	; 16
    25a6:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <actionmaps+0x7f98e2>
				USBCON |=  (1 << FRZCLK);
    25aa:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <actionmaps+0x7f98d8>
    25ae:	80 62       	ori	r24, 0x20	; 32
    25b0:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <actionmaps+0x7f98d8>
				PLLCSR = 0;
    25b4:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    25b6:	85 e0       	ldi	r24, 0x05	; 5
    25b8:	80 93 77 03 	sts	0x0377, r24	; 0x800377 <USB_DeviceState>
		EVENT_USB_Device_Suspend();
    25bc:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <EVENT_USB_Device_Suspend>
						return (UDINT  & (1 << WAKEUPI));
    25c0:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <actionmaps+0x7f98e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    25c4:	84 ff       	sbrs	r24, 4
    25c6:	29 c0       	rjmp	.+82     	; 0x261a <__vector_10+0x10e>
						return (UDIEN  & (1 << WAKEUPE));
    25c8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <actionmaps+0x7f98e2>
    25cc:	84 ff       	sbrs	r24, 4
    25ce:	25 c0       	rjmp	.+74     	; 0x261a <__vector_10+0x10e>
				PLLCSR = USB_PLL_PSC;
    25d0:	80 e1       	ldi	r24, 0x10	; 16
    25d2:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    25d4:	82 e1       	ldi	r24, 0x12	; 18
    25d6:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    25d8:	09 b4       	in	r0, 0x29	; 41
    25da:	00 fe       	sbrs	r0, 0
    25dc:	fd cf       	rjmp	.-6      	; 0x25d8 <__vector_10+0xcc>
				USBCON &= ~(1 << FRZCLK);
    25de:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <actionmaps+0x7f98d8>
    25e2:	8f 7d       	andi	r24, 0xDF	; 223
    25e4:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <actionmaps+0x7f98d8>
						UDINT  &= ~(1 << WAKEUPI);
    25e8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <actionmaps+0x7f98e1>
    25ec:	8f 7e       	andi	r24, 0xEF	; 239
    25ee:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <actionmaps+0x7f98e1>
						UDIEN  &= ~(1 << WAKEUPE);
    25f2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <actionmaps+0x7f98e2>
    25f6:	8f 7e       	andi	r24, 0xEF	; 239
    25f8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <actionmaps+0x7f98e2>
						UDIEN  |= (1 << SUSPE);
    25fc:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <actionmaps+0x7f98e2>
    2600:	81 60       	ori	r24, 0x01	; 1
    2602:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <actionmaps+0x7f98e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    2606:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <USB_Device_ConfigurationNumber>
    260a:	88 23       	and	r24, r24
    260c:	09 f4       	brne	.+2      	; 0x2610 <__vector_10+0x104>
    260e:	49 c0       	rjmp	.+146    	; 0x26a2 <__vector_10+0x196>
		  USB_DeviceState = DEVICE_STATE_Configured;
    2610:	84 e0       	ldi	r24, 0x04	; 4
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    2612:	80 93 77 03 	sts	0x0377, r24	; 0x800377 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    2616:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <EVENT_USB_Device_WakeUp>
						return (UDINT  & (1 << EORSTI));
    261a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <actionmaps+0x7f98e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    261e:	83 ff       	sbrs	r24, 3
    2620:	29 c0       	rjmp	.+82     	; 0x2674 <__vector_10+0x168>
						return (UDIEN  & (1 << EORSTE));
    2622:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <actionmaps+0x7f98e2>
    2626:	83 ff       	sbrs	r24, 3
    2628:	25 c0       	rjmp	.+74     	; 0x2674 <__vector_10+0x168>
						UDINT  &= ~(1 << EORSTI);
    262a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <actionmaps+0x7f98e1>
    262e:	87 7f       	andi	r24, 0xF7	; 247
    2630:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <actionmaps+0x7f98e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    2634:	82 e0       	ldi	r24, 0x02	; 2
    2636:	80 93 77 03 	sts	0x0377, r24	; 0x800377 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
    263a:	10 92 73 03 	sts	0x0373, r1	; 0x800373 <USB_Device_ConfigurationNumber>
						UDINT  &= ~(1 << SUSPI);
    263e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <actionmaps+0x7f98e1>
    2642:	8e 7f       	andi	r24, 0xFE	; 254
    2644:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <actionmaps+0x7f98e1>
						UDIEN  &= ~(1 << SUSPE);
    2648:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <actionmaps+0x7f98e2>
    264c:	8e 7f       	andi	r24, 0xFE	; 254
    264e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <actionmaps+0x7f98e2>
						UDIEN  |= (1 << WAKEUPE);
    2652:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <actionmaps+0x7f98e2>
    2656:	80 61       	ori	r24, 0x10	; 16
    2658:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <actionmaps+0x7f98e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    265c:	42 e0       	ldi	r20, 0x02	; 2
    265e:	60 e0       	ldi	r22, 0x00	; 0
    2660:	80 e0       	ldi	r24, 0x00	; 0
    2662:	0e 94 87 11 	call	0x230e	; 0x230e <Endpoint_ConfigureEndpoint_Prv>
						UEIENX |= (1 << RXSTPE);
    2666:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <actionmaps+0x7f98f0>
    266a:	88 60       	ori	r24, 0x08	; 8
    266c:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <actionmaps+0x7f98f0>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    2670:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <EVENT_USB_Device_Reset>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    2674:	ff 91       	pop	r31
    2676:	ef 91       	pop	r30
    2678:	bf 91       	pop	r27
    267a:	af 91       	pop	r26
    267c:	9f 91       	pop	r25
    267e:	8f 91       	pop	r24
    2680:	7f 91       	pop	r23
    2682:	6f 91       	pop	r22
    2684:	5f 91       	pop	r21
    2686:	4f 91       	pop	r20
    2688:	3f 91       	pop	r19
    268a:	2f 91       	pop	r18
    268c:	0f 90       	pop	r0
    268e:	0f be       	out	0x3f, r0	; 63
    2690:	0f 90       	pop	r0
    2692:	1f 90       	pop	r1
    2694:	18 95       	reti
				PLLCSR = 0;
    2696:	19 bc       	out	0x29, r1	; 41
			USB_DeviceState = DEVICE_STATE_Unattached;
    2698:	10 92 77 03 	sts	0x0377, r1	; 0x800377 <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
    269c:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <EVENT_USB_Device_Disconnect>
    26a0:	72 cf       	rjmp	.-284    	; 0x2586 <__vector_10+0x7a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    26a2:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <actionmaps+0x7f98e3>
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    26a6:	87 fd       	sbrc	r24, 7
    26a8:	02 c0       	rjmp	.+4      	; 0x26ae <__vector_10+0x1a2>
    26aa:	81 e0       	ldi	r24, 0x01	; 1
    26ac:	b2 cf       	rjmp	.-156    	; 0x2612 <__vector_10+0x106>
    26ae:	83 e0       	ldi	r24, 0x03	; 3
    26b0:	b0 cf       	rjmp	.-160    	; 0x2612 <__vector_10+0x106>

000026b2 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    26b2:	1f 92       	push	r1
    26b4:	0f 92       	push	r0
    26b6:	0f b6       	in	r0, 0x3f	; 63
    26b8:	0f 92       	push	r0
    26ba:	11 24       	eor	r1, r1
    26bc:	2f 93       	push	r18
    26be:	3f 93       	push	r19
    26c0:	4f 93       	push	r20
    26c2:	5f 93       	push	r21
    26c4:	6f 93       	push	r22
    26c6:	7f 93       	push	r23
    26c8:	8f 93       	push	r24
    26ca:	9f 93       	push	r25
    26cc:	af 93       	push	r26
    26ce:	bf 93       	push	r27
    26d0:	cf 93       	push	r28
    26d2:	df 93       	push	r29
    26d4:	ef 93       	push	r30
    26d6:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    26d8:	d0 91 e9 00 	lds	r29, 0x00E9	; 0x8000e9 <actionmaps+0x7f98e9>
    26dc:	df 70       	andi	r29, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    26de:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <actionmaps+0x7f98ec>
    26e2:	c8 2f       	mov	r28, r24
    26e4:	c1 70       	andi	r28, 0x01	; 1
    26e6:	80 fd       	sbrc	r24, 0
    26e8:	c0 e8       	ldi	r28, 0x80	; 128
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    26ea:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <actionmaps+0x7f98e9>
						UEIENX &= ~(1 << RXSTPE);
    26ee:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <actionmaps+0x7f98f0>
    26f2:	87 7f       	andi	r24, 0xF7	; 247
    26f4:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <actionmaps+0x7f98f0>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    26f8:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    26fa:	0e 94 9d 13 	call	0x273a	; 0x273a <USB_Device_ProcessControlRequest>
    26fe:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <actionmaps+0x7f98e9>
						UEIENX |= (1 << RXSTPE);
    2702:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <actionmaps+0x7f98f0>
    2706:	88 60       	ori	r24, 0x08	; 8
    2708:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <actionmaps+0x7f98f0>
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    270c:	cd 2b       	or	r28, r29
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    270e:	cf 70       	andi	r28, 0x0F	; 15
    2710:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <actionmaps+0x7f98e9>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    2714:	ff 91       	pop	r31
    2716:	ef 91       	pop	r30
    2718:	df 91       	pop	r29
    271a:	cf 91       	pop	r28
    271c:	bf 91       	pop	r27
    271e:	af 91       	pop	r26
    2720:	9f 91       	pop	r25
    2722:	8f 91       	pop	r24
    2724:	7f 91       	pop	r23
    2726:	6f 91       	pop	r22
    2728:	5f 91       	pop	r21
    272a:	4f 91       	pop	r20
    272c:	3f 91       	pop	r19
    272e:	2f 91       	pop	r18
    2730:	0f 90       	pop	r0
    2732:	0f be       	out	0x3f, r0	; 63
    2734:	0f 90       	pop	r0
    2736:	1f 90       	pop	r1
    2738:	18 95       	reti

0000273a <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    273a:	1f 93       	push	r17
    273c:	cf 93       	push	r28
    273e:	df 93       	push	r29
    2740:	cd b7       	in	r28, 0x3d	; 61
    2742:	de b7       	in	r29, 0x3e	; 62
    2744:	aa 97       	sbiw	r28, 0x2a	; 42
    2746:	0f b6       	in	r0, 0x3f	; 63
    2748:	f8 94       	cli
    274a:	de bf       	out	0x3e, r29	; 62
    274c:	0f be       	out	0x3f, r0	; 63
    274e:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    2750:	88 e7       	ldi	r24, 0x78	; 120
    2752:	93 e0       	ldi	r25, 0x03	; 3

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    2754:	fc 01       	movw	r30, r24
    2756:	01 96       	adiw	r24, 0x01	; 1
				return UEDATX;
    2758:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <actionmaps+0x7f98f1>
    275c:	20 83       	st	Z, r18
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    275e:	23 e0       	ldi	r18, 0x03	; 3
    2760:	80 38       	cpi	r24, 0x80	; 128
    2762:	92 07       	cpc	r25, r18
    2764:	b9 f7       	brne	.-18     	; 0x2754 <USB_Device_ProcessControlRequest+0x1a>
	#endif

	EVENT_USB_Device_ControlRequest();
    2766:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <EVENT_USB_Device_ControlRequest>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    276a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>

	if (Endpoint_IsSETUPReceived())
    276e:	83 ff       	sbrs	r24, 3
    2770:	16 c1       	rjmp	.+556    	; 0x299e <USB_Device_ProcessControlRequest+0x264>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    2772:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
    2776:	90 91 79 03 	lds	r25, 0x0379	; 0x800379 <USB_ControlRequest+0x1>
    277a:	9a 30       	cpi	r25, 0x0A	; 10
    277c:	08 f0       	brcs	.+2      	; 0x2780 <USB_Device_ProcessControlRequest+0x46>
    277e:	0f c1       	rjmp	.+542    	; 0x299e <USB_Device_ProcessControlRequest+0x264>
    2780:	e9 2f       	mov	r30, r25
    2782:	f0 e0       	ldi	r31, 0x00	; 0
    2784:	e6 57       	subi	r30, 0x76	; 118
    2786:	fa 4f       	sbci	r31, 0xFA	; 250
    2788:	0c 94 d1 2b 	jmp	0x57a2	; 0x57a2 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    278c:	80 38       	cpi	r24, 0x80	; 128
    278e:	81 f0       	breq	.+32     	; 0x27b0 <USB_Device_ProcessControlRequest+0x76>
    2790:	82 38       	cpi	r24, 0x82	; 130
    2792:	09 f0       	breq	.+2      	; 0x2796 <USB_Device_ProcessControlRequest+0x5c>
    2794:	04 c1       	rjmp	.+520    	; 0x299e <USB_Device_ProcessControlRequest+0x264>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    2796:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <USB_ControlRequest+0x4>
    279a:	8f 70       	andi	r24, 0x0F	; 15
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    279c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <actionmaps+0x7f98e9>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    27a0:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <actionmaps+0x7f98eb>
    27a4:	85 fb       	bst	r24, 5
    27a6:	88 27       	eor	r24, r24
    27a8:	80 f9       	bld	r24, 0
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    27aa:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <actionmaps+0x7f98e9>
			}
    27ae:	06 c0       	rjmp	.+12     	; 0x27bc <USB_Device_ProcessControlRequest+0x82>
	uint8_t CurrentStatus = 0;
    27b0:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_RemoteWakeupEnabled)
    27b4:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <USB_Device_RemoteWakeupEnabled>
    27b8:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    27ba:	82 60       	ori	r24, 0x02	; 2
				UEINTX &= ~(1 << RXSTPI);
    27bc:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    27c0:	97 7f       	andi	r25, 0xF7	; 247
    27c2:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <actionmaps+0x7f98e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    27c6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <actionmaps+0x7f98f1>
				UEDATX = (Data >> 8);
    27ca:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <actionmaps+0x7f98f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    27ce:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    27d2:	8e 77       	andi	r24, 0x7E	; 126
    27d4:	e0 c0       	rjmp	.+448    	; 0x2996 <USB_Device_ProcessControlRequest+0x25c>
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    27d6:	88 23       	and	r24, r24
    27d8:	09 f4       	brne	.+2      	; 0x27dc <USB_Device_ProcessControlRequest+0xa2>
    27da:	ce c0       	rjmp	.+412    	; 0x2978 <USB_Device_ProcessControlRequest+0x23e>
    27dc:	82 30       	cpi	r24, 0x02	; 2
    27de:	09 f0       	breq	.+2      	; 0x27e2 <USB_Device_ProcessControlRequest+0xa8>
    27e0:	de c0       	rjmp	.+444    	; 0x299e <USB_Device_ProcessControlRequest+0x264>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    27e2:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <USB_ControlRequest+0x2>
    27e6:	81 11       	cpse	r24, r1
    27e8:	d1 c0       	rjmp	.+418    	; 0x298c <USB_Device_ProcessControlRequest+0x252>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    27ea:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <USB_ControlRequest+0x4>
    27ee:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    27f0:	09 f4       	brne	.+2      	; 0x27f4 <USB_Device_ProcessControlRequest+0xba>
    27f2:	d5 c0       	rjmp	.+426    	; 0x299e <USB_Device_ProcessControlRequest+0x264>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    27f4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <actionmaps+0x7f98e9>
				return ((UECONX & (1 << EPEN)) ? true : false);
    27f8:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <actionmaps+0x7f98eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    27fc:	20 ff       	sbrs	r18, 0
    27fe:	c6 c0       	rjmp	.+396    	; 0x298c <USB_Device_ProcessControlRequest+0x252>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    2800:	93 30       	cpi	r25, 0x03	; 3
    2802:	31 f4       	brne	.+12     	; 0x2810 <USB_Device_ProcessControlRequest+0xd6>
				UECONX |= (1 << STALLRQ);
    2804:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <actionmaps+0x7f98eb>
    2808:	80 62       	ori	r24, 0x20	; 32
				UECONX |= (1 << RSTDT);
    280a:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <actionmaps+0x7f98eb>
			}
    280e:	be c0       	rjmp	.+380    	; 0x298c <USB_Device_ProcessControlRequest+0x252>
				UECONX |= (1 << STALLRQC);
    2810:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <actionmaps+0x7f98eb>
    2814:	90 61       	ori	r25, 0x10	; 16
    2816:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <actionmaps+0x7f98eb>
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    281a:	21 e0       	ldi	r18, 0x01	; 1
    281c:	30 e0       	ldi	r19, 0x00	; 0
    281e:	01 c0       	rjmp	.+2      	; 0x2822 <USB_Device_ProcessControlRequest+0xe8>
    2820:	22 0f       	add	r18, r18
    2822:	8a 95       	dec	r24
    2824:	ea f7       	brpl	.-6      	; 0x2820 <USB_Device_ProcessControlRequest+0xe6>
    2826:	20 93 ea 00 	sts	0x00EA, r18	; 0x8000ea <actionmaps+0x7f98ea>
				UERST = 0;
    282a:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <actionmaps+0x7f98ea>
				UECONX |= (1 << RSTDT);
    282e:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <actionmaps+0x7f98eb>
    2832:	88 60       	ori	r24, 0x08	; 8
    2834:	ea cf       	rjmp	.-44     	; 0x280a <USB_Device_ProcessControlRequest+0xd0>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    2836:	81 11       	cpse	r24, r1
    2838:	b2 c0       	rjmp	.+356    	; 0x299e <USB_Device_ProcessControlRequest+0x264>
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    283a:	10 91 7a 03 	lds	r17, 0x037A	; 0x80037a <USB_ControlRequest+0x2>
    283e:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    2840:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <actionmaps+0x7f98e3>
    2844:	80 78       	andi	r24, 0x80	; 128
    2846:	81 2b       	or	r24, r17
    2848:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <actionmaps+0x7f98e3>
				UEINTX &= ~(1 << RXSTPI);
    284c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    2850:	87 7f       	andi	r24, 0xF7	; 247
    2852:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <actionmaps+0x7f98e8>
	Endpoint_ClearStatusStage();
    2856:	0e 94 bb 11 	call	0x2376	; 0x2376 <Endpoint_ClearStatusStage>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    285a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
	while (!(Endpoint_IsINReady()));
    285e:	80 ff       	sbrs	r24, 0
    2860:	fc cf       	rjmp	.-8      	; 0x285a <USB_Device_ProcessControlRequest+0x120>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    2862:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <actionmaps+0x7f98e3>
    2866:	80 68       	ori	r24, 0x80	; 128
    2868:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <actionmaps+0x7f98e3>
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    286c:	82 e0       	ldi	r24, 0x02	; 2
    286e:	11 11       	cpse	r17, r1
    2870:	83 e0       	ldi	r24, 0x03	; 3
    2872:	80 93 77 03 	sts	0x0377, r24	; 0x800377 <USB_DeviceState>
}
    2876:	93 c0       	rjmp	.+294    	; 0x299e <USB_Device_ProcessControlRequest+0x264>
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2878:	80 58       	subi	r24, 0x80	; 128
    287a:	82 30       	cpi	r24, 0x02	; 2
    287c:	08 f0       	brcs	.+2      	; 0x2880 <USB_Device_ProcessControlRequest+0x146>
    287e:	8f c0       	rjmp	.+286    	; 0x299e <USB_Device_ProcessControlRequest+0x264>
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    2880:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <USB_ControlRequest+0x2>
    2884:	90 91 7b 03 	lds	r25, 0x037B	; 0x80037b <USB_ControlRequest+0x3>
    2888:	8c 3d       	cpi	r24, 0xDC	; 220
    288a:	23 e0       	ldi	r18, 0x03	; 3
    288c:	92 07       	cpc	r25, r18
    288e:	a1 f5       	brne	.+104    	; 0x28f8 <USB_Device_ProcessControlRequest+0x1be>
	SignatureDescriptor.Header.Type = DTYPE_String;
    2890:	83 e0       	ldi	r24, 0x03	; 3
    2892:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    2894:	8a e2       	ldi	r24, 0x2A	; 42
    2896:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    2898:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    289a:	f8 94       	cli
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    289c:	de 01       	movw	r26, r28
    289e:	13 96       	adiw	r26, 0x03	; 3
    28a0:	20 e0       	ldi	r18, 0x00	; 0
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    28a2:	3e e0       	ldi	r19, 0x0E	; 14
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    28a4:	51 e2       	ldi	r21, 0x21	; 33
    28a6:	e3 2f       	mov	r30, r19
    28a8:	f0 e0       	ldi	r31, 0x00	; 0
    28aa:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <actionmaps+0x7f9857>
    28ae:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    28b0:	20 ff       	sbrs	r18, 0
    28b2:	03 c0       	rjmp	.+6      	; 0x28ba <USB_Device_ProcessControlRequest+0x180>
					{
						SerialByte >>= 4;
    28b4:	e2 95       	swap	r30
    28b6:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    28b8:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    28ba:	ef 70       	andi	r30, 0x0F	; 15

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    28bc:	8e 2f       	mov	r24, r30
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	ea 30       	cpi	r30, 0x0A	; 10
    28c2:	c0 f0       	brcs	.+48     	; 0x28f4 <USB_Device_ProcessControlRequest+0x1ba>
    28c4:	c7 96       	adiw	r24, 0x37	; 55
    28c6:	8d 93       	st	X+, r24
    28c8:	9d 93       	st	X+, r25
				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    28ca:	2f 5f       	subi	r18, 0xFF	; 255
    28cc:	24 31       	cpi	r18, 0x14	; 20
    28ce:	59 f7       	brne	.-42     	; 0x28a6 <USB_Device_ProcessControlRequest+0x16c>
				SREG = GlobalIntState;
    28d0:	4f bf       	out	0x3f, r20	; 63
				UEINTX &= ~(1 << RXSTPI);
    28d2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    28d6:	87 7f       	andi	r24, 0xF7	; 247
    28d8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <actionmaps+0x7f98e8>
	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    28dc:	6a e2       	ldi	r22, 0x2A	; 42
    28de:	70 e0       	ldi	r23, 0x00	; 0
    28e0:	ce 01       	movw	r24, r28
    28e2:	01 96       	adiw	r24, 0x01	; 1
    28e4:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <Endpoint_Write_Control_Stream_LE>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    28e8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    28ec:	8b 77       	andi	r24, 0x7B	; 123
    28ee:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <actionmaps+0x7f98e8>
    28f2:	55 c0       	rjmp	.+170    	; 0x299e <USB_Device_ProcessControlRequest+0x264>
					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    28f4:	c0 96       	adiw	r24, 0x30	; 48
    28f6:	e7 cf       	rjmp	.-50     	; 0x28c6 <USB_Device_ProcessControlRequest+0x18c>
	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    28f8:	ae 01       	movw	r20, r28
    28fa:	4f 5f       	subi	r20, 0xFF	; 255
    28fc:	5f 4f       	sbci	r21, 0xFF	; 255
    28fe:	60 91 7c 03 	lds	r22, 0x037C	; 0x80037c <USB_ControlRequest+0x4>
    2902:	0e 94 17 10 	call	0x202e	; 0x202e <CALLBACK_USB_GetDescriptor>
    2906:	bc 01       	movw	r22, r24
    2908:	89 2b       	or	r24, r25
    290a:	09 f4       	brne	.+2      	; 0x290e <USB_Device_ProcessControlRequest+0x1d4>
    290c:	48 c0       	rjmp	.+144    	; 0x299e <USB_Device_ProcessControlRequest+0x264>
				UEINTX &= ~(1 << RXSTPI);
    290e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    2912:	87 7f       	andi	r24, 0xF7	; 247
    2914:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <actionmaps+0x7f98e8>
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    2918:	89 81       	ldd	r24, Y+1	; 0x01
    291a:	9a 81       	ldd	r25, Y+2	; 0x02
    291c:	0e 94 2c 11 	call	0x2258	; 0x2258 <Endpoint_Write_Control_PStream_LE>
    2920:	e3 cf       	rjmp	.-58     	; 0x28e8 <USB_Device_ProcessControlRequest+0x1ae>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    2922:	80 38       	cpi	r24, 0x80	; 128
    2924:	e1 f5       	brne	.+120    	; 0x299e <USB_Device_ProcessControlRequest+0x264>
    2926:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    292a:	87 7f       	andi	r24, 0xF7	; 247
    292c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <actionmaps+0x7f98e8>
	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    2930:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <USB_Device_ConfigurationNumber>
				UEDATX = Data;
    2934:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <actionmaps+0x7f98f1>
    2938:	4a cf       	rjmp	.-364    	; 0x27ce <USB_Device_ProcessControlRequest+0x94>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    293a:	81 11       	cpse	r24, r1
    293c:	30 c0       	rjmp	.+96     	; 0x299e <USB_Device_ProcessControlRequest+0x264>
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    293e:	90 91 7a 03 	lds	r25, 0x037A	; 0x80037a <USB_ControlRequest+0x2>
    2942:	92 30       	cpi	r25, 0x02	; 2
    2944:	60 f5       	brcc	.+88     	; 0x299e <USB_Device_ProcessControlRequest+0x264>
				UEINTX &= ~(1 << RXSTPI);
    2946:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    294a:	87 7f       	andi	r24, 0xF7	; 247
    294c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <actionmaps+0x7f98e8>
	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    2950:	90 93 73 03 	sts	0x0373, r25	; 0x800373 <USB_Device_ConfigurationNumber>
	Endpoint_ClearStatusStage();
    2954:	0e 94 bb 11 	call	0x2376	; 0x2376 <Endpoint_ClearStatusStage>
	if (USB_Device_ConfigurationNumber)
    2958:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <USB_Device_ConfigurationNumber>
    295c:	88 23       	and	r24, r24
    295e:	11 f0       	breq	.+4      	; 0x2964 <USB_Device_ProcessControlRequest+0x22a>
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    2960:	84 e0       	ldi	r24, 0x04	; 4
    2962:	05 c0       	rjmp	.+10     	; 0x296e <USB_Device_ProcessControlRequest+0x234>
				return (UDADDR & (1 << ADDEN));
    2964:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <actionmaps+0x7f98e3>
    2968:	87 fd       	sbrc	r24, 7
    296a:	fa cf       	rjmp	.-12     	; 0x2960 <USB_Device_ProcessControlRequest+0x226>
    296c:	81 e0       	ldi	r24, 0x01	; 1
    296e:	80 93 77 03 	sts	0x0377, r24	; 0x800377 <USB_DeviceState>
	EVENT_USB_Device_ConfigurationChanged();
    2972:	0e 94 75 0e 	call	0x1cea	; 0x1cea <EVENT_USB_Device_ConfigurationChanged>
    2976:	13 c0       	rjmp	.+38     	; 0x299e <USB_Device_ProcessControlRequest+0x264>
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    2978:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <USB_ControlRequest+0x2>
    297c:	81 30       	cpi	r24, 0x01	; 1
    297e:	79 f4       	brne	.+30     	; 0x299e <USB_Device_ProcessControlRequest+0x264>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    2980:	81 e0       	ldi	r24, 0x01	; 1
    2982:	93 30       	cpi	r25, 0x03	; 3
    2984:	09 f0       	breq	.+2      	; 0x2988 <USB_Device_ProcessControlRequest+0x24e>
    2986:	80 e0       	ldi	r24, 0x00	; 0
    2988:	80 93 75 03 	sts	0x0375, r24	; 0x800375 <USB_Device_RemoteWakeupEnabled>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    298c:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <actionmaps+0x7f98e9>
				UEINTX &= ~(1 << RXSTPI);
    2990:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    2994:	87 7f       	andi	r24, 0xF7	; 247
    2996:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <actionmaps+0x7f98e8>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    299a:	0e 94 bb 11 	call	0x2376	; 0x2376 <Endpoint_ClearStatusStage>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    299e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
	if (Endpoint_IsSETUPReceived())
    29a2:	83 ff       	sbrs	r24, 3
    29a4:	0a c0       	rjmp	.+20     	; 0x29ba <USB_Device_ProcessControlRequest+0x280>
				UEINTX &= ~(1 << RXSTPI);
    29a6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    29aa:	87 7f       	andi	r24, 0xF7	; 247
    29ac:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <actionmaps+0x7f98e8>
				UECONX |= (1 << STALLRQ);
    29b0:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <actionmaps+0x7f98eb>
    29b4:	80 62       	ori	r24, 0x20	; 32
    29b6:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <actionmaps+0x7f98eb>
}
    29ba:	aa 96       	adiw	r28, 0x2a	; 42
    29bc:	0f b6       	in	r0, 0x3f	; 63
    29be:	f8 94       	cli
    29c0:	de bf       	out	0x3e, r29	; 62
    29c2:	0f be       	out	0x3f, r0	; 63
    29c4:	cd bf       	out	0x3d, r28	; 61
    29c6:	df 91       	pop	r29
    29c8:	cf 91       	pop	r28
    29ca:	1f 91       	pop	r17
    29cc:	08 95       	ret

000029ce <host_set_driver>:
static uint16_t last_consumer_report = 0;


void host_set_driver(host_driver_t *d)
{
    driver = d;
    29ce:	90 93 85 02 	sts	0x0285, r25	; 0x800285 <driver+0x1>
    29d2:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <driver>
}
    29d6:	08 95       	ret

000029d8 <host_keyboard_leds>:
    return driver;
}

uint8_t host_keyboard_leds(void)
{
    if (!driver) return 0;
    29d8:	e0 91 84 02 	lds	r30, 0x0284	; 0x800284 <driver>
    29dc:	f0 91 85 02 	lds	r31, 0x0285	; 0x800285 <driver+0x1>
    29e0:	30 97       	sbiw	r30, 0x00	; 0
    29e2:	21 f0       	breq	.+8      	; 0x29ec <host_keyboard_leds+0x14>
    return (*driver->keyboard_leds)();
    29e4:	01 90       	ld	r0, Z+
    29e6:	f0 81       	ld	r31, Z
    29e8:	e0 2d       	mov	r30, r0
    29ea:	09 94       	ijmp
}
    29ec:	80 e0       	ldi	r24, 0x00	; 0
    29ee:	08 95       	ret

000029f0 <host_keyboard_send>:
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    29f0:	ef 92       	push	r14
    29f2:	ff 92       	push	r15
    29f4:	0f 93       	push	r16
    29f6:	1f 93       	push	r17
    29f8:	cf 93       	push	r28
    29fa:	df 93       	push	r29
    29fc:	8c 01       	movw	r16, r24
    if (!driver) return;
    29fe:	e0 91 84 02 	lds	r30, 0x0284	; 0x800284 <driver>
    2a02:	f0 91 85 02 	lds	r31, 0x0285	; 0x800285 <driver+0x1>
    2a06:	30 97       	sbiw	r30, 0x00	; 0
    2a08:	c1 f1       	breq	.+112    	; 0x2a7a <host_keyboard_send+0x8a>
    (*driver->send_keyboard)(report);
    2a0a:	02 80       	ldd	r0, Z+2	; 0x02
    2a0c:	f3 81       	ldd	r31, Z+3	; 0x03
    2a0e:	e0 2d       	mov	r30, r0
    2a10:	09 95       	icall

    if (debug_keyboard) {
    2a12:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <debug_config>
    2a16:	82 ff       	sbrs	r24, 2
    2a18:	30 c0       	rjmp	.+96     	; 0x2a7a <host_keyboard_send+0x8a>
        dprint("keyboard: ");
    2a1a:	80 ff       	sbrs	r24, 0
    2a1c:	04 c0       	rjmp	.+8      	; 0x2a26 <host_keyboard_send+0x36>
    2a1e:	84 ea       	ldi	r24, 0xA4	; 164
    2a20:	94 e0       	ldi	r25, 0x04	; 4
    2a22:	0e 94 1d 06 	call	0xc3a	; 0xc3a <xputs>
{
    2a26:	d0 e0       	ldi	r29, 0x00	; 0
    2a28:	c0 e0       	ldi	r28, 0x00	; 0
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
    2a2a:	8e e9       	ldi	r24, 0x9E	; 158
    2a2c:	e8 2e       	mov	r14, r24
    2a2e:	84 e0       	ldi	r24, 0x04	; 4
    2a30:	f8 2e       	mov	r15, r24
    2a32:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <debug_config>
    2a36:	80 ff       	sbrs	r24, 0
    2a38:	0e c0       	rjmp	.+28     	; 0x2a56 <host_keyboard_send+0x66>
    2a3a:	f8 01       	movw	r30, r16
    2a3c:	ec 0f       	add	r30, r28
    2a3e:	fd 1f       	adc	r31, r29
    2a40:	80 81       	ld	r24, Z
    2a42:	1f 92       	push	r1
    2a44:	8f 93       	push	r24
    2a46:	ff 92       	push	r15
    2a48:	ef 92       	push	r14
    2a4a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__xprintf>
    2a4e:	0f 90       	pop	r0
    2a50:	0f 90       	pop	r0
    2a52:	0f 90       	pop	r0
    2a54:	0f 90       	pop	r0
    2a56:	21 96       	adiw	r28, 0x01	; 1
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
    2a58:	c8 30       	cpi	r28, 0x08	; 8
    2a5a:	d1 05       	cpc	r29, r1
    2a5c:	51 f7       	brne	.-44     	; 0x2a32 <host_keyboard_send+0x42>
        }
        dprint("\n");
    2a5e:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <debug_config>
    2a62:	80 ff       	sbrs	r24, 0
    2a64:	0a c0       	rjmp	.+20     	; 0x2a7a <host_keyboard_send+0x8a>
    2a66:	8c e9       	ldi	r24, 0x9C	; 156
    2a68:	94 e0       	ldi	r25, 0x04	; 4
    }
}
    2a6a:	df 91       	pop	r29
    2a6c:	cf 91       	pop	r28
    2a6e:	1f 91       	pop	r17
    2a70:	0f 91       	pop	r16
    2a72:	ff 90       	pop	r15
    2a74:	ef 90       	pop	r14
        dprint("\n");
    2a76:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <xputs>
}
    2a7a:	df 91       	pop	r29
    2a7c:	cf 91       	pop	r28
    2a7e:	1f 91       	pop	r17
    2a80:	0f 91       	pop	r16
    2a82:	ff 90       	pop	r15
    2a84:	ef 90       	pop	r14
    2a86:	08 95       	ret

00002a88 <host_mouse_send>:

void host_mouse_send(report_mouse_t *report)
{
    if (!driver) return;
    2a88:	e0 91 84 02 	lds	r30, 0x0284	; 0x800284 <driver>
    2a8c:	f0 91 85 02 	lds	r31, 0x0285	; 0x800285 <driver+0x1>
    2a90:	30 97       	sbiw	r30, 0x00	; 0
    2a92:	21 f0       	breq	.+8      	; 0x2a9c <host_mouse_send+0x14>
    (*driver->send_mouse)(report);
    2a94:	04 80       	ldd	r0, Z+4	; 0x04
    2a96:	f5 81       	ldd	r31, Z+5	; 0x05
    2a98:	e0 2d       	mov	r30, r0
    2a9a:	09 94       	ijmp
}
    2a9c:	08 95       	ret

00002a9e <host_system_send>:

void host_system_send(uint16_t report)
{
    2a9e:	cf 93       	push	r28
    2aa0:	df 93       	push	r29
    2aa2:	ec 01       	movw	r28, r24
    if (report == last_system_report) return;
    2aa4:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <last_system_report>
    2aa8:	90 91 83 02 	lds	r25, 0x0283	; 0x800283 <last_system_report+0x1>
    2aac:	8c 17       	cp	r24, r28
    2aae:	9d 07       	cpc	r25, r29
    2ab0:	01 f1       	breq	.+64     	; 0x2af2 <host_system_send+0x54>
    last_system_report = report;
    2ab2:	d0 93 83 02 	sts	0x0283, r29	; 0x800283 <last_system_report+0x1>
    2ab6:	c0 93 82 02 	sts	0x0282, r28	; 0x800282 <last_system_report>

    if (!driver) return;
    2aba:	e0 91 84 02 	lds	r30, 0x0284	; 0x800284 <driver>
    2abe:	f0 91 85 02 	lds	r31, 0x0285	; 0x800285 <driver+0x1>
    2ac2:	30 97       	sbiw	r30, 0x00	; 0
    2ac4:	b1 f0       	breq	.+44     	; 0x2af2 <host_system_send+0x54>
    (*driver->send_system)(report);
    2ac6:	06 80       	ldd	r0, Z+6	; 0x06
    2ac8:	f7 81       	ldd	r31, Z+7	; 0x07
    2aca:	e0 2d       	mov	r30, r0
    2acc:	ce 01       	movw	r24, r28
    2ace:	09 95       	icall

    if (debug_keyboard) {
        dprintf("system: %04X\n", report);
    2ad0:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <debug_config>
    2ad4:	85 70       	andi	r24, 0x05	; 5
    2ad6:	85 30       	cpi	r24, 0x05	; 5
    2ad8:	61 f4       	brne	.+24     	; 0x2af2 <host_system_send+0x54>
    2ada:	df 93       	push	r29
    2adc:	cf 93       	push	r28
    2ade:	8e e8       	ldi	r24, 0x8E	; 142
    2ae0:	94 e0       	ldi	r25, 0x04	; 4
    2ae2:	9f 93       	push	r25
    2ae4:	8f 93       	push	r24
    2ae6:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__xprintf>
    2aea:	0f 90       	pop	r0
    2aec:	0f 90       	pop	r0
    2aee:	0f 90       	pop	r0
    2af0:	0f 90       	pop	r0
    }
}
    2af2:	df 91       	pop	r29
    2af4:	cf 91       	pop	r28
    2af6:	08 95       	ret

00002af8 <host_consumer_send>:

void host_consumer_send(uint16_t report)
{
    2af8:	cf 93       	push	r28
    2afa:	df 93       	push	r29
    2afc:	ec 01       	movw	r28, r24
    if (report == last_consumer_report) return;
    2afe:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <last_consumer_report>
    2b02:	90 91 81 02 	lds	r25, 0x0281	; 0x800281 <last_consumer_report+0x1>
    2b06:	8c 17       	cp	r24, r28
    2b08:	9d 07       	cpc	r25, r29
    2b0a:	01 f1       	breq	.+64     	; 0x2b4c <host_consumer_send+0x54>
    last_consumer_report = report;
    2b0c:	d0 93 81 02 	sts	0x0281, r29	; 0x800281 <last_consumer_report+0x1>
    2b10:	c0 93 80 02 	sts	0x0280, r28	; 0x800280 <last_consumer_report>

    if (!driver) return;
    2b14:	e0 91 84 02 	lds	r30, 0x0284	; 0x800284 <driver>
    2b18:	f0 91 85 02 	lds	r31, 0x0285	; 0x800285 <driver+0x1>
    2b1c:	30 97       	sbiw	r30, 0x00	; 0
    2b1e:	b1 f0       	breq	.+44     	; 0x2b4c <host_consumer_send+0x54>
    (*driver->send_consumer)(report);
    2b20:	00 84       	ldd	r0, Z+8	; 0x08
    2b22:	f1 85       	ldd	r31, Z+9	; 0x09
    2b24:	e0 2d       	mov	r30, r0
    2b26:	ce 01       	movw	r24, r28
    2b28:	09 95       	icall

    if (debug_keyboard) {
        dprintf("consumer: %04X\n", report);
    2b2a:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <debug_config>
    2b2e:	85 70       	andi	r24, 0x05	; 5
    2b30:	85 30       	cpi	r24, 0x05	; 5
    2b32:	61 f4       	brne	.+24     	; 0x2b4c <host_consumer_send+0x54>
    2b34:	df 93       	push	r29
    2b36:	cf 93       	push	r28
    2b38:	8e e7       	ldi	r24, 0x7E	; 126
    2b3a:	94 e0       	ldi	r25, 0x04	; 4
    2b3c:	9f 93       	push	r25
    2b3e:	8f 93       	push	r24
    2b40:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__xprintf>
    2b44:	0f 90       	pop	r0
    2b46:	0f 90       	pop	r0
    2b48:	0f 90       	pop	r0
    2b4a:	0f 90       	pop	r0
    }
}
    2b4c:	df 91       	pop	r29
    2b4e:	cf 91       	pop	r28
    2b50:	08 95       	ret

00002b52 <keyboard_setup>:
#endif


void keyboard_setup(void)
{
    matrix_setup();
    2b52:	0c 94 61 16 	jmp	0x2cc2	; 0x2cc2 <matrix_setup>

00002b56 <keyboard_init>:
}

void keyboard_init(void)
{
    timer_init();
    2b56:	0e 94 24 23 	call	0x4648	; 0x4648 <timer_init>
    matrix_init();
    2b5a:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <matrix_init>
#endif
#ifdef SERIAL_MOUSE_ENABLE
    serial_mouse_init();
#endif
#ifdef ADB_MOUSE_ENABLE
    adb_mouse_init();
    2b5e:	0c 94 ed 0b 	jmp	0x17da	; 0x17da <adb_mouse_init>

00002b62 <keyboard_task>:
/*
 * Do keyboard routine jobs: scan matrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
    2b62:	8f 92       	push	r8
    2b64:	9f 92       	push	r9
    2b66:	af 92       	push	r10
    2b68:	bf 92       	push	r11
    2b6a:	df 92       	push	r13
    2b6c:	ef 92       	push	r14
    2b6e:	ff 92       	push	r15
    2b70:	0f 93       	push	r16
    2b72:	1f 93       	push	r17
    2b74:	cf 93       	push	r28
    2b76:	df 93       	push	r29
    2b78:	00 d0       	rcall	.+0      	; 0x2b7a <keyboard_task+0x18>
    2b7a:	00 d0       	rcall	.+0      	; 0x2b7c <keyboard_task+0x1a>
    2b7c:	0f 92       	push	r0
    2b7e:	cd b7       	in	r28, 0x3d	; 61
    2b80:	de b7       	in	r29, 0x3e	; 62
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    2b82:	0e 94 19 0a 	call	0x1432	; 0x1432 <matrix_scan>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    2b86:	87 e8       	ldi	r24, 0x87	; 135
    2b88:	a8 2e       	mov	r10, r24
    2b8a:	82 e0       	ldi	r24, 0x02	; 2
    2b8c:	b8 2e       	mov	r11, r24
    2b8e:	10 e0       	ldi	r17, 0x00	; 0
        matrix_row = matrix_get_row(r);
    2b90:	81 2f       	mov	r24, r17
    2b92:	0e 94 ed 0a 	call	0x15da	; 0x15da <matrix_get_row>
    2b96:	f8 2e       	mov	r15, r24
        matrix_change = matrix_row ^ matrix_prev[r];
    2b98:	f5 01       	movw	r30, r10
    2b9a:	d1 90       	ld	r13, Z+
    2b9c:	5f 01       	movw	r10, r30
        if (matrix_change) {
    2b9e:	d8 16       	cp	r13, r24
    2ba0:	99 f1       	breq	.+102    	; 0x2c08 <keyboard_task+0xa6>
                matrix_ghost[r] = matrix_row;
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
    2ba2:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <debug_config>
    2ba6:	81 fd       	sbrc	r24, 1
    2ba8:	0e 94 76 16 	call	0x2cec	; 0x2cec <matrix_print>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    2bac:	e1 2c       	mov	r14, r1
    2bae:	01 e0       	ldi	r16, 0x01	; 1
        matrix_change = matrix_row ^ matrix_prev[r];
    2bb0:	df 24       	eor	r13, r15
    2bb2:	45 01       	movw	r8, r10
    2bb4:	f1 e0       	ldi	r31, 0x01	; 1
    2bb6:	8f 1a       	sub	r8, r31
    2bb8:	91 08       	sbc	r9, r1
            matrix_row_t col_mask = 1;
            for (uint8_t c = 0; c < MATRIX_COLS; c++, col_mask <<= 1) {
                if (matrix_change & col_mask) {
    2bba:	8d 2d       	mov	r24, r13
    2bbc:	80 23       	and	r24, r16
    2bbe:	f9 f0       	breq	.+62     	; 0x2bfe <keyboard_task+0x9c>
                    keyevent_t e = (keyevent_t){
    2bc0:	e9 82       	std	Y+1, r14	; 0x01
    2bc2:	1a 83       	std	Y+2, r17	; 0x02
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & col_mask),
    2bc4:	91 e0       	ldi	r25, 0x01	; 1
    2bc6:	8f 2d       	mov	r24, r15
    2bc8:	80 23       	and	r24, r16
    2bca:	09 f4       	brne	.+2      	; 0x2bce <keyboard_task+0x6c>
    2bcc:	90 e0       	ldi	r25, 0x00	; 0
                    keyevent_t e = (keyevent_t){
    2bce:	9b 83       	std	Y+3, r25	; 0x03
                        .time = (timer_read() | 1) /* time should not be 0 */
    2bd0:	0e 94 2d 23 	call	0x465a	; 0x465a <timer_read>
    2bd4:	81 60       	ori	r24, 0x01	; 1
                    keyevent_t e = (keyevent_t){
    2bd6:	78 2f       	mov	r23, r24
    2bd8:	9d 83       	std	Y+5, r25	; 0x05
    2bda:	8c 83       	std	Y+4, r24	; 0x04
                    };
                    action_exec(e);
    2bdc:	49 81       	ldd	r20, Y+1	; 0x01
    2bde:	5a 81       	ldd	r21, Y+2	; 0x02
    2be0:	6b 81       	ldd	r22, Y+3	; 0x03
    2be2:	8d 81       	ldd	r24, Y+5	; 0x05
    2be4:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <action_exec>
                    hook_matrix_change(e);
    2be8:	49 81       	ldd	r20, Y+1	; 0x01
    2bea:	5a 81       	ldd	r21, Y+2	; 0x02
    2bec:	6b 81       	ldd	r22, Y+3	; 0x03
    2bee:	7c 81       	ldd	r23, Y+4	; 0x04
    2bf0:	8d 81       	ldd	r24, Y+5	; 0x05
    2bf2:	0e 94 a7 22 	call	0x454e	; 0x454e <hook_matrix_change>
                    // record a processed key
                    matrix_prev[r] ^= col_mask;
    2bf6:	f4 01       	movw	r30, r8
    2bf8:	80 81       	ld	r24, Z
    2bfa:	80 27       	eor	r24, r16
    2bfc:	80 83       	st	Z, r24
            for (uint8_t c = 0; c < MATRIX_COLS; c++, col_mask <<= 1) {
    2bfe:	e3 94       	inc	r14
    2c00:	00 0f       	add	r16, r16
    2c02:	f8 e0       	ldi	r31, 0x08	; 8
    2c04:	ef 12       	cpse	r14, r31
    2c06:	d9 cf       	rjmp	.-78     	; 0x2bba <keyboard_task+0x58>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    2c08:	1f 5f       	subi	r17, 0xFF	; 255
    2c0a:	10 31       	cpi	r17, 0x10	; 16
    2c0c:	09 f0       	breq	.+2      	; 0x2c10 <keyboard_task+0xae>
    2c0e:	c0 cf       	rjmp	.-128    	; 0x2b90 <keyboard_task+0x2e>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
    2c10:	8f ef       	ldi	r24, 0xFF	; 255
    2c12:	89 83       	std	Y+1, r24	; 0x01
    2c14:	8a 83       	std	Y+2, r24	; 0x02
    2c16:	1b 82       	std	Y+3, r1	; 0x03
    2c18:	0e 94 2d 23 	call	0x465a	; 0x465a <timer_read>
    2c1c:	81 60       	ori	r24, 0x01	; 1
    2c1e:	78 2f       	mov	r23, r24
    2c20:	9d 83       	std	Y+5, r25	; 0x05
    2c22:	8c 83       	std	Y+4, r24	; 0x04
    2c24:	49 81       	ldd	r20, Y+1	; 0x01
    2c26:	5a 81       	ldd	r21, Y+2	; 0x02
    2c28:	6b 81       	ldd	r22, Y+3	; 0x03
    2c2a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c2c:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <action_exec>

//MATRIX_LOOP_END:

    hook_keyboard_loop();
    2c30:	0e 94 a6 22 	call	0x454c	; 0x454c <hook_keyboard_loop>

#ifdef MOUSEKEY_ENABLE
    // mousekey repeat & acceleration
    mousekey_task();
    2c34:	0e 94 f9 25 	call	0x4bf2	; 0x4bf2 <mousekey_task>
#ifdef SERIAL_MOUSE_ENABLE
        serial_mouse_task();
#endif

#ifdef ADB_MOUSE_ENABLE
        adb_mouse_task();
    2c38:	0e 94 99 08 	call	0x1132	; 0x1132 <adb_mouse_task>
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
    2c3c:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <host_keyboard_leds>
    2c40:	90 91 86 02 	lds	r25, 0x0286	; 0x800286 <led_status.2434>
    2c44:	89 17       	cp	r24, r25
    2c46:	49 f1       	breq	.+82     	; 0x2c9a <keyboard_task+0x138>
        led_status = host_keyboard_leds();
    2c48:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <host_keyboard_leds>
    2c4c:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <led_status.2434>
        if (debug_keyboard) dprintf("LED: %02X\n", led_status);
    2c50:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <debug_config>
    2c54:	95 70       	andi	r25, 0x05	; 5
    2c56:	95 30       	cpi	r25, 0x05	; 5
    2c58:	61 f4       	brne	.+24     	; 0x2c72 <keyboard_task+0x110>
    2c5a:	1f 92       	push	r1
    2c5c:	8f 93       	push	r24
    2c5e:	8f ea       	ldi	r24, 0xAF	; 175
    2c60:	94 e0       	ldi	r25, 0x04	; 4
    2c62:	9f 93       	push	r25
    2c64:	8f 93       	push	r24
    2c66:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__xprintf>
    2c6a:	0f 90       	pop	r0
    2c6c:	0f 90       	pop	r0
    2c6e:	0f 90       	pop	r0
    2c70:	0f 90       	pop	r0
        hook_keyboard_leds_change(led_status);
    2c72:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <led_status.2434>
    }
}
    2c76:	0f 90       	pop	r0
    2c78:	0f 90       	pop	r0
    2c7a:	0f 90       	pop	r0
    2c7c:	0f 90       	pop	r0
    2c7e:	0f 90       	pop	r0
    2c80:	df 91       	pop	r29
    2c82:	cf 91       	pop	r28
    2c84:	1f 91       	pop	r17
    2c86:	0f 91       	pop	r16
    2c88:	ff 90       	pop	r15
    2c8a:	ef 90       	pop	r14
    2c8c:	df 90       	pop	r13
    2c8e:	bf 90       	pop	r11
    2c90:	af 90       	pop	r10
    2c92:	9f 90       	pop	r9
    2c94:	8f 90       	pop	r8
        hook_keyboard_leds_change(led_status);
    2c96:	0c 94 b8 22 	jmp	0x4570	; 0x4570 <hook_keyboard_leds_change>
}
    2c9a:	0f 90       	pop	r0
    2c9c:	0f 90       	pop	r0
    2c9e:	0f 90       	pop	r0
    2ca0:	0f 90       	pop	r0
    2ca2:	0f 90       	pop	r0
    2ca4:	df 91       	pop	r29
    2ca6:	cf 91       	pop	r28
    2ca8:	1f 91       	pop	r17
    2caa:	0f 91       	pop	r16
    2cac:	ff 90       	pop	r15
    2cae:	ef 90       	pop	r14
    2cb0:	df 90       	pop	r13
    2cb2:	bf 90       	pop	r11
    2cb4:	af 90       	pop	r10
    2cb6:	9f 90       	pop	r9
    2cb8:	8f 90       	pop	r8
    2cba:	08 95       	ret

00002cbc <keyboard_set_leds>:

void keyboard_set_leds(uint8_t leds)
{
    led_set(leds);
    2cbc:	0c 94 f3 0a 	jmp	0x15e6	; 0x15e6 <led_set>

00002cc0 <matrix_clear>:
    2cc0:	08 95       	ret

00002cc2 <matrix_setup>:
void matrix_clear(void)
{
}

__attribute__ ((weak))
void matrix_setup(void) {}
    2cc2:	08 95       	ret

00002cc4 <matrix_is_on>:

__attribute__ ((weak))
bool matrix_is_on(uint8_t row, uint8_t col)
{
    2cc4:	cf 93       	push	r28
    2cc6:	c6 2f       	mov	r28, r22
    return (matrix_get_row(row) & (1<<col));
    2cc8:	0e 94 ed 0a 	call	0x15da	; 0x15da <matrix_get_row>
    2ccc:	21 e0       	ldi	r18, 0x01	; 1
    2cce:	30 e0       	ldi	r19, 0x00	; 0
    2cd0:	02 c0       	rjmp	.+4      	; 0x2cd6 <matrix_is_on+0x12>
    2cd2:	22 0f       	add	r18, r18
    2cd4:	33 1f       	adc	r19, r19
    2cd6:	ca 95       	dec	r28
    2cd8:	e2 f7       	brpl	.-8      	; 0x2cd2 <matrix_is_on+0xe>
    2cda:	90 e0       	ldi	r25, 0x00	; 0
    2cdc:	28 23       	and	r18, r24
    2cde:	39 23       	and	r19, r25
    2ce0:	81 e0       	ldi	r24, 0x01	; 1
    2ce2:	23 2b       	or	r18, r19
    2ce4:	09 f4       	brne	.+2      	; 0x2ce8 <matrix_is_on+0x24>
    2ce6:	80 e0       	ldi	r24, 0x00	; 0
}
    2ce8:	cf 91       	pop	r28
    2cea:	08 95       	ret

00002cec <matrix_print>:

__attribute__ ((weak))
void matrix_print(void)
{
    2cec:	ef 92       	push	r14
    2cee:	ff 92       	push	r15
    2cf0:	0f 93       	push	r16
    2cf2:	1f 93       	push	r17
    2cf4:	cf 93       	push	r28
    2cf6:	df 93       	push	r29
#if (MATRIX_COLS <= 8)
    print("r/c 01234567\n");
    2cf8:	88 ec       	ldi	r24, 0xC8	; 200
    2cfa:	94 e0       	ldi	r25, 0x04	; 4
    2cfc:	0e 94 1d 06 	call	0xc3a	; 0xc3a <xputs>
    2d00:	d0 e0       	ldi	r29, 0x00	; 0
    2d02:	c0 e0       	ldi	r28, 0x00	; 0
#endif

    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {

#if (MATRIX_COLS <= 8)
        xprintf("%02X: %08b%s\n", row, bitrev(matrix_get_row(row)),
    2d04:	82 e3       	ldi	r24, 0x32	; 50
    2d06:	e8 2e       	mov	r14, r24
    2d08:	81 e0       	ldi	r24, 0x01	; 1
    2d0a:	f8 2e       	mov	r15, r24
    2d0c:	0a eb       	ldi	r16, 0xBA	; 186
    2d0e:	14 e0       	ldi	r17, 0x04	; 4
    2d10:	8c 2f       	mov	r24, r28
    2d12:	0e 94 ed 0a 	call	0x15da	; 0x15da <matrix_get_row>
    2d16:	0e 94 92 22 	call	0x4524	; 0x4524 <bitrev>
    2d1a:	ff 92       	push	r15
    2d1c:	ef 92       	push	r14
    2d1e:	1f 92       	push	r1
    2d20:	8f 93       	push	r24
    2d22:	df 93       	push	r29
    2d24:	cf 93       	push	r28
    2d26:	1f 93       	push	r17
    2d28:	0f 93       	push	r16
    2d2a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__xprintf>
    2d2e:	21 96       	adiw	r28, 0x01	; 1
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
    2d30:	8d b7       	in	r24, 0x3d	; 61
    2d32:	9e b7       	in	r25, 0x3e	; 62
    2d34:	08 96       	adiw	r24, 0x08	; 8
    2d36:	0f b6       	in	r0, 0x3f	; 63
    2d38:	f8 94       	cli
    2d3a:	9e bf       	out	0x3e, r25	; 62
    2d3c:	0f be       	out	0x3f, r0	; 63
    2d3e:	8d bf       	out	0x3d, r24	; 61
    2d40:	c0 31       	cpi	r28, 0x10	; 16
    2d42:	d1 05       	cpc	r29, r1
    2d44:	29 f7       	brne	.-54     	; 0x2d10 <matrix_print+0x24>
#else
        ""
#endif
        );
    }
}
    2d46:	df 91       	pop	r29
    2d48:	cf 91       	pop	r28
    2d4a:	1f 91       	pop	r17
    2d4c:	0f 91       	pop	r16
    2d4e:	ff 90       	pop	r15
    2d50:	ef 90       	pop	r14
    2d52:	08 95       	ret

00002d54 <matrix_power_up>:
    2d54:	08 95       	ret

00002d56 <matrix_power_down>:
    2d56:	08 95       	ret

00002d58 <action_exec>:
#include "nodebug.h"
#endif


void action_exec(keyevent_t event)
{
    2d58:	cf 93       	push	r28
    2d5a:	df 93       	push	r29
    2d5c:	cd b7       	in	r28, 0x3d	; 61
    2d5e:	de b7       	in	r29, 0x3e	; 62
    2d60:	2b 97       	sbiw	r28, 0x0b	; 11
    2d62:	0f b6       	in	r0, 0x3f	; 63
    2d64:	f8 94       	cli
    2d66:	de bf       	out	0x3e, r29	; 62
    2d68:	0f be       	out	0x3f, r0	; 63
    2d6a:	cd bf       	out	0x3d, r28	; 61
    2d6c:	4f 83       	std	Y+7, r20	; 0x07
    2d6e:	58 87       	std	Y+8, r21	; 0x08
    2d70:	69 87       	std	Y+9, r22	; 0x09
    2d72:	7a 87       	std	Y+10, r23	; 0x0a
    2d74:	8b 87       	std	Y+11, r24	; 0x0b

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    2d76:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d78:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d7a:	89 2b       	or	r24, r25
    2d7c:	21 f0       	breq	.+8      	; 0x2d86 <action_exec+0x2e>
    2d7e:	84 2f       	mov	r24, r20
    2d80:	85 23       	and	r24, r21
    2d82:	8f 3f       	cpi	r24, 0xFF	; 255
    2d84:	d1 f4       	brne	.+52     	; 0x2dba <action_exec+0x62>
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
        hook_matrix_change(event);
    }

    keyrecord_t record = { .event = event };
    2d86:	1e 82       	std	Y+6, r1	; 0x06
    2d88:	85 e0       	ldi	r24, 0x05	; 5
    2d8a:	fe 01       	movw	r30, r28
    2d8c:	37 96       	adiw	r30, 0x07	; 7
    2d8e:	de 01       	movw	r26, r28
    2d90:	11 96       	adiw	r26, 0x01	; 1
    2d92:	01 90       	ld	r0, Z+
    2d94:	0d 92       	st	X+, r0
    2d96:	8a 95       	dec	r24
    2d98:	e1 f7       	brne	.-8      	; 0x2d92 <action_exec+0x3a>

#ifndef NO_ACTION_TAPPING
    action_tapping_process(record);
    2d9a:	49 81       	ldd	r20, Y+1	; 0x01
    2d9c:	5a 81       	ldd	r21, Y+2	; 0x02
    2d9e:	6b 81       	ldd	r22, Y+3	; 0x03
    2da0:	7c 81       	ldd	r23, Y+4	; 0x04
    2da2:	8d 81       	ldd	r24, Y+5	; 0x05
    2da4:	9e 81       	ldd	r25, Y+6	; 0x06
    process_action(&record);
    if (!IS_NOEVENT(record.event)) {
        dprint("processed: "); debug_record(record); dprintln();
    }
#endif
}
    2da6:	2b 96       	adiw	r28, 0x0b	; 11
    2da8:	0f b6       	in	r0, 0x3f	; 63
    2daa:	f8 94       	cli
    2dac:	de bf       	out	0x3e, r29	; 62
    2dae:	0f be       	out	0x3f, r0	; 63
    2db0:	cd bf       	out	0x3d, r28	; 61
    2db2:	df 91       	pop	r29
    2db4:	cf 91       	pop	r28
    action_tapping_process(record);
    2db6:	0c 94 36 1e 	jmp	0x3c6c	; 0x3c6c <action_tapping_process>
        hook_matrix_change(event);
    2dba:	69 85       	ldd	r22, Y+9	; 0x09
    2dbc:	7a 85       	ldd	r23, Y+10	; 0x0a
    2dbe:	8b 85       	ldd	r24, Y+11	; 0x0b
    2dc0:	0e 94 a7 22 	call	0x454e	; 0x454e <hook_matrix_change>
    2dc4:	e0 cf       	rjmp	.-64     	; 0x2d86 <action_exec+0x2e>

00002dc6 <register_code>:

/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
    2dc6:	cf 93       	push	r28
    2dc8:	c8 2f       	mov	r28, r24
    if (code == KC_NO) {
    2dca:	88 23       	and	r24, r24
    2dcc:	09 f4       	brne	.+2      	; 0x2dd0 <register_code+0xa>
    2dce:	9e c0       	rjmp	.+316    	; 0x2f0c <register_code+0x146>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    2dd0:	82 38       	cpi	r24, 0x82	; 130
    2dd2:	c1 f4       	brne	.+48     	; 0x2e04 <register_code+0x3e>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is on
        if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
    2dd4:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <host_keyboard_leds>
    2dd8:	81 fd       	sbrc	r24, 1
    2dda:	98 c0       	rjmp	.+304    	; 0x2f0c <register_code+0x146>
#endif
        add_key(KC_CAPSLOCK);
    2ddc:	89 e3       	ldi	r24, 0x39	; 57
    2dde:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <add_key>
        send_keyboard_report();
    2de2:	0e 94 67 22 	call	0x44ce	; 0x44ce <send_keyboard_report>
	__builtin_avr_delay_cycles(__ticks_dc);
    2de6:	2f ef       	ldi	r18, 0xFF	; 255
    2de8:	81 ee       	ldi	r24, 0xE1	; 225
    2dea:	94 e0       	ldi	r25, 0x04	; 4
    2dec:	21 50       	subi	r18, 0x01	; 1
    2dee:	80 40       	sbci	r24, 0x00	; 0
    2df0:	90 40       	sbci	r25, 0x00	; 0
    2df2:	e1 f7       	brne	.-8      	; 0x2dec <register_code+0x26>
    2df4:	00 c0       	rjmp	.+0      	; 0x2df6 <register_code+0x30>
    2df6:	00 00       	nop
        wait_ms(100);
        del_key(KC_CAPSLOCK);
    2df8:	89 e3       	ldi	r24, 0x39	; 57
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
#endif
        add_key(KC_NUMLOCK);
        send_keyboard_report();
        wait_ms(100);
        del_key(KC_NUMLOCK);
    2dfa:	0e 94 09 22 	call	0x4412	; 0x4412 <del_key>
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    2dfe:	cf 91       	pop	r28
        send_keyboard_report();
    2e00:	0c 94 67 22 	jmp	0x44ce	; 0x44ce <send_keyboard_report>
    else if (KC_LOCKING_NUM == code) {
    2e04:	83 38       	cpi	r24, 0x83	; 131
    2e06:	a1 f4       	brne	.+40     	; 0x2e30 <register_code+0x6a>
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
    2e08:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <host_keyboard_leds>
    2e0c:	80 fd       	sbrc	r24, 0
    2e0e:	7e c0       	rjmp	.+252    	; 0x2f0c <register_code+0x146>
        add_key(KC_NUMLOCK);
    2e10:	83 e5       	ldi	r24, 0x53	; 83
    2e12:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <add_key>
        send_keyboard_report();
    2e16:	0e 94 67 22 	call	0x44ce	; 0x44ce <send_keyboard_report>
    2e1a:	2f ef       	ldi	r18, 0xFF	; 255
    2e1c:	81 ee       	ldi	r24, 0xE1	; 225
    2e1e:	94 e0       	ldi	r25, 0x04	; 4
    2e20:	21 50       	subi	r18, 0x01	; 1
    2e22:	80 40       	sbci	r24, 0x00	; 0
    2e24:	90 40       	sbci	r25, 0x00	; 0
    2e26:	e1 f7       	brne	.-8      	; 0x2e20 <register_code+0x5a>
    2e28:	00 c0       	rjmp	.+0      	; 0x2e2a <register_code+0x64>
    2e2a:	00 00       	nop
        del_key(KC_NUMLOCK);
    2e2c:	83 e5       	ldi	r24, 0x53	; 83
    2e2e:	e5 cf       	rjmp	.-54     	; 0x2dfa <register_code+0x34>
    else if (KC_LOCKING_SCROLL == code) {
    2e30:	84 38       	cpi	r24, 0x84	; 132
    2e32:	a1 f4       	brne	.+40     	; 0x2e5c <register_code+0x96>
        if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
    2e34:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <host_keyboard_leds>
    2e38:	82 fd       	sbrc	r24, 2
    2e3a:	68 c0       	rjmp	.+208    	; 0x2f0c <register_code+0x146>
        add_key(KC_SCROLLLOCK);
    2e3c:	87 e4       	ldi	r24, 0x47	; 71
    2e3e:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <add_key>
        send_keyboard_report();
    2e42:	0e 94 67 22 	call	0x44ce	; 0x44ce <send_keyboard_report>
    2e46:	2f ef       	ldi	r18, 0xFF	; 255
    2e48:	81 ee       	ldi	r24, 0xE1	; 225
    2e4a:	94 e0       	ldi	r25, 0x04	; 4
    2e4c:	21 50       	subi	r18, 0x01	; 1
    2e4e:	80 40       	sbci	r24, 0x00	; 0
    2e50:	90 40       	sbci	r25, 0x00	; 0
    2e52:	e1 f7       	brne	.-8      	; 0x2e4c <register_code+0x86>
    2e54:	00 c0       	rjmp	.+0      	; 0x2e56 <register_code+0x90>
    2e56:	00 00       	nop
        del_key(KC_SCROLLLOCK);
    2e58:	87 e4       	ldi	r24, 0x47	; 71
    2e5a:	cf cf       	rjmp	.-98     	; 0x2dfa <register_code+0x34>
    else if IS_KEY(code) {
    2e5c:	8c ef       	ldi	r24, 0xFC	; 252
    2e5e:	8c 0f       	add	r24, r28
    2e60:	81 3a       	cpi	r24, 0xA1	; 161
    2e62:	20 f0       	brcs	.+8      	; 0x2e6c <register_code+0xa6>
    2e64:	80 e5       	ldi	r24, 0x50	; 80
    2e66:	8c 0f       	add	r24, r28
    2e68:	8e 32       	cpi	r24, 0x2E	; 46
    2e6a:	48 f4       	brcc	.+18     	; 0x2e7e <register_code+0xb8>
        if (command_proc(code)) return;
    2e6c:	8c 2f       	mov	r24, r28
    2e6e:	0e 94 43 29 	call	0x5286	; 0x5286 <command_proc>
    2e72:	81 11       	cpse	r24, r1
    2e74:	4b c0       	rjmp	.+150    	; 0x2f0c <register_code+0x146>
            add_key(code);
    2e76:	8c 2f       	mov	r24, r28
    2e78:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <add_key>
            send_keyboard_report();
    2e7c:	c0 cf       	rjmp	.-128    	; 0x2dfe <register_code+0x38>
    else if IS_MOD(code) {
    2e7e:	80 e2       	ldi	r24, 0x20	; 32
    2e80:	8c 0f       	add	r24, r28
    2e82:	88 30       	cpi	r24, 0x08	; 8
    2e84:	48 f4       	brcc	.+18     	; 0x2e98 <register_code+0xd2>
        add_mods(MOD_BIT(code));
    2e86:	c7 70       	andi	r28, 0x07	; 7
    2e88:	81 e0       	ldi	r24, 0x01	; 1
    2e8a:	01 c0       	rjmp	.+2      	; 0x2e8e <register_code+0xc8>
    2e8c:	88 0f       	add	r24, r24
    2e8e:	ca 95       	dec	r28
    2e90:	ea f7       	brpl	.-6      	; 0x2e8c <register_code+0xc6>
    2e92:	0e 94 2c 22 	call	0x4458	; 0x4458 <add_mods>
        send_keyboard_report();
    2e96:	b3 cf       	rjmp	.-154    	; 0x2dfe <register_code+0x38>
    else if IS_SYSTEM(code) {
    2e98:	8b e5       	ldi	r24, 0x5B	; 91
    2e9a:	8c 0f       	add	r24, r28
    2e9c:	83 30       	cpi	r24, 0x03	; 3
    2e9e:	68 f4       	brcc	.+26     	; 0x2eba <register_code+0xf4>
        host_system_send(KEYCODE2SYSTEM(code));
    2ea0:	81 e8       	ldi	r24, 0x81	; 129
    2ea2:	90 e0       	ldi	r25, 0x00	; 0
    2ea4:	c5 3a       	cpi	r28, 0xA5	; 165
    2ea6:	31 f0       	breq	.+12     	; 0x2eb4 <register_code+0xee>
    2ea8:	83 e8       	ldi	r24, 0x83	; 131
    2eaa:	90 e0       	ldi	r25, 0x00	; 0
    2eac:	c6 3a       	cpi	r28, 0xA6	; 166
    2eae:	11 f4       	brne	.+4      	; 0x2eb4 <register_code+0xee>
    2eb0:	82 e8       	ldi	r24, 0x82	; 130
    2eb2:	90 e0       	ldi	r25, 0x00	; 0
}
    2eb4:	cf 91       	pop	r28
        host_system_send(KEYCODE2SYSTEM(code));
    2eb6:	0c 94 4f 15 	jmp	0x2a9e	; 0x2a9e <host_system_send>
    else if IS_CONSUMER(code) {
    2eba:	88 e5       	ldi	r24, 0x58	; 88
    2ebc:	8c 0f       	add	r24, r28
    2ebe:	85 31       	cpi	r24, 0x15	; 21
    2ec0:	28 f5       	brcc	.+74     	; 0x2f0c <register_code+0x146>
        host_consumer_send(KEYCODE2CONSUMER(code));
    2ec2:	82 ee       	ldi	r24, 0xE2	; 226
    2ec4:	90 e0       	ldi	r25, 0x00	; 0
    2ec6:	c8 3a       	cpi	r28, 0xA8	; 168
    2ec8:	f1 f0       	breq	.+60     	; 0x2f06 <register_code+0x140>
    2eca:	89 ee       	ldi	r24, 0xE9	; 233
    2ecc:	90 e0       	ldi	r25, 0x00	; 0
    2ece:	c9 3a       	cpi	r28, 0xA9	; 169
    2ed0:	d1 f0       	breq	.+52     	; 0x2f06 <register_code+0x140>
    2ed2:	8a ee       	ldi	r24, 0xEA	; 234
    2ed4:	90 e0       	ldi	r25, 0x00	; 0
    2ed6:	ca 3a       	cpi	r28, 0xAA	; 170
    2ed8:	b1 f0       	breq	.+44     	; 0x2f06 <register_code+0x140>
    2eda:	85 eb       	ldi	r24, 0xB5	; 181
    2edc:	90 e0       	ldi	r25, 0x00	; 0
    2ede:	cb 3a       	cpi	r28, 0xAB	; 171
    2ee0:	91 f0       	breq	.+36     	; 0x2f06 <register_code+0x140>
    2ee2:	86 eb       	ldi	r24, 0xB6	; 182
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	cc 3a       	cpi	r28, 0xAC	; 172
    2ee8:	71 f0       	breq	.+28     	; 0x2f06 <register_code+0x140>
    2eea:	83 eb       	ldi	r24, 0xB3	; 179
    2eec:	90 e0       	ldi	r25, 0x00	; 0
    2eee:	cd 3a       	cpi	r28, 0xAD	; 173
    2ef0:	51 f0       	breq	.+20     	; 0x2f06 <register_code+0x140>
    2ef2:	84 eb       	ldi	r24, 0xB4	; 180
    2ef4:	90 e0       	ldi	r25, 0x00	; 0
    2ef6:	ce 3a       	cpi	r28, 0xAE	; 174
    2ef8:	31 f0       	breq	.+12     	; 0x2f06 <register_code+0x140>
    2efa:	90 e0       	ldi	r25, 0x00	; 0
    2efc:	80 e0       	ldi	r24, 0x00	; 0
    2efe:	cf 3a       	cpi	r28, 0xAF	; 175
    2f00:	11 f4       	brne	.+4      	; 0x2f06 <register_code+0x140>
    2f02:	87 eb       	ldi	r24, 0xB7	; 183
    2f04:	90 e0       	ldi	r25, 0x00	; 0
}
    2f06:	cf 91       	pop	r28
        host_consumer_send(KEYCODE2CONSUMER(code));
    2f08:	0c 94 7c 15 	jmp	0x2af8	; 0x2af8 <host_consumer_send>
}
    2f0c:	cf 91       	pop	r28
    2f0e:	08 95       	ret

00002f10 <unregister_code>:

void unregister_code(uint8_t code)
{
    if (code == KC_NO) {
    2f10:	88 23       	and	r24, r24
    2f12:	09 f4       	brne	.+2      	; 0x2f16 <unregister_code+0x6>
    2f14:	6a c0       	rjmp	.+212    	; 0x2fea <unregister_code+0xda>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    2f16:	82 38       	cpi	r24, 0x82	; 130
    2f18:	b9 f4       	brne	.+46     	; 0x2f48 <unregister_code+0x38>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is off
        if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
    2f1a:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <host_keyboard_leds>
    2f1e:	81 ff       	sbrs	r24, 1
    2f20:	64 c0       	rjmp	.+200    	; 0x2fea <unregister_code+0xda>
#endif
        add_key(KC_CAPSLOCK);
    2f22:	89 e3       	ldi	r24, 0x39	; 57
    2f24:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <add_key>
        send_keyboard_report();
    2f28:	0e 94 67 22 	call	0x44ce	; 0x44ce <send_keyboard_report>
    2f2c:	2f ef       	ldi	r18, 0xFF	; 255
    2f2e:	81 ee       	ldi	r24, 0xE1	; 225
    2f30:	94 e0       	ldi	r25, 0x04	; 4
    2f32:	21 50       	subi	r18, 0x01	; 1
    2f34:	80 40       	sbci	r24, 0x00	; 0
    2f36:	90 40       	sbci	r25, 0x00	; 0
    2f38:	e1 f7       	brne	.-8      	; 0x2f32 <unregister_code+0x22>
    2f3a:	00 c0       	rjmp	.+0      	; 0x2f3c <unregister_code+0x2c>
    2f3c:	00 00       	nop
        wait_ms(100);
        del_key(KC_CAPSLOCK);
    2f3e:	89 e3       	ldi	r24, 0x39	; 57
        if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
#endif
        add_key(KC_NUMLOCK);
        send_keyboard_report();
        wait_ms(100);
        del_key(KC_NUMLOCK);
    2f40:	0e 94 09 22 	call	0x4412	; 0x4412 <del_key>
        send_keyboard_report();
    2f44:	0c 94 67 22 	jmp	0x44ce	; 0x44ce <send_keyboard_report>
    else if (KC_LOCKING_NUM == code) {
    2f48:	83 38       	cpi	r24, 0x83	; 131
    2f4a:	a1 f4       	brne	.+40     	; 0x2f74 <unregister_code+0x64>
        if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
    2f4c:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <host_keyboard_leds>
    2f50:	80 ff       	sbrs	r24, 0
    2f52:	4b c0       	rjmp	.+150    	; 0x2fea <unregister_code+0xda>
        add_key(KC_NUMLOCK);
    2f54:	83 e5       	ldi	r24, 0x53	; 83
    2f56:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <add_key>
        send_keyboard_report();
    2f5a:	0e 94 67 22 	call	0x44ce	; 0x44ce <send_keyboard_report>
    2f5e:	2f ef       	ldi	r18, 0xFF	; 255
    2f60:	81 ee       	ldi	r24, 0xE1	; 225
    2f62:	94 e0       	ldi	r25, 0x04	; 4
    2f64:	21 50       	subi	r18, 0x01	; 1
    2f66:	80 40       	sbci	r24, 0x00	; 0
    2f68:	90 40       	sbci	r25, 0x00	; 0
    2f6a:	e1 f7       	brne	.-8      	; 0x2f64 <unregister_code+0x54>
    2f6c:	00 c0       	rjmp	.+0      	; 0x2f6e <unregister_code+0x5e>
    2f6e:	00 00       	nop
        del_key(KC_NUMLOCK);
    2f70:	83 e5       	ldi	r24, 0x53	; 83
    2f72:	e6 cf       	rjmp	.-52     	; 0x2f40 <unregister_code+0x30>
    }

    else if (KC_LOCKING_SCROLL == code) {
    2f74:	84 38       	cpi	r24, 0x84	; 132
    2f76:	a1 f4       	brne	.+40     	; 0x2fa0 <unregister_code+0x90>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
    2f78:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <host_keyboard_leds>
    2f7c:	82 ff       	sbrs	r24, 2
    2f7e:	35 c0       	rjmp	.+106    	; 0x2fea <unregister_code+0xda>
#endif
        add_key(KC_SCROLLLOCK);
    2f80:	87 e4       	ldi	r24, 0x47	; 71
    2f82:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <add_key>
        send_keyboard_report();
    2f86:	0e 94 67 22 	call	0x44ce	; 0x44ce <send_keyboard_report>
    2f8a:	2f ef       	ldi	r18, 0xFF	; 255
    2f8c:	81 ee       	ldi	r24, 0xE1	; 225
    2f8e:	94 e0       	ldi	r25, 0x04	; 4
    2f90:	21 50       	subi	r18, 0x01	; 1
    2f92:	80 40       	sbci	r24, 0x00	; 0
    2f94:	90 40       	sbci	r25, 0x00	; 0
    2f96:	e1 f7       	brne	.-8      	; 0x2f90 <unregister_code+0x80>
    2f98:	00 c0       	rjmp	.+0      	; 0x2f9a <unregister_code+0x8a>
    2f9a:	00 00       	nop
        wait_ms(100);
        del_key(KC_SCROLLLOCK);
    2f9c:	87 e4       	ldi	r24, 0x47	; 71
    2f9e:	d0 cf       	rjmp	.-96     	; 0x2f40 <unregister_code+0x30>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    2fa0:	9c ef       	ldi	r25, 0xFC	; 252
    2fa2:	98 0f       	add	r25, r24
    2fa4:	91 3a       	cpi	r25, 0xA1	; 161
    2fa6:	60 f2       	brcs	.-104    	; 0x2f40 <unregister_code+0x30>
    2fa8:	90 e5       	ldi	r25, 0x50	; 80
    2faa:	98 0f       	add	r25, r24
    2fac:	9e 32       	cpi	r25, 0x2E	; 46
    2fae:	40 f2       	brcs	.-112    	; 0x2f40 <unregister_code+0x30>
        del_key(code);
        send_keyboard_report();
    }
    else if IS_MOD(code) {
    2fb0:	90 e2       	ldi	r25, 0x20	; 32
    2fb2:	98 0f       	add	r25, r24
    2fb4:	98 30       	cpi	r25, 0x08	; 8
    2fb6:	50 f4       	brcc	.+20     	; 0x2fcc <unregister_code+0xbc>
        del_mods(MOD_BIT(code));
    2fb8:	87 70       	andi	r24, 0x07	; 7
    2fba:	91 e0       	ldi	r25, 0x01	; 1
    2fbc:	01 c0       	rjmp	.+2      	; 0x2fc0 <unregister_code+0xb0>
    2fbe:	99 0f       	add	r25, r25
    2fc0:	8a 95       	dec	r24
    2fc2:	ea f7       	brpl	.-6      	; 0x2fbe <unregister_code+0xae>
    2fc4:	89 2f       	mov	r24, r25
    2fc6:	0e 94 32 22 	call	0x4464	; 0x4464 <del_mods>
        send_keyboard_report();
    2fca:	bc cf       	rjmp	.-136    	; 0x2f44 <unregister_code+0x34>
    }
    else if IS_SYSTEM(code) {
    2fcc:	9b e5       	ldi	r25, 0x5B	; 91
    2fce:	98 0f       	add	r25, r24
    2fd0:	93 30       	cpi	r25, 0x03	; 3
    2fd2:	20 f4       	brcc	.+8      	; 0x2fdc <unregister_code+0xcc>
        host_system_send(0);
    2fd4:	90 e0       	ldi	r25, 0x00	; 0
    2fd6:	80 e0       	ldi	r24, 0x00	; 0
    2fd8:	0c 94 4f 15 	jmp	0x2a9e	; 0x2a9e <host_system_send>
    }
    else if IS_CONSUMER(code) {
    2fdc:	88 5a       	subi	r24, 0xA8	; 168
    2fde:	85 31       	cpi	r24, 0x15	; 21
    2fe0:	20 f4       	brcc	.+8      	; 0x2fea <unregister_code+0xda>
        host_consumer_send(0);
    2fe2:	90 e0       	ldi	r25, 0x00	; 0
    2fe4:	80 e0       	ldi	r24, 0x00	; 0
    2fe6:	0c 94 7c 15 	jmp	0x2af8	; 0x2af8 <host_consumer_send>
    }
}
    2fea:	08 95       	ret

00002fec <register_mods>:
    unregister_code(code);
}

void register_mods(uint8_t mods)
{
    if (mods) {
    2fec:	88 23       	and	r24, r24
    2fee:	21 f0       	breq	.+8      	; 0x2ff8 <register_mods+0xc>
        add_mods(mods);
    2ff0:	0e 94 2c 22 	call	0x4458	; 0x4458 <add_mods>
        send_keyboard_report();
    2ff4:	0c 94 67 22 	jmp	0x44ce	; 0x44ce <send_keyboard_report>
    }
}
    2ff8:	08 95       	ret

00002ffa <unregister_mods>:

void unregister_mods(uint8_t mods)
{
    if (mods) {
    2ffa:	88 23       	and	r24, r24
    2ffc:	21 f0       	breq	.+8      	; 0x3006 <unregister_mods+0xc>
        del_mods(mods);
    2ffe:	0e 94 32 22 	call	0x4464	; 0x4464 <del_mods>
        send_keyboard_report();
    3002:	0c 94 67 22 	jmp	0x44ce	; 0x44ce <send_keyboard_report>
    }
}
    3006:	08 95       	ret

00003008 <process_action>:
{
    3008:	af 92       	push	r10
    300a:	bf 92       	push	r11
    300c:	cf 92       	push	r12
    300e:	df 92       	push	r13
    3010:	ef 92       	push	r14
    3012:	ff 92       	push	r15
    3014:	0f 93       	push	r16
    3016:	1f 93       	push	r17
    3018:	cf 93       	push	r28
    301a:	df 93       	push	r29
    301c:	cd b7       	in	r28, 0x3d	; 61
    301e:	de b7       	in	r29, 0x3e	; 62
    3020:	29 97       	sbiw	r28, 0x09	; 9
    3022:	0f b6       	in	r0, 0x3f	; 63
    3024:	f8 94       	cli
    3026:	de bf       	out	0x3e, r29	; 62
    3028:	0f be       	out	0x3f, r0	; 63
    302a:	cd bf       	out	0x3d, r28	; 61
    302c:	5c 01       	movw	r10, r24
    if (hook_process_action(record)) return;
    302e:	0e 94 ba 22 	call	0x4574	; 0x4574 <hook_process_action>
    3032:	81 11       	cpse	r24, r1
    3034:	14 c0       	rjmp	.+40     	; 0x305e <process_action+0x56>
    keyevent_t event = record->event;
    3036:	85 e0       	ldi	r24, 0x05	; 5
    3038:	f5 01       	movw	r30, r10
    303a:	de 01       	movw	r26, r28
    303c:	11 96       	adiw	r26, 0x01	; 1
    303e:	01 90       	ld	r0, Z+
    3040:	0d 92       	st	X+, r0
    3042:	8a 95       	dec	r24
    3044:	e1 f7       	brne	.-8      	; 0x303e <process_action+0x36>
    3046:	f5 01       	movw	r30, r10
    3048:	83 81       	ldd	r24, Z+3	; 0x03
    304a:	94 81       	ldd	r25, Z+4	; 0x04
    304c:	00 97       	sbiw	r24, 0x00	; 0
    304e:	39 f0       	breq	.+14     	; 0x305e <process_action+0x56>
    3050:	40 81       	ld	r20, Z
    3052:	51 81       	ldd	r21, Z+1	; 0x01
    3054:	24 2f       	mov	r18, r20
    3056:	25 23       	and	r18, r21
    3058:	2f 3f       	cpi	r18, 0xFF	; 255
    305a:	09 f0       	breq	.+2      	; 0x305e <process_action+0x56>
    305c:	24 c3       	rjmp	.+1608   	; 0x36a6 <process_action+0x69e>
}
    305e:	29 96       	adiw	r28, 0x09	; 9
    3060:	0f b6       	in	r0, 0x3f	; 63
    3062:	f8 94       	cli
    3064:	de bf       	out	0x3e, r29	; 62
    3066:	0f be       	out	0x3f, r0	; 63
    3068:	cd bf       	out	0x3d, r28	; 61
    306a:	df 91       	pop	r29
    306c:	cf 91       	pop	r28
    306e:	1f 91       	pop	r17
    3070:	0f 91       	pop	r16
    3072:	ff 90       	pop	r15
    3074:	ef 90       	pop	r14
    3076:	df 90       	pop	r13
    3078:	cf 90       	pop	r12
    307a:	bf 90       	pop	r11
    307c:	af 90       	pop	r10
    307e:	08 95       	ret
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
    3080:	f1 2f       	mov	r31, r17
    3082:	ff 70       	andi	r31, 0x0F	; 15
    3084:	ef 2e       	mov	r14, r31
    3086:	10 7f       	andi	r17, 0xF0	; 240
    3088:	19 f0       	breq	.+6      	; 0x3090 <process_action+0x88>
    308a:	e2 94       	swap	r14
    308c:	40 ef       	ldi	r20, 0xF0	; 240
    308e:	e4 22       	and	r14, r20
                if (event.pressed) {
    3090:	ff 20       	and	r15, r15
    3092:	d1 f0       	breq	.+52     	; 0x30c8 <process_action+0xc0>
                    if (mods) {
    3094:	ee 20       	and	r14, r14
    3096:	29 f0       	breq	.+10     	; 0x30a2 <process_action+0x9a>
                        add_weak_mods(mods);
    3098:	8e 2d       	mov	r24, r14
    309a:	0e 94 40 22 	call	0x4480	; 0x4480 <add_weak_mods>
                        send_keyboard_report();
    309e:	0e 94 67 22 	call	0x44ce	; 0x44ce <send_keyboard_report>
                            register_code(action.layer_tap.code);
    30a2:	80 2f       	mov	r24, r16
}
    30a4:	29 96       	adiw	r28, 0x09	; 9
    30a6:	0f b6       	in	r0, 0x3f	; 63
    30a8:	f8 94       	cli
    30aa:	de bf       	out	0x3e, r29	; 62
    30ac:	0f be       	out	0x3f, r0	; 63
    30ae:	cd bf       	out	0x3d, r28	; 61
    30b0:	df 91       	pop	r29
    30b2:	cf 91       	pop	r28
    30b4:	1f 91       	pop	r17
    30b6:	0f 91       	pop	r16
    30b8:	ff 90       	pop	r15
    30ba:	ef 90       	pop	r14
    30bc:	df 90       	pop	r13
    30be:	cf 90       	pop	r12
    30c0:	bf 90       	pop	r11
    30c2:	af 90       	pop	r10
                            register_code(action.layer_tap.code);
    30c4:	0c 94 e3 16 	jmp	0x2dc6	; 0x2dc6 <register_code>
                    unregister_code(action.key.code);
    30c8:	80 2f       	mov	r24, r16
    30ca:	0e 94 88 17 	call	0x2f10	; 0x2f10 <unregister_code>
                    if (mods) {
    30ce:	ee 20       	and	r14, r14
    30d0:	31 f2       	breq	.-116    	; 0x305e <process_action+0x56>
                        del_weak_mods(mods);
    30d2:	8e 2d       	mov	r24, r14
    30d4:	0e 94 46 22 	call	0x448c	; 0x448c <del_weak_mods>
}
    30d8:	29 96       	adiw	r28, 0x09	; 9
    30da:	0f b6       	in	r0, 0x3f	; 63
    30dc:	f8 94       	cli
    30de:	de bf       	out	0x3e, r29	; 62
    30e0:	0f be       	out	0x3f, r0	; 63
    30e2:	cd bf       	out	0x3d, r28	; 61
    30e4:	df 91       	pop	r29
    30e6:	cf 91       	pop	r28
    30e8:	1f 91       	pop	r17
    30ea:	0f 91       	pop	r16
    30ec:	ff 90       	pop	r15
    30ee:	ef 90       	pop	r14
    30f0:	df 90       	pop	r13
    30f2:	cf 90       	pop	r12
    30f4:	bf 90       	pop	r11
    30f6:	af 90       	pop	r10
                        send_keyboard_report();
    30f8:	0c 94 67 22 	jmp	0x44ce	; 0x44ce <send_keyboard_report>
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
    30fc:	21 2f       	mov	r18, r17
    30fe:	2f 70       	andi	r18, 0x0F	; 15
    3100:	d2 2e       	mov	r13, r18
    3102:	10 7f       	andi	r17, 0xF0	; 240
    3104:	10 32       	cpi	r17, 0x20	; 32
    3106:	19 f0       	breq	.+6      	; 0x310e <process_action+0x106>
    3108:	d2 94       	swap	r13
    310a:	30 ef       	ldi	r19, 0xF0	; 240
    310c:	d3 22       	and	r13, r19
                switch (action.key.code) {
    310e:	00 23       	and	r16, r16
    3110:	79 f0       	breq	.+30     	; 0x3130 <process_action+0x128>
    3112:	01 30       	cpi	r16, 0x01	; 1
    3114:	09 f4       	brne	.+2      	; 0x3118 <process_action+0x110>
    3116:	55 c0       	rjmp	.+170    	; 0x31c2 <process_action+0x1ba>
                        if (event.pressed) {
    3118:	ff 20       	and	r15, r15
    311a:	09 f4       	brne	.+2      	; 0x311e <process_action+0x116>
    311c:	63 c0       	rjmp	.+198    	; 0x31e4 <process_action+0x1dc>
                            if (tap_count > 0) {
    311e:	ee 20       	and	r14, r14
    3120:	59 f0       	breq	.+22     	; 0x3138 <process_action+0x130>
                                if (record->tap.interrupted) {
    3122:	f5 01       	movw	r30, r10
    3124:	85 81       	ldd	r24, Z+5	; 0x05
    3126:	80 ff       	sbrs	r24, 0
    3128:	bc cf       	rjmp	.-136    	; 0x30a2 <process_action+0x9a>
                                    record->tap.count = 0;
    312a:	8f 70       	andi	r24, 0x0F	; 15
    312c:	85 83       	std	Z+5, r24	; 0x05
                                    register_mods(mods);
    312e:	04 c0       	rjmp	.+8      	; 0x3138 <process_action+0x130>
                        if (event.pressed) {
    3130:	ff 20       	and	r15, r15
    3132:	59 f1       	breq	.+86     	; 0x318a <process_action+0x182>
                            if (tap_count == 0) {
    3134:	e1 10       	cpse	r14, r1
    3136:	13 c0       	rjmp	.+38     	; 0x315e <process_action+0x156>
                                    register_mods(mods);
    3138:	8d 2d       	mov	r24, r13
}
    313a:	29 96       	adiw	r28, 0x09	; 9
    313c:	0f b6       	in	r0, 0x3f	; 63
    313e:	f8 94       	cli
    3140:	de bf       	out	0x3e, r29	; 62
    3142:	0f be       	out	0x3f, r0	; 63
    3144:	cd bf       	out	0x3d, r28	; 61
    3146:	df 91       	pop	r29
    3148:	cf 91       	pop	r28
    314a:	1f 91       	pop	r17
    314c:	0f 91       	pop	r16
    314e:	ff 90       	pop	r15
    3150:	ef 90       	pop	r14
    3152:	df 90       	pop	r13
    3154:	cf 90       	pop	r12
    3156:	bf 90       	pop	r11
    3158:	af 90       	pop	r10
                                    register_mods(mods);
    315a:	0c 94 f6 17 	jmp	0x2fec	; 0x2fec <register_mods>
                            else if (tap_count == 1) {
    315e:	31 e0       	ldi	r19, 0x01	; 1
                                set_oneshot_mods(mods);
    3160:	8d 2d       	mov	r24, r13
                            else if (tap_count == 1) {
    3162:	e3 12       	cpse	r14, r19
    3164:	ea cf       	rjmp	.-44     	; 0x313a <process_action+0x132>
}
    3166:	29 96       	adiw	r28, 0x09	; 9
    3168:	0f b6       	in	r0, 0x3f	; 63
    316a:	f8 94       	cli
    316c:	de bf       	out	0x3e, r29	; 62
    316e:	0f be       	out	0x3f, r0	; 63
    3170:	cd bf       	out	0x3d, r28	; 61
    3172:	df 91       	pop	r29
    3174:	cf 91       	pop	r28
    3176:	1f 91       	pop	r17
    3178:	0f 91       	pop	r16
    317a:	ff 90       	pop	r15
    317c:	ef 90       	pop	r14
    317e:	df 90       	pop	r13
    3180:	cf 90       	pop	r12
    3182:	bf 90       	pop	r11
    3184:	af 90       	pop	r10
                                set_oneshot_mods(mods);
    3186:	0c 94 51 22 	jmp	0x44a2	; 0x44a2 <set_oneshot_mods>
                            if (tap_count == 0) {
    318a:	e1 10       	cpse	r14, r1
    318c:	15 c0       	rjmp	.+42     	; 0x31b8 <process_action+0x1b0>
                                clear_oneshot_mods();
    318e:	0e 94 54 22 	call	0x44a8	; 0x44a8 <clear_oneshot_mods>
                                unregister_mods(mods);
    3192:	8d 2d       	mov	r24, r13
}
    3194:	29 96       	adiw	r28, 0x09	; 9
    3196:	0f b6       	in	r0, 0x3f	; 63
    3198:	f8 94       	cli
    319a:	de bf       	out	0x3e, r29	; 62
    319c:	0f be       	out	0x3f, r0	; 63
    319e:	cd bf       	out	0x3d, r28	; 61
    31a0:	df 91       	pop	r29
    31a2:	cf 91       	pop	r28
    31a4:	1f 91       	pop	r17
    31a6:	0f 91       	pop	r16
    31a8:	ff 90       	pop	r15
    31aa:	ef 90       	pop	r14
    31ac:	df 90       	pop	r13
    31ae:	cf 90       	pop	r12
    31b0:	bf 90       	pop	r11
    31b2:	af 90       	pop	r10
                        unregister_mods((action.layer_tap.code & 0x10) ?
    31b4:	0c 94 fd 17 	jmp	0x2ffa	; 0x2ffa <unregister_mods>
                            else if (tap_count == 1) {
    31b8:	41 e0       	ldi	r20, 0x01	; 1
    31ba:	e4 16       	cp	r14, r20
    31bc:	09 f4       	brne	.+2      	; 0x31c0 <process_action+0x1b8>
    31be:	4f cf       	rjmp	.-354    	; 0x305e <process_action+0x56>
    31c0:	e6 cf       	rjmp	.-52     	; 0x318e <process_action+0x186>
                        if (event.pressed) {
    31c2:	ff 20       	and	r15, r15
    31c4:	51 f0       	breq	.+20     	; 0x31da <process_action+0x1d2>
                            if (tap_count <= TAPPING_TOGGLE) {
    31c6:	55 e0       	ldi	r21, 0x05	; 5
    31c8:	5e 15       	cp	r21, r14
    31ca:	08 f4       	brcc	.+2      	; 0x31ce <process_action+0x1c6>
    31cc:	48 cf       	rjmp	.-368    	; 0x305e <process_action+0x56>
                                if (mods & get_mods()) {
    31ce:	0e 94 29 22 	call	0x4452	; 0x4452 <get_mods>
    31d2:	8d 21       	and	r24, r13
    31d4:	09 f4       	brne	.+2      	; 0x31d8 <process_action+0x1d0>
    31d6:	b0 cf       	rjmp	.-160    	; 0x3138 <process_action+0x130>
    31d8:	dc cf       	rjmp	.-72     	; 0x3192 <process_action+0x18a>
                            if (tap_count < TAPPING_TOGGLE) {
    31da:	84 e0       	ldi	r24, 0x04	; 4
    31dc:	8e 15       	cp	r24, r14
    31de:	08 f4       	brcc	.+2      	; 0x31e2 <process_action+0x1da>
    31e0:	3e cf       	rjmp	.-388    	; 0x305e <process_action+0x56>
    31e2:	d7 cf       	rjmp	.-82     	; 0x3192 <process_action+0x18a>
                            if (tap_count > 0) {
    31e4:	ee 20       	and	r14, r14
    31e6:	a9 f2       	breq	.-86     	; 0x3192 <process_action+0x18a>
                            unregister_code(action.layer_tap.code);
    31e8:	80 2f       	mov	r24, r16
}
    31ea:	29 96       	adiw	r28, 0x09	; 9
    31ec:	0f b6       	in	r0, 0x3f	; 63
    31ee:	f8 94       	cli
    31f0:	de bf       	out	0x3e, r29	; 62
    31f2:	0f be       	out	0x3f, r0	; 63
    31f4:	cd bf       	out	0x3d, r28	; 61
    31f6:	df 91       	pop	r29
    31f8:	cf 91       	pop	r28
    31fa:	1f 91       	pop	r17
    31fc:	0f 91       	pop	r16
    31fe:	ff 90       	pop	r15
    3200:	ef 90       	pop	r14
    3202:	df 90       	pop	r13
    3204:	cf 90       	pop	r12
    3206:	bf 90       	pop	r11
    3208:	af 90       	pop	r10
                            unregister_code(action.layer_tap.code);
    320a:	0c 94 88 17 	jmp	0x2f10	; 0x2f10 <unregister_code>
            switch (action.usage.page) {
    320e:	81 2f       	mov	r24, r17
    3210:	86 95       	lsr	r24
    3212:	86 95       	lsr	r24
    3214:	83 70       	andi	r24, 0x03	; 3
    3216:	d9 f0       	breq	.+54     	; 0x324e <process_action+0x246>
    3218:	81 30       	cpi	r24, 0x01	; 1
    321a:	09 f0       	breq	.+2      	; 0x321e <process_action+0x216>
    321c:	20 cf       	rjmp	.-448    	; 0x305e <process_action+0x56>
                        host_consumer_send(action.usage.code);
    321e:	c8 01       	movw	r24, r16
    3220:	93 70       	andi	r25, 0x03	; 3
                    if (event.pressed) {
    3222:	f1 10       	cpse	r15, r1
    3224:	02 c0       	rjmp	.+4      	; 0x322a <process_action+0x222>
                        host_consumer_send(0);
    3226:	90 e0       	ldi	r25, 0x00	; 0
    3228:	80 e0       	ldi	r24, 0x00	; 0
}
    322a:	29 96       	adiw	r28, 0x09	; 9
    322c:	0f b6       	in	r0, 0x3f	; 63
    322e:	f8 94       	cli
    3230:	de bf       	out	0x3e, r29	; 62
    3232:	0f be       	out	0x3f, r0	; 63
    3234:	cd bf       	out	0x3d, r28	; 61
    3236:	df 91       	pop	r29
    3238:	cf 91       	pop	r28
    323a:	1f 91       	pop	r17
    323c:	0f 91       	pop	r16
    323e:	ff 90       	pop	r15
    3240:	ef 90       	pop	r14
    3242:	df 90       	pop	r13
    3244:	cf 90       	pop	r12
    3246:	bf 90       	pop	r11
    3248:	af 90       	pop	r10
                        host_consumer_send(0);
    324a:	0c 94 7c 15 	jmp	0x2af8	; 0x2af8 <host_consumer_send>
                        host_system_send(action.usage.code);
    324e:	c8 01       	movw	r24, r16
    3250:	93 70       	andi	r25, 0x03	; 3
                    if (event.pressed) {
    3252:	f1 10       	cpse	r15, r1
    3254:	02 c0       	rjmp	.+4      	; 0x325a <process_action+0x252>
                        host_system_send(0);
    3256:	90 e0       	ldi	r25, 0x00	; 0
    3258:	80 e0       	ldi	r24, 0x00	; 0
}
    325a:	29 96       	adiw	r28, 0x09	; 9
    325c:	0f b6       	in	r0, 0x3f	; 63
    325e:	f8 94       	cli
    3260:	de bf       	out	0x3e, r29	; 62
    3262:	0f be       	out	0x3f, r0	; 63
    3264:	cd bf       	out	0x3d, r28	; 61
    3266:	df 91       	pop	r29
    3268:	cf 91       	pop	r28
    326a:	1f 91       	pop	r17
    326c:	0f 91       	pop	r16
    326e:	ff 90       	pop	r15
    3270:	ef 90       	pop	r14
    3272:	df 90       	pop	r13
    3274:	cf 90       	pop	r12
    3276:	bf 90       	pop	r11
    3278:	af 90       	pop	r10
                        host_system_send(0);
    327a:	0c 94 4f 15 	jmp	0x2a9e	; 0x2a9e <host_system_send>
                mousekey_on(action.key.code);
    327e:	80 2f       	mov	r24, r16
            if (event.pressed) {
    3280:	ff 20       	and	r15, r15
    3282:	a1 f0       	breq	.+40     	; 0x32ac <process_action+0x2a4>
                mousekey_on(action.key.code);
    3284:	0e 94 85 24 	call	0x490a	; 0x490a <mousekey_on>
}
    3288:	29 96       	adiw	r28, 0x09	; 9
    328a:	0f b6       	in	r0, 0x3f	; 63
    328c:	f8 94       	cli
    328e:	de bf       	out	0x3e, r29	; 62
    3290:	0f be       	out	0x3f, r0	; 63
    3292:	cd bf       	out	0x3d, r28	; 61
    3294:	df 91       	pop	r29
    3296:	cf 91       	pop	r28
    3298:	1f 91       	pop	r17
    329a:	0f 91       	pop	r16
    329c:	ff 90       	pop	r15
    329e:	ef 90       	pop	r14
    32a0:	df 90       	pop	r13
    32a2:	cf 90       	pop	r12
    32a4:	bf 90       	pop	r11
    32a6:	af 90       	pop	r10
                mousekey_send();
    32a8:	0c 94 6c 25 	jmp	0x4ad8	; 0x4ad8 <mousekey_send>
                mousekey_off(action.key.code);
    32ac:	0e 94 ed 24 	call	0x49da	; 0x49da <mousekey_off>
    32b0:	eb cf       	rjmp	.-42     	; 0x3288 <process_action+0x280>
            if (action.layer_bitop.on == 0) {
    32b2:	81 2f       	mov	r24, r17
    32b4:	83 70       	andi	r24, 0x03	; 3
    32b6:	09 f0       	breq	.+2      	; 0x32ba <process_action+0x2b2>
    32b8:	8c c0       	rjmp	.+280    	; 0x33d2 <process_action+0x3ca>
                if (!event.pressed) {
    32ba:	f1 10       	cpse	r15, r1
    32bc:	d0 ce       	rjmp	.-608    	; 0x305e <process_action+0x56>
                    uint8_t shift = action.layer_bitop.part*4;
    32be:	20 2f       	mov	r18, r16
    32c0:	22 95       	swap	r18
    32c2:	26 95       	lsr	r18
    32c4:	27 70       	andi	r18, 0x07	; 7
    32c6:	22 0f       	add	r18, r18
    32c8:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    32ca:	80 2f       	mov	r24, r16
    32cc:	8f 70       	andi	r24, 0x0F	; 15
    32ce:	90 e0       	ldi	r25, 0x00	; 0
    32d0:	b0 e0       	ldi	r27, 0x00	; 0
    32d2:	a0 e0       	ldi	r26, 0x00	; 0
    32d4:	6c 01       	movw	r12, r24
    32d6:	7d 01       	movw	r14, r26
    32d8:	02 2e       	mov	r0, r18
    32da:	04 c0       	rjmp	.+8      	; 0x32e4 <process_action+0x2dc>
    32dc:	cc 0c       	add	r12, r12
    32de:	dd 1c       	adc	r13, r13
    32e0:	ee 1c       	adc	r14, r14
    32e2:	ff 1c       	adc	r15, r15
    32e4:	0a 94       	dec	r0
    32e6:	d2 f7       	brpl	.-12     	; 0x32dc <process_action+0x2d4>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    32e8:	60 e0       	ldi	r22, 0x00	; 0
    32ea:	70 e0       	ldi	r23, 0x00	; 0
    32ec:	cb 01       	movw	r24, r22
    32ee:	04 ff       	sbrs	r16, 4
    32f0:	0f c0       	rjmp	.+30     	; 0x3310 <process_action+0x308>
    32f2:	6f e0       	ldi	r22, 0x0F	; 15
    32f4:	70 e0       	ldi	r23, 0x00	; 0
    32f6:	80 e0       	ldi	r24, 0x00	; 0
    32f8:	90 e0       	ldi	r25, 0x00	; 0
    32fa:	04 c0       	rjmp	.+8      	; 0x3304 <process_action+0x2fc>
    32fc:	66 0f       	add	r22, r22
    32fe:	77 1f       	adc	r23, r23
    3300:	88 1f       	adc	r24, r24
    3302:	99 1f       	adc	r25, r25
    3304:	2a 95       	dec	r18
    3306:	d2 f7       	brpl	.-12     	; 0x32fc <process_action+0x2f4>
    3308:	60 95       	com	r22
    330a:	70 95       	com	r23
    330c:	80 95       	com	r24
    330e:	90 95       	com	r25
                    switch (action.layer_bitop.op) {
    3310:	16 95       	lsr	r17
    3312:	16 95       	lsr	r17
    3314:	13 70       	andi	r17, 0x03	; 3
    3316:	12 30       	cpi	r17, 0x02	; 2
    3318:	c9 f1       	breq	.+114    	; 0x338c <process_action+0x384>
    331a:	13 30       	cpi	r17, 0x03	; 3
    331c:	09 f4       	brne	.+2      	; 0x3320 <process_action+0x318>
    331e:	54 c0       	rjmp	.+168    	; 0x33c8 <process_action+0x3c0>
    3320:	9b 01       	movw	r18, r22
    3322:	ac 01       	movw	r20, r24
    3324:	2c 29       	or	r18, r12
    3326:	3d 29       	or	r19, r13
    3328:	4e 29       	or	r20, r14
    332a:	5f 29       	or	r21, r15
    332c:	2e 83       	std	Y+6, r18	; 0x06
    332e:	3f 83       	std	Y+7, r19	; 0x07
    3330:	48 87       	std	Y+8, r20	; 0x08
    3332:	59 87       	std	Y+9, r21	; 0x09
    3334:	11 30       	cpi	r17, 0x01	; 1
    3336:	a1 f0       	breq	.+40     	; 0x3360 <process_action+0x358>
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    3338:	ca 01       	movw	r24, r20
    333a:	b9 01       	movw	r22, r18
}
    333c:	29 96       	adiw	r28, 0x09	; 9
    333e:	0f b6       	in	r0, 0x3f	; 63
    3340:	f8 94       	cli
    3342:	de bf       	out	0x3e, r29	; 62
    3344:	0f be       	out	0x3f, r0	; 63
    3346:	cd bf       	out	0x3d, r28	; 61
    3348:	df 91       	pop	r29
    334a:	cf 91       	pop	r28
    334c:	1f 91       	pop	r17
    334e:	0f 91       	pop	r16
    3350:	ff 90       	pop	r15
    3352:	ef 90       	pop	r14
    3354:	df 90       	pop	r13
    3356:	cf 90       	pop	r12
    3358:	bf 90       	pop	r11
    335a:	af 90       	pop	r10
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    335c:	0c 94 ae 1f 	jmp	0x3f5c	; 0x3f5c <default_layer_and>
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
    3360:	6e 81       	ldd	r22, Y+6	; 0x06
    3362:	7f 81       	ldd	r23, Y+7	; 0x07
    3364:	88 85       	ldd	r24, Y+8	; 0x08
    3366:	99 85       	ldd	r25, Y+9	; 0x09
}
    3368:	29 96       	adiw	r28, 0x09	; 9
    336a:	0f b6       	in	r0, 0x3f	; 63
    336c:	f8 94       	cli
    336e:	de bf       	out	0x3e, r29	; 62
    3370:	0f be       	out	0x3f, r0	; 63
    3372:	cd bf       	out	0x3d, r28	; 61
    3374:	df 91       	pop	r29
    3376:	cf 91       	pop	r28
    3378:	1f 91       	pop	r17
    337a:	0f 91       	pop	r16
    337c:	ff 90       	pop	r15
    337e:	ef 90       	pop	r14
    3380:	df 90       	pop	r13
    3382:	cf 90       	pop	r12
    3384:	bf 90       	pop	r11
    3386:	af 90       	pop	r10
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    3388:	0c 94 7e 1f 	jmp	0x3efc	; 0x3efc <default_layer_or>
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    338c:	9b 01       	movw	r18, r22
    338e:	ac 01       	movw	r20, r24
    3390:	2c 29       	or	r18, r12
    3392:	3d 29       	or	r19, r13
    3394:	4e 29       	or	r20, r14
    3396:	5f 29       	or	r21, r15
    3398:	2e 83       	std	Y+6, r18	; 0x06
    339a:	3f 83       	std	Y+7, r19	; 0x07
    339c:	48 87       	std	Y+8, r20	; 0x08
    339e:	59 87       	std	Y+9, r21	; 0x09
    33a0:	ca 01       	movw	r24, r20
    33a2:	b9 01       	movw	r22, r18
}
    33a4:	29 96       	adiw	r28, 0x09	; 9
    33a6:	0f b6       	in	r0, 0x3f	; 63
    33a8:	f8 94       	cli
    33aa:	de bf       	out	0x3e, r29	; 62
    33ac:	0f be       	out	0x3f, r0	; 63
    33ae:	cd bf       	out	0x3d, r28	; 61
    33b0:	df 91       	pop	r29
    33b2:	cf 91       	pop	r28
    33b4:	1f 91       	pop	r17
    33b6:	0f 91       	pop	r16
    33b8:	ff 90       	pop	r15
    33ba:	ef 90       	pop	r14
    33bc:	df 90       	pop	r13
    33be:	cf 90       	pop	r12
    33c0:	bf 90       	pop	r11
    33c2:	af 90       	pop	r10
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    33c4:	0c 94 de 1f 	jmp	0x3fbc	; 0x3fbc <default_layer_xor>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    33c8:	0e 94 ae 1f 	call	0x3f5c	; 0x3f5c <default_layer_and>
    33cc:	c7 01       	movw	r24, r14
    33ce:	b6 01       	movw	r22, r12
    33d0:	cb cf       	rjmp	.-106    	; 0x3368 <process_action+0x360>
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    33d2:	86 95       	lsr	r24
    33d4:	ff 20       	and	r15, r15
    33d6:	11 f0       	breq	.+4      	; 0x33dc <process_action+0x3d4>
    33d8:	81 2f       	mov	r24, r17
    33da:	81 70       	andi	r24, 0x01	; 1
    33dc:	88 23       	and	r24, r24
    33de:	09 f4       	brne	.+2      	; 0x33e2 <process_action+0x3da>
    33e0:	3e ce       	rjmp	.-900    	; 0x305e <process_action+0x56>
                    uint8_t shift = action.layer_bitop.part*4;
    33e2:	20 2f       	mov	r18, r16
    33e4:	22 95       	swap	r18
    33e6:	26 95       	lsr	r18
    33e8:	27 70       	andi	r18, 0x07	; 7
    33ea:	22 0f       	add	r18, r18
    33ec:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    33ee:	80 2f       	mov	r24, r16
    33f0:	8f 70       	andi	r24, 0x0F	; 15
    33f2:	90 e0       	ldi	r25, 0x00	; 0
    33f4:	b0 e0       	ldi	r27, 0x00	; 0
    33f6:	a0 e0       	ldi	r26, 0x00	; 0
    33f8:	6c 01       	movw	r12, r24
    33fa:	7d 01       	movw	r14, r26
    33fc:	02 2e       	mov	r0, r18
    33fe:	04 c0       	rjmp	.+8      	; 0x3408 <process_action+0x400>
    3400:	cc 0c       	add	r12, r12
    3402:	dd 1c       	adc	r13, r13
    3404:	ee 1c       	adc	r14, r14
    3406:	ff 1c       	adc	r15, r15
    3408:	0a 94       	dec	r0
    340a:	d2 f7       	brpl	.-12     	; 0x3400 <process_action+0x3f8>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    340c:	60 e0       	ldi	r22, 0x00	; 0
    340e:	70 e0       	ldi	r23, 0x00	; 0
    3410:	cb 01       	movw	r24, r22
    3412:	04 ff       	sbrs	r16, 4
    3414:	0f c0       	rjmp	.+30     	; 0x3434 <process_action+0x42c>
    3416:	6f e0       	ldi	r22, 0x0F	; 15
    3418:	70 e0       	ldi	r23, 0x00	; 0
    341a:	80 e0       	ldi	r24, 0x00	; 0
    341c:	90 e0       	ldi	r25, 0x00	; 0
    341e:	04 c0       	rjmp	.+8      	; 0x3428 <process_action+0x420>
    3420:	66 0f       	add	r22, r22
    3422:	77 1f       	adc	r23, r23
    3424:	88 1f       	adc	r24, r24
    3426:	99 1f       	adc	r25, r25
    3428:	2a 95       	dec	r18
    342a:	d2 f7       	brpl	.-12     	; 0x3420 <process_action+0x418>
    342c:	60 95       	com	r22
    342e:	70 95       	com	r23
    3430:	80 95       	com	r24
    3432:	90 95       	com	r25
                    switch (action.layer_bitop.op) {
    3434:	16 95       	lsr	r17
    3436:	16 95       	lsr	r17
    3438:	13 70       	andi	r17, 0x03	; 3
    343a:	12 30       	cpi	r17, 0x02	; 2
    343c:	c9 f1       	breq	.+114    	; 0x34b0 <process_action+0x4a8>
    343e:	13 30       	cpi	r17, 0x03	; 3
    3440:	09 f4       	brne	.+2      	; 0x3444 <process_action+0x43c>
    3442:	54 c0       	rjmp	.+168    	; 0x34ec <process_action+0x4e4>
    3444:	9b 01       	movw	r18, r22
    3446:	ac 01       	movw	r20, r24
    3448:	2c 29       	or	r18, r12
    344a:	3d 29       	or	r19, r13
    344c:	4e 29       	or	r20, r14
    344e:	5f 29       	or	r21, r15
    3450:	2e 83       	std	Y+6, r18	; 0x06
    3452:	3f 83       	std	Y+7, r19	; 0x07
    3454:	48 87       	std	Y+8, r20	; 0x08
    3456:	59 87       	std	Y+9, r21	; 0x09
    3458:	11 30       	cpi	r17, 0x01	; 1
    345a:	a1 f0       	breq	.+40     	; 0x3484 <process_action+0x47c>
                        case OP_BIT_AND: layer_and(bits | mask); break;
    345c:	ca 01       	movw	r24, r20
    345e:	b9 01       	movw	r22, r18
}
    3460:	29 96       	adiw	r28, 0x09	; 9
    3462:	0f b6       	in	r0, 0x3f	; 63
    3464:	f8 94       	cli
    3466:	de bf       	out	0x3e, r29	; 62
    3468:	0f be       	out	0x3f, r0	; 63
    346a:	cd bf       	out	0x3d, r28	; 61
    346c:	df 91       	pop	r29
    346e:	cf 91       	pop	r28
    3470:	1f 91       	pop	r17
    3472:	0f 91       	pop	r16
    3474:	ff 90       	pop	r15
    3476:	ef 90       	pop	r14
    3478:	df 90       	pop	r13
    347a:	cf 90       	pop	r12
    347c:	bf 90       	pop	r11
    347e:	af 90       	pop	r10
                        case OP_BIT_AND: layer_and(bits | mask); break;
    3480:	0c 94 f7 20 	jmp	0x41ee	; 0x41ee <layer_and>
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
    3484:	6e 81       	ldd	r22, Y+6	; 0x06
    3486:	7f 81       	ldd	r23, Y+7	; 0x07
    3488:	88 85       	ldd	r24, Y+8	; 0x08
    348a:	99 85       	ldd	r25, Y+9	; 0x09
}
    348c:	29 96       	adiw	r28, 0x09	; 9
    348e:	0f b6       	in	r0, 0x3f	; 63
    3490:	f8 94       	cli
    3492:	de bf       	out	0x3e, r29	; 62
    3494:	0f be       	out	0x3f, r0	; 63
    3496:	cd bf       	out	0x3d, r28	; 61
    3498:	df 91       	pop	r29
    349a:	cf 91       	pop	r28
    349c:	1f 91       	pop	r17
    349e:	0f 91       	pop	r16
    34a0:	ff 90       	pop	r15
    34a2:	ef 90       	pop	r14
    34a4:	df 90       	pop	r13
    34a6:	cf 90       	pop	r12
    34a8:	bf 90       	pop	r11
    34aa:	af 90       	pop	r10
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    34ac:	0c 94 cf 20 	jmp	0x419e	; 0x419e <layer_or>
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    34b0:	9b 01       	movw	r18, r22
    34b2:	ac 01       	movw	r20, r24
    34b4:	2c 29       	or	r18, r12
    34b6:	3d 29       	or	r19, r13
    34b8:	4e 29       	or	r20, r14
    34ba:	5f 29       	or	r21, r15
    34bc:	2e 83       	std	Y+6, r18	; 0x06
    34be:	3f 83       	std	Y+7, r19	; 0x07
    34c0:	48 87       	std	Y+8, r20	; 0x08
    34c2:	59 87       	std	Y+9, r21	; 0x09
    34c4:	ca 01       	movw	r24, r20
    34c6:	b9 01       	movw	r22, r18
}
    34c8:	29 96       	adiw	r28, 0x09	; 9
    34ca:	0f b6       	in	r0, 0x3f	; 63
    34cc:	f8 94       	cli
    34ce:	de bf       	out	0x3e, r29	; 62
    34d0:	0f be       	out	0x3f, r0	; 63
    34d2:	cd bf       	out	0x3d, r28	; 61
    34d4:	df 91       	pop	r29
    34d6:	cf 91       	pop	r28
    34d8:	1f 91       	pop	r17
    34da:	0f 91       	pop	r16
    34dc:	ff 90       	pop	r15
    34de:	ef 90       	pop	r14
    34e0:	df 90       	pop	r13
    34e2:	cf 90       	pop	r12
    34e4:	bf 90       	pop	r11
    34e6:	af 90       	pop	r10
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    34e8:	0c 94 1f 21 	jmp	0x423e	; 0x423e <layer_xor>
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    34ec:	0e 94 f7 20 	call	0x41ee	; 0x41ee <layer_and>
    34f0:	c7 01       	movw	r24, r14
    34f2:	b6 01       	movw	r22, r12
    34f4:	cb cf       	rjmp	.-106    	; 0x348c <process_action+0x484>
            switch (action.layer_tap.code) {
    34f6:	01 3f       	cpi	r16, 0xF1	; 241
    34f8:	09 f4       	brne	.+2      	; 0x34fc <process_action+0x4f4>
    34fa:	64 c0       	rjmp	.+200    	; 0x35c4 <process_action+0x5bc>
    34fc:	f0 f4       	brcc	.+60     	; 0x353a <process_action+0x532>
    34fe:	00 3e       	cpi	r16, 0xE0	; 224
    3500:	90 f4       	brcc	.+36     	; 0x3526 <process_action+0x51e>
    3502:	00 3c       	cpi	r16, 0xC0	; 192
    3504:	90 f0       	brcs	.+36     	; 0x352a <process_action+0x522>
                    if (event.pressed) {
    3506:	81 2f       	mov	r24, r17
    3508:	8f 71       	andi	r24, 0x1F	; 31
    350a:	10 2f       	mov	r17, r16
    350c:	10 71       	andi	r17, 0x10	; 16
    350e:	ff 20       	and	r15, r15
    3510:	81 f1       	breq	.+96     	; 0x3572 <process_action+0x56a>
                        layer_on(action.layer_tap.val);
    3512:	0e 94 38 20 	call	0x4070	; 0x4070 <layer_on>
                        register_mods((action.layer_tap.code & 0x10) ?
    3516:	80 2f       	mov	r24, r16
    3518:	82 95       	swap	r24
    351a:	80 7f       	andi	r24, 0xF0	; 240
    351c:	11 11       	cpse	r17, r1
    351e:	0d ce       	rjmp	.-998    	; 0x313a <process_action+0x132>
    3520:	80 2f       	mov	r24, r16
    3522:	8f 70       	andi	r24, 0x0F	; 15
    3524:	0a ce       	rjmp	.-1004   	; 0x313a <process_action+0x132>
    3526:	00 3f       	cpi	r16, 0xF0	; 240
    3528:	71 f1       	breq	.+92     	; 0x3586 <process_action+0x57e>
                    if (event.pressed) {
    352a:	ff 20       	and	r15, r15
    352c:	09 f4       	brne	.+2      	; 0x3530 <process_action+0x528>
    352e:	88 c0       	rjmp	.+272    	; 0x3640 <process_action+0x638>
                        if (tap_count > 0) {
    3530:	e1 10       	cpse	r14, r1
    3532:	b7 cd       	rjmp	.-1170   	; 0x30a2 <process_action+0x9a>
                            layer_on(action.layer_tap.val);
    3534:	81 2f       	mov	r24, r17
    3536:	8f 71       	andi	r24, 0x1F	; 31
    3538:	49 c0       	rjmp	.+146    	; 0x35cc <process_action+0x5c4>
    353a:	02 3f       	cpi	r16, 0xF2	; 242
    353c:	09 f4       	brne	.+2      	; 0x3540 <process_action+0x538>
    353e:	58 c0       	rjmp	.+176    	; 0x35f0 <process_action+0x5e8>
    3540:	03 3f       	cpi	r16, 0xF3	; 243
    3542:	99 f7       	brne	.-26     	; 0x352a <process_action+0x522>
                    event.pressed ? layer_move(action.layer_tap.val) :
    3544:	ff 20       	and	r15, r15
    3546:	09 f4       	brne	.+2      	; 0x354a <process_action+0x542>
    3548:	69 c0       	rjmp	.+210    	; 0x361c <process_action+0x614>
    354a:	81 2f       	mov	r24, r17
    354c:	8f 71       	andi	r24, 0x1F	; 31
}
    354e:	29 96       	adiw	r28, 0x09	; 9
    3550:	0f b6       	in	r0, 0x3f	; 63
    3552:	f8 94       	cli
    3554:	de bf       	out	0x3e, r29	; 62
    3556:	0f be       	out	0x3f, r0	; 63
    3558:	cd bf       	out	0x3d, r28	; 61
    355a:	df 91       	pop	r29
    355c:	cf 91       	pop	r28
    355e:	1f 91       	pop	r17
    3560:	0f 91       	pop	r16
    3562:	ff 90       	pop	r15
    3564:	ef 90       	pop	r14
    3566:	df 90       	pop	r13
    3568:	cf 90       	pop	r12
    356a:	bf 90       	pop	r11
    356c:	af 90       	pop	r10
                    event.pressed ? layer_move(action.layer_tap.val) :
    356e:	0c 94 13 20 	jmp	0x4026	; 0x4026 <layer_move>
                        layer_off(action.layer_tap.val);
    3572:	0e 94 69 20 	call	0x40d2	; 0x40d2 <layer_off>
                        unregister_mods((action.layer_tap.code & 0x10) ?
    3576:	80 2f       	mov	r24, r16
    3578:	82 95       	swap	r24
    357a:	80 7f       	andi	r24, 0xF0	; 240
    357c:	11 11       	cpse	r17, r1
    357e:	0a ce       	rjmp	.-1004   	; 0x3194 <process_action+0x18c>
    3580:	80 2f       	mov	r24, r16
    3582:	8f 70       	andi	r24, 0x0F	; 15
    3584:	07 ce       	rjmp	.-1010   	; 0x3194 <process_action+0x18c>
                    if (event.pressed) {
    3586:	ff 20       	and	r15, r15
    3588:	c1 f0       	breq	.+48     	; 0x35ba <process_action+0x5b2>
                        if (tap_count < TAPPING_TOGGLE) {
    358a:	34 e0       	ldi	r19, 0x04	; 4
    358c:	3e 15       	cp	r19, r14
    358e:	08 f4       	brcc	.+2      	; 0x3592 <process_action+0x58a>
    3590:	66 cd       	rjmp	.-1332   	; 0x305e <process_action+0x56>
                            layer_invert(action.layer_tap.val);
    3592:	81 2f       	mov	r24, r17
    3594:	8f 71       	andi	r24, 0x1F	; 31
}
    3596:	29 96       	adiw	r28, 0x09	; 9
    3598:	0f b6       	in	r0, 0x3f	; 63
    359a:	f8 94       	cli
    359c:	de bf       	out	0x3e, r29	; 62
    359e:	0f be       	out	0x3f, r0	; 63
    35a0:	cd bf       	out	0x3d, r28	; 61
    35a2:	df 91       	pop	r29
    35a4:	cf 91       	pop	r28
    35a6:	1f 91       	pop	r17
    35a8:	0f 91       	pop	r16
    35aa:	ff 90       	pop	r15
    35ac:	ef 90       	pop	r14
    35ae:	df 90       	pop	r13
    35b0:	cf 90       	pop	r12
    35b2:	bf 90       	pop	r11
    35b4:	af 90       	pop	r10
                            layer_invert(action.layer_tap.val);
    35b6:	0c 94 9e 20 	jmp	0x413c	; 0x413c <layer_invert>
                        if (tap_count <= TAPPING_TOGGLE) {
    35ba:	45 e0       	ldi	r20, 0x05	; 5
    35bc:	4e 15       	cp	r20, r14
    35be:	08 f4       	brcc	.+2      	; 0x35c2 <process_action+0x5ba>
    35c0:	4e cd       	rjmp	.-1380   	; 0x305e <process_action+0x56>
    35c2:	e7 cf       	rjmp	.-50     	; 0x3592 <process_action+0x58a>
                    event.pressed ? layer_on(action.layer_tap.val) :
    35c4:	81 2f       	mov	r24, r17
    35c6:	8f 71       	andi	r24, 0x1F	; 31
    35c8:	ff 20       	and	r15, r15
    35ca:	b1 f0       	breq	.+44     	; 0x35f8 <process_action+0x5f0>
}
    35cc:	29 96       	adiw	r28, 0x09	; 9
    35ce:	0f b6       	in	r0, 0x3f	; 63
    35d0:	f8 94       	cli
    35d2:	de bf       	out	0x3e, r29	; 62
    35d4:	0f be       	out	0x3f, r0	; 63
    35d6:	cd bf       	out	0x3d, r28	; 61
    35d8:	df 91       	pop	r29
    35da:	cf 91       	pop	r28
    35dc:	1f 91       	pop	r17
    35de:	0f 91       	pop	r16
    35e0:	ff 90       	pop	r15
    35e2:	ef 90       	pop	r14
    35e4:	df 90       	pop	r13
    35e6:	cf 90       	pop	r12
    35e8:	bf 90       	pop	r11
    35ea:	af 90       	pop	r10
                            layer_on(action.layer_tap.val);
    35ec:	0c 94 38 20 	jmp	0x4070	; 0x4070 <layer_on>
                    event.pressed ? layer_off(action.layer_tap.val) :
    35f0:	81 2f       	mov	r24, r17
    35f2:	8f 71       	andi	r24, 0x1F	; 31
    35f4:	ff 20       	and	r15, r15
    35f6:	51 f3       	breq	.-44     	; 0x35cc <process_action+0x5c4>
}
    35f8:	29 96       	adiw	r28, 0x09	; 9
    35fa:	0f b6       	in	r0, 0x3f	; 63
    35fc:	f8 94       	cli
    35fe:	de bf       	out	0x3e, r29	; 62
    3600:	0f be       	out	0x3f, r0	; 63
    3602:	cd bf       	out	0x3d, r28	; 61
    3604:	df 91       	pop	r29
    3606:	cf 91       	pop	r28
    3608:	1f 91       	pop	r17
    360a:	0f 91       	pop	r16
    360c:	ff 90       	pop	r15
    360e:	ef 90       	pop	r14
    3610:	df 90       	pop	r13
    3612:	cf 90       	pop	r12
    3614:	bf 90       	pop	r11
    3616:	af 90       	pop	r10
                            layer_off(action.layer_tap.val);
    3618:	0c 94 69 20 	jmp	0x40d2	; 0x40d2 <layer_off>
}
    361c:	29 96       	adiw	r28, 0x09	; 9
    361e:	0f b6       	in	r0, 0x3f	; 63
    3620:	f8 94       	cli
    3622:	de bf       	out	0x3e, r29	; 62
    3624:	0f be       	out	0x3f, r0	; 63
    3626:	cd bf       	out	0x3d, r28	; 61
    3628:	df 91       	pop	r29
    362a:	cf 91       	pop	r28
    362c:	1f 91       	pop	r17
    362e:	0f 91       	pop	r16
    3630:	ff 90       	pop	r15
    3632:	ef 90       	pop	r14
    3634:	df 90       	pop	r13
    3636:	cf 90       	pop	r12
    3638:	bf 90       	pop	r11
    363a:	af 90       	pop	r10
                                    layer_clear();
    363c:	0c 94 0e 20 	jmp	0x401c	; 0x401c <layer_clear>
                        if (tap_count > 0) {
    3640:	e1 10       	cpse	r14, r1
    3642:	d2 cd       	rjmp	.-1116   	; 0x31e8 <process_action+0x1e0>
                            layer_off(action.layer_tap.val);
    3644:	81 2f       	mov	r24, r17
    3646:	8f 71       	andi	r24, 0x1F	; 31
    3648:	d7 cf       	rjmp	.-82     	; 0x35f8 <process_action+0x5f0>
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    364a:	41 2f       	mov	r20, r17
    364c:	4f 70       	andi	r20, 0x0F	; 15
    364e:	60 2f       	mov	r22, r16
    3650:	c5 01       	movw	r24, r10
    3652:	0e 94 fe 23 	call	0x47fc	; 0x47fc <action_get_macro>
}
    3656:	29 96       	adiw	r28, 0x09	; 9
    3658:	0f b6       	in	r0, 0x3f	; 63
    365a:	f8 94       	cli
    365c:	de bf       	out	0x3e, r29	; 62
    365e:	0f be       	out	0x3f, r0	; 63
    3660:	cd bf       	out	0x3d, r28	; 61
    3662:	df 91       	pop	r29
    3664:	cf 91       	pop	r28
    3666:	1f 91       	pop	r17
    3668:	0f 91       	pop	r16
    366a:	ff 90       	pop	r15
    366c:	ef 90       	pop	r14
    366e:	df 90       	pop	r13
    3670:	cf 90       	pop	r12
    3672:	bf 90       	pop	r11
    3674:	af 90       	pop	r10
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    3676:	0c 94 d0 1e 	jmp	0x3da0	; 0x3da0 <action_macro_play>
            action_function(record, action.func.id, action.func.opt);
    367a:	41 2f       	mov	r20, r17
    367c:	4f 70       	andi	r20, 0x0F	; 15
    367e:	60 2f       	mov	r22, r16
    3680:	c5 01       	movw	r24, r10
}
    3682:	29 96       	adiw	r28, 0x09	; 9
    3684:	0f b6       	in	r0, 0x3f	; 63
    3686:	f8 94       	cli
    3688:	de bf       	out	0x3e, r29	; 62
    368a:	0f be       	out	0x3f, r0	; 63
    368c:	cd bf       	out	0x3d, r28	; 61
    368e:	df 91       	pop	r29
    3690:	cf 91       	pop	r28
    3692:	1f 91       	pop	r17
    3694:	0f 91       	pop	r16
    3696:	ff 90       	pop	r15
    3698:	ef 90       	pop	r14
    369a:	df 90       	pop	r13
    369c:	cf 90       	pop	r12
    369e:	bf 90       	pop	r11
    36a0:	af 90       	pop	r10
            action_function(record, action.func.id, action.func.opt);
    36a2:	0c 94 01 24 	jmp	0x4802	; 0x4802 <action_function>
    keyevent_t event = record->event;
    36a6:	f2 80       	ldd	r15, Z+2	; 0x02
    uint8_t tap_count = record->tap.count;
    36a8:	e5 80       	ldd	r14, Z+5	; 0x05
    36aa:	e2 94       	swap	r14
    36ac:	2f e0       	ldi	r18, 0x0F	; 15
    36ae:	e2 22       	and	r14, r18
    action_t action = layer_switch_get_action(event);
    36b0:	78 2f       	mov	r23, r24
    36b2:	9d 83       	std	Y+5, r25	; 0x05
    36b4:	8c 83       	std	Y+4, r24	; 0x04
    36b6:	6f 2d       	mov	r22, r15
    36b8:	8d 81       	ldd	r24, Y+5	; 0x05
    36ba:	0e 94 48 21 	call	0x4290	; 0x4290 <layer_switch_get_action>
    36be:	8c 01       	movw	r16, r24
    dprint(" layer_state: "); layer_debug();
    36c0:	0e 94 47 21 	call	0x428e	; 0x428e <layer_debug>
    dprint(" default_layer_state: "); default_layer_debug();
    36c4:	0e 94 73 1f 	call	0x3ee6	; 0x3ee6 <default_layer_debug>
    switch (action.kind.id) {
    36c8:	e1 2f       	mov	r30, r17
    36ca:	e2 95       	swap	r30
    36cc:	ef 70       	andi	r30, 0x0F	; 15
    36ce:	f0 e0       	ldi	r31, 0x00	; 0
    36d0:	ec 56       	subi	r30, 0x6C	; 108
    36d2:	fa 4f       	sbci	r31, 0xFA	; 250
    36d4:	0c 94 d1 2b 	jmp	0x57a2	; 0x57a2 <__tablejump2__>

000036d8 <clear_keyboard_but_mods>:
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    36d8:	0e 94 4e 22 	call	0x449c	; 0x449c <clear_weak_mods>
    clear_keys();
    36dc:	0e 94 1b 22 	call	0x4436	; 0x4436 <clear_keys>
    send_keyboard_report();
    36e0:	0e 94 67 22 	call	0x44ce	; 0x44ce <send_keyboard_report>
#ifdef MOUSEKEY_ENABLE
    mousekey_clear();
    36e4:	0e 94 df 26 	call	0x4dbe	; 0x4dbe <mousekey_clear>
    mousekey_send();
    36e8:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <mousekey_send>
#endif
#ifdef EXTRAKEY_ENABLE
    host_system_send(0);
    36ec:	90 e0       	ldi	r25, 0x00	; 0
    36ee:	80 e0       	ldi	r24, 0x00	; 0
    36f0:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <host_system_send>
    host_consumer_send(0);
    36f4:	90 e0       	ldi	r25, 0x00	; 0
    36f6:	80 e0       	ldi	r24, 0x00	; 0
    36f8:	0c 94 7c 15 	jmp	0x2af8	; 0x2af8 <host_consumer_send>

000036fc <clear_keyboard>:
    clear_mods();
    36fc:	0e 94 3d 22 	call	0x447a	; 0x447a <clear_mods>
    clear_keyboard_but_mods();
    3700:	0c 94 6c 1b 	jmp	0x36d8	; 0x36d8 <clear_keyboard_but_mods>

00003704 <is_tap_key>:
#endif
}

bool is_tap_key(keyevent_t event)
{
    3704:	cf 93       	push	r28
    3706:	df 93       	push	r29
    3708:	00 d0       	rcall	.+0      	; 0x370a <is_tap_key+0x6>
    370a:	00 d0       	rcall	.+0      	; 0x370c <is_tap_key+0x8>
    370c:	0f 92       	push	r0
    370e:	cd b7       	in	r28, 0x3d	; 61
    3710:	de b7       	in	r29, 0x3e	; 62
    3712:	6b 83       	std	Y+3, r22	; 0x03
    3714:	7c 83       	std	Y+4, r23	; 0x04
    3716:	8d 83       	std	Y+5, r24	; 0x05
    3718:	8c 81       	ldd	r24, Y+4	; 0x04
    371a:	9d 81       	ldd	r25, Y+5	; 0x05
    371c:	89 2b       	or	r24, r25
    371e:	21 f0       	breq	.+8      	; 0x3728 <is_tap_key+0x24>
    3720:	84 2f       	mov	r24, r20
    3722:	85 23       	and	r24, r21
    3724:	8f 3f       	cpi	r24, 0xFF	; 255
    3726:	d1 f4       	brne	.+52     	; 0x375c <is_tap_key+0x58>
    if (IS_NOEVENT(event)) { return false; }

    action_t action = layer_switch_get_action(event);

    switch (action.kind.id) {
    3728:	80 e0       	ldi	r24, 0x00	; 0
    372a:	0c c0       	rjmp	.+24     	; 0x3744 <is_tap_key+0x40>
    372c:	80 e2       	ldi	r24, 0x20	; 32
    372e:	82 0f       	add	r24, r18
    3730:	88 30       	cpi	r24, 0x08	; 8
    3732:	58 f1       	brcs	.+86     	; 0x378a <is_tap_key+0x86>
                case KC_LCTRL ... KC_RGUI:              // tap key
                    return true;
            }
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    3734:	28 3e       	cpi	r18, 0xE8	; 232
    3736:	70 f4       	brcc	.+28     	; 0x3754 <is_tap_key+0x50>
    3738:	20 3e       	cpi	r18, 0xE0	; 224
    373a:	38 f5       	brcc	.+78     	; 0x378a <is_tap_key+0x86>
    373c:	24 50       	subi	r18, 0x04	; 4
    373e:	81 e0       	ldi	r24, 0x01	; 1
    3740:	21 3a       	cpi	r18, 0xA1	; 161
    3742:	90 f7       	brcc	.-28     	; 0x3728 <is_tap_key+0x24>
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
            return false;
    }
    return false;
}
    3744:	0f 90       	pop	r0
    3746:	0f 90       	pop	r0
    3748:	0f 90       	pop	r0
    374a:	0f 90       	pop	r0
    374c:	0f 90       	pop	r0
    374e:	df 91       	pop	r29
    3750:	cf 91       	pop	r28
    3752:	08 95       	ret
    3754:	81 e0       	ldi	r24, 0x01	; 1
    3756:	20 3f       	cpi	r18, 0xF0	; 240
    3758:	39 f7       	brne	.-50     	; 0x3728 <is_tap_key+0x24>
    375a:	f4 cf       	rjmp	.-24     	; 0x3744 <is_tap_key+0x40>
    action_t action = layer_switch_get_action(event);
    375c:	6b 81       	ldd	r22, Y+3	; 0x03
    375e:	7c 81       	ldd	r23, Y+4	; 0x04
    3760:	8d 81       	ldd	r24, Y+5	; 0x05
    3762:	0e 94 48 21 	call	0x4290	; 0x4290 <layer_switch_get_action>
    3766:	28 2f       	mov	r18, r24
    switch (action.kind.id) {
    3768:	89 2f       	mov	r24, r25
    376a:	82 95       	swap	r24
    376c:	8f 70       	andi	r24, 0x0F	; 15
    376e:	90 3c       	cpi	r25, 0xC0	; 192
    3770:	70 f4       	brcc	.+28     	; 0x378e <is_tap_key+0x8a>
    3772:	8a 30       	cpi	r24, 0x0A	; 10
    3774:	f8 f6       	brcc	.-66     	; 0x3734 <is_tap_key+0x30>
    3776:	82 5f       	subi	r24, 0xF2	; 242
    3778:	8f 70       	andi	r24, 0x0F	; 15
    377a:	82 30       	cpi	r24, 0x02	; 2
    377c:	a8 f6       	brcc	.-86     	; 0x3728 <is_tap_key+0x24>
            switch (action.key.code) {
    377e:	25 3a       	cpi	r18, 0xA5	; 165
    3780:	a8 f6       	brcc	.-86     	; 0x372c <is_tap_key+0x28>
    3782:	8e ef       	ldi	r24, 0xFE	; 254
    3784:	82 0f       	add	r24, r18
    3786:	82 30       	cpi	r24, 0x02	; 2
    3788:	c8 f2       	brcs	.-78     	; 0x373c <is_tap_key+0x38>
                    return true;
    378a:	81 e0       	ldi	r24, 0x01	; 1
    378c:	db cf       	rjmp	.-74     	; 0x3744 <is_tap_key+0x40>
    switch (action.kind.id) {
    378e:	8c 30       	cpi	r24, 0x0C	; 12
    3790:	11 f0       	breq	.+4      	; 0x3796 <is_tap_key+0x92>
    3792:	8f 30       	cpi	r24, 0x0F	; 15
    3794:	49 f6       	brne	.-110    	; 0x3728 <is_tap_key+0x24>
            if (action.func.opt & FUNC_TAP) { return true; }
    3796:	93 fb       	bst	r25, 3
    3798:	88 27       	eor	r24, r24
    379a:	80 f9       	bld	r24, 0
    379c:	d3 cf       	rjmp	.-90     	; 0x3744 <is_tap_key+0x40>

0000379e <debug_event>:

/*
 * debug print
 */
void debug_event(keyevent_t event)
{
    379e:	cf 93       	push	r28
    37a0:	df 93       	push	r29
    37a2:	00 d0       	rcall	.+0      	; 0x37a4 <debug_event+0x6>
    37a4:	00 d0       	rcall	.+0      	; 0x37a6 <debug_event+0x8>
    37a6:	0f 92       	push	r0
    37a8:	cd b7       	in	r28, 0x3d	; 61
    37aa:	de b7       	in	r29, 0x3e	; 62
    dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.time);
}
    37ac:	0f 90       	pop	r0
    37ae:	0f 90       	pop	r0
    37b0:	0f 90       	pop	r0
    37b2:	0f 90       	pop	r0
    37b4:	0f 90       	pop	r0
    37b6:	df 91       	pop	r29
    37b8:	cf 91       	pop	r28
    37ba:	08 95       	ret

000037bc <debug_record>:

void debug_record(keyrecord_t record)
{
    37bc:	cf 93       	push	r28
    37be:	df 93       	push	r29
    37c0:	00 d0       	rcall	.+0      	; 0x37c2 <debug_record+0x6>
    37c2:	00 d0       	rcall	.+0      	; 0x37c4 <debug_record+0x8>
    37c4:	00 d0       	rcall	.+0      	; 0x37c6 <debug_record+0xa>
    37c6:	cd b7       	in	r28, 0x3d	; 61
    37c8:	de b7       	in	r29, 0x3e	; 62
    debug_event(record.event);
#ifndef NO_ACTION_TAPPING
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}
    37ca:	26 96       	adiw	r28, 0x06	; 6
    37cc:	0f b6       	in	r0, 0x3f	; 63
    37ce:	f8 94       	cli
    37d0:	de bf       	out	0x3e, r29	; 62
    37d2:	0f be       	out	0x3f, r0	; 63
    37d4:	cd bf       	out	0x3d, r28	; 61
    37d6:	df 91       	pop	r29
    37d8:	cf 91       	pop	r28
    37da:	08 95       	ret

000037dc <debug_waiting_buffer>:
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
}

static void debug_waiting_buffer(void)
{
    37dc:	1f 93       	push	r17
    37de:	cf 93       	push	r28
    37e0:	df 93       	push	r29
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    37e2:	e0 91 97 02 	lds	r30, 0x0297	; 0x800297 <waiting_buffer_tail>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    37e6:	16 e0       	ldi	r17, 0x06	; 6
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    37e8:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <waiting_buffer_head>
    37ec:	8e 13       	cpse	r24, r30
    37ee:	04 c0       	rjmp	.+8      	; 0x37f8 <debug_waiting_buffer+0x1c>
    }
    debug("}\n");
}
    37f0:	df 91       	pop	r29
    37f2:	cf 91       	pop	r28
    37f4:	1f 91       	pop	r17
    37f6:	08 95       	ret
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    37f8:	ce 2f       	mov	r28, r30
    37fa:	d0 e0       	ldi	r29, 0x00	; 0
    37fc:	1e 9f       	mul	r17, r30
    37fe:	f0 01       	movw	r30, r0
    3800:	11 24       	eor	r1, r1
    3802:	e7 56       	subi	r30, 0x67	; 103
    3804:	fd 4f       	sbci	r31, 0xFD	; 253
    3806:	40 81       	ld	r20, Z
    3808:	51 81       	ldd	r21, Z+1	; 0x01
    380a:	62 81       	ldd	r22, Z+2	; 0x02
    380c:	73 81       	ldd	r23, Z+3	; 0x03
    380e:	84 81       	ldd	r24, Z+4	; 0x04
    3810:	95 81       	ldd	r25, Z+5	; 0x05
    3812:	0e 94 de 1b 	call	0x37bc	; 0x37bc <debug_record>
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3816:	fe 01       	movw	r30, r28
    3818:	31 96       	adiw	r30, 0x01	; 1
    381a:	e7 70       	andi	r30, 0x07	; 7
    381c:	e5 cf       	rjmp	.-54     	; 0x37e8 <debug_waiting_buffer+0xc>

0000381e <debug_tapping_key>:
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
    381e:	40 91 c9 02 	lds	r20, 0x02C9	; 0x8002c9 <tapping_key>
    3822:	50 91 ca 02 	lds	r21, 0x02CA	; 0x8002ca <tapping_key+0x1>
    3826:	60 91 cb 02 	lds	r22, 0x02CB	; 0x8002cb <tapping_key+0x2>
    382a:	70 91 cc 02 	lds	r23, 0x02CC	; 0x8002cc <tapping_key+0x3>
    382e:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <tapping_key+0x4>
    3832:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <tapping_key+0x5>
    3836:	0c 94 de 1b 	jmp	0x37bc	; 0x37bc <debug_record>

0000383a <waiting_buffer_scan_tap>:
{
    383a:	1f 93       	push	r17
    383c:	cf 93       	push	r28
    383e:	df 93       	push	r29
    if (tapping_key.tap.count > 0) return;
    3840:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <tapping_key+0x5>
    3844:	80 7f       	andi	r24, 0xF0	; 240
    3846:	c1 f4       	brne	.+48     	; 0x3878 <waiting_buffer_scan_tap+0x3e>
    if (!tapping_key.event.pressed) return;
    3848:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <tapping_key+0x2>
    384c:	88 23       	and	r24, r24
    384e:	a1 f0       	breq	.+40     	; 0x3878 <waiting_buffer_scan_tap+0x3e>
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3850:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <waiting_buffer_tail>
    3854:	c0 91 98 02 	lds	r28, 0x0298	; 0x800298 <waiting_buffer_head>
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    3858:	60 91 c9 02 	lds	r22, 0x02C9	; 0x8002c9 <tapping_key>
    385c:	70 91 ca 02 	lds	r23, 0x02CA	; 0x8002ca <tapping_key+0x1>
    3860:	40 91 cc 02 	lds	r20, 0x02CC	; 0x8002cc <tapping_key+0x3>
    3864:	50 91 cd 02 	lds	r21, 0x02CD	; 0x8002cd <tapping_key+0x4>
    3868:	d6 2f       	mov	r29, r22
    386a:	d7 23       	and	r29, r23
    386c:	da 01       	movw	r26, r20
    386e:	a0 95       	com	r26
    3870:	b0 95       	com	r27
    3872:	16 e0       	ldi	r17, 0x06	; 6
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3874:	c8 13       	cpse	r28, r24
    3876:	04 c0       	rjmp	.+8      	; 0x3880 <waiting_buffer_scan_tap+0x46>
}
    3878:	df 91       	pop	r29
    387a:	cf 91       	pop	r28
    387c:	1f 91       	pop	r17
    387e:	08 95       	ret
    3880:	90 e0       	ldi	r25, 0x00	; 0
    3882:	41 15       	cp	r20, r1
    3884:	51 05       	cpc	r21, r1
    3886:	11 f0       	breq	.+4      	; 0x388c <waiting_buffer_scan_tap+0x52>
    3888:	df 3f       	cpi	r29, 0xFF	; 255
    388a:	31 f4       	brne	.+12     	; 0x3898 <waiting_buffer_scan_tap+0x5e>
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    388c:	01 96       	adiw	r24, 0x01	; 1
    388e:	87 70       	andi	r24, 0x07	; 7
    3890:	f1 cf       	rjmp	.-30     	; 0x3874 <waiting_buffer_scan_tap+0x3a>
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    3892:	2a 0f       	add	r18, r26
    3894:	3b 1f       	adc	r19, r27
    3896:	17 c0       	rjmp	.+46     	; 0x38c6 <waiting_buffer_scan_tap+0x8c>
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    3898:	18 9f       	mul	r17, r24
    389a:	f0 01       	movw	r30, r0
    389c:	19 9f       	mul	r17, r25
    389e:	f0 0d       	add	r31, r0
    38a0:	11 24       	eor	r1, r1
    38a2:	e7 56       	subi	r30, 0x67	; 103
    38a4:	fd 4f       	sbci	r31, 0xFD	; 253
    38a6:	21 81       	ldd	r18, Z+1	; 0x01
    38a8:	27 13       	cpse	r18, r23
    38aa:	f0 cf       	rjmp	.-32     	; 0x388c <waiting_buffer_scan_tap+0x52>
    38ac:	20 81       	ld	r18, Z
    38ae:	26 13       	cpse	r18, r22
    38b0:	ed cf       	rjmp	.-38     	; 0x388c <waiting_buffer_scan_tap+0x52>
    38b2:	22 81       	ldd	r18, Z+2	; 0x02
    38b4:	21 11       	cpse	r18, r1
    38b6:	ea cf       	rjmp	.-44     	; 0x388c <waiting_buffer_scan_tap+0x52>
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    38b8:	23 81       	ldd	r18, Z+3	; 0x03
    38ba:	34 81       	ldd	r19, Z+4	; 0x04
    38bc:	24 17       	cp	r18, r20
    38be:	35 07       	cpc	r19, r21
    38c0:	40 f3       	brcs	.-48     	; 0x3892 <waiting_buffer_scan_tap+0x58>
    38c2:	24 1b       	sub	r18, r20
    38c4:	35 0b       	sbc	r19, r21
    38c6:	28 3c       	cpi	r18, 0xC8	; 200
    38c8:	31 05       	cpc	r19, r1
    38ca:	00 f7       	brcc	.-64     	; 0x388c <waiting_buffer_scan_tap+0x52>
            tapping_key.tap.count = 1;
    38cc:	20 91 ce 02 	lds	r18, 0x02CE	; 0x8002ce <tapping_key+0x5>
    38d0:	2f 70       	andi	r18, 0x0F	; 15
    38d2:	20 61       	ori	r18, 0x10	; 16
    38d4:	20 93 ce 02 	sts	0x02CE, r18	; 0x8002ce <tapping_key+0x5>
            waiting_buffer[i].tap.count = 1;
    38d8:	26 e0       	ldi	r18, 0x06	; 6
    38da:	28 9f       	mul	r18, r24
    38dc:	f0 01       	movw	r30, r0
    38de:	29 9f       	mul	r18, r25
    38e0:	f0 0d       	add	r31, r0
    38e2:	11 24       	eor	r1, r1
    38e4:	e2 56       	subi	r30, 0x62	; 98
    38e6:	fd 4f       	sbci	r31, 0xFD	; 253
    38e8:	80 81       	ld	r24, Z
    38ea:	8f 70       	andi	r24, 0x0F	; 15
    38ec:	80 61       	ori	r24, 0x10	; 16
    38ee:	80 83       	st	Z, r24
            process_action(&tapping_key);
    38f0:	89 ec       	ldi	r24, 0xC9	; 201
    38f2:	92 e0       	ldi	r25, 0x02	; 2
    38f4:	0e 94 04 18 	call	0x3008	; 0x3008 <process_action>
}
    38f8:	df 91       	pop	r29
    38fa:	cf 91       	pop	r28
    38fc:	1f 91       	pop	r17
            debug_waiting_buffer();
    38fe:	0c 94 ee 1b 	jmp	0x37dc	; 0x37dc <debug_waiting_buffer>

00003902 <process_tapping>:
{
    3902:	9f 92       	push	r9
    3904:	af 92       	push	r10
    3906:	bf 92       	push	r11
    3908:	cf 92       	push	r12
    390a:	df 92       	push	r13
    390c:	ef 92       	push	r14
    390e:	ff 92       	push	r15
    3910:	0f 93       	push	r16
    3912:	1f 93       	push	r17
    3914:	cf 93       	push	r28
    3916:	df 93       	push	r29
    3918:	cd b7       	in	r28, 0x3d	; 61
    391a:	de b7       	in	r29, 0x3e	; 62
    391c:	2b 97       	sbiw	r28, 0x0b	; 11
    391e:	0f b6       	in	r0, 0x3f	; 63
    3920:	f8 94       	cli
    3922:	de bf       	out	0x3e, r29	; 62
    3924:	0f be       	out	0x3f, r0	; 63
    3926:	cd bf       	out	0x3d, r28	; 61
    3928:	7c 01       	movw	r14, r24
    keyevent_t event = keyp->event;
    392a:	85 e0       	ldi	r24, 0x05	; 5
    392c:	f7 01       	movw	r30, r14
    392e:	de 01       	movw	r26, r28
    3930:	17 96       	adiw	r26, 0x07	; 7
    3932:	01 90       	ld	r0, Z+
    3934:	0d 92       	st	X+, r0
    3936:	8a 95       	dec	r24
    3938:	e1 f7       	brne	.-8      	; 0x3932 <process_tapping+0x30>
    393a:	d7 01       	movw	r26, r14
    393c:	4c 91       	ld	r20, X
    393e:	11 96       	adiw	r26, 0x01	; 1
    3940:	5c 91       	ld	r21, X
    3942:	11 97       	sbiw	r26, 0x01	; 1
    3944:	12 96       	adiw	r26, 0x02	; 2
    3946:	dc 90       	ld	r13, X
    3948:	12 97       	sbiw	r26, 0x02	; 2
    394a:	13 96       	adiw	r26, 0x03	; 3
    394c:	0d 91       	ld	r16, X+
    394e:	1c 91       	ld	r17, X
    if (IS_TAPPING_PRESSED()) {
    3950:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <tapping_key+0x3>
    3954:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <tapping_key+0x4>
    3958:	00 97       	sbiw	r24, 0x00	; 0
    395a:	09 f4       	brne	.+2      	; 0x395e <process_tapping+0x5c>
    395c:	72 c1       	rjmp	.+740    	; 0x3c42 <process_tapping+0x340>
    395e:	20 91 c9 02 	lds	r18, 0x02C9	; 0x8002c9 <tapping_key>
    3962:	30 91 ca 02 	lds	r19, 0x02CA	; 0x8002ca <tapping_key+0x1>
    3966:	63 2f       	mov	r22, r19
    3968:	62 23       	and	r22, r18
    396a:	6f 3f       	cpi	r22, 0xFF	; 255
    396c:	09 f4       	brne	.+2      	; 0x3970 <process_tapping+0x6e>
    396e:	69 c1       	rjmp	.+722    	; 0x3c42 <process_tapping+0x340>
    3970:	90 90 cb 02 	lds	r9, 0x02CB	; 0x8002cb <tapping_key+0x2>
    3974:	99 20       	and	r9, r9
    3976:	09 f4       	brne	.+2      	; 0x397a <process_tapping+0x78>
    3978:	fe c0       	rjmp	.+508    	; 0x3b76 <process_tapping+0x274>
        if (WITHIN_TAPPING_TERM(event)) {
    397a:	08 17       	cp	r16, r24
    397c:	19 07       	cpc	r17, r25
    397e:	08 f4       	brcc	.+2      	; 0x3982 <process_tapping+0x80>
    3980:	3f c0       	rjmp	.+126    	; 0x3a00 <process_tapping+0xfe>
    3982:	f8 01       	movw	r30, r16
    3984:	e8 1b       	sub	r30, r24
    3986:	f9 0b       	sbc	r31, r25
    3988:	cf 01       	movw	r24, r30
    398a:	cc 24       	eor	r12, r12
    398c:	c3 94       	inc	r12
    398e:	88 3c       	cpi	r24, 0xC8	; 200
    3990:	91 05       	cpc	r25, r1
    3992:	08 f0       	brcs	.+2      	; 0x3996 <process_tapping+0x94>
    3994:	c1 2c       	mov	r12, r1
    3996:	89 ec       	ldi	r24, 0xC9	; 201
    3998:	a8 2e       	mov	r10, r24
    399a:	82 e0       	ldi	r24, 0x02	; 2
    399c:	b8 2e       	mov	r11, r24
    399e:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <tapping_key+0x5>
    39a2:	98 2f       	mov	r25, r24
    39a4:	90 7f       	andi	r25, 0xF0	; 240
    39a6:	cc 20       	and	r12, r12
    39a8:	09 f4       	brne	.+2      	; 0x39ac <process_tapping+0xaa>
    39aa:	bd c0       	rjmp	.+378    	; 0x3b26 <process_tapping+0x224>
            if (tapping_key.tap.count == 0) {
    39ac:	91 11       	cpse	r25, r1
    39ae:	82 c0       	rjmp	.+260    	; 0x3ab4 <process_tapping+0x1b2>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    39b0:	cd 2c       	mov	r12, r13
    39b2:	35 13       	cpse	r19, r21
    39b4:	2a c0       	rjmp	.+84     	; 0x3a0a <process_tapping+0x108>
    39b6:	24 13       	cpse	r18, r20
    39b8:	28 c0       	rjmp	.+80     	; 0x3a0a <process_tapping+0x108>
    39ba:	d1 10       	cpse	r13, r1
    39bc:	26 c0       	rjmp	.+76     	; 0x3a0a <process_tapping+0x108>
                    tapping_key.tap.count = 1;
    39be:	8f 70       	andi	r24, 0x0F	; 15
    39c0:	80 61       	ori	r24, 0x10	; 16
    39c2:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <tapping_key+0x5>
                    debug_tapping_key();
    39c6:	0e 94 0f 1c 	call	0x381e	; 0x381e <debug_tapping_key>
                    process_action(&tapping_key);
    39ca:	c5 01       	movw	r24, r10
    39cc:	0e 94 04 18 	call	0x3008	; 0x3008 <process_action>
                    keyp->tap = tapping_key.tap;
    39d0:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <tapping_key+0x5>
    39d4:	d7 01       	movw	r26, r14
    39d6:	15 96       	adiw	r26, 0x05	; 5
    39d8:	8c 93       	st	X, r24
}
    39da:	8c 2d       	mov	r24, r12
    39dc:	2b 96       	adiw	r28, 0x0b	; 11
    39de:	0f b6       	in	r0, 0x3f	; 63
    39e0:	f8 94       	cli
    39e2:	de bf       	out	0x3e, r29	; 62
    39e4:	0f be       	out	0x3f, r0	; 63
    39e6:	cd bf       	out	0x3d, r28	; 61
    39e8:	df 91       	pop	r29
    39ea:	cf 91       	pop	r28
    39ec:	1f 91       	pop	r17
    39ee:	0f 91       	pop	r16
    39f0:	ff 90       	pop	r15
    39f2:	ef 90       	pop	r14
    39f4:	df 90       	pop	r13
    39f6:	cf 90       	pop	r12
    39f8:	bf 90       	pop	r11
    39fa:	af 90       	pop	r10
    39fc:	9f 90       	pop	r9
    39fe:	08 95       	ret
        if (WITHIN_TAPPING_TERM(event)) {
    3a00:	80 95       	com	r24
    3a02:	90 95       	com	r25
    3a04:	80 0f       	add	r24, r16
    3a06:	91 1f       	adc	r25, r17
    3a08:	c0 cf       	rjmp	.-128    	; 0x398a <process_tapping+0x88>
    3a0a:	01 15       	cp	r16, r1
    3a0c:	11 05       	cpc	r17, r1
    3a0e:	29 f0       	breq	.+10     	; 0x3a1a <process_tapping+0x118>
    3a10:	84 2f       	mov	r24, r20
    3a12:	85 23       	and	r24, r21
    3a14:	8f 3f       	cpi	r24, 0xFF	; 255
    3a16:	09 f0       	breq	.+2      	; 0x3a1a <process_tapping+0x118>
    3a18:	26 c1       	rjmp	.+588    	; 0x3c66 <process_tapping+0x364>
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    3a1a:	80 e0       	ldi	r24, 0x00	; 0
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
    3a1c:	b8 2f       	mov	r27, r24
    3a1e:	b1 70       	andi	r27, 0x01	; 1
    3a20:	bb 2e       	mov	r11, r27
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3a22:	e0 91 97 02 	lds	r30, 0x0297	; 0x800297 <waiting_buffer_tail>
    3a26:	20 91 98 02 	lds	r18, 0x0298	; 0x800298 <waiting_buffer_head>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    3a2a:	36 e0       	ldi	r19, 0x06	; 6
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
    3a2c:	80 fd       	sbrc	r24, 0
    3a2e:	1c c0       	rjmp	.+56     	; 0x3a68 <process_tapping+0x166>
                    if (event.pressed) {
    3a30:	dd 20       	and	r13, r13
    3a32:	99 f2       	breq	.-90     	; 0x39da <process_tapping+0xd8>
                        tapping_key.tap.interrupted = true;
    3a34:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <tapping_key+0x5>
    3a38:	81 60       	ori	r24, 0x01	; 1
    3a3a:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <tapping_key+0x5>
                    return false;
    3a3e:	c1 2c       	mov	r12, r1
    3a40:	cc cf       	rjmp	.-104    	; 0x39da <process_tapping+0xd8>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    3a42:	8e 2f       	mov	r24, r30
    3a44:	90 e0       	ldi	r25, 0x00	; 0
    3a46:	3e 9f       	mul	r19, r30
    3a48:	f0 01       	movw	r30, r0
    3a4a:	11 24       	eor	r1, r1
    3a4c:	e7 56       	subi	r30, 0x67	; 103
    3a4e:	fd 4f       	sbci	r31, 0xFD	; 253
    3a50:	61 81       	ldd	r22, Z+1	; 0x01
    3a52:	65 13       	cpse	r22, r21
    3a54:	06 c0       	rjmp	.+12     	; 0x3a62 <process_tapping+0x160>
    3a56:	60 81       	ld	r22, Z
    3a58:	64 13       	cpse	r22, r20
    3a5a:	03 c0       	rjmp	.+6      	; 0x3a62 <process_tapping+0x160>
    3a5c:	62 81       	ldd	r22, Z+2	; 0x02
    3a5e:	6d 11       	cpse	r22, r13
    3a60:	e7 cf       	rjmp	.-50     	; 0x3a30 <process_tapping+0x12e>
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3a62:	fc 01       	movw	r30, r24
    3a64:	31 96       	adiw	r30, 0x01	; 1
    3a66:	e7 70       	andi	r30, 0x07	; 7
    3a68:	e2 13       	cpse	r30, r18
    3a6a:	eb cf       	rjmp	.-42     	; 0x3a42 <process_tapping+0x140>
                    action_t action = layer_switch_get_action(event);
    3a6c:	70 2f       	mov	r23, r16
    3a6e:	1b 87       	std	Y+11, r17	; 0x0b
    3a70:	0a 87       	std	Y+10, r16	; 0x0a
    3a72:	6d 2d       	mov	r22, r13
    3a74:	8b 85       	ldd	r24, Y+11	; 0x0b
    3a76:	0e 94 48 21 	call	0x4290	; 0x4290 <layer_switch_get_action>
                    switch (action.kind.id) {
    3a7a:	29 2f       	mov	r18, r25
    3a7c:	22 95       	swap	r18
    3a7e:	2f 70       	andi	r18, 0x0F	; 15
    3a80:	90 32       	cpi	r25, 0x20	; 32
    3a82:	60 f0       	brcs	.+24     	; 0x3a9c <process_tapping+0x19a>
    3a84:	22 5f       	subi	r18, 0xF2	; 242
    3a86:	2f 70       	andi	r18, 0x0F	; 15
    3a88:	22 30       	cpi	r18, 0x02	; 2
    3a8a:	78 f4       	brcc	.+30     	; 0x3aaa <process_tapping+0x1a8>
                            if (action.key.mods && keyp->tap.count == 0) return false;
    3a8c:	9f 70       	andi	r25, 0x0F	; 15
    3a8e:	51 f0       	breq	.+20     	; 0x3aa4 <process_tapping+0x1a2>
    3a90:	f7 01       	movw	r30, r14
    3a92:	95 81       	ldd	r25, Z+5	; 0x05
    3a94:	90 7f       	andi	r25, 0xF0	; 240
    3a96:	31 f4       	brne	.+12     	; 0x3aa4 <process_tapping+0x1a2>
                            if (action.key.mods && !action.key.code) return false;
    3a98:	b1 2c       	mov	r11, r1
    3a9a:	0a c0       	rjmp	.+20     	; 0x3ab0 <process_tapping+0x1ae>
    3a9c:	9f 70       	andi	r25, 0x0F	; 15
    3a9e:	11 f0       	breq	.+4      	; 0x3aa4 <process_tapping+0x1a2>
    3aa0:	88 23       	and	r24, r24
    3aa2:	d1 f3       	breq	.-12     	; 0x3a98 <process_tapping+0x196>
                            if (IS_MOD(action.key.code)) return false;
    3aa4:	80 5e       	subi	r24, 0xE0	; 224
    3aa6:	88 30       	cpi	r24, 0x08	; 8
    3aa8:	b8 f3       	brcs	.-18     	; 0x3a98 <process_tapping+0x196>
                    process_action(keyp);
    3aaa:	c7 01       	movw	r24, r14
    3aac:	0e 94 04 18 	call	0x3008	; 0x3008 <process_action>
                    return true;
    3ab0:	cb 2c       	mov	r12, r11
    3ab2:	93 cf       	rjmp	.-218    	; 0x39da <process_tapping+0xd8>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    3ab4:	35 13       	cpse	r19, r21
    3ab6:	06 c0       	rjmp	.+12     	; 0x3ac4 <process_tapping+0x1c2>
    3ab8:	24 13       	cpse	r18, r20
    3aba:	04 c0       	rjmp	.+8      	; 0x3ac4 <process_tapping+0x1c2>
                    keyp->tap = tapping_key.tap;
    3abc:	d7 01       	movw	r26, r14
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    3abe:	dd 20       	and	r13, r13
    3ac0:	09 f4       	brne	.+2      	; 0x3ac4 <process_tapping+0x1c2>
    3ac2:	7f c0       	rjmp	.+254    	; 0x3bc2 <process_tapping+0x2c0>
                else if (is_tap_key(event) && event.pressed) {
    3ac4:	4f 83       	std	Y+7, r20	; 0x07
    3ac6:	58 87       	std	Y+8, r21	; 0x08
    3ac8:	d9 86       	std	Y+9, r13	; 0x09
    3aca:	70 2f       	mov	r23, r16
    3acc:	1b 87       	std	Y+11, r17	; 0x0b
    3ace:	0a 87       	std	Y+10, r16	; 0x0a
    3ad0:	6d 2d       	mov	r22, r13
    3ad2:	8b 85       	ldd	r24, Y+11	; 0x0b
    3ad4:	0e 94 82 1b 	call	0x3704	; 0x3704 <is_tap_key>
    3ad8:	88 23       	and	r24, r24
    3ada:	09 f4       	brne	.+2      	; 0x3ade <process_tapping+0x1dc>
    3adc:	c0 c0       	rjmp	.+384    	; 0x3c5e <process_tapping+0x35c>
    3ade:	dd 20       	and	r13, r13
    3ae0:	09 f4       	brne	.+2      	; 0x3ae4 <process_tapping+0x1e2>
    3ae2:	bd c0       	rjmp	.+378    	; 0x3c5e <process_tapping+0x35c>
                    if (tapping_key.tap.count > 1) {
    3ae4:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <tapping_key+0x5>
    3ae8:	80 32       	cpi	r24, 0x20	; 32
    3aea:	70 f0       	brcs	.+28     	; 0x3b08 <process_tapping+0x206>
                        process_action(&(keyrecord_t){
    3aec:	20 91 c9 02 	lds	r18, 0x02C9	; 0x8002c9 <tapping_key>
    3af0:	30 91 ca 02 	lds	r19, 0x02CA	; 0x8002ca <tapping_key+0x1>
    3af4:	3a 83       	std	Y+2, r19	; 0x02
    3af6:	29 83       	std	Y+1, r18	; 0x01
    3af8:	1b 82       	std	Y+3, r1	; 0x03
    3afa:	1d 83       	std	Y+5, r17	; 0x05
    3afc:	0c 83       	std	Y+4, r16	; 0x04
    3afe:	8e 83       	std	Y+6, r24	; 0x06
    3b00:	ce 01       	movw	r24, r28
    3b02:	01 96       	adiw	r24, 0x01	; 1
    3b04:	0e 94 04 18 	call	0x3008	; 0x3008 <process_action>
                    tapping_key = *keyp;
    3b08:	86 e0       	ldi	r24, 0x06	; 6
    3b0a:	f7 01       	movw	r30, r14
    3b0c:	a9 ec       	ldi	r26, 0xC9	; 201
    3b0e:	b2 e0       	ldi	r27, 0x02	; 2
    3b10:	01 90       	ld	r0, Z+
    3b12:	0d 92       	st	X+, r0
    3b14:	8a 95       	dec	r24
    3b16:	e1 f7       	brne	.-8      	; 0x3b10 <process_tapping+0x20e>
                    waiting_buffer_scan_tap();
    3b18:	0e 94 1d 1c 	call	0x383a	; 0x383a <waiting_buffer_scan_tap>
                    debug_tapping_key();
    3b1c:	0e 94 0f 1c 	call	0x381e	; 0x381e <debug_tapping_key>
                    return true;
    3b20:	cc 24       	eor	r12, r12
    3b22:	c3 94       	inc	r12
    3b24:	5a cf       	rjmp	.-332    	; 0x39da <process_tapping+0xd8>
            if (tapping_key.tap.count == 0) {
    3b26:	91 11       	cpse	r25, r1
    3b28:	13 c0       	rjmp	.+38     	; 0x3b50 <process_tapping+0x24e>
                debug_event(event); debug("\n");
    3b2a:	70 2f       	mov	r23, r16
    3b2c:	1b 87       	std	Y+11, r17	; 0x0b
    3b2e:	0a 87       	std	Y+10, r16	; 0x0a
    3b30:	6d 2d       	mov	r22, r13
    3b32:	8b 85       	ldd	r24, Y+11	; 0x0b
    3b34:	0e 94 cf 1b 	call	0x379e	; 0x379e <debug_event>
                process_action(&tapping_key);
    3b38:	89 ec       	ldi	r24, 0xC9	; 201
    3b3a:	92 e0       	ldi	r25, 0x02	; 2
    3b3c:	0e 94 04 18 	call	0x3008	; 0x3008 <process_action>
                tapping_key = (keyrecord_t){};
    3b40:	86 e0       	ldi	r24, 0x06	; 6
    3b42:	f5 01       	movw	r30, r10
    3b44:	11 92       	st	Z+, r1
    3b46:	8a 95       	dec	r24
    3b48:	e9 f7       	brne	.-6      	; 0x3b44 <process_tapping+0x242>
                debug_tapping_key();
    3b4a:	0e 94 0f 1c 	call	0x381e	; 0x381e <debug_tapping_key>
                return false;
    3b4e:	45 cf       	rjmp	.-374    	; 0x39da <process_tapping+0xd8>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    3b50:	35 13       	cpse	r19, r21
    3b52:	b8 cf       	rjmp	.-144    	; 0x3ac4 <process_tapping+0x1c2>
    3b54:	24 13       	cpse	r18, r20
    3b56:	b6 cf       	rjmp	.-148    	; 0x3ac4 <process_tapping+0x1c2>
    3b58:	d1 10       	cpse	r13, r1
    3b5a:	b4 cf       	rjmp	.-152    	; 0x3ac4 <process_tapping+0x1c2>
                    keyp->tap = tapping_key.tap;
    3b5c:	d7 01       	movw	r26, r14
    3b5e:	15 96       	adiw	r26, 0x05	; 5
    3b60:	8c 93       	st	X, r24
                    process_action(keyp);
    3b62:	c7 01       	movw	r24, r14
    3b64:	0e 94 04 18 	call	0x3008	; 0x3008 <process_action>
                    tapping_key = (keyrecord_t){};
    3b68:	86 e0       	ldi	r24, 0x06	; 6
    3b6a:	f5 01       	movw	r30, r10
    3b6c:	11 92       	st	Z+, r1
    3b6e:	8a 95       	dec	r24
    3b70:	e9 f7       	brne	.-6      	; 0x3b6c <process_tapping+0x26a>
                    return true;
    3b72:	c9 2c       	mov	r12, r9
    3b74:	32 cf       	rjmp	.-412    	; 0x39da <process_tapping+0xd8>
        if (WITHIN_TAPPING_TERM(event)) {
    3b76:	08 17       	cp	r16, r24
    3b78:	19 07       	cpc	r17, r25
    3b7a:	88 f1       	brcs	.+98     	; 0x3bde <process_tapping+0x2dc>
    3b7c:	b8 01       	movw	r22, r16
    3b7e:	68 1b       	sub	r22, r24
    3b80:	79 0b       	sbc	r23, r25
    3b82:	cb 01       	movw	r24, r22
    3b84:	c1 2c       	mov	r12, r1
    3b86:	88 3c       	cpi	r24, 0xC8	; 200
    3b88:	91 05       	cpc	r25, r1
    3b8a:	08 f0       	brcs	.+2      	; 0x3b8e <process_tapping+0x28c>
    3b8c:	4b c0       	rjmp	.+150    	; 0x3c24 <process_tapping+0x322>
            if (event.pressed) {
    3b8e:	cd 2c       	mov	r12, r13
    3b90:	dd 20       	and	r13, r13
    3b92:	09 f4       	brne	.+2      	; 0x3b96 <process_tapping+0x294>
    3b94:	64 c0       	rjmp	.+200    	; 0x3c5e <process_tapping+0x35c>
                if (IS_TAPPING_KEY(event.key)) {
    3b96:	35 13       	cpse	r19, r21
    3b98:	30 c0       	rjmp	.+96     	; 0x3bfa <process_tapping+0x2f8>
    3b9a:	24 13       	cpse	r18, r20
    3b9c:	2e c0       	rjmp	.+92     	; 0x3bfa <process_tapping+0x2f8>
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
    3b9e:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <tapping_key+0x5>
    3ba2:	80 fd       	sbrc	r24, 0
    3ba4:	21 c0       	rjmp	.+66     	; 0x3be8 <process_tapping+0x2e6>
    3ba6:	98 2f       	mov	r25, r24
    3ba8:	90 7f       	andi	r25, 0xF0	; 240
    3baa:	f1 f0       	breq	.+60     	; 0x3be8 <process_tapping+0x2e6>
                        keyp->tap = tapping_key.tap;
    3bac:	d7 01       	movw	r26, r14
    3bae:	15 96       	adiw	r26, 0x05	; 5
    3bb0:	8c 93       	st	X, r24
    3bb2:	15 97       	sbiw	r26, 0x05	; 5
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
    3bb4:	90 3f       	cpi	r25, 0xF0	; 240
    3bb6:	39 f0       	breq	.+14     	; 0x3bc6 <process_tapping+0x2c4>
    3bb8:	98 2f       	mov	r25, r24
    3bba:	90 7f       	andi	r25, 0xF0	; 240
    3bbc:	90 5f       	subi	r25, 0xF0	; 240
    3bbe:	8f 70       	andi	r24, 0x0F	; 15
    3bc0:	89 2b       	or	r24, r25
    3bc2:	15 96       	adiw	r26, 0x05	; 5
    3bc4:	8c 93       	st	X, r24
                        process_action(keyp);
    3bc6:	c7 01       	movw	r24, r14
    3bc8:	0e 94 04 18 	call	0x3008	; 0x3008 <process_action>
                        tapping_key = *keyp;
    3bcc:	86 e0       	ldi	r24, 0x06	; 6
    3bce:	f7 01       	movw	r30, r14
    3bd0:	a9 ec       	ldi	r26, 0xC9	; 201
    3bd2:	b2 e0       	ldi	r27, 0x02	; 2
    3bd4:	01 90       	ld	r0, Z+
    3bd6:	0d 92       	st	X+, r0
    3bd8:	8a 95       	dec	r24
    3bda:	e1 f7       	brne	.-8      	; 0x3bd4 <process_tapping+0x2d2>
                        debug_tapping_key();
    3bdc:	b6 cf       	rjmp	.-148    	; 0x3b4a <process_tapping+0x248>
        if (WITHIN_TAPPING_TERM(event)) {
    3bde:	80 95       	com	r24
    3be0:	90 95       	com	r25
    3be2:	80 0f       	add	r24, r16
    3be4:	91 1f       	adc	r25, r17
    3be6:	ce cf       	rjmp	.-100    	; 0x3b84 <process_tapping+0x282>
                        tapping_key = *keyp;
    3be8:	86 e0       	ldi	r24, 0x06	; 6
    3bea:	f7 01       	movw	r30, r14
    3bec:	a9 ec       	ldi	r26, 0xC9	; 201
    3bee:	b2 e0       	ldi	r27, 0x02	; 2
    3bf0:	01 90       	ld	r0, Z+
    3bf2:	0d 92       	st	X+, r0
    3bf4:	8a 95       	dec	r24
    3bf6:	e1 f7       	brne	.-8      	; 0x3bf0 <process_tapping+0x2ee>
                        return true;
    3bf8:	f0 ce       	rjmp	.-544    	; 0x39da <process_tapping+0xd8>
                } else if (is_tap_key(event)) {
    3bfa:	4f 83       	std	Y+7, r20	; 0x07
    3bfc:	58 87       	std	Y+8, r21	; 0x08
    3bfe:	d9 86       	std	Y+9, r13	; 0x09
    3c00:	70 2f       	mov	r23, r16
    3c02:	1b 87       	std	Y+11, r17	; 0x0b
    3c04:	0a 87       	std	Y+10, r16	; 0x0a
    3c06:	6d 2d       	mov	r22, r13
    3c08:	8b 85       	ldd	r24, Y+11	; 0x0b
    3c0a:	0e 94 82 1b 	call	0x3704	; 0x3704 <is_tap_key>
    3c0e:	81 11       	cpse	r24, r1
    3c10:	7b cf       	rjmp	.-266    	; 0x3b08 <process_tapping+0x206>
                    tapping_key.tap.interrupted = true;
    3c12:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <tapping_key+0x5>
    3c16:	81 60       	ori	r24, 0x01	; 1
    3c18:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <tapping_key+0x5>
                    process_action(keyp);
    3c1c:	c7 01       	movw	r24, r14
    3c1e:	0e 94 04 18 	call	0x3008	; 0x3008 <process_action>
                    return true;
    3c22:	db ce       	rjmp	.-586    	; 0x39da <process_tapping+0xd8>
            debug_event(event); debug("\n");
    3c24:	70 2f       	mov	r23, r16
    3c26:	1b 87       	std	Y+11, r17	; 0x0b
    3c28:	0a 87       	std	Y+10, r16	; 0x0a
    3c2a:	6d 2d       	mov	r22, r13
    3c2c:	8b 85       	ldd	r24, Y+11	; 0x0b
    3c2e:	0e 94 cf 1b 	call	0x379e	; 0x379e <debug_event>
            tapping_key = (keyrecord_t){};
    3c32:	86 e0       	ldi	r24, 0x06	; 6
    3c34:	e9 ec       	ldi	r30, 0xC9	; 201
    3c36:	f2 e0       	ldi	r31, 0x02	; 2
    3c38:	df 01       	movw	r26, r30
    3c3a:	1d 92       	st	X+, r1
    3c3c:	8a 95       	dec	r24
    3c3e:	e9 f7       	brne	.-6      	; 0x3c3a <process_tapping+0x338>
            debug_tapping_key();
    3c40:	84 cf       	rjmp	.-248    	; 0x3b4a <process_tapping+0x248>
        if (event.pressed && is_tap_key(event)) {
    3c42:	dd 20       	and	r13, r13
    3c44:	61 f0       	breq	.+24     	; 0x3c5e <process_tapping+0x35c>
    3c46:	4f 83       	std	Y+7, r20	; 0x07
    3c48:	58 87       	std	Y+8, r21	; 0x08
    3c4a:	d9 86       	std	Y+9, r13	; 0x09
    3c4c:	70 2f       	mov	r23, r16
    3c4e:	1b 87       	std	Y+11, r17	; 0x0b
    3c50:	0a 87       	std	Y+10, r16	; 0x0a
    3c52:	6d 2d       	mov	r22, r13
    3c54:	8b 85       	ldd	r24, Y+11	; 0x0b
    3c56:	0e 94 82 1b 	call	0x3704	; 0x3704 <is_tap_key>
    3c5a:	81 11       	cpse	r24, r1
    3c5c:	55 cf       	rjmp	.-342    	; 0x3b08 <process_tapping+0x206>
                    process_action(keyp);
    3c5e:	c7 01       	movw	r24, r14
    3c60:	0e 94 04 18 	call	0x3008	; 0x3008 <process_action>
    3c64:	5d cf       	rjmp	.-326    	; 0x3b20 <process_tapping+0x21e>
    3c66:	81 e0       	ldi	r24, 0x01	; 1
    3c68:	8d 25       	eor	r24, r13
    3c6a:	d8 ce       	rjmp	.-592    	; 0x3a1c <process_tapping+0x11a>

00003c6c <action_tapping_process>:
{
    3c6c:	1f 93       	push	r17
    3c6e:	cf 93       	push	r28
    3c70:	df 93       	push	r29
    3c72:	cd b7       	in	r28, 0x3d	; 61
    3c74:	de b7       	in	r29, 0x3e	; 62
    3c76:	2c 97       	sbiw	r28, 0x0c	; 12
    3c78:	0f b6       	in	r0, 0x3f	; 63
    3c7a:	f8 94       	cli
    3c7c:	de bf       	out	0x3e, r29	; 62
    3c7e:	0f be       	out	0x3f, r0	; 63
    3c80:	cd bf       	out	0x3d, r28	; 61
    3c82:	4f 83       	std	Y+7, r20	; 0x07
    3c84:	58 87       	std	Y+8, r21	; 0x08
    3c86:	69 87       	std	Y+9, r22	; 0x09
    3c88:	7a 87       	std	Y+10, r23	; 0x0a
    3c8a:	8b 87       	std	Y+11, r24	; 0x0b
    3c8c:	9c 87       	std	Y+12, r25	; 0x0c
    if (process_tapping(&record)) {
    3c8e:	ce 01       	movw	r24, r28
    3c90:	07 96       	adiw	r24, 0x07	; 7
    3c92:	0e 94 81 1c 	call	0x3902	; 0x3902 <process_tapping>
    3c96:	88 23       	and	r24, r24
    3c98:	69 f0       	breq	.+26     	; 0x3cb4 <action_tapping_process+0x48>
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    3c9a:	8a 85       	ldd	r24, Y+10	; 0x0a
    3c9c:	9b 85       	ldd	r25, Y+11	; 0x0b
    3c9e:	89 2b       	or	r24, r25
    3ca0:	39 f0       	breq	.+14     	; 0x3cb0 <action_tapping_process+0x44>
    3ca2:	4f 81       	ldd	r20, Y+7	; 0x07
    3ca4:	58 85       	ldd	r21, Y+8	; 0x08
    3ca6:	84 2f       	mov	r24, r20
    3ca8:	85 23       	and	r24, r21
    3caa:	8f 3f       	cpi	r24, 0xFF	; 255
    3cac:	09 f0       	breq	.+2      	; 0x3cb0 <action_tapping_process+0x44>
    3cae:	71 c0       	rjmp	.+226    	; 0x3d92 <action_tapping_process+0x126>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    3cb0:	16 e0       	ldi	r17, 0x06	; 6
    3cb2:	5f c0       	rjmp	.+190    	; 0x3d72 <action_tapping_process+0x106>
        if (!waiting_buffer_enq(record)) {
    3cb4:	86 e0       	ldi	r24, 0x06	; 6
    3cb6:	fe 01       	movw	r30, r28
    3cb8:	37 96       	adiw	r30, 0x07	; 7
    3cba:	de 01       	movw	r26, r28
    3cbc:	11 96       	adiw	r26, 0x01	; 1
    3cbe:	01 90       	ld	r0, Z+
    3cc0:	0d 92       	st	X+, r0
    3cc2:	8a 95       	dec	r24
    3cc4:	e1 f7       	brne	.-8      	; 0x3cbe <action_tapping_process+0x52>
    3cc6:	8a 85       	ldd	r24, Y+10	; 0x0a
    3cc8:	9b 85       	ldd	r25, Y+11	; 0x0b
    3cca:	89 2b       	or	r24, r25
    3ccc:	89 f3       	breq	.-30     	; 0x3cb0 <action_tapping_process+0x44>
    3cce:	88 85       	ldd	r24, Y+8	; 0x08
    3cd0:	9f 81       	ldd	r25, Y+7	; 0x07
    3cd2:	89 23       	and	r24, r25
    3cd4:	8f 3f       	cpi	r24, 0xFF	; 255
    3cd6:	61 f3       	breq	.-40     	; 0x3cb0 <action_tapping_process+0x44>
    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
    3cd8:	20 91 98 02 	lds	r18, 0x0298	; 0x800298 <waiting_buffer_head>
    3cdc:	30 e0       	ldi	r19, 0x00	; 0
    3cde:	c9 01       	movw	r24, r18
    3ce0:	01 96       	adiw	r24, 0x01	; 1
    3ce2:	87 70       	andi	r24, 0x07	; 7
    3ce4:	99 27       	eor	r25, r25
    3ce6:	40 91 97 02 	lds	r20, 0x0297	; 0x800297 <waiting_buffer_tail>
    3cea:	48 17       	cp	r20, r24
    3cec:	19 06       	cpc	r1, r25
    3cee:	71 f4       	brne	.+28     	; 0x3d0c <action_tapping_process+0xa0>
            clear_keyboard();
    3cf0:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <clear_keyboard>
    waiting_buffer_head = 0;
    3cf4:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <waiting_buffer_head>
    waiting_buffer_tail = 0;
    3cf8:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <waiting_buffer_tail>
            tapping_key = (keyrecord_t){};
    3cfc:	86 e0       	ldi	r24, 0x06	; 6
    3cfe:	e9 ec       	ldi	r30, 0xC9	; 201
    3d00:	f2 e0       	ldi	r31, 0x02	; 2
    3d02:	df 01       	movw	r26, r30
    3d04:	1d 92       	st	X+, r1
    3d06:	8a 95       	dec	r24
    3d08:	e9 f7       	brne	.-6      	; 0x3d04 <action_tapping_process+0x98>
    3d0a:	d2 cf       	rjmp	.-92     	; 0x3cb0 <action_tapping_process+0x44>
    waiting_buffer[waiting_buffer_head] = record;
    3d0c:	96 e0       	ldi	r25, 0x06	; 6
    3d0e:	92 9f       	mul	r25, r18
    3d10:	d0 01       	movw	r26, r0
    3d12:	93 9f       	mul	r25, r19
    3d14:	b0 0d       	add	r27, r0
    3d16:	11 24       	eor	r1, r1
    3d18:	a7 56       	subi	r26, 0x67	; 103
    3d1a:	bd 4f       	sbci	r27, 0xFD	; 253
    3d1c:	fe 01       	movw	r30, r28
    3d1e:	31 96       	adiw	r30, 0x01	; 1
    3d20:	01 90       	ld	r0, Z+
    3d22:	0d 92       	st	X+, r0
    3d24:	9a 95       	dec	r25
    3d26:	e1 f7       	brne	.-8      	; 0x3d20 <action_tapping_process+0xb4>
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
    3d28:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <waiting_buffer_head>
    debug("waiting_buffer_enq: "); debug_waiting_buffer();
    3d2c:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <debug_waiting_buffer>
    return true;
    3d30:	bf cf       	rjmp	.-130    	; 0x3cb0 <action_tapping_process+0x44>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    3d32:	81 9f       	mul	r24, r17
    3d34:	c0 01       	movw	r24, r0
    3d36:	11 24       	eor	r1, r1
    3d38:	87 56       	subi	r24, 0x67	; 103
    3d3a:	9d 4f       	sbci	r25, 0xFD	; 253
    3d3c:	0e 94 81 1c 	call	0x3902	; 0x3902 <process_tapping>
    3d40:	88 23       	and	r24, r24
    3d42:	e9 f0       	breq	.+58     	; 0x3d7e <action_tapping_process+0x112>
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
    3d44:	e0 91 97 02 	lds	r30, 0x0297	; 0x800297 <waiting_buffer_tail>
    3d48:	1e 9f       	mul	r17, r30
    3d4a:	f0 01       	movw	r30, r0
    3d4c:	11 24       	eor	r1, r1
    3d4e:	e7 56       	subi	r30, 0x67	; 103
    3d50:	fd 4f       	sbci	r31, 0xFD	; 253
    3d52:	40 81       	ld	r20, Z
    3d54:	51 81       	ldd	r21, Z+1	; 0x01
    3d56:	62 81       	ldd	r22, Z+2	; 0x02
    3d58:	73 81       	ldd	r23, Z+3	; 0x03
    3d5a:	84 81       	ldd	r24, Z+4	; 0x04
    3d5c:	95 81       	ldd	r25, Z+5	; 0x05
    3d5e:	0e 94 de 1b 	call	0x37bc	; 0x37bc <debug_record>
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    3d62:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <waiting_buffer_tail>
    3d66:	90 e0       	ldi	r25, 0x00	; 0
    3d68:	01 96       	adiw	r24, 0x01	; 1
    3d6a:	87 70       	andi	r24, 0x07	; 7
    3d6c:	99 27       	eor	r25, r25
    3d6e:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <waiting_buffer_tail>
    3d72:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <waiting_buffer_tail>
    3d76:	90 91 98 02 	lds	r25, 0x0298	; 0x800298 <waiting_buffer_head>
    3d7a:	89 13       	cpse	r24, r25
    3d7c:	da cf       	rjmp	.-76     	; 0x3d32 <action_tapping_process+0xc6>
}
    3d7e:	2c 96       	adiw	r28, 0x0c	; 12
    3d80:	0f b6       	in	r0, 0x3f	; 63
    3d82:	f8 94       	cli
    3d84:	de bf       	out	0x3e, r29	; 62
    3d86:	0f be       	out	0x3f, r0	; 63
    3d88:	cd bf       	out	0x3d, r28	; 61
    3d8a:	df 91       	pop	r29
    3d8c:	cf 91       	pop	r28
    3d8e:	1f 91       	pop	r17
    3d90:	08 95       	ret
            debug("processed: "); debug_record(record); debug("\n");
    3d92:	69 85       	ldd	r22, Y+9	; 0x09
    3d94:	7a 85       	ldd	r23, Y+10	; 0x0a
    3d96:	8b 85       	ldd	r24, Y+11	; 0x0b
    3d98:	9c 85       	ldd	r25, Y+12	; 0x0c
    3d9a:	0e 94 de 1b 	call	0x37bc	; 0x37bc <debug_record>
    3d9e:	88 cf       	rjmp	.-240    	; 0x3cb0 <action_tapping_process+0x44>

00003da0 <action_macro_play>:

#ifndef NO_ACTION_MACRO

#define MACRO_READ()  (macro = MACRO_GET(macro_p++))
void action_macro_play(const macro_t *macro_p)
{
    3da0:	df 92       	push	r13
    3da2:	ef 92       	push	r14
    3da4:	ff 92       	push	r15
    3da6:	0f 93       	push	r16
    3da8:	1f 93       	push	r17
    3daa:	cf 93       	push	r28
    3dac:	df 93       	push	r29
    3dae:	9c 01       	movw	r18, r24
    macro_t macro = END;
    uint8_t interval = 0;

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    3db0:	89 2b       	or	r24, r25
    3db2:	b9 f0       	breq	.+46     	; 0x3de2 <action_macro_play+0x42>
    uint8_t mod_storage = 0;
    3db4:	f1 2c       	mov	r15, r1
    uint8_t interval = 0;
    3db6:	e1 2c       	mov	r14, r1
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    add_weak_mods(MOD_BIT(macro));
    3db8:	dd 24       	eor	r13, r13
    3dba:	d3 94       	inc	r13
        switch (MACRO_READ()) {
    3dbc:	e9 01       	movw	r28, r18
    3dbe:	21 96       	adiw	r28, 0x01	; 1
    3dc0:	f9 01       	movw	r30, r18
    3dc2:	84 91       	lpm	r24, Z
    3dc4:	85 37       	cpi	r24, 0x75	; 117
    3dc6:	09 f4       	brne	.+2      	; 0x3dca <action_macro_play+0x2a>
    3dc8:	6e c0       	rjmp	.+220    	; 0x3ea6 <action_macro_play+0x106>
    3dca:	98 f4       	brcc	.+38     	; 0x3df2 <action_macro_play+0x52>
    3dcc:	84 37       	cpi	r24, 0x74	; 116
    3dce:	09 f4       	brne	.+2      	; 0x3dd2 <action_macro_play+0x32>
    3dd0:	5b c0       	rjmp	.+182    	; 0x3e88 <action_macro_play+0xe8>
    3dd2:	84 30       	cpi	r24, 0x04	; 4
    3dd4:	08 f0       	brcs	.+2      	; 0x3dd8 <action_macro_play+0x38>
    3dd6:	73 c0       	rjmp	.+230    	; 0x3ebe <action_macro_play+0x11e>
    3dd8:	81 30       	cpi	r24, 0x01	; 1
    3dda:	11 f1       	breq	.+68     	; 0x3e20 <action_macro_play+0x80>
    3ddc:	82 30       	cpi	r24, 0x02	; 2
    3dde:	09 f4       	brne	.+2      	; 0x3de2 <action_macro_play+0x42>
    3de0:	3d c0       	rjmp	.+122    	; 0x3e5c <action_macro_play+0xbc>
                return;
        }
        // interval
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    }
}
    3de2:	df 91       	pop	r29
    3de4:	cf 91       	pop	r28
    3de6:	1f 91       	pop	r17
    3de8:	0f 91       	pop	r16
    3dea:	ff 90       	pop	r15
    3dec:	ef 90       	pop	r14
    3dee:	df 90       	pop	r13
    3df0:	08 95       	ret
        switch (MACRO_READ()) {
    3df2:	88 37       	cpi	r24, 0x78	; 120
    3df4:	09 f4       	brne	.+2      	; 0x3df8 <action_macro_play+0x58>
    3df6:	60 c0       	rjmp	.+192    	; 0x3eb8 <action_macro_play+0x118>
    3df8:	58 f4       	brcc	.+22     	; 0x3e10 <action_macro_play+0x70>
    3dfa:	86 37       	cpi	r24, 0x76	; 118
    3dfc:	09 f4       	brne	.+2      	; 0x3e00 <action_macro_play+0x60>
    3dfe:	58 c0       	rjmp	.+176    	; 0x3eb0 <action_macro_play+0x110>
    3e00:	87 37       	cpi	r24, 0x77	; 119
    3e02:	79 f7       	brne	.-34     	; 0x3de2 <action_macro_play+0x42>
                set_mods(mod_storage);
    3e04:	8f 2d       	mov	r24, r15
    3e06:	0e 94 3a 22 	call	0x4474	; 0x4474 <set_mods>
                send_keyboard_report();
    3e0a:	0e 94 67 22 	call	0x44ce	; 0x44ce <send_keyboard_report>
                break;
    3e0e:	20 c0       	rjmp	.+64     	; 0x3e50 <action_macro_play+0xb0>
        switch (MACRO_READ()) {
    3e10:	9c e7       	ldi	r25, 0x7C	; 124
    3e12:	98 0f       	add	r25, r24
    3e14:	90 37       	cpi	r25, 0x70	; 112
    3e16:	28 f7       	brcc	.-54     	; 0x3de2 <action_macro_play+0x42>
                unregister_code(macro&0x7F);
    3e18:	8f 77       	andi	r24, 0x7F	; 127
    3e1a:	0e 94 88 17 	call	0x2f10	; 0x2f10 <unregister_code>
                break;
    3e1e:	18 c0       	rjmp	.+48     	; 0x3e50 <action_macro_play+0xb0>
                MACRO_READ();
    3e20:	89 01       	movw	r16, r18
    3e22:	0e 5f       	subi	r16, 0xFE	; 254
    3e24:	1f 4f       	sbci	r17, 0xFF	; 255
    3e26:	fe 01       	movw	r30, r28
    3e28:	84 91       	lpm	r24, Z
                if (IS_MOD(macro)) {
    3e2a:	90 e2       	ldi	r25, 0x20	; 32
    3e2c:	98 0f       	add	r25, r24
    3e2e:	98 30       	cpi	r25, 0x08	; 8
    3e30:	60 f4       	brcc	.+24     	; 0x3e4a <action_macro_play+0xaa>
                    add_weak_mods(MOD_BIT(macro));
    3e32:	87 70       	andi	r24, 0x07	; 7
    3e34:	fd 2d       	mov	r31, r13
    3e36:	01 c0       	rjmp	.+2      	; 0x3e3a <action_macro_play+0x9a>
    3e38:	ff 0f       	add	r31, r31
    3e3a:	8a 95       	dec	r24
    3e3c:	ea f7       	brpl	.-6      	; 0x3e38 <action_macro_play+0x98>
    3e3e:	8f 2f       	mov	r24, r31
    3e40:	0e 94 40 22 	call	0x4480	; 0x4480 <add_weak_mods>
                    send_keyboard_report();
    3e44:	0e 94 67 22 	call	0x44ce	; 0x44ce <send_keyboard_report>
    3e48:	02 c0       	rjmp	.+4      	; 0x3e4e <action_macro_play+0xae>
                    register_code(macro);
    3e4a:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <register_code>
                MACRO_READ();
    3e4e:	e8 01       	movw	r28, r16
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    3e50:	8e 2d       	mov	r24, r14
    3e52:	81 50       	subi	r24, 0x01	; 1
    3e54:	08 f0       	brcs	.+2      	; 0x3e58 <action_macro_play+0xb8>
    3e56:	36 c0       	rjmp	.+108    	; 0x3ec4 <action_macro_play+0x124>
    3e58:	9e 01       	movw	r18, r28
    3e5a:	b0 cf       	rjmp	.-160    	; 0x3dbc <action_macro_play+0x1c>
                MACRO_READ();
    3e5c:	89 01       	movw	r16, r18
    3e5e:	0e 5f       	subi	r16, 0xFE	; 254
    3e60:	1f 4f       	sbci	r17, 0xFF	; 255
    3e62:	fe 01       	movw	r30, r28
    3e64:	84 91       	lpm	r24, Z
                if (IS_MOD(macro)) {
    3e66:	90 e2       	ldi	r25, 0x20	; 32
    3e68:	98 0f       	add	r25, r24
    3e6a:	98 30       	cpi	r25, 0x08	; 8
    3e6c:	50 f4       	brcc	.+20     	; 0x3e82 <action_macro_play+0xe2>
                    del_weak_mods(MOD_BIT(macro));
    3e6e:	87 70       	andi	r24, 0x07	; 7
    3e70:	fd 2d       	mov	r31, r13
    3e72:	01 c0       	rjmp	.+2      	; 0x3e76 <action_macro_play+0xd6>
    3e74:	ff 0f       	add	r31, r31
    3e76:	8a 95       	dec	r24
    3e78:	ea f7       	brpl	.-6      	; 0x3e74 <action_macro_play+0xd4>
    3e7a:	8f 2f       	mov	r24, r31
    3e7c:	0e 94 46 22 	call	0x448c	; 0x448c <del_weak_mods>
    3e80:	e1 cf       	rjmp	.-62     	; 0x3e44 <action_macro_play+0xa4>
                    unregister_code(macro);
    3e82:	0e 94 88 17 	call	0x2f10	; 0x2f10 <unregister_code>
    3e86:	e3 cf       	rjmp	.-58     	; 0x3e4e <action_macro_play+0xae>
                MACRO_READ();
    3e88:	2e 5f       	subi	r18, 0xFE	; 254
    3e8a:	3f 4f       	sbci	r19, 0xFF	; 255
    3e8c:	fe 01       	movw	r30, r28
    3e8e:	c4 91       	lpm	r28, Z
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
    3e90:	c1 50       	subi	r28, 0x01	; 1
    3e92:	10 f4       	brcc	.+4      	; 0x3e98 <action_macro_play+0xf8>
                interval = MACRO_READ();
    3e94:	e9 01       	movw	r28, r18
                break;
    3e96:	dc cf       	rjmp	.-72     	; 0x3e50 <action_macro_play+0xb0>
    3e98:	8f e9       	ldi	r24, 0x9F	; 159
    3e9a:	9f e0       	ldi	r25, 0x0F	; 15
    3e9c:	01 97       	sbiw	r24, 0x01	; 1
    3e9e:	f1 f7       	brne	.-4      	; 0x3e9c <action_macro_play+0xfc>
    3ea0:	00 c0       	rjmp	.+0      	; 0x3ea2 <action_macro_play+0x102>
    3ea2:	00 00       	nop
}
    3ea4:	f5 cf       	rjmp	.-22     	; 0x3e90 <action_macro_play+0xf0>
                interval = MACRO_READ();
    3ea6:	2e 5f       	subi	r18, 0xFE	; 254
    3ea8:	3f 4f       	sbci	r19, 0xFF	; 255
    3eaa:	fe 01       	movw	r30, r28
    3eac:	e4 90       	lpm	r14, Z
    3eae:	f2 cf       	rjmp	.-28     	; 0x3e94 <action_macro_play+0xf4>
                mod_storage = get_mods();
    3eb0:	0e 94 29 22 	call	0x4452	; 0x4452 <get_mods>
    3eb4:	f8 2e       	mov	r15, r24
                break;
    3eb6:	cc cf       	rjmp	.-104    	; 0x3e50 <action_macro_play+0xb0>
                clear_mods();
    3eb8:	0e 94 3d 22 	call	0x447a	; 0x447a <clear_mods>
    3ebc:	a6 cf       	rjmp	.-180    	; 0x3e0a <action_macro_play+0x6a>
                register_code(macro);
    3ebe:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <register_code>
                break;
    3ec2:	c6 cf       	rjmp	.-116    	; 0x3e50 <action_macro_play+0xb0>
	__builtin_avr_delay_cycles(__ticks_dc);
    3ec4:	ef e9       	ldi	r30, 0x9F	; 159
    3ec6:	ff e0       	ldi	r31, 0x0F	; 15
    3ec8:	31 97       	sbiw	r30, 0x01	; 1
    3eca:	f1 f7       	brne	.-4      	; 0x3ec8 <action_macro_play+0x128>
    3ecc:	00 c0       	rjmp	.+0      	; 0x3ece <action_macro_play+0x12e>
    3ece:	00 00       	nop
}
    3ed0:	c0 cf       	rjmp	.-128    	; 0x3e52 <action_macro_play+0xb2>

00003ed2 <layer_state_set>:

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3ed2:	60 93 4f 03 	sts	0x034F, r22	; 0x80034f <layer_state>
    3ed6:	70 93 50 03 	sts	0x0350, r23	; 0x800350 <layer_state+0x1>
    3eda:	80 93 51 03 	sts	0x0351, r24	; 0x800351 <layer_state+0x2>
    3ede:	90 93 52 03 	sts	0x0352, r25	; 0x800352 <layer_state+0x3>
    hook_layer_change(layer_state);
    3ee2:	0c 94 b7 22 	jmp	0x456e	; 0x456e <hook_layer_change>

00003ee6 <default_layer_debug>:
}
    3ee6:	08 95       	ret

00003ee8 <default_layer_set>:
    default_layer_state = state;
    3ee8:	60 93 53 03 	sts	0x0353, r22	; 0x800353 <default_layer_state>
    3eec:	70 93 54 03 	sts	0x0354, r23	; 0x800354 <default_layer_state+0x1>
    3ef0:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <default_layer_state+0x2>
    3ef4:	90 93 56 03 	sts	0x0356, r25	; 0x800356 <default_layer_state+0x3>
    hook_default_layer_change(default_layer_state);
    3ef8:	0c 94 b6 22 	jmp	0x456c	; 0x456c <hook_default_layer_change>

00003efc <default_layer_or>:
{
    3efc:	cf 93       	push	r28
    3efe:	df 93       	push	r29
    3f00:	00 d0       	rcall	.+0      	; 0x3f02 <default_layer_or+0x6>
    3f02:	00 d0       	rcall	.+0      	; 0x3f04 <default_layer_or+0x8>
    3f04:	cd b7       	in	r28, 0x3d	; 61
    3f06:	de b7       	in	r29, 0x3e	; 62
    3f08:	69 83       	std	Y+1, r22	; 0x01
    3f0a:	7a 83       	std	Y+2, r23	; 0x02
    3f0c:	8b 83       	std	Y+3, r24	; 0x03
    3f0e:	9c 83       	std	Y+4, r25	; 0x04
    default_layer_state_set(default_layer_state | state);
    3f10:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <default_layer_state>
    3f14:	90 91 54 03 	lds	r25, 0x0354	; 0x800354 <default_layer_state+0x1>
    3f18:	a0 91 55 03 	lds	r26, 0x0355	; 0x800355 <default_layer_state+0x2>
    3f1c:	b0 91 56 03 	lds	r27, 0x0356	; 0x800356 <default_layer_state+0x3>
    3f20:	29 81       	ldd	r18, Y+1	; 0x01
    3f22:	3a 81       	ldd	r19, Y+2	; 0x02
    3f24:	4b 81       	ldd	r20, Y+3	; 0x03
    3f26:	5c 81       	ldd	r21, Y+4	; 0x04
    3f28:	28 2b       	or	r18, r24
    3f2a:	39 2b       	or	r19, r25
    3f2c:	4a 2b       	or	r20, r26
    3f2e:	5b 2b       	or	r21, r27
    3f30:	29 83       	std	Y+1, r18	; 0x01
    3f32:	3a 83       	std	Y+2, r19	; 0x02
    3f34:	4b 83       	std	Y+3, r20	; 0x03
    3f36:	5c 83       	std	Y+4, r21	; 0x04
    default_layer_state = state;
    3f38:	20 93 53 03 	sts	0x0353, r18	; 0x800353 <default_layer_state>
    3f3c:	30 93 54 03 	sts	0x0354, r19	; 0x800354 <default_layer_state+0x1>
    3f40:	40 93 55 03 	sts	0x0355, r20	; 0x800355 <default_layer_state+0x2>
    3f44:	50 93 56 03 	sts	0x0356, r21	; 0x800356 <default_layer_state+0x3>
    hook_default_layer_change(default_layer_state);
    3f48:	ca 01       	movw	r24, r20
    3f4a:	b9 01       	movw	r22, r18
}
    3f4c:	0f 90       	pop	r0
    3f4e:	0f 90       	pop	r0
    3f50:	0f 90       	pop	r0
    3f52:	0f 90       	pop	r0
    3f54:	df 91       	pop	r29
    3f56:	cf 91       	pop	r28
    hook_default_layer_change(default_layer_state);
    3f58:	0c 94 b6 22 	jmp	0x456c	; 0x456c <hook_default_layer_change>

00003f5c <default_layer_and>:
{
    3f5c:	cf 93       	push	r28
    3f5e:	df 93       	push	r29
    3f60:	00 d0       	rcall	.+0      	; 0x3f62 <default_layer_and+0x6>
    3f62:	00 d0       	rcall	.+0      	; 0x3f64 <default_layer_and+0x8>
    3f64:	cd b7       	in	r28, 0x3d	; 61
    3f66:	de b7       	in	r29, 0x3e	; 62
    3f68:	69 83       	std	Y+1, r22	; 0x01
    3f6a:	7a 83       	std	Y+2, r23	; 0x02
    3f6c:	8b 83       	std	Y+3, r24	; 0x03
    3f6e:	9c 83       	std	Y+4, r25	; 0x04
    default_layer_state_set(default_layer_state & state);
    3f70:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <default_layer_state>
    3f74:	90 91 54 03 	lds	r25, 0x0354	; 0x800354 <default_layer_state+0x1>
    3f78:	a0 91 55 03 	lds	r26, 0x0355	; 0x800355 <default_layer_state+0x2>
    3f7c:	b0 91 56 03 	lds	r27, 0x0356	; 0x800356 <default_layer_state+0x3>
    3f80:	29 81       	ldd	r18, Y+1	; 0x01
    3f82:	3a 81       	ldd	r19, Y+2	; 0x02
    3f84:	4b 81       	ldd	r20, Y+3	; 0x03
    3f86:	5c 81       	ldd	r21, Y+4	; 0x04
    3f88:	28 23       	and	r18, r24
    3f8a:	39 23       	and	r19, r25
    3f8c:	4a 23       	and	r20, r26
    3f8e:	5b 23       	and	r21, r27
    3f90:	29 83       	std	Y+1, r18	; 0x01
    3f92:	3a 83       	std	Y+2, r19	; 0x02
    3f94:	4b 83       	std	Y+3, r20	; 0x03
    3f96:	5c 83       	std	Y+4, r21	; 0x04
    default_layer_state = state;
    3f98:	20 93 53 03 	sts	0x0353, r18	; 0x800353 <default_layer_state>
    3f9c:	30 93 54 03 	sts	0x0354, r19	; 0x800354 <default_layer_state+0x1>
    3fa0:	40 93 55 03 	sts	0x0355, r20	; 0x800355 <default_layer_state+0x2>
    3fa4:	50 93 56 03 	sts	0x0356, r21	; 0x800356 <default_layer_state+0x3>
    hook_default_layer_change(default_layer_state);
    3fa8:	ca 01       	movw	r24, r20
    3faa:	b9 01       	movw	r22, r18
}
    3fac:	0f 90       	pop	r0
    3fae:	0f 90       	pop	r0
    3fb0:	0f 90       	pop	r0
    3fb2:	0f 90       	pop	r0
    3fb4:	df 91       	pop	r29
    3fb6:	cf 91       	pop	r28
    hook_default_layer_change(default_layer_state);
    3fb8:	0c 94 b6 22 	jmp	0x456c	; 0x456c <hook_default_layer_change>

00003fbc <default_layer_xor>:
{
    3fbc:	cf 93       	push	r28
    3fbe:	df 93       	push	r29
    3fc0:	00 d0       	rcall	.+0      	; 0x3fc2 <default_layer_xor+0x6>
    3fc2:	00 d0       	rcall	.+0      	; 0x3fc4 <default_layer_xor+0x8>
    3fc4:	cd b7       	in	r28, 0x3d	; 61
    3fc6:	de b7       	in	r29, 0x3e	; 62
    3fc8:	69 83       	std	Y+1, r22	; 0x01
    3fca:	7a 83       	std	Y+2, r23	; 0x02
    3fcc:	8b 83       	std	Y+3, r24	; 0x03
    3fce:	9c 83       	std	Y+4, r25	; 0x04
    default_layer_state_set(default_layer_state ^ state);
    3fd0:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <default_layer_state>
    3fd4:	90 91 54 03 	lds	r25, 0x0354	; 0x800354 <default_layer_state+0x1>
    3fd8:	a0 91 55 03 	lds	r26, 0x0355	; 0x800355 <default_layer_state+0x2>
    3fdc:	b0 91 56 03 	lds	r27, 0x0356	; 0x800356 <default_layer_state+0x3>
    3fe0:	29 81       	ldd	r18, Y+1	; 0x01
    3fe2:	3a 81       	ldd	r19, Y+2	; 0x02
    3fe4:	4b 81       	ldd	r20, Y+3	; 0x03
    3fe6:	5c 81       	ldd	r21, Y+4	; 0x04
    3fe8:	28 27       	eor	r18, r24
    3fea:	39 27       	eor	r19, r25
    3fec:	4a 27       	eor	r20, r26
    3fee:	5b 27       	eor	r21, r27
    3ff0:	29 83       	std	Y+1, r18	; 0x01
    3ff2:	3a 83       	std	Y+2, r19	; 0x02
    3ff4:	4b 83       	std	Y+3, r20	; 0x03
    3ff6:	5c 83       	std	Y+4, r21	; 0x04
    default_layer_state = state;
    3ff8:	20 93 53 03 	sts	0x0353, r18	; 0x800353 <default_layer_state>
    3ffc:	30 93 54 03 	sts	0x0354, r19	; 0x800354 <default_layer_state+0x1>
    4000:	40 93 55 03 	sts	0x0355, r20	; 0x800355 <default_layer_state+0x2>
    4004:	50 93 56 03 	sts	0x0356, r21	; 0x800356 <default_layer_state+0x3>
    hook_default_layer_change(default_layer_state);
    4008:	ca 01       	movw	r24, r20
    400a:	b9 01       	movw	r22, r18
}
    400c:	0f 90       	pop	r0
    400e:	0f 90       	pop	r0
    4010:	0f 90       	pop	r0
    4012:	0f 90       	pop	r0
    4014:	df 91       	pop	r29
    4016:	cf 91       	pop	r28
    hook_default_layer_change(default_layer_state);
    4018:	0c 94 b6 22 	jmp	0x456c	; 0x456c <hook_default_layer_change>

0000401c <layer_clear>:
#endif
}

void layer_clear(void)
{
    layer_state_set(0);
    401c:	60 e0       	ldi	r22, 0x00	; 0
    401e:	70 e0       	ldi	r23, 0x00	; 0
    4020:	cb 01       	movw	r24, r22
    4022:	0c 94 69 1f 	jmp	0x3ed2	; 0x3ed2 <layer_state_set>

00004026 <layer_move>:
}

void layer_move(uint8_t layer)
{
    4026:	0f 93       	push	r16
    4028:	1f 93       	push	r17
    402a:	cf 93       	push	r28
    402c:	df 93       	push	r29
    402e:	00 d0       	rcall	.+0      	; 0x4030 <layer_move+0xa>
    4030:	00 d0       	rcall	.+0      	; 0x4032 <layer_move+0xc>
    4032:	cd b7       	in	r28, 0x3d	; 61
    4034:	de b7       	in	r29, 0x3e	; 62
    layer_state_set(1UL<<layer);
    4036:	41 e0       	ldi	r20, 0x01	; 1
    4038:	50 e0       	ldi	r21, 0x00	; 0
    403a:	60 e0       	ldi	r22, 0x00	; 0
    403c:	70 e0       	ldi	r23, 0x00	; 0
    403e:	8a 01       	movw	r16, r20
    4040:	9b 01       	movw	r18, r22
    4042:	04 c0       	rjmp	.+8      	; 0x404c <layer_move+0x26>
    4044:	00 0f       	add	r16, r16
    4046:	11 1f       	adc	r17, r17
    4048:	22 1f       	adc	r18, r18
    404a:	33 1f       	adc	r19, r19
    404c:	8a 95       	dec	r24
    404e:	d2 f7       	brpl	.-12     	; 0x4044 <layer_move+0x1e>
    4050:	09 83       	std	Y+1, r16	; 0x01
    4052:	1a 83       	std	Y+2, r17	; 0x02
    4054:	2b 83       	std	Y+3, r18	; 0x03
    4056:	3c 83       	std	Y+4, r19	; 0x04
    4058:	c9 01       	movw	r24, r18
    405a:	b8 01       	movw	r22, r16
}
    405c:	0f 90       	pop	r0
    405e:	0f 90       	pop	r0
    4060:	0f 90       	pop	r0
    4062:	0f 90       	pop	r0
    4064:	df 91       	pop	r29
    4066:	cf 91       	pop	r28
    4068:	1f 91       	pop	r17
    406a:	0f 91       	pop	r16
    layer_state_set(1UL<<layer);
    406c:	0c 94 69 1f 	jmp	0x3ed2	; 0x3ed2 <layer_state_set>

00004070 <layer_on>:

void layer_on(uint8_t layer)
{
    4070:	0f 93       	push	r16
    4072:	1f 93       	push	r17
    4074:	cf 93       	push	r28
    4076:	df 93       	push	r29
    4078:	00 d0       	rcall	.+0      	; 0x407a <layer_on+0xa>
    407a:	00 d0       	rcall	.+0      	; 0x407c <layer_on+0xc>
    407c:	cd b7       	in	r28, 0x3d	; 61
    407e:	de b7       	in	r29, 0x3e	; 62
    layer_state_set(layer_state | (1UL<<layer));
    4080:	41 e0       	ldi	r20, 0x01	; 1
    4082:	50 e0       	ldi	r21, 0x00	; 0
    4084:	60 e0       	ldi	r22, 0x00	; 0
    4086:	70 e0       	ldi	r23, 0x00	; 0
    4088:	04 c0       	rjmp	.+8      	; 0x4092 <layer_on+0x22>
    408a:	44 0f       	add	r20, r20
    408c:	55 1f       	adc	r21, r21
    408e:	66 1f       	adc	r22, r22
    4090:	77 1f       	adc	r23, r23
    4092:	8a 95       	dec	r24
    4094:	d2 f7       	brpl	.-12     	; 0x408a <layer_on+0x1a>
    4096:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <layer_state>
    409a:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <layer_state+0x1>
    409e:	a0 91 51 03 	lds	r26, 0x0351	; 0x800351 <layer_state+0x2>
    40a2:	b0 91 52 03 	lds	r27, 0x0352	; 0x800352 <layer_state+0x3>
    40a6:	8a 01       	movw	r16, r20
    40a8:	9b 01       	movw	r18, r22
    40aa:	08 2b       	or	r16, r24
    40ac:	19 2b       	or	r17, r25
    40ae:	2a 2b       	or	r18, r26
    40b0:	3b 2b       	or	r19, r27
    40b2:	09 83       	std	Y+1, r16	; 0x01
    40b4:	1a 83       	std	Y+2, r17	; 0x02
    40b6:	2b 83       	std	Y+3, r18	; 0x03
    40b8:	3c 83       	std	Y+4, r19	; 0x04
    40ba:	c9 01       	movw	r24, r18
    40bc:	b8 01       	movw	r22, r16
}
    40be:	0f 90       	pop	r0
    40c0:	0f 90       	pop	r0
    40c2:	0f 90       	pop	r0
    40c4:	0f 90       	pop	r0
    40c6:	df 91       	pop	r29
    40c8:	cf 91       	pop	r28
    40ca:	1f 91       	pop	r17
    40cc:	0f 91       	pop	r16
    layer_state_set(layer_state | (1UL<<layer));
    40ce:	0c 94 69 1f 	jmp	0x3ed2	; 0x3ed2 <layer_state_set>

000040d2 <layer_off>:

void layer_off(uint8_t layer)
{
    40d2:	0f 93       	push	r16
    40d4:	1f 93       	push	r17
    40d6:	cf 93       	push	r28
    40d8:	df 93       	push	r29
    40da:	00 d0       	rcall	.+0      	; 0x40dc <layer_off+0xa>
    40dc:	00 d0       	rcall	.+0      	; 0x40de <layer_off+0xc>
    40de:	cd b7       	in	r28, 0x3d	; 61
    40e0:	de b7       	in	r29, 0x3e	; 62
    layer_state_set(layer_state & ~(1UL<<layer));
    40e2:	41 e0       	ldi	r20, 0x01	; 1
    40e4:	50 e0       	ldi	r21, 0x00	; 0
    40e6:	60 e0       	ldi	r22, 0x00	; 0
    40e8:	70 e0       	ldi	r23, 0x00	; 0
    40ea:	04 c0       	rjmp	.+8      	; 0x40f4 <layer_off+0x22>
    40ec:	44 0f       	add	r20, r20
    40ee:	55 1f       	adc	r21, r21
    40f0:	66 1f       	adc	r22, r22
    40f2:	77 1f       	adc	r23, r23
    40f4:	8a 95       	dec	r24
    40f6:	d2 f7       	brpl	.-12     	; 0x40ec <layer_off+0x1a>
    40f8:	40 95       	com	r20
    40fa:	50 95       	com	r21
    40fc:	60 95       	com	r22
    40fe:	70 95       	com	r23
    4100:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <layer_state>
    4104:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <layer_state+0x1>
    4108:	a0 91 51 03 	lds	r26, 0x0351	; 0x800351 <layer_state+0x2>
    410c:	b0 91 52 03 	lds	r27, 0x0352	; 0x800352 <layer_state+0x3>
    4110:	8a 01       	movw	r16, r20
    4112:	9b 01       	movw	r18, r22
    4114:	08 23       	and	r16, r24
    4116:	19 23       	and	r17, r25
    4118:	2a 23       	and	r18, r26
    411a:	3b 23       	and	r19, r27
    411c:	09 83       	std	Y+1, r16	; 0x01
    411e:	1a 83       	std	Y+2, r17	; 0x02
    4120:	2b 83       	std	Y+3, r18	; 0x03
    4122:	3c 83       	std	Y+4, r19	; 0x04
    4124:	c9 01       	movw	r24, r18
    4126:	b8 01       	movw	r22, r16
}
    4128:	0f 90       	pop	r0
    412a:	0f 90       	pop	r0
    412c:	0f 90       	pop	r0
    412e:	0f 90       	pop	r0
    4130:	df 91       	pop	r29
    4132:	cf 91       	pop	r28
    4134:	1f 91       	pop	r17
    4136:	0f 91       	pop	r16
    layer_state_set(layer_state & ~(1UL<<layer));
    4138:	0c 94 69 1f 	jmp	0x3ed2	; 0x3ed2 <layer_state_set>

0000413c <layer_invert>:

void layer_invert(uint8_t layer)
{
    413c:	0f 93       	push	r16
    413e:	1f 93       	push	r17
    4140:	cf 93       	push	r28
    4142:	df 93       	push	r29
    4144:	00 d0       	rcall	.+0      	; 0x4146 <layer_invert+0xa>
    4146:	00 d0       	rcall	.+0      	; 0x4148 <layer_invert+0xc>
    4148:	cd b7       	in	r28, 0x3d	; 61
    414a:	de b7       	in	r29, 0x3e	; 62
    layer_state_set(layer_state ^ (1UL<<layer));
    414c:	41 e0       	ldi	r20, 0x01	; 1
    414e:	50 e0       	ldi	r21, 0x00	; 0
    4150:	60 e0       	ldi	r22, 0x00	; 0
    4152:	70 e0       	ldi	r23, 0x00	; 0
    4154:	04 c0       	rjmp	.+8      	; 0x415e <layer_invert+0x22>
    4156:	44 0f       	add	r20, r20
    4158:	55 1f       	adc	r21, r21
    415a:	66 1f       	adc	r22, r22
    415c:	77 1f       	adc	r23, r23
    415e:	8a 95       	dec	r24
    4160:	d2 f7       	brpl	.-12     	; 0x4156 <layer_invert+0x1a>
    4162:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <layer_state>
    4166:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <layer_state+0x1>
    416a:	a0 91 51 03 	lds	r26, 0x0351	; 0x800351 <layer_state+0x2>
    416e:	b0 91 52 03 	lds	r27, 0x0352	; 0x800352 <layer_state+0x3>
    4172:	8a 01       	movw	r16, r20
    4174:	9b 01       	movw	r18, r22
    4176:	08 27       	eor	r16, r24
    4178:	19 27       	eor	r17, r25
    417a:	2a 27       	eor	r18, r26
    417c:	3b 27       	eor	r19, r27
    417e:	09 83       	std	Y+1, r16	; 0x01
    4180:	1a 83       	std	Y+2, r17	; 0x02
    4182:	2b 83       	std	Y+3, r18	; 0x03
    4184:	3c 83       	std	Y+4, r19	; 0x04
    4186:	c9 01       	movw	r24, r18
    4188:	b8 01       	movw	r22, r16
}
    418a:	0f 90       	pop	r0
    418c:	0f 90       	pop	r0
    418e:	0f 90       	pop	r0
    4190:	0f 90       	pop	r0
    4192:	df 91       	pop	r29
    4194:	cf 91       	pop	r28
    4196:	1f 91       	pop	r17
    4198:	0f 91       	pop	r16
    layer_state_set(layer_state ^ (1UL<<layer));
    419a:	0c 94 69 1f 	jmp	0x3ed2	; 0x3ed2 <layer_state_set>

0000419e <layer_or>:

void layer_or(uint32_t state)
{
    419e:	cf 93       	push	r28
    41a0:	df 93       	push	r29
    41a2:	00 d0       	rcall	.+0      	; 0x41a4 <layer_or+0x6>
    41a4:	00 d0       	rcall	.+0      	; 0x41a6 <layer_or+0x8>
    41a6:	cd b7       	in	r28, 0x3d	; 61
    41a8:	de b7       	in	r29, 0x3e	; 62
    41aa:	69 83       	std	Y+1, r22	; 0x01
    41ac:	7a 83       	std	Y+2, r23	; 0x02
    41ae:	8b 83       	std	Y+3, r24	; 0x03
    41b0:	9c 83       	std	Y+4, r25	; 0x04
    layer_state_set(layer_state | state);
    41b2:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <layer_state>
    41b6:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <layer_state+0x1>
    41ba:	a0 91 51 03 	lds	r26, 0x0351	; 0x800351 <layer_state+0x2>
    41be:	b0 91 52 03 	lds	r27, 0x0352	; 0x800352 <layer_state+0x3>
    41c2:	29 81       	ldd	r18, Y+1	; 0x01
    41c4:	3a 81       	ldd	r19, Y+2	; 0x02
    41c6:	4b 81       	ldd	r20, Y+3	; 0x03
    41c8:	5c 81       	ldd	r21, Y+4	; 0x04
    41ca:	28 2b       	or	r18, r24
    41cc:	39 2b       	or	r19, r25
    41ce:	4a 2b       	or	r20, r26
    41d0:	5b 2b       	or	r21, r27
    41d2:	29 83       	std	Y+1, r18	; 0x01
    41d4:	3a 83       	std	Y+2, r19	; 0x02
    41d6:	4b 83       	std	Y+3, r20	; 0x03
    41d8:	5c 83       	std	Y+4, r21	; 0x04
    41da:	ca 01       	movw	r24, r20
    41dc:	b9 01       	movw	r22, r18
}
    41de:	0f 90       	pop	r0
    41e0:	0f 90       	pop	r0
    41e2:	0f 90       	pop	r0
    41e4:	0f 90       	pop	r0
    41e6:	df 91       	pop	r29
    41e8:	cf 91       	pop	r28
    layer_state_set(layer_state | state);
    41ea:	0c 94 69 1f 	jmp	0x3ed2	; 0x3ed2 <layer_state_set>

000041ee <layer_and>:
void layer_and(uint32_t state)
{
    41ee:	cf 93       	push	r28
    41f0:	df 93       	push	r29
    41f2:	00 d0       	rcall	.+0      	; 0x41f4 <layer_and+0x6>
    41f4:	00 d0       	rcall	.+0      	; 0x41f6 <layer_and+0x8>
    41f6:	cd b7       	in	r28, 0x3d	; 61
    41f8:	de b7       	in	r29, 0x3e	; 62
    41fa:	69 83       	std	Y+1, r22	; 0x01
    41fc:	7a 83       	std	Y+2, r23	; 0x02
    41fe:	8b 83       	std	Y+3, r24	; 0x03
    4200:	9c 83       	std	Y+4, r25	; 0x04
    layer_state_set(layer_state & state);
    4202:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <layer_state>
    4206:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <layer_state+0x1>
    420a:	a0 91 51 03 	lds	r26, 0x0351	; 0x800351 <layer_state+0x2>
    420e:	b0 91 52 03 	lds	r27, 0x0352	; 0x800352 <layer_state+0x3>
    4212:	29 81       	ldd	r18, Y+1	; 0x01
    4214:	3a 81       	ldd	r19, Y+2	; 0x02
    4216:	4b 81       	ldd	r20, Y+3	; 0x03
    4218:	5c 81       	ldd	r21, Y+4	; 0x04
    421a:	28 23       	and	r18, r24
    421c:	39 23       	and	r19, r25
    421e:	4a 23       	and	r20, r26
    4220:	5b 23       	and	r21, r27
    4222:	29 83       	std	Y+1, r18	; 0x01
    4224:	3a 83       	std	Y+2, r19	; 0x02
    4226:	4b 83       	std	Y+3, r20	; 0x03
    4228:	5c 83       	std	Y+4, r21	; 0x04
    422a:	ca 01       	movw	r24, r20
    422c:	b9 01       	movw	r22, r18
}
    422e:	0f 90       	pop	r0
    4230:	0f 90       	pop	r0
    4232:	0f 90       	pop	r0
    4234:	0f 90       	pop	r0
    4236:	df 91       	pop	r29
    4238:	cf 91       	pop	r28
    layer_state_set(layer_state & state);
    423a:	0c 94 69 1f 	jmp	0x3ed2	; 0x3ed2 <layer_state_set>

0000423e <layer_xor>:
void layer_xor(uint32_t state)
{
    423e:	cf 93       	push	r28
    4240:	df 93       	push	r29
    4242:	00 d0       	rcall	.+0      	; 0x4244 <layer_xor+0x6>
    4244:	00 d0       	rcall	.+0      	; 0x4246 <layer_xor+0x8>
    4246:	cd b7       	in	r28, 0x3d	; 61
    4248:	de b7       	in	r29, 0x3e	; 62
    424a:	69 83       	std	Y+1, r22	; 0x01
    424c:	7a 83       	std	Y+2, r23	; 0x02
    424e:	8b 83       	std	Y+3, r24	; 0x03
    4250:	9c 83       	std	Y+4, r25	; 0x04
    layer_state_set(layer_state ^ state);
    4252:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <layer_state>
    4256:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <layer_state+0x1>
    425a:	a0 91 51 03 	lds	r26, 0x0351	; 0x800351 <layer_state+0x2>
    425e:	b0 91 52 03 	lds	r27, 0x0352	; 0x800352 <layer_state+0x3>
    4262:	29 81       	ldd	r18, Y+1	; 0x01
    4264:	3a 81       	ldd	r19, Y+2	; 0x02
    4266:	4b 81       	ldd	r20, Y+3	; 0x03
    4268:	5c 81       	ldd	r21, Y+4	; 0x04
    426a:	28 27       	eor	r18, r24
    426c:	39 27       	eor	r19, r25
    426e:	4a 27       	eor	r20, r26
    4270:	5b 27       	eor	r21, r27
    4272:	29 83       	std	Y+1, r18	; 0x01
    4274:	3a 83       	std	Y+2, r19	; 0x02
    4276:	4b 83       	std	Y+3, r20	; 0x03
    4278:	5c 83       	std	Y+4, r21	; 0x04
    427a:	ca 01       	movw	r24, r20
    427c:	b9 01       	movw	r22, r18
}
    427e:	0f 90       	pop	r0
    4280:	0f 90       	pop	r0
    4282:	0f 90       	pop	r0
    4284:	0f 90       	pop	r0
    4286:	df 91       	pop	r29
    4288:	cf 91       	pop	r28
    layer_state_set(layer_state ^ state);
    428a:	0c 94 69 1f 	jmp	0x3ed2	; 0x3ed2 <layer_state_set>

0000428e <layer_debug>:
    428e:	08 95       	ret

00004290 <layer_switch_get_action>:
#ifndef NO_TRACK_KEY_PRESS
/* record layer on where key is pressed */
static uint8_t layer_pressed[MATRIX_ROWS][MATRIX_COLS] = {};
#endif
action_t layer_switch_get_action(keyevent_t event)
{
    4290:	4f 92       	push	r4
    4292:	5f 92       	push	r5
    4294:	6f 92       	push	r6
    4296:	7f 92       	push	r7
    4298:	9f 92       	push	r9
    429a:	af 92       	push	r10
    429c:	bf 92       	push	r11
    429e:	cf 92       	push	r12
    42a0:	df 92       	push	r13
    42a2:	ef 92       	push	r14
    42a4:	ff 92       	push	r15
    42a6:	0f 93       	push	r16
    42a8:	1f 93       	push	r17
    42aa:	cf 93       	push	r28
    42ac:	df 93       	push	r29
    42ae:	00 d0       	rcall	.+0      	; 0x42b0 <layer_switch_get_action+0x20>
    42b0:	00 d0       	rcall	.+0      	; 0x42b2 <layer_switch_get_action+0x22>
    42b2:	0f 92       	push	r0
    42b4:	cd b7       	in	r28, 0x3d	; 61
    42b6:	de b7       	in	r29, 0x3e	; 62
    42b8:	49 83       	std	Y+1, r20	; 0x01
    42ba:	5a 83       	std	Y+2, r21	; 0x02
    42bc:	6b 83       	std	Y+3, r22	; 0x03
    42be:	7c 83       	std	Y+4, r23	; 0x04
    42c0:	8d 83       	std	Y+5, r24	; 0x05
    42c2:	8c 81       	ldd	r24, Y+4	; 0x04
    42c4:	9d 81       	ldd	r25, Y+5	; 0x05
    42c6:	89 2b       	or	r24, r25
    42c8:	31 f0       	breq	.+12     	; 0x42d6 <layer_switch_get_action+0x46>
    42ca:	f4 2e       	mov	r15, r20
    42cc:	e5 2e       	mov	r14, r21
    42ce:	84 2f       	mov	r24, r20
    42d0:	85 23       	and	r24, r21
    42d2:	8f 3f       	cpi	r24, 0xFF	; 255
    42d4:	59 f5       	brne	.+86     	; 0x432c <layer_switch_get_action+0x9c>
    }
#else
    layer = current_layer_for_key(event.key);
#endif
    return action_for_key(layer, event.key);
}
    42d6:	90 e0       	ldi	r25, 0x00	; 0
    42d8:	80 e0       	ldi	r24, 0x00	; 0
    42da:	0f 90       	pop	r0
    42dc:	0f 90       	pop	r0
    42de:	0f 90       	pop	r0
    42e0:	0f 90       	pop	r0
    42e2:	0f 90       	pop	r0
    42e4:	df 91       	pop	r29
    42e6:	cf 91       	pop	r28
    42e8:	1f 91       	pop	r17
    42ea:	0f 91       	pop	r16
    42ec:	ff 90       	pop	r15
    42ee:	ef 90       	pop	r14
    42f0:	df 90       	pop	r13
    42f2:	cf 90       	pop	r12
    42f4:	bf 90       	pop	r11
    42f6:	af 90       	pop	r10
    42f8:	9f 90       	pop	r9
    42fa:	7f 90       	pop	r7
    42fc:	6f 90       	pop	r6
    42fe:	5f 90       	pop	r5
    4300:	4f 90       	pop	r4
    4302:	08 95       	ret
            action = action_for_key(i, key);
    4304:	6f 2d       	mov	r22, r15
    4306:	7e 2d       	mov	r23, r14
    4308:	8a 2d       	mov	r24, r10
    430a:	0e 94 d1 23 	call	0x47a2	; 0x47a2 <action_for_key>
            if (action.code != (action_t)ACTION_TRANSPARENT.code) {
    430e:	01 97       	sbiw	r24, 0x01	; 1
    4310:	c1 f1       	breq	.+112    	; 0x4382 <layer_switch_get_action+0xf2>
    4312:	3c c0       	rjmp	.+120    	; 0x438c <layer_switch_get_action+0xfc>
        layer = layer_pressed[event.key.row][event.key.col];
    4314:	f8 01       	movw	r30, r16
    4316:	83 e0       	ldi	r24, 0x03	; 3
    4318:	ee 0f       	add	r30, r30
    431a:	ff 1f       	adc	r31, r31
    431c:	8a 95       	dec	r24
    431e:	e1 f7       	brne	.-8      	; 0x4318 <layer_switch_get_action+0x88>
    4320:	e1 53       	subi	r30, 0x31	; 49
    4322:	fd 4f       	sbci	r31, 0xFD	; 253
    4324:	ec 0d       	add	r30, r12
    4326:	fd 1d       	adc	r31, r13
    4328:	90 80       	ld	r9, Z
    432a:	3b c0       	rjmp	.+118    	; 0x43a2 <layer_switch_get_action+0x112>
    if (event.pressed) {
    432c:	05 2f       	mov	r16, r21
    432e:	10 e0       	ldi	r17, 0x00	; 0
    4330:	c4 2e       	mov	r12, r20
    4332:	d1 2c       	mov	r13, r1
    4334:	8b 81       	ldd	r24, Y+3	; 0x03
    4336:	88 23       	and	r24, r24
    4338:	69 f3       	breq	.-38     	; 0x4314 <layer_switch_get_action+0x84>
    uint32_t layers = layer_state | default_layer_state;
    433a:	40 90 4f 03 	lds	r4, 0x034F	; 0x80034f <layer_state>
    433e:	50 90 50 03 	lds	r5, 0x0350	; 0x800350 <layer_state+0x1>
    4342:	60 90 51 03 	lds	r6, 0x0351	; 0x800351 <layer_state+0x2>
    4346:	70 90 52 03 	lds	r7, 0x0352	; 0x800352 <layer_state+0x3>
    434a:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <default_layer_state>
    434e:	90 91 54 03 	lds	r25, 0x0354	; 0x800354 <default_layer_state+0x1>
    4352:	a0 91 55 03 	lds	r26, 0x0355	; 0x800355 <default_layer_state+0x2>
    4356:	b0 91 56 03 	lds	r27, 0x0356	; 0x800356 <default_layer_state+0x3>
    435a:	48 2a       	or	r4, r24
    435c:	59 2a       	or	r5, r25
    435e:	6a 2a       	or	r6, r26
    4360:	7b 2a       	or	r7, r27
    4362:	2f e1       	ldi	r18, 0x1F	; 31
    4364:	a2 2e       	mov	r10, r18
    4366:	b1 2c       	mov	r11, r1
        if (layers & (1UL<<i)) {
    4368:	9a 2c       	mov	r9, r10
    436a:	d3 01       	movw	r26, r6
    436c:	c2 01       	movw	r24, r4
    436e:	0a 2c       	mov	r0, r10
    4370:	04 c0       	rjmp	.+8      	; 0x437a <layer_switch_get_action+0xea>
    4372:	b6 95       	lsr	r27
    4374:	a7 95       	ror	r26
    4376:	97 95       	ror	r25
    4378:	87 95       	ror	r24
    437a:	0a 94       	dec	r0
    437c:	d2 f7       	brpl	.-12     	; 0x4372 <layer_switch_get_action+0xe2>
    437e:	80 fd       	sbrc	r24, 0
    4380:	c1 cf       	rjmp	.-126    	; 0x4304 <layer_switch_get_action+0x74>
    4382:	81 e0       	ldi	r24, 0x01	; 1
    4384:	a8 1a       	sub	r10, r24
    4386:	b1 08       	sbc	r11, r1
    4388:	78 f7       	brcc	.-34     	; 0x4368 <layer_switch_get_action+0xd8>
    return 0;
    438a:	91 2c       	mov	r9, r1
        layer_pressed[event.key.row][event.key.col] = layer;
    438c:	f8 01       	movw	r30, r16
    438e:	93 e0       	ldi	r25, 0x03	; 3
    4390:	ee 0f       	add	r30, r30
    4392:	ff 1f       	adc	r31, r31
    4394:	9a 95       	dec	r25
    4396:	e1 f7       	brne	.-8      	; 0x4390 <layer_switch_get_action+0x100>
    4398:	e1 53       	subi	r30, 0x31	; 49
    439a:	fd 4f       	sbci	r31, 0xFD	; 253
    439c:	ec 0d       	add	r30, r12
    439e:	fd 1d       	adc	r31, r13
    43a0:	90 82       	st	Z, r9
    return action_for_key(layer, event.key);
    43a2:	f9 82       	std	Y+1, r15	; 0x01
    43a4:	ea 82       	std	Y+2, r14	; 0x02
    43a6:	69 81       	ldd	r22, Y+1	; 0x01
    43a8:	7a 81       	ldd	r23, Y+2	; 0x02
    43aa:	89 2d       	mov	r24, r9
}
    43ac:	0f 90       	pop	r0
    43ae:	0f 90       	pop	r0
    43b0:	0f 90       	pop	r0
    43b2:	0f 90       	pop	r0
    43b4:	0f 90       	pop	r0
    43b6:	df 91       	pop	r29
    43b8:	cf 91       	pop	r28
    43ba:	1f 91       	pop	r17
    43bc:	0f 91       	pop	r16
    43be:	ff 90       	pop	r15
    43c0:	ef 90       	pop	r14
    43c2:	df 90       	pop	r13
    43c4:	cf 90       	pop	r12
    43c6:	bf 90       	pop	r11
    43c8:	af 90       	pop	r10
    43ca:	9f 90       	pop	r9
    43cc:	7f 90       	pop	r7
    43ce:	6f 90       	pop	r6
    43d0:	5f 90       	pop	r5
    43d2:	4f 90       	pop	r4
    return action_for_key(layer, event.key);
    43d4:	0c 94 d1 23 	jmp	0x47a2	; 0x47a2 <action_for_key>

000043d8 <add_key>:
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    43d8:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <keyboard_report>
    43dc:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <keyboard_report+0x1>
    43e0:	f9 01       	movw	r30, r18
    43e2:	32 96       	adiw	r30, 0x02	; 2
    int8_t empty = -1;
    43e4:	9f ef       	ldi	r25, 0xFF	; 255
    int8_t i = 0;
    43e6:	40 e0       	ldi	r20, 0x00	; 0
        if (keyboard_report->keys[i] == code) {
    43e8:	51 91       	ld	r21, Z+
    43ea:	85 17       	cp	r24, r21
    43ec:	51 f0       	breq	.+20     	; 0x4402 <add_key+0x2a>
            break;
        }
        if (empty == -1 && keyboard_report->keys[i] == 0) {
    43ee:	9f 3f       	cpi	r25, 0xFF	; 255
    43f0:	19 f4       	brne	.+6      	; 0x43f8 <add_key+0x20>
    43f2:	51 11       	cpse	r21, r1
    43f4:	01 c0       	rjmp	.+2      	; 0x43f8 <add_key+0x20>
    43f6:	94 2f       	mov	r25, r20
    43f8:	4f 5f       	subi	r20, 0xFF	; 255
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
    43fa:	46 30       	cpi	r20, 0x06	; 6
    43fc:	a9 f7       	brne	.-22     	; 0x43e8 <add_key+0x10>
            empty = i;
        }
    }
    if (i == KEYBOARD_REPORT_KEYS) {
        if (empty != -1) {
    43fe:	9f 3f       	cpi	r25, 0xFF	; 255
    4400:	09 f4       	brne	.+2      	; 0x4404 <add_key+0x2c>
}
    4402:	08 95       	ret
            keyboard_report->keys[empty] = code;
    4404:	29 0f       	add	r18, r25
    4406:	31 1d       	adc	r19, r1
    4408:	97 fd       	sbrc	r25, 7
    440a:	3a 95       	dec	r19
    440c:	f9 01       	movw	r30, r18
    440e:	82 83       	std	Z+2, r24	; 0x02
}
    4410:	08 95       	ret

00004412 <del_key>:
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    4412:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <keyboard_report>
    4416:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <keyboard_report+0x1>
    441a:	f9 01       	movw	r30, r18
    441c:	32 96       	adiw	r30, 0x02	; 2
    441e:	28 5f       	subi	r18, 0xF8	; 248
    4420:	3f 4f       	sbci	r19, 0xFF	; 255
    4422:	91 91       	ld	r25, Z+
    4424:	89 13       	cpse	r24, r25
    4426:	03 c0       	rjmp	.+6      	; 0x442e <del_key+0x1c>
            keyboard_report->keys[i] = 0;
    4428:	df 01       	movw	r26, r30
    442a:	11 97       	sbiw	r26, 0x01	; 1
    442c:	1c 92       	st	X, r1
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
    442e:	e2 17       	cp	r30, r18
    4430:	f3 07       	cpc	r31, r19
    4432:	b9 f7       	brne	.-18     	; 0x4422 <del_key+0x10>
}
    4434:	08 95       	ret

00004436 <clear_keys>:
{
    4436:	81 e0       	ldi	r24, 0x01	; 1
    4438:	90 e0       	ldi	r25, 0x00	; 0
        keyboard_report->raw[i] = 0;
    443a:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <keyboard_report>
    443e:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <keyboard_report+0x1>
    4442:	e8 0f       	add	r30, r24
    4444:	f9 1f       	adc	r31, r25
    4446:	10 82       	st	Z, r1
    4448:	01 96       	adiw	r24, 0x01	; 1
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    444a:	88 30       	cpi	r24, 0x08	; 8
    444c:	91 05       	cpc	r25, r1
    444e:	a9 f7       	brne	.-22     	; 0x443a <clear_keys+0x4>
}
    4450:	08 95       	ret

00004452 <get_mods>:
uint8_t get_mods(void) { return real_mods; }
    4452:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <real_mods>
    4456:	08 95       	ret

00004458 <add_mods>:
void add_mods(uint8_t mods) { real_mods |= mods; }
    4458:	90 91 61 03 	lds	r25, 0x0361	; 0x800361 <real_mods>
    445c:	98 2b       	or	r25, r24
    445e:	90 93 61 03 	sts	0x0361, r25	; 0x800361 <real_mods>
    4462:	08 95       	ret

00004464 <del_mods>:
void del_mods(uint8_t mods) { real_mods &= ~mods; }
    4464:	98 2f       	mov	r25, r24
    4466:	90 95       	com	r25
    4468:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <real_mods>
    446c:	89 23       	and	r24, r25
    446e:	80 93 61 03 	sts	0x0361, r24	; 0x800361 <real_mods>
    4472:	08 95       	ret

00004474 <set_mods>:
void set_mods(uint8_t mods) { real_mods = mods; }
    4474:	80 93 61 03 	sts	0x0361, r24	; 0x800361 <real_mods>
    4478:	08 95       	ret

0000447a <clear_mods>:
void clear_mods(void) { real_mods = 0; }
    447a:	10 92 61 03 	sts	0x0361, r1	; 0x800361 <real_mods>
    447e:	08 95       	ret

00004480 <add_weak_mods>:
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
    4480:	90 91 60 03 	lds	r25, 0x0360	; 0x800360 <weak_mods>
    4484:	98 2b       	or	r25, r24
    4486:	90 93 60 03 	sts	0x0360, r25	; 0x800360 <weak_mods>
    448a:	08 95       	ret

0000448c <del_weak_mods>:
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
    448c:	98 2f       	mov	r25, r24
    448e:	90 95       	com	r25
    4490:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <weak_mods>
    4494:	89 23       	and	r24, r25
    4496:	80 93 60 03 	sts	0x0360, r24	; 0x800360 <weak_mods>
    449a:	08 95       	ret

0000449c <clear_weak_mods>:
void clear_weak_mods(void) { weak_mods = 0; }
    449c:	10 92 60 03 	sts	0x0360, r1	; 0x800360 <weak_mods>
    44a0:	08 95       	ret

000044a2 <set_oneshot_mods>:
    oneshot_mods = mods;
    44a2:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <oneshot_mods>
}
    44a6:	08 95       	ret

000044a8 <clear_oneshot_mods>:
    oneshot_mods = 0;
    44a8:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <oneshot_mods>
}
    44ac:	08 95       	ret

000044ae <has_anykey>:
        if (keyboard_report->raw[i])
    44ae:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <keyboard_report>
    44b2:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <keyboard_report+0x1>
    44b6:	f9 01       	movw	r30, r18
    44b8:	31 96       	adiw	r30, 0x01	; 1
    44ba:	28 5f       	subi	r18, 0xF8	; 248
    44bc:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t cnt = 0;
    44be:	80 e0       	ldi	r24, 0x00	; 0
        if (keyboard_report->raw[i])
    44c0:	91 91       	ld	r25, Z+
    44c2:	91 11       	cpse	r25, r1
            cnt++;
    44c4:	8f 5f       	subi	r24, 0xFF	; 255
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    44c6:	e2 17       	cp	r30, r18
    44c8:	f3 07       	cpc	r31, r19
    44ca:	d1 f7       	brne	.-12     	; 0x44c0 <has_anykey+0x12>
}
    44cc:	08 95       	ret

000044ce <send_keyboard_report>:
    keyboard_report->mods  = real_mods;
    44ce:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <keyboard_report>
    44d2:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <keyboard_report+0x1>
    44d6:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <real_mods>
    44da:	80 83       	st	Z, r24
    keyboard_report->mods |= weak_mods;
    44dc:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <keyboard_report>
    44e0:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <keyboard_report+0x1>
    44e4:	80 81       	ld	r24, Z
    44e6:	90 91 60 03 	lds	r25, 0x0360	; 0x800360 <weak_mods>
    44ea:	89 2b       	or	r24, r25
    44ec:	80 83       	st	Z, r24
    if (oneshot_mods) {
    44ee:	90 91 57 03 	lds	r25, 0x0357	; 0x800357 <oneshot_mods>
    44f2:	99 23       	and	r25, r25
    44f4:	61 f0       	breq	.+24     	; 0x450e <send_keyboard_report+0x40>
        keyboard_report->mods |= oneshot_mods;
    44f6:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <keyboard_report>
    44fa:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <keyboard_report+0x1>
    44fe:	80 81       	ld	r24, Z
    4500:	89 2b       	or	r24, r25
    4502:	80 83       	st	Z, r24
        if (has_anykey()) {
    4504:	0e 94 57 22 	call	0x44ae	; 0x44ae <has_anykey>
    4508:	81 11       	cpse	r24, r1
    oneshot_mods = 0;
    450a:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <oneshot_mods>
    host_keyboard_send(keyboard_report);
    450e:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <keyboard_report>
    4512:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <keyboard_report+0x1>
    4516:	0c 94 f8 14 	jmp	0x29f0	; 0x29f0 <host_keyboard_send>

0000451a <print_set_sendchar>:
#define sendchar(c)    xputc(c)


void print_set_sendchar(int8_t (*sendchar_func)(uint8_t))
{
    xdev_out(sendchar_func);
    451a:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <__data_end+0x1>
    451e:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__data_end>
}
    4522:	08 95       	ret

00004524 <bitrev>:



uint8_t bitrev(uint8_t bits)
{
    bits = (bits & 0x0f)<<4 | (bits & 0xf0)>>4;
    4524:	82 95       	swap	r24
    bits = (bits & 0b00110011)<<2 | (bits & 0b11001100)>>2;
    4526:	94 e0       	ldi	r25, 0x04	; 4
    4528:	89 9f       	mul	r24, r25
    452a:	90 01       	movw	r18, r0
    452c:	11 24       	eor	r1, r1
    452e:	2c 7c       	andi	r18, 0xCC	; 204
    4530:	86 95       	lsr	r24
    4532:	86 95       	lsr	r24
    4534:	83 73       	andi	r24, 0x33	; 51
    4536:	28 2b       	or	r18, r24
    bits = (bits & 0b01010101)<<1 | (bits & 0b10101010)>>1;
    4538:	30 e0       	ldi	r19, 0x00	; 0
    453a:	c9 01       	movw	r24, r18
    453c:	88 0f       	add	r24, r24
    453e:	99 1f       	adc	r25, r25
    4540:	8a 7a       	andi	r24, 0xAA	; 170
    4542:	35 95       	asr	r19
    4544:	27 95       	ror	r18
    4546:	25 75       	andi	r18, 0x55	; 85
    return bits;
}
    4548:	82 2b       	or	r24, r18
    454a:	08 95       	ret

0000454c <hook_keyboard_loop>:
/* -------------------------------------------------
 * Definitions of default hooks
 * ------------------------------------------------- */

__attribute__((weak))
void hook_keyboard_loop(void) {}
    454c:	08 95       	ret

0000454e <hook_matrix_change>:

__attribute__((weak))
void hook_matrix_change(keyevent_t event) {
    454e:	cf 93       	push	r28
    4550:	df 93       	push	r29
    4552:	00 d0       	rcall	.+0      	; 0x4554 <hook_matrix_change+0x6>
    4554:	00 d0       	rcall	.+0      	; 0x4556 <hook_matrix_change+0x8>
    4556:	0f 92       	push	r0
    4558:	cd b7       	in	r28, 0x3d	; 61
    455a:	de b7       	in	r29, 0x3e	; 62
    (void)event;
}
    455c:	0f 90       	pop	r0
    455e:	0f 90       	pop	r0
    4560:	0f 90       	pop	r0
    4562:	0f 90       	pop	r0
    4564:	0f 90       	pop	r0
    4566:	df 91       	pop	r29
    4568:	cf 91       	pop	r28
    456a:	08 95       	ret

0000456c <hook_default_layer_change>:

__attribute__((weak))
void hook_default_layer_change(uint32_t default_layer_state) {
    (void)default_layer_state;
}
    456c:	08 95       	ret

0000456e <hook_layer_change>:
    456e:	08 95       	ret

00004570 <hook_keyboard_leds_change>:
    (void)layer_state;
}

__attribute__((weak))
void hook_keyboard_leds_change(uint8_t led_status) {
    keyboard_set_leds(led_status);
    4570:	0c 94 5e 16 	jmp	0x2cbc	; 0x2cbc <keyboard_set_leds>

00004574 <hook_process_action>:
void hook_bootmagic(void) {}

__attribute__((weak))
bool hook_process_action(keyrecord_t *record) {
    return false;
}
    4574:	80 e0       	ldi	r24, 0x00	; 0
    4576:	08 95       	ret

00004578 <suspend_power_down>:
 */
static uint8_t wdt_timeout = 0;
static void power_down(uint8_t wdto)
{
#ifdef PROTOCOL_LUFA
    if (USB_DeviceState == DEVICE_STATE_Configured) return;
    4578:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <USB_DeviceState>
    457c:	84 30       	cpi	r24, 0x04	; 4
    457e:	21 f1       	breq	.+72     	; 0x45c8 <suspend_power_down+0x50>
#endif
    wdt_timeout = wdto;
    4580:	10 92 63 03 	sts	0x0363, r1	; 0x800363 <wdt_timeout>

    // Watchdog Interrupt Mode
    wdt_intr_enable(wdto);
    4584:	88 e1       	ldi	r24, 0x18	; 24
    4586:	90 e0       	ldi	r25, 0x00	; 0
    4588:	20 e4       	ldi	r18, 0x40	; 64
    458a:	0f b6       	in	r0, 0x3f	; 63
    458c:	f8 94       	cli
    458e:	a8 95       	wdr
    4590:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <actionmaps+0x7f9860>
    4594:	0f be       	out	0x3f, r0	; 63
    4596:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <actionmaps+0x7f9860>
    // See PicoPower application note
    // - I/O port input with pullup
    // - prescale clock
    // - BOD disable
    // - Power Reduction Register PRR
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    459a:	83 b7       	in	r24, 0x33	; 51
    459c:	81 7f       	andi	r24, 0xF1	; 241
    459e:	84 60       	ori	r24, 0x04	; 4
    45a0:	83 bf       	out	0x33, r24	; 51
    sleep_enable();
    45a2:	83 b7       	in	r24, 0x33	; 51
    45a4:	81 60       	ori	r24, 0x01	; 1
    45a6:	83 bf       	out	0x33, r24	; 51
    sei();
    45a8:	78 94       	sei
    sleep_cpu();
    45aa:	88 95       	sleep
    sleep_disable();
    45ac:	83 b7       	in	r24, 0x33	; 51
    45ae:	8e 7f       	andi	r24, 0xFE	; 254
    45b0:	83 bf       	out	0x33, r24	; 51
    45b2:	0f b6       	in	r0, 0x3f	; 63
    45b4:	f8 94       	cli
    45b6:	a8 95       	wdr
    45b8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <actionmaps+0x7f9860>
    45bc:	88 61       	ori	r24, 0x18	; 24
    45be:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <actionmaps+0x7f9860>
    45c2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <actionmaps+0x7f9860>
    45c6:	0f be       	out	0x3f, r0	; 63
#elif defined(SUSPEND_MODE_IDLE)
    idle();
#else
    power_down(WDTO_15MS);
#endif
}
    45c8:	08 95       	ret

000045ca <suspend_wakeup_condition>:

bool suspend_wakeup_condition(void)
{
    45ca:	cf 93       	push	r28
    matrix_power_up();
    45cc:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <matrix_power_up>
    matrix_scan();
    45d0:	0e 94 19 0a 	call	0x1432	; 0x1432 <matrix_scan>
    matrix_power_down();
    45d4:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <matrix_power_down>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    45d8:	c0 e0       	ldi	r28, 0x00	; 0
        if (matrix_get_row(r)) return true;
    45da:	8c 2f       	mov	r24, r28
    45dc:	0e 94 ed 0a 	call	0x15da	; 0x15da <matrix_get_row>
    45e0:	81 11       	cpse	r24, r1
    45e2:	05 c0       	rjmp	.+10     	; 0x45ee <suspend_wakeup_condition+0x24>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    45e4:	cf 5f       	subi	r28, 0xFF	; 255
    45e6:	c0 31       	cpi	r28, 0x10	; 16
    45e8:	c1 f7       	brne	.-16     	; 0x45da <suspend_wakeup_condition+0x10>
    }
    return false;
}
    45ea:	cf 91       	pop	r28
    45ec:	08 95       	ret
        if (matrix_get_row(r)) return true;
    45ee:	81 e0       	ldi	r24, 0x01	; 1
    45f0:	fc cf       	rjmp	.-8      	; 0x45ea <suspend_wakeup_condition+0x20>

000045f2 <suspend_wakeup_init>:

// run immediately after wakeup
void suspend_wakeup_init(void)
{
    // clear keyboard state
    matrix_clear();
    45f2:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <matrix_clear>
    clear_keyboard();
    45f6:	0c 94 7e 1b 	jmp	0x36fc	; 0x36fc <clear_keyboard>

000045fa <__vector_12>:
}

#ifndef NO_SUSPEND_POWER_DOWN
/* watchdog timeout */
ISR(WDT_vect)
{
    45fa:	1f 92       	push	r1
    45fc:	1f b6       	in	r1, 0x3f	; 63
    45fe:	1f 92       	push	r1
    4600:	11 24       	eor	r1, r1
    4602:	8f 93       	push	r24
    4604:	9f 93       	push	r25
    4606:	af 93       	push	r26
    4608:	bf 93       	push	r27
    // compensate timer for sleep
    switch (wdt_timeout) {
    460a:	80 91 63 03 	lds	r24, 0x0363	; 0x800363 <wdt_timeout>
    460e:	81 11       	cpse	r24, r1
    4610:	13 c0       	rjmp	.+38     	; 0x4638 <__vector_12+0x3e>
        case WDTO_15MS:
            timer_count += 15 + 2;  // WDTO_15MS + 2(from observation)
    4612:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <timer_count>
    4616:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <timer_count+0x1>
    461a:	a0 91 66 03 	lds	r26, 0x0366	; 0x800366 <timer_count+0x2>
    461e:	b0 91 67 03 	lds	r27, 0x0367	; 0x800367 <timer_count+0x3>
    4622:	41 96       	adiw	r24, 0x11	; 17
    4624:	a1 1d       	adc	r26, r1
    4626:	b1 1d       	adc	r27, r1
    4628:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <timer_count>
    462c:	90 93 65 03 	sts	0x0365, r25	; 0x800365 <timer_count+0x1>
    4630:	a0 93 66 03 	sts	0x0366, r26	; 0x800366 <timer_count+0x2>
    4634:	b0 93 67 03 	sts	0x0367, r27	; 0x800367 <timer_count+0x3>
            break;
        default:
            ;
    }
}
    4638:	bf 91       	pop	r27
    463a:	af 91       	pop	r26
    463c:	9f 91       	pop	r25
    463e:	8f 91       	pop	r24
    4640:	1f 90       	pop	r1
    4642:	1f be       	out	0x3f, r1	; 63
    4644:	1f 90       	pop	r1
    4646:	18 95       	reti

00004648 <timer_init>:
volatile uint32_t timer_count = 0;

void timer_init(void)
{
    // Timer0 CTC mode
    TCCR0A = 0x02;
    4648:	82 e0       	ldi	r24, 0x02	; 2
    464a:	84 bd       	out	0x24, r24	; 36
#if TIMER_PRESCALER == 1
    TCCR0B = 0x01;
#elif TIMER_PRESCALER == 8
    TCCR0B = 0x02;
#elif TIMER_PRESCALER == 64
    TCCR0B = 0x03;
    464c:	93 e0       	ldi	r25, 0x03	; 3
    464e:	95 bd       	out	0x25, r25	; 37
    TCCR0B = 0x05;
#else
#   error "Timer prescaler value is NOT vaild."
#endif

    OCR0A = TIMER_RAW_TOP;
    4650:	9a ef       	ldi	r25, 0xFA	; 250
    4652:	97 bd       	out	0x27, r25	; 39
#ifdef TIMSK0
    TIMSK0 = (1<<OCIE0A);
    4654:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <actionmaps+0x7f986e>
#else
    TIMSK = (1<<OCIE0A);
#endif
}
    4658:	08 95       	ret

0000465a <timer_read>:
inline
uint16_t timer_read(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    465a:	2f b7       	in	r18, 0x3f	; 63
    cli();
    465c:	f8 94       	cli
    t = timer_count;
    465e:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <timer_count>
    4662:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <timer_count+0x1>
    4666:	a0 91 66 03 	lds	r26, 0x0366	; 0x800366 <timer_count+0x2>
    466a:	b0 91 67 03 	lds	r27, 0x0367	; 0x800367 <timer_count+0x3>
    SREG = sreg;
    466e:	2f bf       	out	0x3f, r18	; 63

    return (t & 0xFFFF);
}
    4670:	08 95       	ret

00004672 <timer_read32>:

inline
uint32_t timer_read32(void)
{
    4672:	cf 93       	push	r28
    4674:	df 93       	push	r29
    4676:	00 d0       	rcall	.+0      	; 0x4678 <timer_read32+0x6>
    4678:	00 d0       	rcall	.+0      	; 0x467a <timer_read32+0x8>
    467a:	cd b7       	in	r28, 0x3d	; 61
    467c:	de b7       	in	r29, 0x3e	; 62
    uint32_t t;

    uint8_t sreg = SREG;
    467e:	8f b7       	in	r24, 0x3f	; 63
    cli();
    4680:	f8 94       	cli
    t = timer_count;
    4682:	20 91 64 03 	lds	r18, 0x0364	; 0x800364 <timer_count>
    4686:	30 91 65 03 	lds	r19, 0x0365	; 0x800365 <timer_count+0x1>
    468a:	40 91 66 03 	lds	r20, 0x0366	; 0x800366 <timer_count+0x2>
    468e:	50 91 67 03 	lds	r21, 0x0367	; 0x800367 <timer_count+0x3>
    4692:	29 83       	std	Y+1, r18	; 0x01
    4694:	3a 83       	std	Y+2, r19	; 0x02
    4696:	4b 83       	std	Y+3, r20	; 0x03
    4698:	5c 83       	std	Y+4, r21	; 0x04
    SREG = sreg;
    469a:	8f bf       	out	0x3f, r24	; 63

    return t;
}
    469c:	69 81       	ldd	r22, Y+1	; 0x01
    469e:	7a 81       	ldd	r23, Y+2	; 0x02
    46a0:	8b 81       	ldd	r24, Y+3	; 0x03
    46a2:	9c 81       	ldd	r25, Y+4	; 0x04
    46a4:	0f 90       	pop	r0
    46a6:	0f 90       	pop	r0
    46a8:	0f 90       	pop	r0
    46aa:	0f 90       	pop	r0
    46ac:	df 91       	pop	r29
    46ae:	cf 91       	pop	r28
    46b0:	08 95       	ret

000046b2 <timer_elapsed>:

inline
uint16_t timer_elapsed(uint16_t last)
{
    46b2:	cf 92       	push	r12
    46b4:	df 92       	push	r13
    46b6:	ef 92       	push	r14
    46b8:	ff 92       	push	r15
    46ba:	9c 01       	movw	r18, r24
    uint32_t t;

    uint8_t sreg = SREG;
    46bc:	4f b7       	in	r20, 0x3f	; 63
    cli();
    46be:	f8 94       	cli
    t = timer_count;
    46c0:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <timer_count>
    46c4:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <timer_count+0x1>
    46c8:	a0 91 66 03 	lds	r26, 0x0366	; 0x800366 <timer_count+0x2>
    46cc:	b0 91 67 03 	lds	r27, 0x0367	; 0x800367 <timer_count+0x3>
    SREG = sreg;
    46d0:	4f bf       	out	0x3f, r20	; 63

    return TIMER_DIFF_16((t & 0xFFFF), last);
    46d2:	6c 01       	movw	r12, r24
    46d4:	7d 01       	movw	r14, r26
    46d6:	ee 24       	eor	r14, r14
    46d8:	ff 24       	eor	r15, r15
    46da:	a9 01       	movw	r20, r18
    46dc:	70 e0       	ldi	r23, 0x00	; 0
    46de:	60 e0       	ldi	r22, 0x00	; 0
    46e0:	c4 16       	cp	r12, r20
    46e2:	d5 06       	cpc	r13, r21
    46e4:	e6 06       	cpc	r14, r22
    46e6:	f7 06       	cpc	r15, r23
    46e8:	38 f0       	brcs	.+14     	; 0x46f8 <timer_elapsed+0x46>
    46ea:	82 1b       	sub	r24, r18
    46ec:	93 0b       	sbc	r25, r19
}
    46ee:	ff 90       	pop	r15
    46f0:	ef 90       	pop	r14
    46f2:	df 90       	pop	r13
    46f4:	cf 90       	pop	r12
    46f6:	08 95       	ret
    return TIMER_DIFF_16((t & 0xFFFF), last);
    46f8:	01 97       	sbiw	r24, 0x01	; 1
    46fa:	f7 cf       	rjmp	.-18     	; 0x46ea <timer_elapsed+0x38>

000046fc <__vector_21>:
    return TIMER_DIFF_32(t, last);
}

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    46fc:	1f 92       	push	r1
    46fe:	1f b6       	in	r1, 0x3f	; 63
    4700:	1f 92       	push	r1
    4702:	11 24       	eor	r1, r1
    4704:	8f 93       	push	r24
    4706:	9f 93       	push	r25
    4708:	af 93       	push	r26
    470a:	bf 93       	push	r27
    timer_count++;
    470c:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <timer_count>
    4710:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <timer_count+0x1>
    4714:	a0 91 66 03 	lds	r26, 0x0366	; 0x800366 <timer_count+0x2>
    4718:	b0 91 67 03 	lds	r27, 0x0367	; 0x800367 <timer_count+0x3>
    471c:	01 96       	adiw	r24, 0x01	; 1
    471e:	a1 1d       	adc	r26, r1
    4720:	b1 1d       	adc	r27, r1
    4722:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <timer_count>
    4726:	90 93 65 03 	sts	0x0365, r25	; 0x800365 <timer_count+0x1>
    472a:	a0 93 66 03 	sts	0x0366, r26	; 0x800366 <timer_count+0x2>
    472e:	b0 93 67 03 	sts	0x0367, r27	; 0x800367 <timer_count+0x3>
}
    4732:	bf 91       	pop	r27
    4734:	af 91       	pop	r26
    4736:	9f 91       	pop	r25
    4738:	8f 91       	pop	r24
    473a:	1f 90       	pop	r1
    473c:	1f be       	out	0x3f, r1	; 63
    473e:	1f 90       	pop	r1
    4740:	18 95       	reti

00004742 <bootloader_jump>:
    USB_Disable();
    4742:	0e 94 0b 12 	call	0x2416	; 0x2416 <USB_Disable>
    cli();
    4746:	f8 94       	cli
	__builtin_avr_delay_cycles(__ticks_dc);
    4748:	2f ef       	ldi	r18, 0xFF	; 255
    474a:	87 ea       	ldi	r24, 0xA7	; 167
    474c:	91 e6       	ldi	r25, 0x61	; 97
    474e:	21 50       	subi	r18, 0x01	; 1
    4750:	80 40       	sbci	r24, 0x00	; 0
    4752:	90 40       	sbci	r25, 0x00	; 0
    4754:	e1 f7       	brne	.-8      	; 0x474e <bootloader_jump+0xc>
    4756:	00 c0       	rjmp	.+0      	; 0x4758 <bootloader_jump+0x16>
    4758:	00 00       	nop
    reset_key = BOOTLOADER_RESET_KEY;
    475a:	87 e0       	ldi	r24, 0x07	; 7
    475c:	90 eb       	ldi	r25, 0xB0	; 176
    475e:	dc 01       	movw	r26, r24
    4760:	80 93 80 03 	sts	0x0380, r24	; 0x800380 <__bss_end>
    4764:	90 93 81 03 	sts	0x0381, r25	; 0x800381 <__bss_end+0x1>
    4768:	a0 93 82 03 	sts	0x0382, r26	; 0x800382 <__bss_end+0x2>
    476c:	b0 93 83 03 	sts	0x0383, r27	; 0x800383 <__bss_end+0x3>
		__asm__ __volatile__ (
    4770:	88 e1       	ldi	r24, 0x18	; 24
    4772:	9c e0       	ldi	r25, 0x0C	; 12
    4774:	0f b6       	in	r0, 0x3f	; 63
    4776:	f8 94       	cli
    4778:	a8 95       	wdr
    477a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <actionmaps+0x7f9860>
    477e:	0f be       	out	0x3f, r0	; 63
    4780:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <actionmaps+0x7f9860>
    for (;;);
    4784:	ff cf       	rjmp	.-2      	; 0x4784 <bootloader_jump+0x42>

00004786 <unimap_translate>:
// translates raw matrix to universal map
keypos_t unimap_translate(keypos_t key)
{
    uint8_t unimap_pos = 
#if defined(__AVR__)
        pgm_read_byte(&unimap_trans[key.row][key.col]);
    4786:	28 e0       	ldi	r18, 0x08	; 8
    4788:	92 9f       	mul	r25, r18
    478a:	f0 01       	movw	r30, r0
    478c:	11 24       	eor	r1, r1
    478e:	e8 0f       	add	r30, r24
    4790:	f1 1d       	adc	r31, r1
    4792:	e4 55       	subi	r30, 0x54	; 84
    4794:	ff 4f       	sbci	r31, 0xFF	; 255
    4796:	94 91       	lpm	r25, Z
#endif
    return (keypos_t) {
        .row = ((unimap_pos & 0xf0) >> 4),
        .col = (unimap_pos & 0x0f)
    };
}
    4798:	89 2f       	mov	r24, r25
    479a:	8f 70       	andi	r24, 0x0F	; 15
    479c:	92 95       	swap	r25
    479e:	9f 70       	andi	r25, 0x0F	; 15
    47a0:	08 95       	ret

000047a2 <action_for_key>:

/* Converts key to action */
__attribute__ ((weak))
action_t action_for_key(uint8_t layer, keypos_t key)
{
    47a2:	cf 93       	push	r28
    47a4:	df 93       	push	r29
    47a6:	c8 2f       	mov	r28, r24
    47a8:	cb 01       	movw	r24, r22
    keypos_t uni = unimap_translate(key);
    47aa:	0e 94 c3 23 	call	0x4786	; 0x4786 <unimap_translate>
    if ((uni.row << 4 | uni.col) == UNIMAP_NO) {
    47ae:	40 e1       	ldi	r20, 0x10	; 16
    47b0:	94 9f       	mul	r25, r20
    47b2:	90 01       	movw	r18, r0
    47b4:	11 24       	eor	r1, r1
    47b6:	48 2f       	mov	r20, r24
    47b8:	50 e0       	ldi	r21, 0x00	; 0
    47ba:	28 2b       	or	r18, r24
    47bc:	35 2b       	or	r19, r21
    47be:	20 38       	cpi	r18, 0x80	; 128
    47c0:	31 05       	cpc	r19, r1
    47c2:	29 f4       	brne	.+10     	; 0x47ce <action_for_key+0x2c>
        return (action_t)ACTION_NO;
    47c4:	80 e0       	ldi	r24, 0x00	; 0
    47c6:	90 e0       	ldi	r25, 0x00	; 0
#if defined(__AVR__)
    return (action_t)pgm_read_word(&actionmaps[(layer)][(uni.row & 0x7)][(uni.col)]);
#else
    return actionmaps[(layer)][(uni.row & 0x7)][(uni.col)];
#endif
}
    47c8:	df 91       	pop	r29
    47ca:	cf 91       	pop	r28
    47cc:	08 95       	ret
    return (action_t)pgm_read_word(&actionmaps[(layer)][(uni.row & 0x7)][(uni.col)]);
    47ce:	88 e0       	ldi	r24, 0x08	; 8
    47d0:	c8 9f       	mul	r28, r24
    47d2:	e0 01       	movw	r28, r0
    47d4:	11 24       	eor	r1, r1
    47d6:	e9 2f       	mov	r30, r25
    47d8:	e7 70       	andi	r30, 0x07	; 7
    47da:	ec 0f       	add	r30, r28
    47dc:	fd 2f       	mov	r31, r29
    47de:	f1 1d       	adc	r31, r1
    47e0:	84 e0       	ldi	r24, 0x04	; 4
    47e2:	ee 0f       	add	r30, r30
    47e4:	ff 1f       	adc	r31, r31
    47e6:	8a 95       	dec	r24
    47e8:	e1 f7       	brne	.-8      	; 0x47e2 <action_for_key+0x40>
    47ea:	e4 0f       	add	r30, r20
    47ec:	f5 1f       	adc	r31, r21
    47ee:	ee 0f       	add	r30, r30
    47f0:	ff 1f       	adc	r31, r31
    47f2:	e0 50       	subi	r30, 0x00	; 0
    47f4:	f8 49       	sbci	r31, 0x98	; 152
    47f6:	85 91       	lpm	r24, Z+
    47f8:	94 91       	lpm	r25, Z
    47fa:	e6 cf       	rjmp	.-52     	; 0x47c8 <action_for_key+0x26>

000047fc <action_get_macro>:
/* Macro */
__attribute__ ((weak))
const macro_t *action_get_macro(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    return MACRO_NONE;
}
    47fc:	90 e0       	ldi	r25, 0x00	; 0
    47fe:	80 e0       	ldi	r24, 0x00	; 0
    4800:	08 95       	ret

00004802 <action_function>:

/* Function */
__attribute__ ((weak))
void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)
{
}
    4802:	08 95       	ret

00004804 <move_unit>:


static uint8_t move_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    4804:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <mousekey_accel>
    4808:	80 ff       	sbrs	r24, 0
    480a:	12 c0       	rjmp	.+36     	; 0x4830 <move_unit+0x2c>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/4;
    480c:	60 91 29 01 	lds	r22, 0x0129	; 0x800129 <mk_max_speed>
    4810:	85 e0       	ldi	r24, 0x05	; 5
    4812:	68 9f       	mul	r22, r24
    4814:	b0 01       	movw	r22, r0
    4816:	11 24       	eor	r1, r1
    4818:	75 95       	asr	r23
    481a:	67 95       	ror	r22
    481c:	75 95       	asr	r23
    481e:	67 95       	ror	r22
    } else if (mousekey_repeat >= mk_time_to_max) {
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    4820:	60 38       	cpi	r22, 0x80	; 128
    4822:	71 05       	cpc	r23, r1
    4824:	a8 f5       	brcc	.+106    	; 0x4890 <move_unit+0x8c>
    4826:	61 15       	cp	r22, r1
    4828:	71 05       	cpc	r23, r1
    482a:	a1 f1       	breq	.+104    	; 0x4894 <move_unit+0x90>
    482c:	86 2f       	mov	r24, r22
    482e:	08 95       	ret
    } else if (mousekey_accel & (1<<1)) {
    4830:	81 ff       	sbrs	r24, 1
    4832:	09 c0       	rjmp	.+18     	; 0x4846 <move_unit+0x42>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    4834:	60 91 29 01 	lds	r22, 0x0129	; 0x800129 <mk_max_speed>
    4838:	85 e0       	ldi	r24, 0x05	; 5
    483a:	68 9f       	mul	r22, r24
    483c:	b0 01       	movw	r22, r0
    483e:	11 24       	eor	r1, r1
    4840:	75 95       	asr	r23
    4842:	67 95       	ror	r22
    4844:	ed cf       	rjmp	.-38     	; 0x4820 <move_unit+0x1c>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    4846:	60 91 29 01 	lds	r22, 0x0129	; 0x800129 <mk_max_speed>
    } else if (mousekey_accel & (1<<2)) {
    484a:	82 fd       	sbrc	r24, 2
    484c:	0a c0       	rjmp	.+20     	; 0x4862 <move_unit+0x5e>
    } else if (mousekey_repeat == 0) {
    484e:	80 91 6b 03 	lds	r24, 0x036B	; 0x80036b <mousekey_repeat>
    4852:	88 23       	and	r24, r24
    4854:	d1 f0       	breq	.+52     	; 0x488a <move_unit+0x86>
    } else if (mousekey_repeat >= mk_time_to_max) {
    4856:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <mk_time_to_max>
    485a:	60 91 29 01 	lds	r22, 0x0129	; 0x800129 <mk_max_speed>
    485e:	89 17       	cp	r24, r25
    4860:	28 f0       	brcs	.+10     	; 0x486c <move_unit+0x68>
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    4862:	85 e0       	ldi	r24, 0x05	; 5
    4864:	68 9f       	mul	r22, r24
    4866:	b0 01       	movw	r22, r0
    4868:	11 24       	eor	r1, r1
    486a:	da cf       	rjmp	.-76     	; 0x4820 <move_unit+0x1c>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    486c:	86 9f       	mul	r24, r22
    486e:	b0 01       	movw	r22, r0
    4870:	11 24       	eor	r1, r1
    4872:	85 e0       	ldi	r24, 0x05	; 5
    4874:	86 9f       	mul	r24, r22
    4876:	90 01       	movw	r18, r0
    4878:	87 9f       	mul	r24, r23
    487a:	30 0d       	add	r19, r0
    487c:	11 24       	eor	r1, r1
    487e:	69 2f       	mov	r22, r25
    4880:	70 e0       	ldi	r23, 0x00	; 0
    4882:	c9 01       	movw	r24, r18
    4884:	0e 94 bd 2b 	call	0x577a	; 0x577a <__divmodhi4>
    4888:	cb cf       	rjmp	.-106    	; 0x4820 <move_unit+0x1c>
        unit = MOUSEKEY_MOVE_DELTA;
    488a:	65 e0       	ldi	r22, 0x05	; 5
    488c:	70 e0       	ldi	r23, 0x00	; 0
    488e:	ce cf       	rjmp	.-100    	; 0x482c <move_unit+0x28>
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    4890:	8f e7       	ldi	r24, 0x7F	; 127
    4892:	08 95       	ret
    4894:	81 e0       	ldi	r24, 0x01	; 1
}
    4896:	08 95       	ret

00004898 <wheel_unit>:

static uint8_t wheel_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    4898:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <mousekey_accel>
    489c:	80 ff       	sbrs	r24, 0
    489e:	0c c0       	rjmp	.+24     	; 0x48b8 <wheel_unit+0x20>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/4;
    48a0:	60 91 27 01 	lds	r22, 0x0127	; 0x800127 <mk_wheel_max_speed>
    48a4:	70 e0       	ldi	r23, 0x00	; 0
    48a6:	75 95       	asr	r23
    48a8:	67 95       	ror	r22
    48aa:	75 95       	asr	r23
    48ac:	67 95       	ror	r22
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    } else {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    48ae:	61 15       	cp	r22, r1
    48b0:	71 05       	cpc	r23, r1
    48b2:	49 f1       	breq	.+82     	; 0x4906 <wheel_unit+0x6e>
    48b4:	86 2f       	mov	r24, r22
    48b6:	08 95       	ret
    } else if (mousekey_accel & (1<<1)) {
    48b8:	81 ff       	sbrs	r24, 1
    48ba:	06 c0       	rjmp	.+12     	; 0x48c8 <wheel_unit+0x30>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    48bc:	60 91 27 01 	lds	r22, 0x0127	; 0x800127 <mk_wheel_max_speed>
    48c0:	70 e0       	ldi	r23, 0x00	; 0
    48c2:	75 95       	asr	r23
    48c4:	67 95       	ror	r22
    48c6:	f3 cf       	rjmp	.-26     	; 0x48ae <wheel_unit+0x16>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    48c8:	60 91 27 01 	lds	r22, 0x0127	; 0x800127 <mk_wheel_max_speed>
    } else if (mousekey_accel & (1<<2)) {
    48cc:	82 fd       	sbrc	r24, 2
    48ce:	0b c0       	rjmp	.+22     	; 0x48e6 <wheel_unit+0x4e>
    } else if (mousekey_repeat == 0) {
    48d0:	90 91 6b 03 	lds	r25, 0x036B	; 0x80036b <mousekey_repeat>
    48d4:	99 23       	and	r25, r25
    48d6:	a1 f0       	breq	.+40     	; 0x4900 <wheel_unit+0x68>
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
    48d8:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <mk_wheel_time_to_max>
    48dc:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <mk_wheel_max_speed>
    48e0:	96 17       	cp	r25, r22
    48e2:	38 f0       	brcs	.+14     	; 0x48f2 <wheel_unit+0x5a>
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    48e4:	68 2f       	mov	r22, r24
    48e6:	70 e0       	ldi	r23, 0x00	; 0
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    48e8:	60 38       	cpi	r22, 0x80	; 128
    48ea:	71 05       	cpc	r23, r1
    48ec:	00 f3       	brcs	.-64     	; 0x48ae <wheel_unit+0x16>
    48ee:	8f e7       	ldi	r24, 0x7F	; 127
    48f0:	08 95       	ret
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    48f2:	89 9f       	mul	r24, r25
    48f4:	c0 01       	movw	r24, r0
    48f6:	11 24       	eor	r1, r1
    48f8:	70 e0       	ldi	r23, 0x00	; 0
    48fa:	0e 94 bd 2b 	call	0x577a	; 0x577a <__divmodhi4>
    48fe:	f4 cf       	rjmp	.-24     	; 0x48e8 <wheel_unit+0x50>
        unit = MOUSEKEY_WHEEL_DELTA;
    4900:	61 e0       	ldi	r22, 0x01	; 1
    4902:	70 e0       	ldi	r23, 0x00	; 0
    4904:	d7 cf       	rjmp	.-82     	; 0x48b4 <wheel_unit+0x1c>
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    4906:	81 e0       	ldi	r24, 0x01	; 1
}
    4908:	08 95       	ret

0000490a <mousekey_on>:
    mousekey_send();
}

void mousekey_on(uint8_t code)
{
    if      (code == KC_MS_UP)       mouse_report.y = move_unit() * -1;
    490a:	80 3f       	cpi	r24, 0xF0	; 240
    490c:	31 f4       	brne	.+12     	; 0x491a <mousekey_on+0x10>
    490e:	0e 94 02 24 	call	0x4804	; 0x4804 <move_unit>
    4912:	81 95       	neg	r24
    else if (code == KC_MS_DOWN)     mouse_report.y = move_unit();
    4914:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <mouse_report+0x2>
    4918:	08 95       	ret
    491a:	81 3f       	cpi	r24, 0xF1	; 241
    491c:	19 f4       	brne	.+6      	; 0x4924 <mousekey_on+0x1a>
    491e:	0e 94 02 24 	call	0x4804	; 0x4804 <move_unit>
    4922:	f8 cf       	rjmp	.-16     	; 0x4914 <mousekey_on+0xa>
    else if (code == KC_MS_LEFT)     mouse_report.x = move_unit() * -1;
    4924:	82 3f       	cpi	r24, 0xF2	; 242
    4926:	31 f4       	brne	.+12     	; 0x4934 <mousekey_on+0x2a>
    4928:	0e 94 02 24 	call	0x4804	; 0x4804 <move_unit>
    492c:	81 95       	neg	r24
    else if (code == KC_MS_RIGHT)    mouse_report.x = move_unit();
    492e:	80 93 6d 03 	sts	0x036D, r24	; 0x80036d <mouse_report+0x1>
    4932:	08 95       	ret
    4934:	83 3f       	cpi	r24, 0xF3	; 243
    4936:	19 f4       	brne	.+6      	; 0x493e <mousekey_on+0x34>
    4938:	0e 94 02 24 	call	0x4804	; 0x4804 <move_unit>
    493c:	f8 cf       	rjmp	.-16     	; 0x492e <mousekey_on+0x24>
    else if (code == KC_MS_WH_UP)    mouse_report.v = wheel_unit();
    493e:	89 3f       	cpi	r24, 0xF9	; 249
    4940:	29 f4       	brne	.+10     	; 0x494c <mousekey_on+0x42>
    4942:	0e 94 4c 24 	call	0x4898	; 0x4898 <wheel_unit>
    else if (code == KC_MS_WH_DOWN)  mouse_report.v = wheel_unit() * -1;
    4946:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <mouse_report+0x3>
    494a:	08 95       	ret
    494c:	8a 3f       	cpi	r24, 0xFA	; 250
    494e:	21 f4       	brne	.+8      	; 0x4958 <mousekey_on+0x4e>
    4950:	0e 94 4c 24 	call	0x4898	; 0x4898 <wheel_unit>
    4954:	81 95       	neg	r24
    4956:	f7 cf       	rjmp	.-18     	; 0x4946 <mousekey_on+0x3c>
    else if (code == KC_MS_WH_LEFT)  mouse_report.h = wheel_unit() * -1;
    4958:	8b 3f       	cpi	r24, 0xFB	; 251
    495a:	31 f4       	brne	.+12     	; 0x4968 <mousekey_on+0x5e>
    495c:	0e 94 4c 24 	call	0x4898	; 0x4898 <wheel_unit>
    4960:	81 95       	neg	r24
    else if (code == KC_MS_WH_RIGHT) mouse_report.h = wheel_unit();
    4962:	80 93 70 03 	sts	0x0370, r24	; 0x800370 <mouse_report+0x4>
    4966:	08 95       	ret
    4968:	8c 3f       	cpi	r24, 0xFC	; 252
    496a:	19 f4       	brne	.+6      	; 0x4972 <mousekey_on+0x68>
    496c:	0e 94 4c 24 	call	0x4898	; 0x4898 <wheel_unit>
    4970:	f8 cf       	rjmp	.-16     	; 0x4962 <mousekey_on+0x58>
    else if (code == KC_MS_BTN1)     mouse_report.buttons |= MOUSE_BTN1;
    4972:	84 3f       	cpi	r24, 0xF4	; 244
    4974:	31 f4       	brne	.+12     	; 0x4982 <mousekey_on+0x78>
    4976:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <mouse_report>
    497a:	81 60       	ori	r24, 0x01	; 1
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
    497c:	80 93 6c 03 	sts	0x036C, r24	; 0x80036c <mouse_report>
    4980:	08 95       	ret
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    4982:	85 3f       	cpi	r24, 0xF5	; 245
    4984:	21 f4       	brne	.+8      	; 0x498e <mousekey_on+0x84>
    4986:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <mouse_report>
    498a:	82 60       	ori	r24, 0x02	; 2
    498c:	f7 cf       	rjmp	.-18     	; 0x497c <mousekey_on+0x72>
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    498e:	86 3f       	cpi	r24, 0xF6	; 246
    4990:	21 f4       	brne	.+8      	; 0x499a <mousekey_on+0x90>
    4992:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <mouse_report>
    4996:	84 60       	ori	r24, 0x04	; 4
    4998:	f1 cf       	rjmp	.-30     	; 0x497c <mousekey_on+0x72>
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    499a:	87 3f       	cpi	r24, 0xF7	; 247
    499c:	21 f4       	brne	.+8      	; 0x49a6 <mousekey_on+0x9c>
    499e:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <mouse_report>
    49a2:	88 60       	ori	r24, 0x08	; 8
    49a4:	eb cf       	rjmp	.-42     	; 0x497c <mousekey_on+0x72>
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
    49a6:	88 3f       	cpi	r24, 0xF8	; 248
    49a8:	21 f4       	brne	.+8      	; 0x49b2 <mousekey_on+0xa8>
    49aa:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <mouse_report>
    49ae:	80 61       	ori	r24, 0x10	; 16
    49b0:	e5 cf       	rjmp	.-54     	; 0x497c <mousekey_on+0x72>
    else if (code == KC_MS_ACCEL0)   mousekey_accel |= (1<<0);
    49b2:	8d 3f       	cpi	r24, 0xFD	; 253
    49b4:	31 f4       	brne	.+12     	; 0x49c2 <mousekey_on+0xb8>
    49b6:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <mousekey_accel>
    49ba:	81 60       	ori	r24, 0x01	; 1
    else if (code == KC_MS_ACCEL1)   mousekey_accel |= (1<<1);
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
    49bc:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <mousekey_accel>
}
    49c0:	08 95       	ret
    else if (code == KC_MS_ACCEL1)   mousekey_accel |= (1<<1);
    49c2:	8e 3f       	cpi	r24, 0xFE	; 254
    49c4:	21 f4       	brne	.+8      	; 0x49ce <mousekey_on+0xc4>
    49c6:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <mousekey_accel>
    49ca:	82 60       	ori	r24, 0x02	; 2
    49cc:	f7 cf       	rjmp	.-18     	; 0x49bc <mousekey_on+0xb2>
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
    49ce:	8f 3f       	cpi	r24, 0xFF	; 255
    49d0:	b9 f7       	brne	.-18     	; 0x49c0 <mousekey_on+0xb6>
    49d2:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <mousekey_accel>
    49d6:	84 60       	ori	r24, 0x04	; 4
    49d8:	f1 cf       	rjmp	.-30     	; 0x49bc <mousekey_on+0xb2>

000049da <mousekey_off>:

void mousekey_off(uint8_t code)
{
    if      (code == KC_MS_UP       && mouse_report.y < 0) mouse_report.y = 0;
    49da:	90 91 6d 03 	lds	r25, 0x036D	; 0x80036d <mouse_report+0x1>
    49de:	80 3f       	cpi	r24, 0xF0	; 240
    49e0:	41 f4       	brne	.+16     	; 0x49f2 <mousekey_off+0x18>
    49e2:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <mouse_report+0x2>
    49e6:	87 fd       	sbrc	r24, 7
    49e8:	10 92 6e 03 	sts	0x036E, r1	; 0x80036e <mouse_report+0x2>
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    49ec:	99 23       	and	r25, r25
    49ee:	71 f0       	breq	.+28     	; 0x4a0c <mousekey_off+0x32>
        mousekey_repeat = 0;
}
    49f0:	08 95       	ret
    else if (code == KC_MS_DOWN     && mouse_report.y > 0) mouse_report.y = 0;
    49f2:	81 3f       	cpi	r24, 0xF1	; 241
    49f4:	29 f4       	brne	.+10     	; 0x4a00 <mousekey_off+0x26>
    49f6:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <mouse_report+0x2>
    49fa:	18 16       	cp	r1, r24
    49fc:	ac f3       	brlt	.-22     	; 0x49e8 <mousekey_off+0xe>
    49fe:	f6 cf       	rjmp	.-20     	; 0x49ec <mousekey_off+0x12>
    else if (code == KC_MS_LEFT     && mouse_report.x < 0) mouse_report.x = 0;
    4a00:	82 3f       	cpi	r24, 0xF2	; 242
    4a02:	81 f4       	brne	.+32     	; 0x4a24 <mousekey_off+0x4a>
    4a04:	97 ff       	sbrs	r25, 7
    4a06:	f2 cf       	rjmp	.-28     	; 0x49ec <mousekey_off+0x12>
    4a08:	10 92 6d 03 	sts	0x036D, r1	; 0x80036d <mouse_report+0x1>
    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    4a0c:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <mouse_report+0x2>
    4a10:	90 91 6f 03 	lds	r25, 0x036F	; 0x80036f <mouse_report+0x3>
    4a14:	89 2b       	or	r24, r25
    4a16:	90 91 70 03 	lds	r25, 0x0370	; 0x800370 <mouse_report+0x4>
    4a1a:	89 2b       	or	r24, r25
    4a1c:	49 f7       	brne	.-46     	; 0x49f0 <mousekey_off+0x16>
        mousekey_repeat = 0;
    4a1e:	10 92 6b 03 	sts	0x036B, r1	; 0x80036b <mousekey_repeat>
}
    4a22:	08 95       	ret
    else if (code == KC_MS_RIGHT    && mouse_report.x > 0) mouse_report.x = 0;
    4a24:	83 3f       	cpi	r24, 0xF3	; 243
    4a26:	19 f4       	brne	.+6      	; 0x4a2e <mousekey_off+0x54>
    4a28:	19 16       	cp	r1, r25
    4a2a:	74 f3       	brlt	.-36     	; 0x4a08 <mousekey_off+0x2e>
    4a2c:	df cf       	rjmp	.-66     	; 0x49ec <mousekey_off+0x12>
    else if (code == KC_MS_WH_UP    && mouse_report.v > 0) mouse_report.v = 0;
    4a2e:	89 3f       	cpi	r24, 0xF9	; 249
    4a30:	39 f4       	brne	.+14     	; 0x4a40 <mousekey_off+0x66>
    4a32:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <mouse_report+0x3>
    4a36:	18 16       	cp	r1, r24
    4a38:	cc f6       	brge	.-78     	; 0x49ec <mousekey_off+0x12>
    4a3a:	10 92 6f 03 	sts	0x036F, r1	; 0x80036f <mouse_report+0x3>
    4a3e:	d6 cf       	rjmp	.-84     	; 0x49ec <mousekey_off+0x12>
    else if (code == KC_MS_WH_DOWN  && mouse_report.v < 0) mouse_report.v = 0;
    4a40:	8a 3f       	cpi	r24, 0xFA	; 250
    4a42:	29 f4       	brne	.+10     	; 0x4a4e <mousekey_off+0x74>
    4a44:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <mouse_report+0x3>
    4a48:	87 ff       	sbrs	r24, 7
    4a4a:	d0 cf       	rjmp	.-96     	; 0x49ec <mousekey_off+0x12>
    4a4c:	f6 cf       	rjmp	.-20     	; 0x4a3a <mousekey_off+0x60>
    else if (code == KC_MS_WH_LEFT  && mouse_report.h < 0) mouse_report.h = 0;
    4a4e:	8b 3f       	cpi	r24, 0xFB	; 251
    4a50:	39 f4       	brne	.+14     	; 0x4a60 <mousekey_off+0x86>
    4a52:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <mouse_report+0x4>
    4a56:	87 ff       	sbrs	r24, 7
    4a58:	c9 cf       	rjmp	.-110    	; 0x49ec <mousekey_off+0x12>
    4a5a:	10 92 70 03 	sts	0x0370, r1	; 0x800370 <mouse_report+0x4>
    4a5e:	c6 cf       	rjmp	.-116    	; 0x49ec <mousekey_off+0x12>
    else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0) mouse_report.h = 0;
    4a60:	8c 3f       	cpi	r24, 0xFC	; 252
    4a62:	29 f4       	brne	.+10     	; 0x4a6e <mousekey_off+0x94>
    4a64:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <mouse_report+0x4>
    4a68:	18 16       	cp	r1, r24
    4a6a:	bc f3       	brlt	.-18     	; 0x4a5a <mousekey_off+0x80>
    4a6c:	bf cf       	rjmp	.-130    	; 0x49ec <mousekey_off+0x12>
    else if (code == KC_MS_BTN1) mouse_report.buttons &= ~MOUSE_BTN1;
    4a6e:	84 3f       	cpi	r24, 0xF4	; 244
    4a70:	31 f4       	brne	.+12     	; 0x4a7e <mousekey_off+0xa4>
    4a72:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <mouse_report>
    4a76:	8e 7f       	andi	r24, 0xFE	; 254
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    4a78:	80 93 6c 03 	sts	0x036C, r24	; 0x80036c <mouse_report>
    4a7c:	b7 cf       	rjmp	.-146    	; 0x49ec <mousekey_off+0x12>
    else if (code == KC_MS_BTN2) mouse_report.buttons &= ~MOUSE_BTN2;
    4a7e:	85 3f       	cpi	r24, 0xF5	; 245
    4a80:	21 f4       	brne	.+8      	; 0x4a8a <mousekey_off+0xb0>
    4a82:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <mouse_report>
    4a86:	8d 7f       	andi	r24, 0xFD	; 253
    4a88:	f7 cf       	rjmp	.-18     	; 0x4a78 <mousekey_off+0x9e>
    else if (code == KC_MS_BTN3) mouse_report.buttons &= ~MOUSE_BTN3;
    4a8a:	86 3f       	cpi	r24, 0xF6	; 246
    4a8c:	21 f4       	brne	.+8      	; 0x4a96 <mousekey_off+0xbc>
    4a8e:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <mouse_report>
    4a92:	8b 7f       	andi	r24, 0xFB	; 251
    4a94:	f1 cf       	rjmp	.-30     	; 0x4a78 <mousekey_off+0x9e>
    else if (code == KC_MS_BTN4) mouse_report.buttons &= ~MOUSE_BTN4;
    4a96:	87 3f       	cpi	r24, 0xF7	; 247
    4a98:	21 f4       	brne	.+8      	; 0x4aa2 <mousekey_off+0xc8>
    4a9a:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <mouse_report>
    4a9e:	87 7f       	andi	r24, 0xF7	; 247
    4aa0:	eb cf       	rjmp	.-42     	; 0x4a78 <mousekey_off+0x9e>
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    4aa2:	88 3f       	cpi	r24, 0xF8	; 248
    4aa4:	21 f4       	brne	.+8      	; 0x4aae <mousekey_off+0xd4>
    4aa6:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <mouse_report>
    4aaa:	8f 7e       	andi	r24, 0xEF	; 239
    4aac:	e5 cf       	rjmp	.-54     	; 0x4a78 <mousekey_off+0x9e>
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    4aae:	8d 3f       	cpi	r24, 0xFD	; 253
    4ab0:	31 f4       	brne	.+12     	; 0x4abe <mousekey_off+0xe4>
    4ab2:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <mousekey_accel>
    4ab6:	8e 7f       	andi	r24, 0xFE	; 254
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);
    4ab8:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <mousekey_accel>
    4abc:	97 cf       	rjmp	.-210    	; 0x49ec <mousekey_off+0x12>
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    4abe:	8e 3f       	cpi	r24, 0xFE	; 254
    4ac0:	21 f4       	brne	.+8      	; 0x4aca <mousekey_off+0xf0>
    4ac2:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <mousekey_accel>
    4ac6:	8d 7f       	andi	r24, 0xFD	; 253
    4ac8:	f7 cf       	rjmp	.-18     	; 0x4ab8 <mousekey_off+0xde>
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);
    4aca:	8f 3f       	cpi	r24, 0xFF	; 255
    4acc:	09 f0       	breq	.+2      	; 0x4ad0 <mousekey_off+0xf6>
    4ace:	8e cf       	rjmp	.-228    	; 0x49ec <mousekey_off+0x12>
    4ad0:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <mousekey_accel>
    4ad4:	8b 7f       	andi	r24, 0xFB	; 251
    4ad6:	f0 cf       	rjmp	.-32     	; 0x4ab8 <mousekey_off+0xde>

00004ad8 <mousekey_send>:
    mousekey_accel = 0;
}

static void mousekey_debug(void)
{
    if (!debug_mouse) return;
    4ad8:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <debug_config>
    4adc:	83 ff       	sbrs	r24, 3
    4ade:	7e c0       	rjmp	.+252    	; 0x4bdc <mousekey_send+0x104>
    print("mousekey [btn|x y v h](rep/acl): [");
    4ae0:	8d ef       	ldi	r24, 0xFD	; 253
    4ae2:	94 e0       	ldi	r25, 0x04	; 4
    4ae4:	0e 94 1d 06 	call	0xc3a	; 0xc3a <xputs>
    phex(mouse_report.buttons); print("|");
    4ae8:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <mouse_report>
    4aec:	1f 92       	push	r1
    4aee:	8f 93       	push	r24
    4af0:	88 ef       	ldi	r24, 0xF8	; 248
    4af2:	94 e0       	ldi	r25, 0x04	; 4
    4af4:	9f 93       	push	r25
    4af6:	8f 93       	push	r24
    4af8:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__xprintf>
    4afc:	86 ef       	ldi	r24, 0xF6	; 246
    4afe:	94 e0       	ldi	r25, 0x04	; 4
    4b00:	0e 94 1d 06 	call	0xc3a	; 0xc3a <xputs>
    print_decs(mouse_report.x); print(" ");
    4b04:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <mouse_report+0x1>
    4b08:	28 2f       	mov	r18, r24
    4b0a:	08 2e       	mov	r0, r24
    4b0c:	00 0c       	add	r0, r0
    4b0e:	33 0b       	sbc	r19, r19
    4b10:	3f 93       	push	r19
    4b12:	8f 93       	push	r24
    4b14:	83 ef       	ldi	r24, 0xF3	; 243
    4b16:	94 e0       	ldi	r25, 0x04	; 4
    4b18:	9f 93       	push	r25
    4b1a:	8f 93       	push	r24
    4b1c:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__xprintf>
    4b20:	81 ef       	ldi	r24, 0xF1	; 241
    4b22:	94 e0       	ldi	r25, 0x04	; 4
    4b24:	0e 94 1d 06 	call	0xc3a	; 0xc3a <xputs>
    print_decs(mouse_report.y); print(" ");
    4b28:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <mouse_report+0x2>
    4b2c:	28 2f       	mov	r18, r24
    4b2e:	08 2e       	mov	r0, r24
    4b30:	00 0c       	add	r0, r0
    4b32:	33 0b       	sbc	r19, r19
    4b34:	3f 93       	push	r19
    4b36:	8f 93       	push	r24
    4b38:	8e ee       	ldi	r24, 0xEE	; 238
    4b3a:	94 e0       	ldi	r25, 0x04	; 4
    4b3c:	9f 93       	push	r25
    4b3e:	8f 93       	push	r24
    4b40:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__xprintf>
    4b44:	8c ee       	ldi	r24, 0xEC	; 236
    4b46:	94 e0       	ldi	r25, 0x04	; 4
    4b48:	0e 94 1d 06 	call	0xc3a	; 0xc3a <xputs>
    print_decs(mouse_report.v); print(" ");
    4b4c:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <mouse_report+0x3>
    4b50:	28 2f       	mov	r18, r24
    4b52:	08 2e       	mov	r0, r24
    4b54:	00 0c       	add	r0, r0
    4b56:	33 0b       	sbc	r19, r19
    4b58:	3f 93       	push	r19
    4b5a:	8f 93       	push	r24
    4b5c:	89 ee       	ldi	r24, 0xE9	; 233
    4b5e:	94 e0       	ldi	r25, 0x04	; 4
    4b60:	9f 93       	push	r25
    4b62:	8f 93       	push	r24
    4b64:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__xprintf>
    4b68:	87 ee       	ldi	r24, 0xE7	; 231
    4b6a:	94 e0       	ldi	r25, 0x04	; 4
    4b6c:	0e 94 1d 06 	call	0xc3a	; 0xc3a <xputs>
    print_decs(mouse_report.h); print("](");
    4b70:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <mouse_report+0x4>
    4b74:	28 2f       	mov	r18, r24
    4b76:	08 2e       	mov	r0, r24
    4b78:	00 0c       	add	r0, r0
    4b7a:	33 0b       	sbc	r19, r19
    4b7c:	3f 93       	push	r19
    4b7e:	8f 93       	push	r24
    4b80:	84 ee       	ldi	r24, 0xE4	; 228
    4b82:	94 e0       	ldi	r25, 0x04	; 4
    4b84:	9f 93       	push	r25
    4b86:	8f 93       	push	r24
    4b88:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__xprintf>
    4b8c:	81 ee       	ldi	r24, 0xE1	; 225
    4b8e:	94 e0       	ldi	r25, 0x04	; 4
    4b90:	0e 94 1d 06 	call	0xc3a	; 0xc3a <xputs>
    print_dec(mousekey_repeat); print("/");
    4b94:	80 91 6b 03 	lds	r24, 0x036B	; 0x80036b <mousekey_repeat>
    4b98:	1f 92       	push	r1
    4b9a:	8f 93       	push	r24
    4b9c:	8e ed       	ldi	r24, 0xDE	; 222
    4b9e:	94 e0       	ldi	r25, 0x04	; 4
    4ba0:	9f 93       	push	r25
    4ba2:	8f 93       	push	r24
    4ba4:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__xprintf>
    4ba8:	8c ed       	ldi	r24, 0xDC	; 220
    4baa:	94 e0       	ldi	r25, 0x04	; 4
    4bac:	0e 94 1d 06 	call	0xc3a	; 0xc3a <xputs>
    print_dec(mousekey_accel); print(")\n");
    4bb0:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <mousekey_accel>
    4bb4:	1f 92       	push	r1
    4bb6:	8f 93       	push	r24
    4bb8:	89 ed       	ldi	r24, 0xD9	; 217
    4bba:	94 e0       	ldi	r25, 0x04	; 4
    4bbc:	9f 93       	push	r25
    4bbe:	8f 93       	push	r24
    4bc0:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__xprintf>
    4bc4:	86 ed       	ldi	r24, 0xD6	; 214
    4bc6:	94 e0       	ldi	r25, 0x04	; 4
    4bc8:	0e 94 1d 06 	call	0xc3a	; 0xc3a <xputs>
    4bcc:	8d b7       	in	r24, 0x3d	; 61
    4bce:	9e b7       	in	r25, 0x3e	; 62
    4bd0:	4c 96       	adiw	r24, 0x1c	; 28
    4bd2:	0f b6       	in	r0, 0x3f	; 63
    4bd4:	f8 94       	cli
    4bd6:	9e bf       	out	0x3e, r25	; 62
    4bd8:	0f be       	out	0x3f, r0	; 63
    4bda:	8d bf       	out	0x3d, r24	; 61
    host_mouse_send(&mouse_report);
    4bdc:	8c e6       	ldi	r24, 0x6C	; 108
    4bde:	93 e0       	ldi	r25, 0x03	; 3
    4be0:	0e 94 44 15 	call	0x2a88	; 0x2a88 <host_mouse_send>
    last_timer = timer_read();
    4be4:	0e 94 2d 23 	call	0x465a	; 0x465a <timer_read>
    4be8:	90 93 69 03 	sts	0x0369, r25	; 0x800369 <last_timer+0x1>
    4bec:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <last_timer>
}
    4bf0:	08 95       	ret

00004bf2 <mousekey_task>:
{
    4bf2:	1f 93       	push	r17
    4bf4:	cf 93       	push	r28
    4bf6:	df 93       	push	r29
    4bf8:	00 d0       	rcall	.+0      	; 0x4bfa <mousekey_task+0x8>
    4bfa:	00 d0       	rcall	.+0      	; 0x4bfc <mousekey_task+0xa>
    4bfc:	00 d0       	rcall	.+0      	; 0x4bfe <mousekey_task+0xc>
    4bfe:	cd b7       	in	r28, 0x3d	; 61
    4c00:	de b7       	in	r29, 0x3e	; 62
    if (timer_elapsed(last_timer) < (mousekey_repeat ? mk_interval : mk_delay*10))
    4c02:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <last_timer>
    4c06:	90 91 69 03 	lds	r25, 0x0369	; 0x800369 <last_timer+0x1>
    4c0a:	0e 94 59 23 	call	0x46b2	; 0x46b2 <timer_elapsed>
    4c0e:	ac 01       	movw	r20, r24
    4c10:	80 91 6b 03 	lds	r24, 0x036B	; 0x80036b <mousekey_repeat>
    4c14:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <mk_interval>
    4c18:	30 e0       	ldi	r19, 0x00	; 0
    4c1a:	81 11       	cpse	r24, r1
    4c1c:	06 c0       	rjmp	.+12     	; 0x4c2a <mousekey_task+0x38>
    4c1e:	20 91 2b 01 	lds	r18, 0x012B	; 0x80012b <mk_delay>
    4c22:	9a e0       	ldi	r25, 0x0A	; 10
    4c24:	29 9f       	mul	r18, r25
    4c26:	90 01       	movw	r18, r0
    4c28:	11 24       	eor	r1, r1
    4c2a:	42 17       	cp	r20, r18
    4c2c:	53 07       	cpc	r21, r19
    4c2e:	88 f0       	brcs	.+34     	; 0x4c52 <mousekey_task+0x60>
    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    4c30:	20 91 6d 03 	lds	r18, 0x036D	; 0x80036d <mouse_report+0x1>
    4c34:	a0 91 6e 03 	lds	r26, 0x036E	; 0x80036e <mouse_report+0x2>
    4c38:	a9 83       	std	Y+1, r26	; 0x01
    4c3a:	10 91 6f 03 	lds	r17, 0x036F	; 0x80036f <mouse_report+0x3>
    4c3e:	b0 91 70 03 	lds	r27, 0x0370	; 0x800370 <mouse_report+0x4>
    4c42:	be 83       	std	Y+6, r27	; 0x06
    4c44:	21 11       	cpse	r18, r1
    4c46:	0f c0       	rjmp	.+30     	; 0x4c66 <mousekey_task+0x74>
    4c48:	9a 2f       	mov	r25, r26
    4c4a:	91 2b       	or	r25, r17
    4c4c:	9b 2b       	or	r25, r27
    4c4e:	09 f0       	breq	.+2      	; 0x4c52 <mousekey_task+0x60>
    4c50:	b2 c0       	rjmp	.+356    	; 0x4db6 <mousekey_task+0x1c4>
}
    4c52:	26 96       	adiw	r28, 0x06	; 6
    4c54:	0f b6       	in	r0, 0x3f	; 63
    4c56:	f8 94       	cli
    4c58:	de bf       	out	0x3e, r29	; 62
    4c5a:	0f be       	out	0x3f, r0	; 63
    4c5c:	cd bf       	out	0x3d, r28	; 61
    4c5e:	df 91       	pop	r29
    4c60:	cf 91       	pop	r28
    4c62:	1f 91       	pop	r17
    4c64:	08 95       	ret
    if (mousekey_repeat != UINT8_MAX)
    4c66:	8f 3f       	cpi	r24, 0xFF	; 255
    4c68:	19 f0       	breq	.+6      	; 0x4c70 <mousekey_task+0x7e>
        mousekey_repeat++;
    4c6a:	8f 5f       	subi	r24, 0xFF	; 255
    4c6c:	80 93 6b 03 	sts	0x036B, r24	; 0x80036b <mousekey_repeat>
    if (mouse_report.x > 0) mouse_report.x = move_unit();
    4c70:	12 16       	cp	r1, r18
    4c72:	24 f4       	brge	.+8      	; 0x4c7c <mousekey_task+0x8a>
    4c74:	0e 94 02 24 	call	0x4804	; 0x4804 <move_unit>
    4c78:	80 93 6d 03 	sts	0x036D, r24	; 0x80036d <mouse_report+0x1>
    if (mouse_report.x < 0) mouse_report.x = move_unit() * -1;
    4c7c:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <mouse_report+0x1>
    4c80:	87 ff       	sbrs	r24, 7
    4c82:	05 c0       	rjmp	.+10     	; 0x4c8e <mousekey_task+0x9c>
    4c84:	0e 94 02 24 	call	0x4804	; 0x4804 <move_unit>
    4c88:	81 95       	neg	r24
    4c8a:	80 93 6d 03 	sts	0x036D, r24	; 0x80036d <mouse_report+0x1>
    if (mouse_report.y > 0) mouse_report.y = move_unit();
    4c8e:	29 81       	ldd	r18, Y+1	; 0x01
    4c90:	12 16       	cp	r1, r18
    4c92:	24 f4       	brge	.+8      	; 0x4c9c <mousekey_task+0xaa>
    4c94:	0e 94 02 24 	call	0x4804	; 0x4804 <move_unit>
    4c98:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <mouse_report+0x2>
    if (mouse_report.y < 0) mouse_report.y = move_unit() * -1;
    4c9c:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <mouse_report+0x2>
    4ca0:	87 ff       	sbrs	r24, 7
    4ca2:	05 c0       	rjmp	.+10     	; 0x4cae <mousekey_task+0xbc>
    4ca4:	0e 94 02 24 	call	0x4804	; 0x4804 <move_unit>
    4ca8:	81 95       	neg	r24
    4caa:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <mouse_report+0x2>
    if (mouse_report.x && mouse_report.y) {
    4cae:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <mouse_report+0x1>
    4cb2:	88 23       	and	r24, r24
    4cb4:	09 f4       	brne	.+2      	; 0x4cb8 <mousekey_task+0xc6>
    4cb6:	55 c0       	rjmp	.+170    	; 0x4d62 <mousekey_task+0x170>
    4cb8:	30 91 6e 03 	lds	r19, 0x036E	; 0x80036e <mouse_report+0x2>
    4cbc:	3d 83       	std	Y+5, r19	; 0x05
    4cbe:	33 23       	and	r19, r19
    4cc0:	09 f4       	brne	.+2      	; 0x4cc4 <mousekey_task+0xd2>
    4cc2:	4f c0       	rjmp	.+158    	; 0x4d62 <mousekey_task+0x170>
        mouse_report.x *= 0.7;
    4cc4:	28 2f       	mov	r18, r24
    4cc6:	88 0f       	add	r24, r24
    4cc8:	33 0b       	sbc	r19, r19
    4cca:	44 0b       	sbc	r20, r20
    4ccc:	55 0b       	sbc	r21, r21
    4cce:	29 83       	std	Y+1, r18	; 0x01
    4cd0:	3a 83       	std	Y+2, r19	; 0x02
    4cd2:	4b 83       	std	Y+3, r20	; 0x03
    4cd4:	5c 83       	std	Y+4, r21	; 0x04
    4cd6:	ca 01       	movw	r24, r20
    4cd8:	b9 01       	movw	r22, r18
    4cda:	0e 94 c4 2a 	call	0x5588	; 0x5588 <__floatsisf>
    4cde:	23 e3       	ldi	r18, 0x33	; 51
    4ce0:	33 e3       	ldi	r19, 0x33	; 51
    4ce2:	43 e3       	ldi	r20, 0x33	; 51
    4ce4:	5f e3       	ldi	r21, 0x3F	; 63
    4ce6:	69 83       	std	Y+1, r22	; 0x01
    4ce8:	7a 83       	std	Y+2, r23	; 0x02
    4cea:	8b 83       	std	Y+3, r24	; 0x03
    4cec:	9c 83       	std	Y+4, r25	; 0x04
    4cee:	69 81       	ldd	r22, Y+1	; 0x01
    4cf0:	7a 81       	ldd	r23, Y+2	; 0x02
    4cf2:	8b 81       	ldd	r24, Y+3	; 0x03
    4cf4:	9c 81       	ldd	r25, Y+4	; 0x04
    4cf6:	0e 94 28 2b 	call	0x5650	; 0x5650 <__mulsf3>
    4cfa:	69 83       	std	Y+1, r22	; 0x01
    4cfc:	7a 83       	std	Y+2, r23	; 0x02
    4cfe:	8b 83       	std	Y+3, r24	; 0x03
    4d00:	9c 83       	std	Y+4, r25	; 0x04
    4d02:	69 81       	ldd	r22, Y+1	; 0x01
    4d04:	7a 81       	ldd	r23, Y+2	; 0x02
    4d06:	8b 81       	ldd	r24, Y+3	; 0x03
    4d08:	9c 81       	ldd	r25, Y+4	; 0x04
    4d0a:	0e 94 8c 2a 	call	0x5518	; 0x5518 <__fixsfsi>
    4d0e:	60 93 6d 03 	sts	0x036D, r22	; 0x80036d <mouse_report+0x1>
        mouse_report.y *= 0.7;
    4d12:	8d 81       	ldd	r24, Y+5	; 0x05
    4d14:	08 2e       	mov	r0, r24
    4d16:	00 0c       	add	r0, r0
    4d18:	99 0b       	sbc	r25, r25
    4d1a:	aa 0b       	sbc	r26, r26
    4d1c:	bb 0b       	sbc	r27, r27
    4d1e:	89 83       	std	Y+1, r24	; 0x01
    4d20:	9a 83       	std	Y+2, r25	; 0x02
    4d22:	ab 83       	std	Y+3, r26	; 0x03
    4d24:	bc 83       	std	Y+4, r27	; 0x04
    4d26:	bc 01       	movw	r22, r24
    4d28:	cd 01       	movw	r24, r26
    4d2a:	0e 94 c4 2a 	call	0x5588	; 0x5588 <__floatsisf>
    4d2e:	23 e3       	ldi	r18, 0x33	; 51
    4d30:	33 e3       	ldi	r19, 0x33	; 51
    4d32:	43 e3       	ldi	r20, 0x33	; 51
    4d34:	5f e3       	ldi	r21, 0x3F	; 63
    4d36:	69 83       	std	Y+1, r22	; 0x01
    4d38:	7a 83       	std	Y+2, r23	; 0x02
    4d3a:	8b 83       	std	Y+3, r24	; 0x03
    4d3c:	9c 83       	std	Y+4, r25	; 0x04
    4d3e:	69 81       	ldd	r22, Y+1	; 0x01
    4d40:	7a 81       	ldd	r23, Y+2	; 0x02
    4d42:	8b 81       	ldd	r24, Y+3	; 0x03
    4d44:	9c 81       	ldd	r25, Y+4	; 0x04
    4d46:	0e 94 28 2b 	call	0x5650	; 0x5650 <__mulsf3>
    4d4a:	69 83       	std	Y+1, r22	; 0x01
    4d4c:	7a 83       	std	Y+2, r23	; 0x02
    4d4e:	8b 83       	std	Y+3, r24	; 0x03
    4d50:	9c 83       	std	Y+4, r25	; 0x04
    4d52:	69 81       	ldd	r22, Y+1	; 0x01
    4d54:	7a 81       	ldd	r23, Y+2	; 0x02
    4d56:	8b 81       	ldd	r24, Y+3	; 0x03
    4d58:	9c 81       	ldd	r25, Y+4	; 0x04
    4d5a:	0e 94 8c 2a 	call	0x5518	; 0x5518 <__fixsfsi>
    4d5e:	60 93 6e 03 	sts	0x036E, r22	; 0x80036e <mouse_report+0x2>
    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    4d62:	11 16       	cp	r1, r17
    4d64:	24 f4       	brge	.+8      	; 0x4d6e <mousekey_task+0x17c>
    4d66:	0e 94 4c 24 	call	0x4898	; 0x4898 <wheel_unit>
    4d6a:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <mouse_report+0x3>
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    4d6e:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <mouse_report+0x3>
    4d72:	87 ff       	sbrs	r24, 7
    4d74:	05 c0       	rjmp	.+10     	; 0x4d80 <mousekey_task+0x18e>
    4d76:	0e 94 4c 24 	call	0x4898	; 0x4898 <wheel_unit>
    4d7a:	81 95       	neg	r24
    4d7c:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <mouse_report+0x3>
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    4d80:	9e 81       	ldd	r25, Y+6	; 0x06
    4d82:	19 16       	cp	r1, r25
    4d84:	24 f4       	brge	.+8      	; 0x4d8e <mousekey_task+0x19c>
    4d86:	0e 94 4c 24 	call	0x4898	; 0x4898 <wheel_unit>
    4d8a:	80 93 70 03 	sts	0x0370, r24	; 0x800370 <mouse_report+0x4>
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;
    4d8e:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <mouse_report+0x4>
    4d92:	87 ff       	sbrs	r24, 7
    4d94:	05 c0       	rjmp	.+10     	; 0x4da0 <mousekey_task+0x1ae>
    4d96:	0e 94 4c 24 	call	0x4898	; 0x4898 <wheel_unit>
    4d9a:	81 95       	neg	r24
    4d9c:	80 93 70 03 	sts	0x0370, r24	; 0x800370 <mouse_report+0x4>
}
    4da0:	26 96       	adiw	r28, 0x06	; 6
    4da2:	0f b6       	in	r0, 0x3f	; 63
    4da4:	f8 94       	cli
    4da6:	de bf       	out	0x3e, r29	; 62
    4da8:	0f be       	out	0x3f, r0	; 63
    4daa:	cd bf       	out	0x3d, r28	; 61
    4dac:	df 91       	pop	r29
    4dae:	cf 91       	pop	r28
    4db0:	1f 91       	pop	r17
    mousekey_send();
    4db2:	0c 94 6c 25 	jmp	0x4ad8	; 0x4ad8 <mousekey_send>
    if (mousekey_repeat != UINT8_MAX)
    4db6:	8f 3f       	cpi	r24, 0xFF	; 255
    4db8:	09 f0       	breq	.+2      	; 0x4dbc <mousekey_task+0x1ca>
    4dba:	57 cf       	rjmp	.-338    	; 0x4c6a <mousekey_task+0x78>
    4dbc:	68 cf       	rjmp	.-304    	; 0x4c8e <mousekey_task+0x9c>

00004dbe <mousekey_clear>:
    mouse_report = (report_mouse_t){};
    4dbe:	85 e0       	ldi	r24, 0x05	; 5
    4dc0:	ec e6       	ldi	r30, 0x6C	; 108
    4dc2:	f3 e0       	ldi	r31, 0x03	; 3
    4dc4:	df 01       	movw	r26, r30
    4dc6:	1d 92       	st	X+, r1
    4dc8:	8a 95       	dec	r24
    4dca:	e9 f7       	brne	.-6      	; 0x4dc6 <mousekey_clear+0x8>
    mousekey_repeat = 0;
    4dcc:	10 92 6b 03 	sts	0x036B, r1	; 0x80036b <mousekey_repeat>
    mousekey_accel = 0;
    4dd0:	10 92 6a 03 	sts	0x036A, r1	; 0x80036a <mousekey_accel>
}
    4dd4:	08 95       	ret

00004dd6 <mousekey_console_help>:
    }
}

static void mousekey_console_help(void)
{
    print("\n\t- Mousekey -\n"
    4dd6:	80 e2       	ldi	r24, 0x20	; 32
    4dd8:	97 e0       	ldi	r25, 0x07	; 7
    4dda:	0e 94 1d 06 	call	0xc3a	; 0xc3a <xputs>
          "down:	-1\n"
          "pgup:	+10\n"
          "pgdown:	-10\n"
          "\n"
          "speed = delta * max_speed * (repeat / time_to_max)\n");
    xprintf("where delta: cursor=%d, wheel=%d\n" 
    4dde:	1f 92       	push	r1
    4de0:	81 e0       	ldi	r24, 0x01	; 1
    4de2:	8f 93       	push	r24
    4de4:	1f 92       	push	r1
    4de6:	85 e0       	ldi	r24, 0x05	; 5
    4de8:	8f 93       	push	r24
    4dea:	82 ed       	ldi	r24, 0xD2	; 210
    4dec:	96 e0       	ldi	r25, 0x06	; 6
    4dee:	9f 93       	push	r25
    4df0:	8f 93       	push	r24
    4df2:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__xprintf>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}
    4df6:	0f 90       	pop	r0
    4df8:	0f 90       	pop	r0
    4dfa:	0f 90       	pop	r0
    4dfc:	0f 90       	pop	r0
    4dfe:	0f 90       	pop	r0
    4e00:	0f 90       	pop	r0
    4e02:	08 95       	ret

00004e04 <mousekey_param_inc>:
    switch (param) {
    4e04:	84 30       	cpi	r24, 0x04	; 4
    4e06:	09 f4       	brne	.+2      	; 0x4e0a <mousekey_param_inc+0x6>
    4e08:	5d c0       	rjmp	.+186    	; 0x4ec4 <mousekey_param_inc+0xc0>
    4e0a:	40 f4       	brcc	.+16     	; 0x4e1c <mousekey_param_inc+0x18>
    4e0c:	82 30       	cpi	r24, 0x02	; 2
    4e0e:	61 f1       	breq	.+88     	; 0x4e68 <mousekey_param_inc+0x64>
    4e10:	83 30       	cpi	r24, 0x03	; 3
    4e12:	09 f4       	brne	.+2      	; 0x4e16 <mousekey_param_inc+0x12>
    4e14:	40 c0       	rjmp	.+128    	; 0x4e96 <mousekey_param_inc+0x92>
    4e16:	81 30       	cpi	r24, 0x01	; 1
    4e18:	41 f0       	breq	.+16     	; 0x4e2a <mousekey_param_inc+0x26>
    4e1a:	08 95       	ret
    4e1c:	85 30       	cpi	r24, 0x05	; 5
    4e1e:	09 f4       	brne	.+2      	; 0x4e22 <mousekey_param_inc+0x1e>
    4e20:	68 c0       	rjmp	.+208    	; 0x4ef2 <mousekey_param_inc+0xee>
    4e22:	86 30       	cpi	r24, 0x06	; 6
    4e24:	09 f4       	brne	.+2      	; 0x4e28 <mousekey_param_inc+0x24>
    4e26:	7c c0       	rjmp	.+248    	; 0x4f20 <mousekey_param_inc+0x11c>
    4e28:	08 95       	ret
            if (mk_delay + inc < UINT8_MAX)
    4e2a:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <mk_delay>
    4e2e:	48 2f       	mov	r20, r24
    4e30:	46 0f       	add	r20, r22
    4e32:	55 27       	eor	r21, r21
    4e34:	55 1f       	adc	r21, r21
    4e36:	4f 3f       	cpi	r20, 0xFF	; 255
    4e38:	51 05       	cpc	r21, r1
    4e3a:	94 f4       	brge	.+36     	; 0x4e60 <mousekey_param_inc+0x5c>
                mk_delay += inc;
    4e3c:	68 0f       	add	r22, r24
    4e3e:	60 93 2b 01 	sts	0x012B, r22	; 0x80012b <mk_delay>
            PRINT_SET_VAL(mk_delay);
    4e42:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <mk_delay>
    4e46:	1f 92       	push	r1
    4e48:	8f 93       	push	r24
    4e4a:	8b e0       	ldi	r24, 0x0B	; 11
    4e4c:	96 e0       	ldi	r25, 0x06	; 6
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4e4e:	9f 93       	push	r25
    4e50:	8f 93       	push	r24
    4e52:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__xprintf>
            break;
    4e56:	0f 90       	pop	r0
    4e58:	0f 90       	pop	r0
    4e5a:	0f 90       	pop	r0
    4e5c:	0f 90       	pop	r0
}
    4e5e:	08 95       	ret
                mk_delay = UINT8_MAX;
    4e60:	8f ef       	ldi	r24, 0xFF	; 255
    4e62:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <mk_delay>
    4e66:	ed cf       	rjmp	.-38     	; 0x4e42 <mousekey_param_inc+0x3e>
            if (mk_interval + inc < UINT8_MAX)
    4e68:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <mk_interval>
    4e6c:	48 2f       	mov	r20, r24
    4e6e:	46 0f       	add	r20, r22
    4e70:	55 27       	eor	r21, r21
    4e72:	55 1f       	adc	r21, r21
    4e74:	4f 3f       	cpi	r20, 0xFF	; 255
    4e76:	51 05       	cpc	r21, r1
    4e78:	54 f4       	brge	.+20     	; 0x4e8e <mousekey_param_inc+0x8a>
                mk_interval += inc;
    4e7a:	68 0f       	add	r22, r24
    4e7c:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <mk_interval>
            PRINT_SET_VAL(mk_interval);
    4e80:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <mk_interval>
    4e84:	1f 92       	push	r1
    4e86:	8f 93       	push	r24
    4e88:	89 ef       	ldi	r24, 0xF9	; 249
    4e8a:	95 e0       	ldi	r25, 0x05	; 5
    4e8c:	e0 cf       	rjmp	.-64     	; 0x4e4e <mousekey_param_inc+0x4a>
                mk_interval = UINT8_MAX;
    4e8e:	8f ef       	ldi	r24, 0xFF	; 255
    4e90:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <mk_interval>
    4e94:	f5 cf       	rjmp	.-22     	; 0x4e80 <mousekey_param_inc+0x7c>
            if (mk_max_speed + inc < UINT8_MAX)
    4e96:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <mk_max_speed>
    4e9a:	48 2f       	mov	r20, r24
    4e9c:	46 0f       	add	r20, r22
    4e9e:	55 27       	eor	r21, r21
    4ea0:	55 1f       	adc	r21, r21
    4ea2:	4f 3f       	cpi	r20, 0xFF	; 255
    4ea4:	51 05       	cpc	r21, r1
    4ea6:	54 f4       	brge	.+20     	; 0x4ebc <mousekey_param_inc+0xb8>
                mk_max_speed += inc;
    4ea8:	68 0f       	add	r22, r24
    4eaa:	60 93 29 01 	sts	0x0129, r22	; 0x800129 <mk_max_speed>
            PRINT_SET_VAL(mk_max_speed);
    4eae:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <mk_max_speed>
    4eb2:	1f 92       	push	r1
    4eb4:	8f 93       	push	r24
    4eb6:	86 ee       	ldi	r24, 0xE6	; 230
    4eb8:	95 e0       	ldi	r25, 0x05	; 5
    4eba:	c9 cf       	rjmp	.-110    	; 0x4e4e <mousekey_param_inc+0x4a>
                mk_max_speed = UINT8_MAX;
    4ebc:	8f ef       	ldi	r24, 0xFF	; 255
    4ebe:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <mk_max_speed>
    4ec2:	f5 cf       	rjmp	.-22     	; 0x4eae <mousekey_param_inc+0xaa>
            if (mk_time_to_max + inc < UINT8_MAX)
    4ec4:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <mk_time_to_max>
    4ec8:	48 2f       	mov	r20, r24
    4eca:	46 0f       	add	r20, r22
    4ecc:	55 27       	eor	r21, r21
    4ece:	55 1f       	adc	r21, r21
    4ed0:	4f 3f       	cpi	r20, 0xFF	; 255
    4ed2:	51 05       	cpc	r21, r1
    4ed4:	54 f4       	brge	.+20     	; 0x4eea <mousekey_param_inc+0xe6>
                mk_time_to_max += inc;
    4ed6:	68 0f       	add	r22, r24
    4ed8:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <mk_time_to_max>
            PRINT_SET_VAL(mk_time_to_max);
    4edc:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <mk_time_to_max>
    4ee0:	1f 92       	push	r1
    4ee2:	8f 93       	push	r24
    4ee4:	81 ed       	ldi	r24, 0xD1	; 209
    4ee6:	95 e0       	ldi	r25, 0x05	; 5
    4ee8:	b2 cf       	rjmp	.-156    	; 0x4e4e <mousekey_param_inc+0x4a>
                mk_time_to_max = UINT8_MAX;
    4eea:	8f ef       	ldi	r24, 0xFF	; 255
    4eec:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <mk_time_to_max>
    4ef0:	f5 cf       	rjmp	.-22     	; 0x4edc <mousekey_param_inc+0xd8>
            if (mk_wheel_max_speed + inc < UINT8_MAX)
    4ef2:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <mk_wheel_max_speed>
    4ef6:	48 2f       	mov	r20, r24
    4ef8:	46 0f       	add	r20, r22
    4efa:	55 27       	eor	r21, r21
    4efc:	55 1f       	adc	r21, r21
    4efe:	4f 3f       	cpi	r20, 0xFF	; 255
    4f00:	51 05       	cpc	r21, r1
    4f02:	54 f4       	brge	.+20     	; 0x4f18 <mousekey_param_inc+0x114>
                mk_wheel_max_speed += inc;
    4f04:	68 0f       	add	r22, r24
    4f06:	60 93 27 01 	sts	0x0127, r22	; 0x800127 <mk_wheel_max_speed>
            PRINT_SET_VAL(mk_wheel_max_speed);
    4f0a:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <mk_wheel_max_speed>
    4f0e:	1f 92       	push	r1
    4f10:	8f 93       	push	r24
    4f12:	88 eb       	ldi	r24, 0xB8	; 184
    4f14:	95 e0       	ldi	r25, 0x05	; 5
    4f16:	9b cf       	rjmp	.-202    	; 0x4e4e <mousekey_param_inc+0x4a>
                mk_wheel_max_speed = UINT8_MAX;
    4f18:	8f ef       	ldi	r24, 0xFF	; 255
    4f1a:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <mk_wheel_max_speed>
    4f1e:	f5 cf       	rjmp	.-22     	; 0x4f0a <mousekey_param_inc+0x106>
            if (mk_wheel_time_to_max + inc < UINT8_MAX)
    4f20:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <mk_wheel_time_to_max>
    4f24:	48 2f       	mov	r20, r24
    4f26:	46 0f       	add	r20, r22
    4f28:	55 27       	eor	r21, r21
    4f2a:	55 1f       	adc	r21, r21
    4f2c:	4f 3f       	cpi	r20, 0xFF	; 255
    4f2e:	51 05       	cpc	r21, r1
    4f30:	54 f4       	brge	.+20     	; 0x4f46 <mousekey_param_inc+0x142>
                mk_wheel_time_to_max += inc;
    4f32:	68 0f       	add	r22, r24
    4f34:	60 93 26 01 	sts	0x0126, r22	; 0x800126 <mk_wheel_time_to_max>
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4f38:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <mk_wheel_time_to_max>
    4f3c:	1f 92       	push	r1
    4f3e:	8f 93       	push	r24
    4f40:	8d e9       	ldi	r24, 0x9D	; 157
    4f42:	95 e0       	ldi	r25, 0x05	; 5
    4f44:	84 cf       	rjmp	.-248    	; 0x4e4e <mousekey_param_inc+0x4a>
                mk_wheel_time_to_max = UINT8_MAX;
    4f46:	8f ef       	ldi	r24, 0xFF	; 255
    4f48:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <mk_wheel_time_to_max>
    4f4c:	f5 cf       	rjmp	.-22     	; 0x4f38 <mousekey_param_inc+0x134>

00004f4e <mousekey_param_dec>:
    switch (param) {
    4f4e:	84 30       	cpi	r24, 0x04	; 4
    4f50:	09 f4       	brne	.+2      	; 0x4f54 <mousekey_param_dec+0x6>
    4f52:	4a c0       	rjmp	.+148    	; 0x4fe8 <mousekey_param_dec+0x9a>
    4f54:	38 f4       	brcc	.+14     	; 0x4f64 <mousekey_param_dec+0x16>
    4f56:	82 30       	cpi	r24, 0x02	; 2
    4f58:	29 f1       	breq	.+74     	; 0x4fa4 <mousekey_param_dec+0x56>
    4f5a:	83 30       	cpi	r24, 0x03	; 3
    4f5c:	a1 f1       	breq	.+104    	; 0x4fc6 <mousekey_param_dec+0x78>
    4f5e:	81 30       	cpi	r24, 0x01	; 1
    4f60:	41 f0       	breq	.+16     	; 0x4f72 <mousekey_param_dec+0x24>
    4f62:	08 95       	ret
    4f64:	85 30       	cpi	r24, 0x05	; 5
    4f66:	09 f4       	brne	.+2      	; 0x4f6a <mousekey_param_dec+0x1c>
    4f68:	50 c0       	rjmp	.+160    	; 0x500a <mousekey_param_dec+0xbc>
    4f6a:	86 30       	cpi	r24, 0x06	; 6
    4f6c:	09 f4       	brne	.+2      	; 0x4f70 <mousekey_param_dec+0x22>
    4f6e:	5e c0       	rjmp	.+188    	; 0x502c <mousekey_param_dec+0xde>
    4f70:	08 95       	ret
            if (mk_delay > dec)
    4f72:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <mk_delay>
    4f76:	68 17       	cp	r22, r24
    4f78:	90 f4       	brcc	.+36     	; 0x4f9e <mousekey_param_dec+0x50>
                mk_delay -= dec;
    4f7a:	86 1b       	sub	r24, r22
    4f7c:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <mk_delay>
            PRINT_SET_VAL(mk_delay);
    4f80:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <mk_delay>
    4f84:	1f 92       	push	r1
    4f86:	8f 93       	push	r24
    4f88:	8e e8       	ldi	r24, 0x8E	; 142
    4f8a:	95 e0       	ldi	r25, 0x05	; 5
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4f8c:	9f 93       	push	r25
    4f8e:	8f 93       	push	r24
    4f90:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__xprintf>
            break;
    4f94:	0f 90       	pop	r0
    4f96:	0f 90       	pop	r0
    4f98:	0f 90       	pop	r0
    4f9a:	0f 90       	pop	r0
}
    4f9c:	08 95       	ret
                mk_delay = 0;
    4f9e:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <mk_delay>
    4fa2:	ee cf       	rjmp	.-36     	; 0x4f80 <mousekey_param_dec+0x32>
            if (mk_interval > dec)
    4fa4:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <mk_interval>
    4fa8:	68 17       	cp	r22, r24
    4faa:	50 f4       	brcc	.+20     	; 0x4fc0 <mousekey_param_dec+0x72>
                mk_interval -= dec;
    4fac:	86 1b       	sub	r24, r22
    4fae:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <mk_interval>
            PRINT_SET_VAL(mk_interval);
    4fb2:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <mk_interval>
    4fb6:	1f 92       	push	r1
    4fb8:	8f 93       	push	r24
    4fba:	8c e7       	ldi	r24, 0x7C	; 124
    4fbc:	95 e0       	ldi	r25, 0x05	; 5
    4fbe:	e6 cf       	rjmp	.-52     	; 0x4f8c <mousekey_param_dec+0x3e>
                mk_interval = 0;
    4fc0:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <mk_interval>
    4fc4:	f6 cf       	rjmp	.-20     	; 0x4fb2 <mousekey_param_dec+0x64>
            if (mk_max_speed > dec)
    4fc6:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <mk_max_speed>
    4fca:	68 17       	cp	r22, r24
    4fcc:	50 f4       	brcc	.+20     	; 0x4fe2 <mousekey_param_dec+0x94>
                mk_max_speed -= dec;
    4fce:	86 1b       	sub	r24, r22
    4fd0:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <mk_max_speed>
            PRINT_SET_VAL(mk_max_speed);
    4fd4:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <mk_max_speed>
    4fd8:	1f 92       	push	r1
    4fda:	8f 93       	push	r24
    4fdc:	89 e6       	ldi	r24, 0x69	; 105
    4fde:	95 e0       	ldi	r25, 0x05	; 5
    4fe0:	d5 cf       	rjmp	.-86     	; 0x4f8c <mousekey_param_dec+0x3e>
                mk_max_speed = 0;
    4fe2:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <mk_max_speed>
    4fe6:	f6 cf       	rjmp	.-20     	; 0x4fd4 <mousekey_param_dec+0x86>
            if (mk_time_to_max > dec)
    4fe8:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <mk_time_to_max>
    4fec:	68 17       	cp	r22, r24
    4fee:	50 f4       	brcc	.+20     	; 0x5004 <mousekey_param_dec+0xb6>
                mk_time_to_max -= dec;
    4ff0:	86 1b       	sub	r24, r22
    4ff2:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <mk_time_to_max>
            PRINT_SET_VAL(mk_time_to_max);
    4ff6:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <mk_time_to_max>
    4ffa:	1f 92       	push	r1
    4ffc:	8f 93       	push	r24
    4ffe:	84 e5       	ldi	r24, 0x54	; 84
    5000:	95 e0       	ldi	r25, 0x05	; 5
    5002:	c4 cf       	rjmp	.-120    	; 0x4f8c <mousekey_param_dec+0x3e>
                mk_time_to_max = 0;
    5004:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <mk_time_to_max>
    5008:	f6 cf       	rjmp	.-20     	; 0x4ff6 <mousekey_param_dec+0xa8>
            if (mk_wheel_max_speed > dec)
    500a:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <mk_wheel_max_speed>
    500e:	68 17       	cp	r22, r24
    5010:	50 f4       	brcc	.+20     	; 0x5026 <mousekey_param_dec+0xd8>
                mk_wheel_max_speed -= dec;
    5012:	86 1b       	sub	r24, r22
    5014:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <mk_wheel_max_speed>
            PRINT_SET_VAL(mk_wheel_max_speed);
    5018:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <mk_wheel_max_speed>
    501c:	1f 92       	push	r1
    501e:	8f 93       	push	r24
    5020:	8b e3       	ldi	r24, 0x3B	; 59
    5022:	95 e0       	ldi	r25, 0x05	; 5
    5024:	b3 cf       	rjmp	.-154    	; 0x4f8c <mousekey_param_dec+0x3e>
                mk_wheel_max_speed = 0;
    5026:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <mk_wheel_max_speed>
    502a:	f6 cf       	rjmp	.-20     	; 0x5018 <mousekey_param_dec+0xca>
            if (mk_wheel_time_to_max > dec)
    502c:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <mk_wheel_time_to_max>
    5030:	68 17       	cp	r22, r24
    5032:	50 f4       	brcc	.+20     	; 0x5048 <mousekey_param_dec+0xfa>
                mk_wheel_time_to_max -= dec;
    5034:	86 1b       	sub	r24, r22
    5036:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <mk_wheel_time_to_max>
            PRINT_SET_VAL(mk_wheel_time_to_max);
    503a:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <mk_wheel_time_to_max>
    503e:	1f 92       	push	r1
    5040:	8f 93       	push	r24
    5042:	80 e2       	ldi	r24, 0x20	; 32
    5044:	95 e0       	ldi	r25, 0x05	; 5
    5046:	a2 cf       	rjmp	.-188    	; 0x4f8c <mousekey_param_dec+0x3e>
                mk_wheel_time_to_max = 0;
    5048:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <mk_wheel_time_to_max>
    504c:	f6 cf       	rjmp	.-20     	; 0x503a <mousekey_param_dec+0xec>

0000504e <switch_default_layer>:
    return 0;
}
#endif

static void switch_default_layer(uint8_t layer)
{
    504e:	cf 93       	push	r28
    5050:	df 93       	push	r29
    5052:	00 d0       	rcall	.+0      	; 0x5054 <switch_default_layer+0x6>
    5054:	00 d0       	rcall	.+0      	; 0x5056 <switch_default_layer+0x8>
    5056:	cd b7       	in	r28, 0x3d	; 61
    5058:	de b7       	in	r29, 0x3e	; 62
    505a:	89 83       	std	Y+1, r24	; 0x01
    xprintf("L%d\n", layer);
    505c:	1f 92       	push	r1
    505e:	8f 93       	push	r24
    5060:	85 e2       	ldi	r24, 0x25	; 37
    5062:	98 e0       	ldi	r25, 0x08	; 8
    5064:	9f 93       	push	r25
    5066:	8f 93       	push	r24
    5068:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__xprintf>
    default_layer_set(1UL<<layer);
    506c:	81 e0       	ldi	r24, 0x01	; 1
    506e:	90 e0       	ldi	r25, 0x00	; 0
    5070:	a0 e0       	ldi	r26, 0x00	; 0
    5072:	b0 e0       	ldi	r27, 0x00	; 0
    5074:	9c 01       	movw	r18, r24
    5076:	ad 01       	movw	r20, r26
    5078:	09 80       	ldd	r0, Y+1	; 0x01
    507a:	04 c0       	rjmp	.+8      	; 0x5084 <switch_default_layer+0x36>
    507c:	22 0f       	add	r18, r18
    507e:	33 1f       	adc	r19, r19
    5080:	44 1f       	adc	r20, r20
    5082:	55 1f       	adc	r21, r21
    5084:	0a 94       	dec	r0
    5086:	d2 f7       	brpl	.-12     	; 0x507c <switch_default_layer+0x2e>
    5088:	29 83       	std	Y+1, r18	; 0x01
    508a:	3a 83       	std	Y+2, r19	; 0x02
    508c:	4b 83       	std	Y+3, r20	; 0x03
    508e:	5c 83       	std	Y+4, r21	; 0x04
    5090:	ca 01       	movw	r24, r20
    5092:	b9 01       	movw	r22, r18
    5094:	0e 94 74 1f 	call	0x3ee8	; 0x3ee8 <default_layer_set>
    clear_keyboard();
    5098:	0f 90       	pop	r0
    509a:	0f 90       	pop	r0
    509c:	0f 90       	pop	r0
    509e:	0f 90       	pop	r0
}
    50a0:	0f 90       	pop	r0
    50a2:	0f 90       	pop	r0
    50a4:	0f 90       	pop	r0
    50a6:	0f 90       	pop	r0
    50a8:	df 91       	pop	r29
    50aa:	cf 91       	pop	r28
    clear_keyboard();
    50ac:	0c 94 7e 1b 	jmp	0x36fc	; 0x36fc <clear_keyboard>

000050b0 <command_common>:
    switch (code) {
    50b0:	8a 32       	cpi	r24, 0x2A	; 42
    50b2:	58 f4       	brcc	.+22     	; 0x50ca <command_common+0x1a>
    50b4:	86 30       	cpi	r24, 0x06	; 6
    50b6:	98 f0       	brcs	.+38     	; 0x50de <command_common+0x2e>
    50b8:	ea ef       	ldi	r30, 0xFA	; 250
    50ba:	e8 0f       	add	r30, r24
    50bc:	e4 32       	cpi	r30, 0x24	; 36
    50be:	78 f4       	brcc	.+30     	; 0x50de <command_common+0x2e>
    50c0:	f0 e0       	ldi	r31, 0x00	; 0
    50c2:	ec 55       	subi	r30, 0x5C	; 92
    50c4:	fa 4f       	sbci	r31, 0xFA	; 250
    50c6:	0c 94 d1 2b 	jmp	0x57a2	; 0x57a2 <__tablejump2__>
    50ca:	83 34       	cpi	r24, 0x43	; 67
    50cc:	70 f4       	brcc	.+28     	; 0x50ea <command_common+0x3a>
    50ce:	8a 33       	cpi	r24, 0x3A	; 58
    50d0:	08 f0       	brcs	.+2      	; 0x50d4 <command_common+0x24>
    50d2:	d3 c0       	rjmp	.+422    	; 0x527a <command_common+0x1ca>
    50d4:	85 33       	cpi	r24, 0x35	; 53
    50d6:	09 f4       	brne	.+2      	; 0x50da <command_common+0x2a>
    50d8:	ca c0       	rjmp	.+404    	; 0x526e <command_common+0x1be>
    50da:	88 33       	cpi	r24, 0x38	; 56
    50dc:	f1 f0       	breq	.+60     	; 0x511a <command_common+0x6a>
            print("?");
    50de:	84 ee       	ldi	r24, 0xE4	; 228
    50e0:	98 e0       	ldi	r25, 0x08	; 8
    50e2:	0e 94 1d 06 	call	0xc3a	; 0xc3a <xputs>
            return false;
    50e6:	80 e0       	ldi	r24, 0x00	; 0
}
    50e8:	08 95       	ret
    switch (code) {
    50ea:	83 34       	cpi	r24, 0x43	; 67
    50ec:	09 f4       	brne	.+2      	; 0x50f0 <command_common+0x40>
    50ee:	bf c0       	rjmp	.+382    	; 0x526e <command_common+0x1be>
    50f0:	88 34       	cpi	r24, 0x48	; 72
    50f2:	a9 f7       	brne	.-22     	; 0x50de <command_common+0x2e>
            clear_keyboard();
    50f4:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <clear_keyboard>
            print("\n\nbootloader... ");
    50f8:	8a ec       	ldi	r24, 0xCA	; 202
    50fa:	9a e0       	ldi	r25, 0x0A	; 10
    50fc:	0e 94 1d 06 	call	0xc3a	; 0xc3a <xputs>
    5100:	2f ef       	ldi	r18, 0xFF	; 255
    5102:	83 ed       	ldi	r24, 0xD3	; 211
    5104:	90 e3       	ldi	r25, 0x30	; 48
    5106:	21 50       	subi	r18, 0x01	; 1
    5108:	80 40       	sbci	r24, 0x00	; 0
    510a:	90 40       	sbci	r25, 0x00	; 0
    510c:	e1 f7       	brne	.-8      	; 0x5106 <command_common+0x56>
    510e:	00 c0       	rjmp	.+0      	; 0x5110 <command_common+0x60>
    5110:	00 00       	nop
            bootloader_jump(); // not return
    5112:	0e 94 a1 23 	call	0x4742	; 0x4742 <bootloader_jump>
    return true;
    5116:	81 e0       	ldi	r24, 0x01	; 1
            break;
    5118:	08 95       	ret
    print("\n\t- Magic -\n"
    511a:	81 e5       	ldi	r24, 0x51	; 81
    511c:	98 e0       	ldi	r25, 0x08	; 8
            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
    511e:	0e 94 1d 06 	call	0xc3a	; 0xc3a <xputs>
            break;
    5122:	f9 cf       	rjmp	.-14     	; 0x5116 <command_common+0x66>
            debug_enable   = false;
    5124:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <debug_config>
    5128:	80 7f       	andi	r24, 0xF0	; 240
    512a:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <debug_config>
    print("\n\t- Console -\n"
    512e:	8a e2       	ldi	r24, 0x2A	; 42
    5130:	98 e0       	ldi	r25, 0x08	; 8
    5132:	0e 94 1d 06 	call	0xc3a	; 0xc3a <xputs>
            print("C> ");
    5136:	8b ed       	ldi	r24, 0xDB	; 219
    5138:	9a e0       	ldi	r25, 0x0A	; 10
    513a:	0e 94 1d 06 	call	0xc3a	; 0xc3a <xputs>
            command_state = CONSOLE;
    513e:	81 e0       	ldi	r24, 0x01	; 1
    5140:	80 93 72 03 	sts	0x0372, r24	; 0x800372 <command_state>
            break;
    5144:	08 95       	ret
            if (debug_enable) {
    5146:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <debug_config>
    514a:	80 ff       	sbrs	r24, 0
    514c:	0a c0       	rjmp	.+20     	; 0x5162 <command_common+0xb2>
                print("\ndebug: off\n");
    514e:	8d eb       	ldi	r24, 0xBD	; 189
    5150:	9a e0       	ldi	r25, 0x0A	; 10
    5152:	0e 94 1d 06 	call	0xc3a	; 0xc3a <xputs>
                debug_enable   = false;
    5156:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <debug_config>
    515a:	80 7f       	andi	r24, 0xF0	; 240
                debug_enable = true;
    515c:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <debug_config>
    5160:	da cf       	rjmp	.-76     	; 0x5116 <command_common+0x66>
                print("\ndebug: on\n");
    5162:	81 eb       	ldi	r24, 0xB1	; 177
    5164:	9a e0       	ldi	r25, 0x0A	; 10
                print("\nmouse: on\n");
    5166:	0e 94 1d 06 	call	0xc3a	; 0xc3a <xputs>
                debug_enable = true;
    516a:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <debug_config>
    516e:	81 60       	ori	r24, 0x01	; 1
    5170:	f5 cf       	rjmp	.-22     	; 0x515c <command_common+0xac>
            debug_matrix = !debug_matrix;
    5172:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <debug_config>
    5176:	89 2f       	mov	r24, r25
    5178:	8d 7f       	andi	r24, 0xFD	; 253
    517a:	91 ff       	sbrs	r25, 1
    517c:	82 60       	ori	r24, 0x02	; 2
    517e:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <debug_config>
            if (debug_matrix) {
    5182:	81 ff       	sbrs	r24, 1
    5184:	03 c0       	rjmp	.+6      	; 0x518c <command_common+0xdc>
                print("\nmatrix: on\n");
    5186:	84 ea       	ldi	r24, 0xA4	; 164
    5188:	9a e0       	ldi	r25, 0x0A	; 10
    518a:	ed cf       	rjmp	.-38     	; 0x5166 <command_common+0xb6>
                print("\nmatrix: off\n");
    518c:	86 e9       	ldi	r24, 0x96	; 150
    518e:	9a e0       	ldi	r25, 0x0A	; 10
    5190:	c6 cf       	rjmp	.-116    	; 0x511e <command_common+0x6e>
            debug_keyboard = !debug_keyboard;
    5192:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <debug_config>
    5196:	89 2f       	mov	r24, r25
    5198:	8b 7f       	andi	r24, 0xFB	; 251
    519a:	92 ff       	sbrs	r25, 2
    519c:	84 60       	ori	r24, 0x04	; 4
    519e:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <debug_config>
            if (debug_keyboard) {
    51a2:	82 ff       	sbrs	r24, 2
    51a4:	03 c0       	rjmp	.+6      	; 0x51ac <command_common+0xfc>
                print("\nkeyboard: on\n");
    51a6:	87 e8       	ldi	r24, 0x87	; 135
    51a8:	9a e0       	ldi	r25, 0x0A	; 10
    51aa:	dd cf       	rjmp	.-70     	; 0x5166 <command_common+0xb6>
                print("\nkeyboard: off\n");
    51ac:	87 e7       	ldi	r24, 0x77	; 119
    51ae:	9a e0       	ldi	r25, 0x0A	; 10
    51b0:	b6 cf       	rjmp	.-148    	; 0x511e <command_common+0x6e>
            debug_mouse = !debug_mouse;
    51b2:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <debug_config>
    51b6:	89 2f       	mov	r24, r25
    51b8:	87 7f       	andi	r24, 0xF7	; 247
    51ba:	93 ff       	sbrs	r25, 3
    51bc:	88 60       	ori	r24, 0x08	; 8
    51be:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <debug_config>
            if (debug_mouse) {
    51c2:	83 ff       	sbrs	r24, 3
    51c4:	03 c0       	rjmp	.+6      	; 0x51cc <command_common+0x11c>
                print("\nmouse: on\n");
    51c6:	8b e6       	ldi	r24, 0x6B	; 107
    51c8:	9a e0       	ldi	r25, 0x0A	; 10
    51ca:	cd cf       	rjmp	.-102    	; 0x5166 <command_common+0xb6>
                print("\nmouse: off\n");
    51cc:	8e e5       	ldi	r24, 0x5E	; 94
    51ce:	9a e0       	ldi	r25, 0x0A	; 10
    51d0:	a6 cf       	rjmp	.-180    	; 0x511e <command_common+0x6e>
            print("\n\t- Version -\n");
    51d2:	8f e4       	ldi	r24, 0x4F	; 79
    51d4:	9a e0       	ldi	r25, 0x0A	; 10
    51d6:	0e 94 1d 06 	call	0xc3a	; 0xc3a <xputs>
            print("DESC: " STR(DESCRIPTION) "\n");
    51da:	8c e2       	ldi	r24, 0x2C	; 44
    51dc:	9a e0       	ldi	r25, 0x0A	; 10
    51de:	0e 94 1d 06 	call	0xc3a	; 0xc3a <xputs>
            print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
    51e2:	87 ee       	ldi	r24, 0xE7	; 231
    51e4:	99 e0       	ldi	r25, 0x09	; 9
    51e6:	0e 94 1d 06 	call	0xc3a	; 0xc3a <xputs>
            print("BUILD: " STR(TMK_VERSION) " (" __TIME__ " " __DATE__ ")\n");
    51ea:	8f eb       	ldi	r24, 0xBF	; 191
    51ec:	99 e0       	ldi	r25, 0x09	; 9
    51ee:	0e 94 1d 06 	call	0xc3a	; 0xc3a <xputs>
            print("OPTIONS:"
    51f2:	8a e7       	ldi	r24, 0x7A	; 122
    51f4:	99 e0       	ldi	r25, 0x09	; 9
    51f6:	0e 94 1d 06 	call	0xc3a	; 0xc3a <xputs>
            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
    51fa:	8f e4       	ldi	r24, 0x4F	; 79
    51fc:	99 e0       	ldi	r25, 0x09	; 9
    51fe:	8f cf       	rjmp	.-226    	; 0x511e <command_common+0x6e>
            print("\n\t- Status -\n");
    5200:	81 e4       	ldi	r24, 0x41	; 65
    5202:	99 e0       	ldi	r25, 0x09	; 9
    5204:	0e 94 1d 06 	call	0xc3a	; 0xc3a <xputs>
            print_val_hex8(host_keyboard_leds());
    5208:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <host_keyboard_leds>
    520c:	1f 92       	push	r1
    520e:	8f 93       	push	r24
    5210:	87 e2       	ldi	r24, 0x27	; 39
    5212:	99 e0       	ldi	r25, 0x09	; 9
    5214:	9f 93       	push	r25
    5216:	8f 93       	push	r24
    5218:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__xprintf>
            print_val_hex8(keyboard_protocol);
    521c:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <keyboard_protocol>
    5220:	1f 92       	push	r1
    5222:	8f 93       	push	r24
    5224:	80 e1       	ldi	r24, 0x10	; 16
    5226:	99 e0       	ldi	r25, 0x09	; 9
    5228:	9f 93       	push	r25
    522a:	8f 93       	push	r24
    522c:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__xprintf>
            print_val_hex8(keyboard_idle);
    5230:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <keyboard_idle>
    5234:	1f 92       	push	r1
    5236:	8f 93       	push	r24
    5238:	8d ef       	ldi	r24, 0xFD	; 253
    523a:	98 e0       	ldi	r25, 0x08	; 8
    523c:	9f 93       	push	r25
    523e:	8f 93       	push	r24
    5240:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__xprintf>
            print_val_hex32(timer_read32());
    5244:	0e 94 39 23 	call	0x4672	; 0x4672 <timer_read32>
    5248:	9f 93       	push	r25
    524a:	8f 93       	push	r24
    524c:	7f 93       	push	r23
    524e:	6f 93       	push	r22
    5250:	86 ee       	ldi	r24, 0xE6	; 230
    5252:	98 e0       	ldi	r25, 0x08	; 8
    5254:	9f 93       	push	r25
    5256:	8f 93       	push	r24
    5258:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__xprintf>
            break;
    525c:	8d b7       	in	r24, 0x3d	; 61
    525e:	9e b7       	in	r25, 0x3e	; 62
    5260:	42 96       	adiw	r24, 0x12	; 18
    5262:	0f b6       	in	r0, 0x3f	; 63
    5264:	f8 94       	cli
    5266:	9e bf       	out	0x3e, r25	; 62
    5268:	0f be       	out	0x3f, r0	; 63
    526a:	8d bf       	out	0x3d, r24	; 61
    526c:	54 cf       	rjmp	.-344    	; 0x5116 <command_common+0x66>
            switch_default_layer(0);
    526e:	80 e0       	ldi	r24, 0x00	; 0
            switch_default_layer((code - KC_F1) + 1);
    5270:	0e 94 27 28 	call	0x504e	; 0x504e <switch_default_layer>
            break;
    5274:	50 cf       	rjmp	.-352    	; 0x5116 <command_common+0x66>
            switch_default_layer((code - KC_1) + 1);
    5276:	8d 51       	subi	r24, 0x1D	; 29
    5278:	fb cf       	rjmp	.-10     	; 0x5270 <command_common+0x1c0>
            switch_default_layer((code - KC_F1) + 1);
    527a:	89 53       	subi	r24, 0x39	; 57
    527c:	f9 cf       	rjmp	.-14     	; 0x5270 <command_common+0x1c0>

0000527e <command_extra>:
}
    527e:	80 e0       	ldi	r24, 0x00	; 0
    5280:	08 95       	ret

00005282 <command_console_extra>:
    5282:	0c 94 3f 29 	jmp	0x527e	; 0x527e <command_extra>

00005286 <command_proc>:
{
    5286:	cf 93       	push	r28
    5288:	c8 2f       	mov	r28, r24
    switch (command_state) {
    528a:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <command_state>
    528e:	81 30       	cpi	r24, 0x01	; 1
    5290:	b1 f0       	breq	.+44     	; 0x52be <command_proc+0x38>
    5292:	82 30       	cpi	r24, 0x02	; 2
    5294:	09 f4       	brne	.+2      	; 0x5298 <command_proc+0x12>
    5296:	49 c0       	rjmp	.+146    	; 0x532a <command_proc+0xa4>
    5298:	81 11       	cpse	r24, r1
    529a:	3a c1       	rjmp	.+628    	; 0x5510 <command_proc+0x28a>
            if (!IS_COMMAND())
    529c:	67 e0       	ldi	r22, 0x07	; 7
    529e:	8f e0       	ldi	r24, 0x0F	; 15
    52a0:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <matrix_is_on>
    52a4:	88 23       	and	r24, r24
    52a6:	49 f0       	breq	.+18     	; 0x52ba <command_proc+0x34>
                return (command_extra(code) || command_common(code));
    52a8:	8c 2f       	mov	r24, r28
    52aa:	0e 94 3f 29 	call	0x527e	; 0x527e <command_extra>
    52ae:	81 11       	cpse	r24, r1
    52b0:	1d c0       	rjmp	.+58     	; 0x52ec <command_proc+0x66>
    52b2:	8c 2f       	mov	r24, r28
    52b4:	0e 94 58 28 	call	0x50b0	; 0x50b0 <command_common>
                return (command_console_extra(code) || command_console(code));
    52b8:	81 70       	andi	r24, 0x01	; 1
}
    52ba:	cf 91       	pop	r28
    52bc:	08 95       	ret
            if (IS_COMMAND())
    52be:	67 e0       	ldi	r22, 0x07	; 7
    52c0:	8f e0       	ldi	r24, 0x0F	; 15
    52c2:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <matrix_is_on>
    52c6:	81 11       	cpse	r24, r1
    52c8:	ef cf       	rjmp	.-34     	; 0x52a8 <command_proc+0x22>
                return (command_console_extra(code) || command_console(code));
    52ca:	8c 2f       	mov	r24, r28
    52cc:	0e 94 41 29 	call	0x5282	; 0x5282 <command_console_extra>
    52d0:	81 11       	cpse	r24, r1
    52d2:	1b c0       	rjmp	.+54     	; 0x530a <command_proc+0x84>
    switch (code) {
    52d4:	c4 31       	cpi	r28, 0x14	; 20
    52d6:	d9 f0       	breq	.+54     	; 0x530e <command_proc+0x88>
    52d8:	60 f4       	brcc	.+24     	; 0x52f2 <command_proc+0x6c>
    52da:	cb 30       	cpi	r28, 0x0B	; 11
    52dc:	71 f0       	breq	.+28     	; 0x52fa <command_proc+0x74>
    52de:	c0 31       	cpi	r28, 0x10	; 16
    52e0:	d1 f0       	breq	.+52     	; 0x5316 <command_proc+0x90>
            print("?");
    52e2:	8b e1       	ldi	r24, 0x1B	; 27
    52e4:	98 e0       	ldi	r25, 0x08	; 8
    52e6:	0e 94 1d 06 	call	0xc3a	; 0xc3a <xputs>
    52ea:	13 c0       	rjmp	.+38     	; 0x5312 <command_proc+0x8c>
                return (command_extra(code) || command_common(code));
    52ec:	81 e0       	ldi	r24, 0x01	; 1
    52ee:	90 e0       	ldi	r25, 0x00	; 0
    52f0:	e3 cf       	rjmp	.-58     	; 0x52b8 <command_proc+0x32>
    switch (code) {
    52f2:	c9 32       	cpi	r28, 0x29	; 41
    52f4:	61 f0       	breq	.+24     	; 0x530e <command_proc+0x88>
    52f6:	c8 33       	cpi	r28, 0x38	; 56
    52f8:	a1 f7       	brne	.-24     	; 0x52e2 <command_proc+0x5c>
    print("\n\t- Console -\n"
    52fa:	8a e2       	ldi	r24, 0x2A	; 42
    52fc:	98 e0       	ldi	r25, 0x08	; 8
    52fe:	0e 94 1d 06 	call	0xc3a	; 0xc3a <xputs>
    print("C> ");
    5302:	81 e2       	ldi	r24, 0x21	; 33
    5304:	98 e0       	ldi	r25, 0x08	; 8
    5306:	0e 94 1d 06 	call	0xc3a	; 0xc3a <xputs>
                return (command_console_extra(code) || command_console(code));
    530a:	81 e0       	ldi	r24, 0x01	; 1
    530c:	d5 cf       	rjmp	.-86     	; 0x52b8 <command_proc+0x32>
            command_state = ONESHOT;
    530e:	10 92 72 03 	sts	0x0372, r1	; 0x800372 <command_state>
                return (command_console_extra(code) || command_console(code));
    5312:	80 e0       	ldi	r24, 0x00	; 0
    5314:	d1 cf       	rjmp	.-94     	; 0x52b8 <command_proc+0x32>
            mousekey_console_help();
    5316:	0e 94 eb 26 	call	0x4dd6	; 0x4dd6 <mousekey_console_help>
            print("M> ");
    531a:	8d e1       	ldi	r24, 0x1D	; 29
    531c:	98 e0       	ldi	r25, 0x08	; 8
    531e:	0e 94 1d 06 	call	0xc3a	; 0xc3a <xputs>
            command_state = MOUSEKEY;
    5322:	82 e0       	ldi	r24, 0x02	; 2
    5324:	80 93 72 03 	sts	0x0372, r24	; 0x800372 <command_state>
            return true;
    5328:	f0 cf       	rjmp	.-32     	; 0x530a <command_proc+0x84>
    switch (code) {
    532a:	c9 32       	cpi	r28, 0x29	; 41
    532c:	09 f4       	brne	.+2      	; 0x5330 <command_proc+0xaa>
    532e:	46 c0       	rjmp	.+140    	; 0x53bc <command_proc+0x136>
    5330:	68 f5       	brcc	.+90     	; 0x538c <command_proc+0x106>
    5332:	c3 31       	cpi	r28, 0x13	; 19
    5334:	09 f4       	brne	.+2      	; 0x5338 <command_proc+0xb2>
    5336:	51 c0       	rjmp	.+162    	; 0x53da <command_proc+0x154>
    5338:	50 f4       	brcc	.+20     	; 0x534e <command_proc+0xc8>
    533a:	c7 30       	cpi	r28, 0x07	; 7
    533c:	09 f4       	brne	.+2      	; 0x5340 <command_proc+0xba>
    533e:	ce c0       	rjmp	.+412    	; 0x54dc <command_proc+0x256>
    5340:	cb 30       	cpi	r28, 0x0B	; 11
    5342:	c9 f1       	breq	.+114    	; 0x53b6 <command_proc+0x130>
            print("?");
    5344:	8f eb       	ldi	r24, 0xBF	; 191
    5346:	96 e0       	ldi	r25, 0x06	; 6
        print("M>" );
    5348:	0e 94 1d 06 	call	0xc3a	; 0xc3a <xputs>
    534c:	1d c0       	rjmp	.+58     	; 0x5388 <command_proc+0x102>
    switch (code) {
    534e:	c4 31       	cpi	r28, 0x14	; 20
    5350:	a9 f1       	breq	.+106    	; 0x53bc <command_proc+0x136>
    5352:	ce 51       	subi	r28, 0x1E	; 30
    5354:	c6 30       	cpi	r28, 0x06	; 6
    5356:	b0 f7       	brcc	.-20     	; 0x5344 <command_proc+0xbe>
            mousekey_param = numkey2num(code);
    5358:	ec 2f       	mov	r30, r28
    535a:	f0 e0       	ldi	r31, 0x00	; 0
    535c:	e9 5b       	subi	r30, 0xB9	; 185
    535e:	fe 4f       	sbci	r31, 0xFE	; 254
    5360:	80 81       	ld	r24, Z
    5362:	80 93 71 03 	sts	0x0371, r24	; 0x800371 <mousekey_param>
    if (mousekey_param) {
    5366:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <mousekey_param>
    536a:	88 23       	and	r24, r24
    536c:	09 f4       	brne	.+2      	; 0x5370 <command_proc+0xea>
    536e:	cd c0       	rjmp	.+410    	; 0x550a <command_proc+0x284>
        xprintf("M%d> ", mousekey_param);
    5370:	1f 92       	push	r1
    5372:	8f 93       	push	r24
    5374:	89 eb       	ldi	r24, 0xB9	; 185
    5376:	96 e0       	ldi	r25, 0x06	; 6
    5378:	9f 93       	push	r25
    537a:	8f 93       	push	r24
    537c:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__xprintf>
    5380:	0f 90       	pop	r0
    5382:	0f 90       	pop	r0
    5384:	0f 90       	pop	r0
    5386:	0f 90       	pop	r0
    return true;
    5388:	81 e0       	ldi	r24, 0x01	; 1
    538a:	97 cf       	rjmp	.-210    	; 0x52ba <command_proc+0x34>
    switch (code) {
    538c:	ce 34       	cpi	r28, 0x4E	; 78
    538e:	09 f4       	brne	.+2      	; 0x5392 <command_proc+0x10c>
    5390:	a3 c0       	rjmp	.+326    	; 0x54d8 <command_proc+0x252>
    5392:	50 f4       	brcc	.+20     	; 0x53a8 <command_proc+0x122>
    5394:	c8 33       	cpi	r28, 0x38	; 56
    5396:	79 f0       	breq	.+30     	; 0x53b6 <command_proc+0x130>
            mousekey_param_inc(mousekey_param, 10);
    5398:	6a e0       	ldi	r22, 0x0A	; 10
    switch (code) {
    539a:	cb 34       	cpi	r28, 0x4B	; 75
    539c:	99 f6       	brne	.-90     	; 0x5344 <command_proc+0xbe>
            mousekey_param_inc(mousekey_param, 10);
    539e:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <mousekey_param>
    53a2:	0e 94 02 27 	call	0x4e04	; 0x4e04 <mousekey_param_inc>
            break;
    53a6:	df cf       	rjmp	.-66     	; 0x5366 <command_proc+0xe0>
    switch (code) {
    53a8:	c1 35       	cpi	r28, 0x51	; 81
    53aa:	09 f4       	brne	.+2      	; 0x53ae <command_proc+0x128>
    53ac:	8f c0       	rjmp	.+286    	; 0x54cc <command_proc+0x246>
            mousekey_param_inc(mousekey_param, 1);
    53ae:	61 e0       	ldi	r22, 0x01	; 1
    switch (code) {
    53b0:	c2 35       	cpi	r28, 0x52	; 82
    53b2:	a9 f3       	breq	.-22     	; 0x539e <command_proc+0x118>
    53b4:	c7 cf       	rjmp	.-114    	; 0x5344 <command_proc+0xbe>
            mousekey_console_help();
    53b6:	0e 94 eb 26 	call	0x4dd6	; 0x4dd6 <mousekey_console_help>
            break;
    53ba:	d5 cf       	rjmp	.-86     	; 0x5366 <command_proc+0xe0>
            if (mousekey_param) {
    53bc:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <mousekey_param>
    53c0:	88 23       	and	r24, r24
    53c2:	19 f0       	breq	.+6      	; 0x53ca <command_proc+0x144>
                mousekey_param = 0;
    53c4:	10 92 71 03 	sts	0x0371, r1	; 0x800371 <mousekey_param>
            break;
    53c8:	ce cf       	rjmp	.-100    	; 0x5366 <command_proc+0xe0>
                print("C> ");
    53ca:	8e ec       	ldi	r24, 0xCE	; 206
    53cc:	96 e0       	ldi	r25, 0x06	; 6
    53ce:	0e 94 1d 06 	call	0xc3a	; 0xc3a <xputs>
                command_state = CONSOLE;
    53d2:	81 e0       	ldi	r24, 0x01	; 1
    53d4:	80 93 72 03 	sts	0x0372, r24	; 0x800372 <command_state>
                return false;
    53d8:	70 cf       	rjmp	.-288    	; 0x52ba <command_proc+0x34>
    print("\n\t- Values -\n");
    53da:	88 ea       	ldi	r24, 0xA8	; 168
    53dc:	96 e0       	ldi	r25, 0x06	; 6
    53de:	0e 94 1d 06 	call	0xc3a	; 0xc3a <xputs>
    print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
    53e2:	86 e9       	ldi	r24, 0x96	; 150
    53e4:	96 e0       	ldi	r25, 0x06	; 6
    53e6:	0e 94 1d 06 	call	0xc3a	; 0xc3a <xputs>
    53ea:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <mk_delay>
    53ee:	1f 92       	push	r1
    53f0:	8f 93       	push	r24
    53f2:	83 e9       	ldi	r24, 0x93	; 147
    53f4:	96 e0       	ldi	r25, 0x06	; 6
    53f6:	9f 93       	push	r25
    53f8:	8f 93       	push	r24
    53fa:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__xprintf>
    53fe:	81 e9       	ldi	r24, 0x91	; 145
    5400:	96 e0       	ldi	r25, 0x06	; 6
    5402:	0e 94 1d 06 	call	0xc3a	; 0xc3a <xputs>
    print("2: interval(ms): "); pdec(mk_interval); print("\n");
    5406:	8f e7       	ldi	r24, 0x7F	; 127
    5408:	96 e0       	ldi	r25, 0x06	; 6
    540a:	0e 94 1d 06 	call	0xc3a	; 0xc3a <xputs>
    540e:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <mk_interval>
    5412:	1f 92       	push	r1
    5414:	8f 93       	push	r24
    5416:	8c e7       	ldi	r24, 0x7C	; 124
    5418:	96 e0       	ldi	r25, 0x06	; 6
    541a:	9f 93       	push	r25
    541c:	8f 93       	push	r24
    541e:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__xprintf>
    5422:	8a e7       	ldi	r24, 0x7A	; 122
    5424:	96 e0       	ldi	r25, 0x06	; 6
    5426:	0e 94 1d 06 	call	0xc3a	; 0xc3a <xputs>
    print("3: max_speed: "); pdec(mk_max_speed); print("\n");
    542a:	8b e6       	ldi	r24, 0x6B	; 107
    542c:	96 e0       	ldi	r25, 0x06	; 6
    542e:	0e 94 1d 06 	call	0xc3a	; 0xc3a <xputs>
    5432:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <mk_max_speed>
    5436:	1f 92       	push	r1
    5438:	8f 93       	push	r24
    543a:	88 e6       	ldi	r24, 0x68	; 104
    543c:	96 e0       	ldi	r25, 0x06	; 6
    543e:	9f 93       	push	r25
    5440:	8f 93       	push	r24
    5442:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__xprintf>
    5446:	86 e6       	ldi	r24, 0x66	; 102
    5448:	96 e0       	ldi	r25, 0x06	; 6
    544a:	0e 94 1d 06 	call	0xc3a	; 0xc3a <xputs>
    print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
    544e:	85 e5       	ldi	r24, 0x55	; 85
    5450:	96 e0       	ldi	r25, 0x06	; 6
    5452:	0e 94 1d 06 	call	0xc3a	; 0xc3a <xputs>
    5456:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <mk_time_to_max>
    545a:	1f 92       	push	r1
    545c:	8f 93       	push	r24
    545e:	82 e5       	ldi	r24, 0x52	; 82
    5460:	96 e0       	ldi	r25, 0x06	; 6
    5462:	9f 93       	push	r25
    5464:	8f 93       	push	r24
    5466:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__xprintf>
    546a:	80 e5       	ldi	r24, 0x50	; 80
    546c:	96 e0       	ldi	r25, 0x06	; 6
    546e:	0e 94 1d 06 	call	0xc3a	; 0xc3a <xputs>
    print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
    5472:	8b e3       	ldi	r24, 0x3B	; 59
    5474:	96 e0       	ldi	r25, 0x06	; 6
    5476:	0e 94 1d 06 	call	0xc3a	; 0xc3a <xputs>
    547a:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <mk_wheel_max_speed>
    547e:	1f 92       	push	r1
    5480:	8f 93       	push	r24
    5482:	88 e3       	ldi	r24, 0x38	; 56
    5484:	96 e0       	ldi	r25, 0x06	; 6
    5486:	9f 93       	push	r25
    5488:	8f 93       	push	r24
    548a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__xprintf>
    548e:	86 e3       	ldi	r24, 0x36	; 54
    5490:	96 e0       	ldi	r25, 0x06	; 6
    5492:	0e 94 1d 06 	call	0xc3a	; 0xc3a <xputs>
    print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
    5496:	8f e1       	ldi	r24, 0x1F	; 31
    5498:	96 e0       	ldi	r25, 0x06	; 6
    549a:	0e 94 1d 06 	call	0xc3a	; 0xc3a <xputs>
    549e:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <mk_wheel_time_to_max>
    54a2:	1f 92       	push	r1
    54a4:	8f 93       	push	r24
    54a6:	8c e1       	ldi	r24, 0x1C	; 28
    54a8:	96 e0       	ldi	r25, 0x06	; 6
    54aa:	9f 93       	push	r25
    54ac:	8f 93       	push	r24
    54ae:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__xprintf>
    54b2:	8a e1       	ldi	r24, 0x1A	; 26
    54b4:	96 e0       	ldi	r25, 0x06	; 6
    54b6:	0e 94 1d 06 	call	0xc3a	; 0xc3a <xputs>
}
    54ba:	8d b7       	in	r24, 0x3d	; 61
    54bc:	9e b7       	in	r25, 0x3e	; 62
    54be:	48 96       	adiw	r24, 0x18	; 24
    54c0:	0f b6       	in	r0, 0x3f	; 63
    54c2:	f8 94       	cli
    54c4:	9e bf       	out	0x3e, r25	; 62
    54c6:	0f be       	out	0x3f, r0	; 63
    54c8:	8d bf       	out	0x3d, r24	; 61
    54ca:	4d cf       	rjmp	.-358    	; 0x5366 <command_proc+0xe0>
            mousekey_param_dec(mousekey_param, 1);
    54cc:	61 e0       	ldi	r22, 0x01	; 1
            mousekey_param_dec(mousekey_param, 10);
    54ce:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <mousekey_param>
    54d2:	0e 94 a7 27 	call	0x4f4e	; 0x4f4e <mousekey_param_dec>
            break;
    54d6:	47 cf       	rjmp	.-370    	; 0x5366 <command_proc+0xe0>
            mousekey_param_dec(mousekey_param, 10);
    54d8:	6a e0       	ldi	r22, 0x0A	; 10
    54da:	f9 cf       	rjmp	.-14     	; 0x54ce <command_proc+0x248>
            mk_delay = MOUSEKEY_DELAY/10;
    54dc:	8e e1       	ldi	r24, 0x1E	; 30
    54de:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <mk_delay>
            mk_interval = MOUSEKEY_INTERVAL;
    54e2:	82 e3       	ldi	r24, 0x32	; 50
    54e4:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <mk_interval>
            mk_max_speed = MOUSEKEY_MAX_SPEED;
    54e8:	8a e0       	ldi	r24, 0x0A	; 10
    54ea:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <mk_max_speed>
            mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
    54ee:	84 e1       	ldi	r24, 0x14	; 20
    54f0:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <mk_time_to_max>
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
    54f4:	88 e0       	ldi	r24, 0x08	; 8
    54f6:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <mk_wheel_max_speed>
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
    54fa:	88 e2       	ldi	r24, 0x28	; 40
    54fc:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <mk_wheel_time_to_max>
            print("set default\n");
    5500:	81 ec       	ldi	r24, 0xC1	; 193
    5502:	96 e0       	ldi	r25, 0x06	; 6
    5504:	0e 94 1d 06 	call	0xc3a	; 0xc3a <xputs>
            break;
    5508:	2e cf       	rjmp	.-420    	; 0x5366 <command_proc+0xe0>
        print("M>" );
    550a:	86 eb       	ldi	r24, 0xB6	; 182
    550c:	96 e0       	ldi	r25, 0x06	; 6
    550e:	1c cf       	rjmp	.-456    	; 0x5348 <command_proc+0xc2>
            command_state = ONESHOT;
    5510:	10 92 72 03 	sts	0x0372, r1	; 0x800372 <command_state>
            return false;
    5514:	80 e0       	ldi	r24, 0x00	; 0
    5516:	d1 ce       	rjmp	.-606    	; 0x52ba <command_proc+0x34>

00005518 <__fixsfsi>:
    5518:	0e 94 93 2a 	call	0x5526	; 0x5526 <__fixunssfsi>
    551c:	68 94       	set
    551e:	b1 11       	cpse	r27, r1
    5520:	0c 94 22 2b 	jmp	0x5644	; 0x5644 <__fp_szero>
    5524:	08 95       	ret

00005526 <__fixunssfsi>:
    5526:	0e 94 07 2b 	call	0x560e	; 0x560e <__fp_splitA>
    552a:	88 f0       	brcs	.+34     	; 0x554e <__fixunssfsi+0x28>
    552c:	9f 57       	subi	r25, 0x7F	; 127
    552e:	98 f0       	brcs	.+38     	; 0x5556 <__fixunssfsi+0x30>
    5530:	b9 2f       	mov	r27, r25
    5532:	99 27       	eor	r25, r25
    5534:	b7 51       	subi	r27, 0x17	; 23
    5536:	b0 f0       	brcs	.+44     	; 0x5564 <__fixunssfsi+0x3e>
    5538:	e1 f0       	breq	.+56     	; 0x5572 <__fixunssfsi+0x4c>
    553a:	66 0f       	add	r22, r22
    553c:	77 1f       	adc	r23, r23
    553e:	88 1f       	adc	r24, r24
    5540:	99 1f       	adc	r25, r25
    5542:	1a f0       	brmi	.+6      	; 0x554a <__fixunssfsi+0x24>
    5544:	ba 95       	dec	r27
    5546:	c9 f7       	brne	.-14     	; 0x553a <__fixunssfsi+0x14>
    5548:	14 c0       	rjmp	.+40     	; 0x5572 <__fixunssfsi+0x4c>
    554a:	b1 30       	cpi	r27, 0x01	; 1
    554c:	91 f0       	breq	.+36     	; 0x5572 <__fixunssfsi+0x4c>
    554e:	0e 94 21 2b 	call	0x5642	; 0x5642 <__fp_zero>
    5552:	b1 e0       	ldi	r27, 0x01	; 1
    5554:	08 95       	ret
    5556:	0c 94 21 2b 	jmp	0x5642	; 0x5642 <__fp_zero>
    555a:	67 2f       	mov	r22, r23
    555c:	78 2f       	mov	r23, r24
    555e:	88 27       	eor	r24, r24
    5560:	b8 5f       	subi	r27, 0xF8	; 248
    5562:	39 f0       	breq	.+14     	; 0x5572 <__fixunssfsi+0x4c>
    5564:	b9 3f       	cpi	r27, 0xF9	; 249
    5566:	cc f3       	brlt	.-14     	; 0x555a <__fixunssfsi+0x34>
    5568:	86 95       	lsr	r24
    556a:	77 95       	ror	r23
    556c:	67 95       	ror	r22
    556e:	b3 95       	inc	r27
    5570:	d9 f7       	brne	.-10     	; 0x5568 <__fixunssfsi+0x42>
    5572:	3e f4       	brtc	.+14     	; 0x5582 <__fixunssfsi+0x5c>
    5574:	90 95       	com	r25
    5576:	80 95       	com	r24
    5578:	70 95       	com	r23
    557a:	61 95       	neg	r22
    557c:	7f 4f       	sbci	r23, 0xFF	; 255
    557e:	8f 4f       	sbci	r24, 0xFF	; 255
    5580:	9f 4f       	sbci	r25, 0xFF	; 255
    5582:	08 95       	ret

00005584 <__floatunsisf>:
    5584:	e8 94       	clt
    5586:	09 c0       	rjmp	.+18     	; 0x559a <__floatsisf+0x12>

00005588 <__floatsisf>:
    5588:	97 fb       	bst	r25, 7
    558a:	3e f4       	brtc	.+14     	; 0x559a <__floatsisf+0x12>
    558c:	90 95       	com	r25
    558e:	80 95       	com	r24
    5590:	70 95       	com	r23
    5592:	61 95       	neg	r22
    5594:	7f 4f       	sbci	r23, 0xFF	; 255
    5596:	8f 4f       	sbci	r24, 0xFF	; 255
    5598:	9f 4f       	sbci	r25, 0xFF	; 255
    559a:	99 23       	and	r25, r25
    559c:	a9 f0       	breq	.+42     	; 0x55c8 <__floatsisf+0x40>
    559e:	f9 2f       	mov	r31, r25
    55a0:	96 e9       	ldi	r25, 0x96	; 150
    55a2:	bb 27       	eor	r27, r27
    55a4:	93 95       	inc	r25
    55a6:	f6 95       	lsr	r31
    55a8:	87 95       	ror	r24
    55aa:	77 95       	ror	r23
    55ac:	67 95       	ror	r22
    55ae:	b7 95       	ror	r27
    55b0:	f1 11       	cpse	r31, r1
    55b2:	f8 cf       	rjmp	.-16     	; 0x55a4 <__floatsisf+0x1c>
    55b4:	fa f4       	brpl	.+62     	; 0x55f4 <__floatsisf+0x6c>
    55b6:	bb 0f       	add	r27, r27
    55b8:	11 f4       	brne	.+4      	; 0x55be <__floatsisf+0x36>
    55ba:	60 ff       	sbrs	r22, 0
    55bc:	1b c0       	rjmp	.+54     	; 0x55f4 <__floatsisf+0x6c>
    55be:	6f 5f       	subi	r22, 0xFF	; 255
    55c0:	7f 4f       	sbci	r23, 0xFF	; 255
    55c2:	8f 4f       	sbci	r24, 0xFF	; 255
    55c4:	9f 4f       	sbci	r25, 0xFF	; 255
    55c6:	16 c0       	rjmp	.+44     	; 0x55f4 <__floatsisf+0x6c>
    55c8:	88 23       	and	r24, r24
    55ca:	11 f0       	breq	.+4      	; 0x55d0 <__floatsisf+0x48>
    55cc:	96 e9       	ldi	r25, 0x96	; 150
    55ce:	11 c0       	rjmp	.+34     	; 0x55f2 <__floatsisf+0x6a>
    55d0:	77 23       	and	r23, r23
    55d2:	21 f0       	breq	.+8      	; 0x55dc <__floatsisf+0x54>
    55d4:	9e e8       	ldi	r25, 0x8E	; 142
    55d6:	87 2f       	mov	r24, r23
    55d8:	76 2f       	mov	r23, r22
    55da:	05 c0       	rjmp	.+10     	; 0x55e6 <__floatsisf+0x5e>
    55dc:	66 23       	and	r22, r22
    55de:	71 f0       	breq	.+28     	; 0x55fc <__floatsisf+0x74>
    55e0:	96 e8       	ldi	r25, 0x86	; 134
    55e2:	86 2f       	mov	r24, r22
    55e4:	70 e0       	ldi	r23, 0x00	; 0
    55e6:	60 e0       	ldi	r22, 0x00	; 0
    55e8:	2a f0       	brmi	.+10     	; 0x55f4 <__floatsisf+0x6c>
    55ea:	9a 95       	dec	r25
    55ec:	66 0f       	add	r22, r22
    55ee:	77 1f       	adc	r23, r23
    55f0:	88 1f       	adc	r24, r24
    55f2:	da f7       	brpl	.-10     	; 0x55ea <__floatsisf+0x62>
    55f4:	88 0f       	add	r24, r24
    55f6:	96 95       	lsr	r25
    55f8:	87 95       	ror	r24
    55fa:	97 f9       	bld	r25, 7
    55fc:	08 95       	ret

000055fe <__fp_split3>:
    55fe:	57 fd       	sbrc	r21, 7
    5600:	90 58       	subi	r25, 0x80	; 128
    5602:	44 0f       	add	r20, r20
    5604:	55 1f       	adc	r21, r21
    5606:	59 f0       	breq	.+22     	; 0x561e <__fp_splitA+0x10>
    5608:	5f 3f       	cpi	r21, 0xFF	; 255
    560a:	71 f0       	breq	.+28     	; 0x5628 <__fp_splitA+0x1a>
    560c:	47 95       	ror	r20

0000560e <__fp_splitA>:
    560e:	88 0f       	add	r24, r24
    5610:	97 fb       	bst	r25, 7
    5612:	99 1f       	adc	r25, r25
    5614:	61 f0       	breq	.+24     	; 0x562e <__fp_splitA+0x20>
    5616:	9f 3f       	cpi	r25, 0xFF	; 255
    5618:	79 f0       	breq	.+30     	; 0x5638 <__fp_splitA+0x2a>
    561a:	87 95       	ror	r24
    561c:	08 95       	ret
    561e:	12 16       	cp	r1, r18
    5620:	13 06       	cpc	r1, r19
    5622:	14 06       	cpc	r1, r20
    5624:	55 1f       	adc	r21, r21
    5626:	f2 cf       	rjmp	.-28     	; 0x560c <__fp_split3+0xe>
    5628:	46 95       	lsr	r20
    562a:	f1 df       	rcall	.-30     	; 0x560e <__fp_splitA>
    562c:	08 c0       	rjmp	.+16     	; 0x563e <__fp_splitA+0x30>
    562e:	16 16       	cp	r1, r22
    5630:	17 06       	cpc	r1, r23
    5632:	18 06       	cpc	r1, r24
    5634:	99 1f       	adc	r25, r25
    5636:	f1 cf       	rjmp	.-30     	; 0x561a <__fp_splitA+0xc>
    5638:	86 95       	lsr	r24
    563a:	71 05       	cpc	r23, r1
    563c:	61 05       	cpc	r22, r1
    563e:	08 94       	sec
    5640:	08 95       	ret

00005642 <__fp_zero>:
    5642:	e8 94       	clt

00005644 <__fp_szero>:
    5644:	bb 27       	eor	r27, r27
    5646:	66 27       	eor	r22, r22
    5648:	77 27       	eor	r23, r23
    564a:	cb 01       	movw	r24, r22
    564c:	97 f9       	bld	r25, 7
    564e:	08 95       	ret

00005650 <__mulsf3>:
    5650:	0e 94 3b 2b 	call	0x5676	; 0x5676 <__mulsf3x>
    5654:	0c 94 ac 2b 	jmp	0x5758	; 0x5758 <__fp_round>
    5658:	0e 94 9e 2b 	call	0x573c	; 0x573c <__fp_pscA>
    565c:	38 f0       	brcs	.+14     	; 0x566c <__mulsf3+0x1c>
    565e:	0e 94 a5 2b 	call	0x574a	; 0x574a <__fp_pscB>
    5662:	20 f0       	brcs	.+8      	; 0x566c <__mulsf3+0x1c>
    5664:	95 23       	and	r25, r21
    5666:	11 f0       	breq	.+4      	; 0x566c <__mulsf3+0x1c>
    5668:	0c 94 95 2b 	jmp	0x572a	; 0x572a <__fp_inf>
    566c:	0c 94 9b 2b 	jmp	0x5736	; 0x5736 <__fp_nan>
    5670:	11 24       	eor	r1, r1
    5672:	0c 94 22 2b 	jmp	0x5644	; 0x5644 <__fp_szero>

00005676 <__mulsf3x>:
    5676:	0e 94 ff 2a 	call	0x55fe	; 0x55fe <__fp_split3>
    567a:	70 f3       	brcs	.-36     	; 0x5658 <__mulsf3+0x8>

0000567c <__mulsf3_pse>:
    567c:	95 9f       	mul	r25, r21
    567e:	c1 f3       	breq	.-16     	; 0x5670 <__mulsf3+0x20>
    5680:	95 0f       	add	r25, r21
    5682:	50 e0       	ldi	r21, 0x00	; 0
    5684:	55 1f       	adc	r21, r21
    5686:	62 9f       	mul	r22, r18
    5688:	f0 01       	movw	r30, r0
    568a:	72 9f       	mul	r23, r18
    568c:	bb 27       	eor	r27, r27
    568e:	f0 0d       	add	r31, r0
    5690:	b1 1d       	adc	r27, r1
    5692:	63 9f       	mul	r22, r19
    5694:	aa 27       	eor	r26, r26
    5696:	f0 0d       	add	r31, r0
    5698:	b1 1d       	adc	r27, r1
    569a:	aa 1f       	adc	r26, r26
    569c:	64 9f       	mul	r22, r20
    569e:	66 27       	eor	r22, r22
    56a0:	b0 0d       	add	r27, r0
    56a2:	a1 1d       	adc	r26, r1
    56a4:	66 1f       	adc	r22, r22
    56a6:	82 9f       	mul	r24, r18
    56a8:	22 27       	eor	r18, r18
    56aa:	b0 0d       	add	r27, r0
    56ac:	a1 1d       	adc	r26, r1
    56ae:	62 1f       	adc	r22, r18
    56b0:	73 9f       	mul	r23, r19
    56b2:	b0 0d       	add	r27, r0
    56b4:	a1 1d       	adc	r26, r1
    56b6:	62 1f       	adc	r22, r18
    56b8:	83 9f       	mul	r24, r19
    56ba:	a0 0d       	add	r26, r0
    56bc:	61 1d       	adc	r22, r1
    56be:	22 1f       	adc	r18, r18
    56c0:	74 9f       	mul	r23, r20
    56c2:	33 27       	eor	r19, r19
    56c4:	a0 0d       	add	r26, r0
    56c6:	61 1d       	adc	r22, r1
    56c8:	23 1f       	adc	r18, r19
    56ca:	84 9f       	mul	r24, r20
    56cc:	60 0d       	add	r22, r0
    56ce:	21 1d       	adc	r18, r1
    56d0:	82 2f       	mov	r24, r18
    56d2:	76 2f       	mov	r23, r22
    56d4:	6a 2f       	mov	r22, r26
    56d6:	11 24       	eor	r1, r1
    56d8:	9f 57       	subi	r25, 0x7F	; 127
    56da:	50 40       	sbci	r21, 0x00	; 0
    56dc:	9a f0       	brmi	.+38     	; 0x5704 <__mulsf3_pse+0x88>
    56de:	f1 f0       	breq	.+60     	; 0x571c <__mulsf3_pse+0xa0>
    56e0:	88 23       	and	r24, r24
    56e2:	4a f0       	brmi	.+18     	; 0x56f6 <__mulsf3_pse+0x7a>
    56e4:	ee 0f       	add	r30, r30
    56e6:	ff 1f       	adc	r31, r31
    56e8:	bb 1f       	adc	r27, r27
    56ea:	66 1f       	adc	r22, r22
    56ec:	77 1f       	adc	r23, r23
    56ee:	88 1f       	adc	r24, r24
    56f0:	91 50       	subi	r25, 0x01	; 1
    56f2:	50 40       	sbci	r21, 0x00	; 0
    56f4:	a9 f7       	brne	.-22     	; 0x56e0 <__mulsf3_pse+0x64>
    56f6:	9e 3f       	cpi	r25, 0xFE	; 254
    56f8:	51 05       	cpc	r21, r1
    56fa:	80 f0       	brcs	.+32     	; 0x571c <__mulsf3_pse+0xa0>
    56fc:	0c 94 95 2b 	jmp	0x572a	; 0x572a <__fp_inf>
    5700:	0c 94 22 2b 	jmp	0x5644	; 0x5644 <__fp_szero>
    5704:	5f 3f       	cpi	r21, 0xFF	; 255
    5706:	e4 f3       	brlt	.-8      	; 0x5700 <__mulsf3_pse+0x84>
    5708:	98 3e       	cpi	r25, 0xE8	; 232
    570a:	d4 f3       	brlt	.-12     	; 0x5700 <__mulsf3_pse+0x84>
    570c:	86 95       	lsr	r24
    570e:	77 95       	ror	r23
    5710:	67 95       	ror	r22
    5712:	b7 95       	ror	r27
    5714:	f7 95       	ror	r31
    5716:	e7 95       	ror	r30
    5718:	9f 5f       	subi	r25, 0xFF	; 255
    571a:	c1 f7       	brne	.-16     	; 0x570c <__mulsf3_pse+0x90>
    571c:	fe 2b       	or	r31, r30
    571e:	88 0f       	add	r24, r24
    5720:	91 1d       	adc	r25, r1
    5722:	96 95       	lsr	r25
    5724:	87 95       	ror	r24
    5726:	97 f9       	bld	r25, 7
    5728:	08 95       	ret

0000572a <__fp_inf>:
    572a:	97 f9       	bld	r25, 7
    572c:	9f 67       	ori	r25, 0x7F	; 127
    572e:	80 e8       	ldi	r24, 0x80	; 128
    5730:	70 e0       	ldi	r23, 0x00	; 0
    5732:	60 e0       	ldi	r22, 0x00	; 0
    5734:	08 95       	ret

00005736 <__fp_nan>:
    5736:	9f ef       	ldi	r25, 0xFF	; 255
    5738:	80 ec       	ldi	r24, 0xC0	; 192
    573a:	08 95       	ret

0000573c <__fp_pscA>:
    573c:	00 24       	eor	r0, r0
    573e:	0a 94       	dec	r0
    5740:	16 16       	cp	r1, r22
    5742:	17 06       	cpc	r1, r23
    5744:	18 06       	cpc	r1, r24
    5746:	09 06       	cpc	r0, r25
    5748:	08 95       	ret

0000574a <__fp_pscB>:
    574a:	00 24       	eor	r0, r0
    574c:	0a 94       	dec	r0
    574e:	12 16       	cp	r1, r18
    5750:	13 06       	cpc	r1, r19
    5752:	14 06       	cpc	r1, r20
    5754:	05 06       	cpc	r0, r21
    5756:	08 95       	ret

00005758 <__fp_round>:
    5758:	09 2e       	mov	r0, r25
    575a:	03 94       	inc	r0
    575c:	00 0c       	add	r0, r0
    575e:	11 f4       	brne	.+4      	; 0x5764 <__fp_round+0xc>
    5760:	88 23       	and	r24, r24
    5762:	52 f0       	brmi	.+20     	; 0x5778 <__fp_round+0x20>
    5764:	bb 0f       	add	r27, r27
    5766:	40 f4       	brcc	.+16     	; 0x5778 <__fp_round+0x20>
    5768:	bf 2b       	or	r27, r31
    576a:	11 f4       	brne	.+4      	; 0x5770 <__fp_round+0x18>
    576c:	60 ff       	sbrs	r22, 0
    576e:	04 c0       	rjmp	.+8      	; 0x5778 <__fp_round+0x20>
    5770:	6f 5f       	subi	r22, 0xFF	; 255
    5772:	7f 4f       	sbci	r23, 0xFF	; 255
    5774:	8f 4f       	sbci	r24, 0xFF	; 255
    5776:	9f 4f       	sbci	r25, 0xFF	; 255
    5778:	08 95       	ret

0000577a <__divmodhi4>:
    577a:	97 fb       	bst	r25, 7
    577c:	07 2e       	mov	r0, r23
    577e:	16 f4       	brtc	.+4      	; 0x5784 <__divmodhi4+0xa>
    5780:	00 94       	com	r0
    5782:	07 d0       	rcall	.+14     	; 0x5792 <__divmodhi4_neg1>
    5784:	77 fd       	sbrc	r23, 7
    5786:	09 d0       	rcall	.+18     	; 0x579a <__divmodhi4_neg2>
    5788:	0e 94 d7 2b 	call	0x57ae	; 0x57ae <__udivmodhi4>
    578c:	07 fc       	sbrc	r0, 7
    578e:	05 d0       	rcall	.+10     	; 0x579a <__divmodhi4_neg2>
    5790:	3e f4       	brtc	.+14     	; 0x57a0 <__divmodhi4_exit>

00005792 <__divmodhi4_neg1>:
    5792:	90 95       	com	r25
    5794:	81 95       	neg	r24
    5796:	9f 4f       	sbci	r25, 0xFF	; 255
    5798:	08 95       	ret

0000579a <__divmodhi4_neg2>:
    579a:	70 95       	com	r23
    579c:	61 95       	neg	r22
    579e:	7f 4f       	sbci	r23, 0xFF	; 255

000057a0 <__divmodhi4_exit>:
    57a0:	08 95       	ret

000057a2 <__tablejump2__>:
    57a2:	ee 0f       	add	r30, r30
    57a4:	ff 1f       	adc	r31, r31
    57a6:	05 90       	lpm	r0, Z+
    57a8:	f4 91       	lpm	r31, Z
    57aa:	e0 2d       	mov	r30, r0
    57ac:	09 94       	ijmp

000057ae <__udivmodhi4>:
    57ae:	aa 1b       	sub	r26, r26
    57b0:	bb 1b       	sub	r27, r27
    57b2:	51 e1       	ldi	r21, 0x11	; 17
    57b4:	07 c0       	rjmp	.+14     	; 0x57c4 <__udivmodhi4_ep>

000057b6 <__udivmodhi4_loop>:
    57b6:	aa 1f       	adc	r26, r26
    57b8:	bb 1f       	adc	r27, r27
    57ba:	a6 17       	cp	r26, r22
    57bc:	b7 07       	cpc	r27, r23
    57be:	10 f0       	brcs	.+4      	; 0x57c4 <__udivmodhi4_ep>
    57c0:	a6 1b       	sub	r26, r22
    57c2:	b7 0b       	sbc	r27, r23

000057c4 <__udivmodhi4_ep>:
    57c4:	88 1f       	adc	r24, r24
    57c6:	99 1f       	adc	r25, r25
    57c8:	5a 95       	dec	r21
    57ca:	a9 f7       	brne	.-22     	; 0x57b6 <__udivmodhi4_loop>
    57cc:	80 95       	com	r24
    57ce:	90 95       	com	r25
    57d0:	bc 01       	movw	r22, r24
    57d2:	cd 01       	movw	r24, r26
    57d4:	08 95       	ret

000057d6 <_exit>:
    57d6:	f8 94       	cli

000057d8 <__stop_program>:
    57d8:	ff cf       	rjmp	.-2      	; 0x57d8 <__stop_program>
