   1               		.file	"suspend.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.suspend_idle,"ax",@progbits
  11               	.global	suspend_idle
  13               	suspend_idle:
  14               	.LVL0:
  15               	.LFB105:
  16               		.file 1 "../../tmk_core/common/avr/suspend.c"
   1:../../tmk_core/common/avr/suspend.c **** #include <stdbool.h>
   2:../../tmk_core/common/avr/suspend.c **** #include <avr/sleep.h>
   3:../../tmk_core/common/avr/suspend.c **** #include <avr/wdt.h>
   4:../../tmk_core/common/avr/suspend.c **** #include <avr/interrupt.h>
   5:../../tmk_core/common/avr/suspend.c **** #include "matrix.h"
   6:../../tmk_core/common/avr/suspend.c **** #include "action.h"
   7:../../tmk_core/common/avr/suspend.c **** #include "backlight.h"
   8:../../tmk_core/common/avr/suspend.c **** #include "suspend_avr.h"
   9:../../tmk_core/common/avr/suspend.c **** #include "suspend.h"
  10:../../tmk_core/common/avr/suspend.c **** #include "timer.h"
  11:../../tmk_core/common/avr/suspend.c **** #ifdef PROTOCOL_LUFA
  12:../../tmk_core/common/avr/suspend.c **** #include "lufa.h"
  13:../../tmk_core/common/avr/suspend.c **** #endif
  14:../../tmk_core/common/avr/suspend.c **** 
  15:../../tmk_core/common/avr/suspend.c **** 
  16:../../tmk_core/common/avr/suspend.c **** #define wdt_intr_enable(value)   \
  17:../../tmk_core/common/avr/suspend.c **** __asm__ __volatile__ (  \
  18:../../tmk_core/common/avr/suspend.c ****     "in __tmp_reg__,__SREG__" "\n\t"    \
  19:../../tmk_core/common/avr/suspend.c ****     "cli" "\n\t"    \
  20:../../tmk_core/common/avr/suspend.c ****     "wdr" "\n\t"    \
  21:../../tmk_core/common/avr/suspend.c ****     "sts %0,%1" "\n\t"  \
  22:../../tmk_core/common/avr/suspend.c ****     "out __SREG__,__tmp_reg__" "\n\t"   \
  23:../../tmk_core/common/avr/suspend.c ****     "sts %0,%2" "\n\t" \
  24:../../tmk_core/common/avr/suspend.c ****     : /* no outputs */  \
  25:../../tmk_core/common/avr/suspend.c ****     : "M" (_SFR_MEM_ADDR(_WD_CONTROL_REG)), \
  26:../../tmk_core/common/avr/suspend.c ****     "r" (_BV(_WD_CHANGE_BIT) | _BV(WDE)), \
  27:../../tmk_core/common/avr/suspend.c ****     "r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) | \
  28:../../tmk_core/common/avr/suspend.c ****         _BV(WDIE) | (value & 0x07)) ) \
  29:../../tmk_core/common/avr/suspend.c ****     : "r0"  \
  30:../../tmk_core/common/avr/suspend.c **** )
  31:../../tmk_core/common/avr/suspend.c **** 
  32:../../tmk_core/common/avr/suspend.c **** 
  33:../../tmk_core/common/avr/suspend.c **** /* Power down MCU with watchdog timer
  34:../../tmk_core/common/avr/suspend.c ****  * wdto: watchdog timer timeout defined in <avr/wdt.h>
  35:../../tmk_core/common/avr/suspend.c ****  *          WDTO_15MS
  36:../../tmk_core/common/avr/suspend.c ****  *          WDTO_30MS
  37:../../tmk_core/common/avr/suspend.c ****  *          WDTO_60MS
  38:../../tmk_core/common/avr/suspend.c ****  *          WDTO_120MS
  39:../../tmk_core/common/avr/suspend.c ****  *          WDTO_250MS
  40:../../tmk_core/common/avr/suspend.c ****  *          WDTO_500MS
  41:../../tmk_core/common/avr/suspend.c ****  *          WDTO_1S
  42:../../tmk_core/common/avr/suspend.c ****  *          WDTO_2S
  43:../../tmk_core/common/avr/suspend.c ****  *          WDTO_4S
  44:../../tmk_core/common/avr/suspend.c ****  *          WDTO_8S
  45:../../tmk_core/common/avr/suspend.c ****  */
  46:../../tmk_core/common/avr/suspend.c **** static uint8_t wdt_timeout = 0;
  47:../../tmk_core/common/avr/suspend.c **** static void power_down(uint8_t wdto)
  48:../../tmk_core/common/avr/suspend.c **** {
  49:../../tmk_core/common/avr/suspend.c **** #ifdef PROTOCOL_LUFA
  50:../../tmk_core/common/avr/suspend.c ****     if (USB_DeviceState == DEVICE_STATE_Configured) return;
  51:../../tmk_core/common/avr/suspend.c **** #endif
  52:../../tmk_core/common/avr/suspend.c ****     wdt_timeout = wdto;
  53:../../tmk_core/common/avr/suspend.c **** 
  54:../../tmk_core/common/avr/suspend.c ****     // Watchdog Interrupt Mode
  55:../../tmk_core/common/avr/suspend.c ****     wdt_intr_enable(wdto);
  56:../../tmk_core/common/avr/suspend.c **** 
  57:../../tmk_core/common/avr/suspend.c ****     // TODO: more power saving
  58:../../tmk_core/common/avr/suspend.c ****     // See PicoPower application note
  59:../../tmk_core/common/avr/suspend.c ****     // - I/O port input with pullup
  60:../../tmk_core/common/avr/suspend.c ****     // - prescale clock
  61:../../tmk_core/common/avr/suspend.c ****     // - BOD disable
  62:../../tmk_core/common/avr/suspend.c ****     // - Power Reduction Register PRR
  63:../../tmk_core/common/avr/suspend.c ****     set_sleep_mode(SLEEP_MODE_PWR_DOWN);
  64:../../tmk_core/common/avr/suspend.c ****     sleep_enable();
  65:../../tmk_core/common/avr/suspend.c ****     sei();
  66:../../tmk_core/common/avr/suspend.c ****     sleep_cpu();
  67:../../tmk_core/common/avr/suspend.c ****     sleep_disable();
  68:../../tmk_core/common/avr/suspend.c **** 
  69:../../tmk_core/common/avr/suspend.c ****     // Disable watchdog after sleep
  70:../../tmk_core/common/avr/suspend.c ****     wdt_disable();
  71:../../tmk_core/common/avr/suspend.c **** }
  72:../../tmk_core/common/avr/suspend.c **** 
  73:../../tmk_core/common/avr/suspend.c **** #ifdef SUSPEND_MODE_STANDBY
  74:../../tmk_core/common/avr/suspend.c **** static void standby(void)
  75:../../tmk_core/common/avr/suspend.c **** {
  76:../../tmk_core/common/avr/suspend.c **** #ifdef SLEEP_MODE_STANDBY
  77:../../tmk_core/common/avr/suspend.c ****     set_sleep_mode(SLEEP_MODE_STANDBY);
  78:../../tmk_core/common/avr/suspend.c ****     sleep_enable();
  79:../../tmk_core/common/avr/suspend.c ****     sei();
  80:../../tmk_core/common/avr/suspend.c ****     sleep_cpu();
  81:../../tmk_core/common/avr/suspend.c ****     sleep_disable();
  82:../../tmk_core/common/avr/suspend.c **** #endif
  83:../../tmk_core/common/avr/suspend.c **** }
  84:../../tmk_core/common/avr/suspend.c **** #endif
  85:../../tmk_core/common/avr/suspend.c **** 
  86:../../tmk_core/common/avr/suspend.c **** static void idle(void)
  87:../../tmk_core/common/avr/suspend.c **** {
  88:../../tmk_core/common/avr/suspend.c ****     set_sleep_mode(SLEEP_MODE_IDLE);
  89:../../tmk_core/common/avr/suspend.c ****     sleep_enable();
  90:../../tmk_core/common/avr/suspend.c ****     sei();
  91:../../tmk_core/common/avr/suspend.c ****     sleep_cpu();
  92:../../tmk_core/common/avr/suspend.c ****     sleep_disable();
  93:../../tmk_core/common/avr/suspend.c **** }
  94:../../tmk_core/common/avr/suspend.c **** 
  95:../../tmk_core/common/avr/suspend.c **** 
  96:../../tmk_core/common/avr/suspend.c **** void suspend_idle(uint8_t time)
  97:../../tmk_core/common/avr/suspend.c **** {
  17               		.loc 1 97 1 view -0
  18               		.cfi_startproc
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  98:../../tmk_core/common/avr/suspend.c ****     idle();
  23               		.loc 1 98 5 view .LVU1
  24               	.LBB10:
  25               	.LBI10:
  86:../../tmk_core/common/avr/suspend.c **** {
  26               		.loc 1 86 13 view .LVU2
  27               	.LBB11:
  88:../../tmk_core/common/avr/suspend.c ****     sleep_enable();
  28               		.loc 1 88 5 view .LVU3
  88:../../tmk_core/common/avr/suspend.c ****     sleep_enable();
  29               		.loc 1 88 5 view .LVU4
  30 0000 83B7      		in r24,0x33
  31               	.LVL1:
  88:../../tmk_core/common/avr/suspend.c ****     sleep_enable();
  32               		.loc 1 88 5 is_stmt 0 view .LVU5
  33 0002 817F      		andi r24,lo8(-15)
  34 0004 83BF      		out 0x33,r24
  89:../../tmk_core/common/avr/suspend.c ****     sei();
  35               		.loc 1 89 5 is_stmt 1 view .LVU6
  89:../../tmk_core/common/avr/suspend.c ****     sei();
  36               		.loc 1 89 5 view .LVU7
  37 0006 83B7      		in r24,0x33
  38 0008 8160      		ori r24,lo8(1)
  39 000a 83BF      		out 0x33,r24
  90:../../tmk_core/common/avr/suspend.c ****     sleep_cpu();
  40               		.loc 1 90 5 view .LVU8
  41               	/* #APP */
  42               	 ;  90 "../../tmk_core/common/avr/suspend.c" 1
  43 000c 7894      		sei
  44               	 ;  0 "" 2
  91:../../tmk_core/common/avr/suspend.c ****     sleep_disable();
  45               		.loc 1 91 5 view .LVU9
  91:../../tmk_core/common/avr/suspend.c ****     sleep_disable();
  46               		.loc 1 91 5 view .LVU10
  47               	 ;  91 "../../tmk_core/common/avr/suspend.c" 1
  48 000e 8895      		sleep
  49               		
  50               	 ;  0 "" 2
  92:../../tmk_core/common/avr/suspend.c **** }
  51               		.loc 1 92 5 view .LVU11
  92:../../tmk_core/common/avr/suspend.c **** }
  52               		.loc 1 92 5 view .LVU12
  53               	/* #NOAPP */
  54 0010 83B7      		in r24,0x33
  55 0012 8E7F      		andi r24,lo8(-2)
  56 0014 83BF      		out 0x33,r24
  57               	/* epilogue start */
  58               	.LBE11:
  59               	.LBE10:
  99:../../tmk_core/common/avr/suspend.c **** }
  60               		.loc 1 99 1 is_stmt 0 view .LVU13
  61 0016 0895      		ret
  62               		.cfi_endproc
  63               	.LFE105:
  65               		.section	.text.suspend_power_down,"ax",@progbits
  66               	.global	suspend_power_down
  68               	suspend_power_down:
  69               	.LFB106:
 100:../../tmk_core/common/avr/suspend.c **** 
 101:../../tmk_core/common/avr/suspend.c **** void suspend_power_down(void)
 102:../../tmk_core/common/avr/suspend.c **** {
  70               		.loc 1 102 1 is_stmt 1 view -0
  71               		.cfi_startproc
  72               	/* prologue: function */
  73               	/* frame size = 0 */
  74               	/* stack size = 0 */
  75               	.L__stack_usage = 0
 103:../../tmk_core/common/avr/suspend.c **** #ifdef NO_SUSPEND_POWER_DOWN
 104:../../tmk_core/common/avr/suspend.c ****     ;
 105:../../tmk_core/common/avr/suspend.c **** #elif defined(SUSPEND_MODE_NOPOWERSAVE)
 106:../../tmk_core/common/avr/suspend.c ****     ;
 107:../../tmk_core/common/avr/suspend.c **** #elif defined(SUSPEND_MODE_STANDBY)
 108:../../tmk_core/common/avr/suspend.c ****     standby();
 109:../../tmk_core/common/avr/suspend.c **** #elif defined(SUSPEND_MODE_IDLE)
 110:../../tmk_core/common/avr/suspend.c ****     idle();
 111:../../tmk_core/common/avr/suspend.c **** #else
 112:../../tmk_core/common/avr/suspend.c ****     power_down(WDTO_15MS);
  76               		.loc 1 112 5 view .LVU15
  77               	.LBB17:
  78               	.LBI17:
  47:../../tmk_core/common/avr/suspend.c **** {
  79               		.loc 1 47 13 view .LVU16
  80               	.LVL2:
  81               	.LBB18:
  50:../../tmk_core/common/avr/suspend.c **** #endif
  82               		.loc 1 50 5 view .LVU17
  50:../../tmk_core/common/avr/suspend.c **** #endif
  83               		.loc 1 50 25 is_stmt 0 view .LVU18
  84 0000 8091 0000 		lds r24,USB_DeviceState
  50:../../tmk_core/common/avr/suspend.c **** #endif
  85               		.loc 1 50 8 view .LVU19
  86 0004 8430      		cpi r24,lo8(4)
  87 0006 01F0      		breq .L2
  52:../../tmk_core/common/avr/suspend.c **** 
  88               		.loc 1 52 5 is_stmt 1 view .LVU20
  52:../../tmk_core/common/avr/suspend.c **** 
  89               		.loc 1 52 17 is_stmt 0 view .LVU21
  90 0008 1092 0000 		sts wdt_timeout,__zero_reg__
  55:../../tmk_core/common/avr/suspend.c **** 
  91               		.loc 1 55 5 is_stmt 1 view .LVU22
  92 000c 88E1      		ldi r24,lo8(24)
  93 000e 90E0      		ldi r25,0
  94 0010 20E4      		ldi r18,lo8(64)
  95               	/* #APP */
  96               	 ;  55 "../../tmk_core/common/avr/suspend.c" 1
  97 0012 0FB6      		in __tmp_reg__,__SREG__
  98 0014 F894      		cli
  99 0016 A895      		wdr
 100 0018 8093 6000 		sts 96,r24
 101 001c 0FBE      		out __SREG__,__tmp_reg__
 102 001e 2093 6000 		sts 96,r18
 103               		
 104               	 ;  0 "" 2
  63:../../tmk_core/common/avr/suspend.c ****     sleep_enable();
 105               		.loc 1 63 5 view .LVU23
  63:../../tmk_core/common/avr/suspend.c ****     sleep_enable();
 106               		.loc 1 63 5 view .LVU24
 107               	/* #NOAPP */
 108 0022 83B7      		in r24,0x33
 109 0024 817F      		andi r24,lo8(-15)
 110 0026 8460      		ori r24,lo8(4)
 111 0028 83BF      		out 0x33,r24
  64:../../tmk_core/common/avr/suspend.c ****     sei();
 112               		.loc 1 64 5 view .LVU25
  64:../../tmk_core/common/avr/suspend.c ****     sei();
 113               		.loc 1 64 5 view .LVU26
 114 002a 83B7      		in r24,0x33
 115 002c 8160      		ori r24,lo8(1)
 116 002e 83BF      		out 0x33,r24
  65:../../tmk_core/common/avr/suspend.c ****     sleep_cpu();
 117               		.loc 1 65 5 view .LVU27
 118               	/* #APP */
 119               	 ;  65 "../../tmk_core/common/avr/suspend.c" 1
 120 0030 7894      		sei
 121               	 ;  0 "" 2
  66:../../tmk_core/common/avr/suspend.c ****     sleep_disable();
 122               		.loc 1 66 5 view .LVU28
  66:../../tmk_core/common/avr/suspend.c ****     sleep_disable();
 123               		.loc 1 66 5 view .LVU29
 124               	 ;  66 "../../tmk_core/common/avr/suspend.c" 1
 125 0032 8895      		sleep
 126               		
 127               	 ;  0 "" 2
  67:../../tmk_core/common/avr/suspend.c **** 
 128               		.loc 1 67 5 view .LVU30
  67:../../tmk_core/common/avr/suspend.c **** 
 129               		.loc 1 67 5 view .LVU31
 130               	/* #NOAPP */
 131 0034 83B7      		in r24,0x33
 132 0036 8E7F      		andi r24,lo8(-2)
 133 0038 83BF      		out 0x33,r24
  70:../../tmk_core/common/avr/suspend.c **** }
 134               		.loc 1 70 5 view .LVU32
 135               	.LBB19:
 136               	.LBI19:
 137               		.file 2 "/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h"
   1:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** /* Copyright (c) 2002, 2004 Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****    Copyright (c) 2005, 2006, 2007 Eric B. Weddington
   3:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****    All rights reserved.
   4:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 
   5:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****    Redistribution and use in source and binary forms, with or without
   6:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****    modification, are permitted provided that the following conditions are met:
   7:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 
   8:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****    * Redistributions of source code must retain the above copyright
   9:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****      notice, this list of conditions and the following disclaimer.
  10:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 
  11:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****    * Redistributions in binary form must reproduce the above copyright
  12:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****      notice, this list of conditions and the following disclaimer in
  13:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****      the documentation and/or other materials provided with the
  14:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****      distribution.
  15:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 
  16:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****    * Neither the name of the copyright holders nor the names of
  17:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****      contributors may be used to endorse or promote products derived
  18:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****      from this software without specific prior written permission.
  19:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 
  20:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 
  32:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** /* $Id: wdt.h 2503 2016-02-07 22:59:47Z joerg_wunsch $ */
  33:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 
  34:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** /*
  35:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****    avr/wdt.h - macros for AVR watchdog timer
  36:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****  */
  37:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 
  38:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** #ifndef _AVR_WDT_H_
  39:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** #define _AVR_WDT_H_
  40:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 
  41:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** #include <avr/io.h>
  42:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** #include <stdint.h>
  43:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 
  44:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** /** \file */
  45:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** /** \defgroup avr_watchdog <avr/wdt.h>: Watchdog timer handling
  46:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     \code #include <avr/wdt.h> \endcode
  47:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 
  48:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     This header file declares the interface to some inline macros
  49:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     handling the watchdog timer present in many AVR devices.  In order
  50:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     to prevent the watchdog timer configuration from being
  51:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     accidentally altered by a crashing application, a special timed
  52:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     sequence is required in order to change it.  The macros within
  53:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     this header file handle the required sequence automatically
  54:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     before changing any value.  Interrupts will be disabled during
  55:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     the manipulation.
  56:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 
  57:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     \note Depending on the fuse configuration of the particular
  58:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     device, further restrictions might apply, in particular it might
  59:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     be disallowed to turn off the watchdog timer.
  60:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 
  61:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     Note that for newer devices (ATmega88 and newer, effectively any
  62:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     AVR that has the option to also generate interrupts), the watchdog
  63:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     timer remains active even after a system reset (except a power-on
  64:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     condition), using the fastest prescaler value (approximately 15
  65:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     ms).  It is therefore required to turn off the watchdog early
  66:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     during program startup, the datasheet recommends a sequence like
  67:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     the following:
  68:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 
  69:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     \code
  70:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     #include <stdint.h>
  71:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     #include <avr/wdt.h>
  72:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 
  73:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     uint8_t mcusr_mirror __attribute__ ((section (".noinit")));
  74:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 
  75:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     void get_mcusr(void) \
  76:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****       __attribute__((naked)) \
  77:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****       __attribute__((section(".init3")));
  78:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     void get_mcusr(void)
  79:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     {
  80:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****       mcusr_mirror = MCUSR;
  81:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****       MCUSR = 0;
  82:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****       wdt_disable();
  83:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     }
  84:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     \endcode
  85:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 
  86:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     Saving the value of MCUSR in \c mcusr_mirror is only needed if the
  87:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     application later wants to examine the reset source, but in particular, 
  88:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     clearing the watchdog reset flag before disabling the
  89:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     watchdog is required, according to the datasheet.
  90:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** */
  91:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 
  92:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** /**
  93:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****    \ingroup avr_watchdog
  94:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****    Reset the watchdog timer.  When the watchdog timer is enabled,
  95:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****    a call to this instruction is required before the timer expires,
  96:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****    otherwise a watchdog-initiated device reset will occur. 
  97:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** */
  98:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 
  99:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** #define wdt_reset() __asm__ __volatile__ ("wdr")
 100:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 
 101:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** #ifndef __DOXYGEN__
 102:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 
 103:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** #if defined(WDP3)
 104:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** # define _WD_PS3_MASK       _BV(WDP3)
 105:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** #else
 106:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** # define _WD_PS3_MASK       0x00
 107:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** #endif
 108:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 
 109:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** #if defined(WDTCSR)
 110:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDTCSR
 111:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** #elif defined(WDTCR)
 112:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDTCR
 113:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** #else
 114:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDT
 115:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** #endif
 116:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 
 117:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** #if defined(WDTOE)
 118:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** #define _WD_CHANGE_BIT      WDTOE
 119:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** #else
 120:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** #define _WD_CHANGE_BIT      WDCE
 121:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** #endif
 122:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 
 123:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** #endif	/* !__DOXYGEN__ */
 124:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 
 125:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 
 126:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** /**
 127:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****    \ingroup avr_watchdog
 128:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****    Enable the watchdog timer, configuring it for expiry after
 129:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****    \c timeout (which is a combination of the \c WDP0 through
 130:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****    \c WDP2 bits to write into the \c WDTCR register; For those devices 
 131:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****    that have a \c WDTCSR register, it uses the combination of the \c WDP0 
 132:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****    through \c WDP3 bits).
 133:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 
 134:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****    See also the symbolic constants \c WDTO_15MS et al.
 135:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** */
 136:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 
 137:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 
 138:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** #if defined(__AVR_XMEGA__)
 139:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 
 140:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** /*
 141:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****    wdt_enable(timeout) for xmega devices
 142:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** ** write signature (CCP_IOREG_gc) that enables change of protected I/O
 143:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****    registers to the CCP register
 144:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** ** At the same time,
 145:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****    1) set WDT change enable (WDT_CEN_bm)
 146:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****    2) enable WDT (WDT_ENABLE_bm)
 147:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****    3) set timeout (timeout)
 148:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** ** Synchronization starts when ENABLE bit of WDT is set. So, wait till it
 149:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****    finishes (SYNCBUSY of STATUS register is automatically cleared after the
 150:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****    sync is finished).
 151:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** */
 152:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** #define wdt_enable(timeout) \
 153:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** do { \
 154:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** uint8_t temp; \
 155:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** __asm__ __volatile__ (         \
 156:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     "in __tmp_reg__, %[rampd]"              "\n\t" \
 157:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     "out %[rampd], __zero_reg__"            "\n\t" \
 158:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]"     "\n\t" \
 159:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     "sts %[wdt_reg], %[wdt_enable_timeout]" "\n\t" \
 160:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     "1:lds %[tmp], %[wdt_status_reg]"       "\n\t" \
 161:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     "sbrc %[tmp], %[wdt_syncbusy_bit]"      "\n\t" \
 162:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     "rjmp 1b"                               "\n\t" \
 163:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     "out %[rampd], __tmp_reg__"             "\n\t" \
 164:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     : [tmp]                "=r" (temp) \
 165:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     : [rampd]              "I" (_SFR_IO_ADDR(RAMPD)),      \
 166:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****       [ccp_reg]            "I" (_SFR_IO_ADDR(CCP)),        \
 167:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****       [ioreg_cen_mask]     "r" ((uint8_t)CCP_IOREG_gc),     \
 168:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****       [wdt_reg]            "n" (_SFR_MEM_ADDR(WDT_CTRL)),   \
 169:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****       [wdt_enable_timeout] "r" ((uint8_t)(WDT_CEN_bm | WDT_ENABLE_bm | timeout)), \
 170:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****       [wdt_status_reg]     "n" (_SFR_MEM_ADDR(WDT_STATUS)), \
 171:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****       [wdt_syncbusy_bit]   "I" (WDT_SYNCBUSY_bm)            \
 172:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     : "r0" \
 173:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** ); \
 174:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** } while(0)
 175:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 
 176:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** #define wdt_disable() \
 177:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** __asm__ __volatile__ (  \
 178:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     "in __tmp_reg__, %[rampd]"          "\n\t" \
 179:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     "out %[rampd], __zero_reg__"        "\n\t" \
 180:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]" "\n\t" \
 181:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     "sts %[wdt_reg], %[disable_mask]"   "\n\t" \
 182:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     "out %[rampd], __tmp_reg__"         "\n\t" \
 183:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     : \
 184:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     : [rampd]             "I" (_SFR_IO_ADDR(RAMPD)),    \
 185:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****       [ccp_reg]           "I" (_SFR_IO_ADDR(CCP)),      \
 186:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****       [ioreg_cen_mask]    "r" ((uint8_t)CCP_IOREG_gc),   \
 187:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****       [wdt_reg]           "n" (_SFR_MEM_ADDR(WDT_CTRL)), \
 188:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****       [disable_mask]      "r" ((uint8_t)((~WDT_ENABLE_bm) | WDT_CEN_bm)) \
 189:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     : "r0" \
 190:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** );
 191:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 
 192:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** #elif defined(__AVR_TINY__)
 193:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 
 194:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** #define wdt_enable(value) \
 195:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 196:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 197:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     "cli" "\n\t"  \
 198:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     "wdr" "\n\t"  \
 199:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 200:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     "out %[WDTREG],%[WDVALUE]" "\n\t"  \
 201:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t"  \
 202:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     : /* no outputs */  \
 203:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),  \
 204:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 205:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 206:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****       [WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00) \
 207:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****       | _BV(WDE) | (value & 0x07) )) \
 208:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     : "r16" \
 209:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** )
 210:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 
 211:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** #define wdt_disable() \
 212:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** do { \
 213:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** uint8_t temp_wd; \
 214:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 215:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 216:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     "cli" "\n\t"  \
 217:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     "wdr" "\n\t"  \
 218:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 219:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     "in  %[TEMP_WD],%[WDTREG]" "\n\t" \
 220:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     "cbr %[TEMP_WD],%[WDVALUE]" "\n\t" \
 221:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     "out %[WDTREG],%[TEMP_WD]" "\n\t" \
 222:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t" \
 223:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     : /*no output */ \
 224:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)), \
 225:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 226:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 227:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****       [TEMP_WD] "d" (temp_wd), \
 228:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****       [WDVALUE] "n" (1 << WDE) \
 229:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****     : "r16" \
 230:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** ); \
 231:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** }while(0)
 232:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 
 233:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** #elif defined(CCP)
 234:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 
 235:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** static __inline__
 236:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 237:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** void wdt_enable (const uint8_t value)
 238:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** {
 239:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 240:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 	{
 241:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 242:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 243:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 244:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 245:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 246:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 247:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 248:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 			: /* no outputs */
 249:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 250:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 251:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 252:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 253:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 254:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 			: "r0"
 255:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 			);
 256:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 	}
 257:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P (_WD_CONTROL_REG))
 258:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 	{
 259:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 260:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 261:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 262:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 263:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 264:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 265:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 266:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 			: /* no outputs */
 267:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 268:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 269:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 270:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 271:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 272:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 			: "r0"
 273:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 			);
 274:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 	}
 275:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 276:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 	{
 277:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 278:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 279:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 280:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 281:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 282:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 283:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 284:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 			: /* no outputs */
 285:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 286:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 287:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 288:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 289:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 290:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 			: "r0"
 291:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 			);
 292:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 	}
 293:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 	else
 294:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****  	{
 295:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 296:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 297:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 298:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 299:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 300:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 301:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 302:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 			: /* no outputs */
 303:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 304:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 305:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 306:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 307:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 308:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 			: "r0"
 309:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 			);
 310:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 	}
 311:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** }
 312:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 
 313:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** static __inline__
 314:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 315:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** void wdt_disable (void)
 316:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** {
 317:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 318:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 	{
 319:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 320:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 321:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 322:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 323:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 324:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 325:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 326:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 327:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 328:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 329:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				: /*no output */
 330:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 331:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 332:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 333:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 334:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 335:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				: "r0"
 336:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				);
 337:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 	}
 338:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P(_WD_CONTROL_REG))
 339:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 	{
 340:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 341:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 342:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 343:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 344:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 345:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 346:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 347:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 348:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 349:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 350:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				: /*no output */
 351:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 352:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 353:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 354:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 355:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 356:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				: "r0"
 357:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				);
 358:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 	}
 359:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 360:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 	{
 361:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 362:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 363:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 364:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 365:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 366:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 367:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 368:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 369:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 370:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 371:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				: /*no output */
 372:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 373:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 374:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 375:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 376:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 377:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				: "r0"
 378:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				);
 379:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 	}
 380:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 	else
 381:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 	{
 382:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 383:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 384:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 385:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 386:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 387:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 388:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 389:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 390:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 391:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 392:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				: /*no output */
 393:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 394:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 395:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 396:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 397:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 398:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				: "r0"
 399:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				);
 400:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 	}
 401:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** }
 402:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 
 403:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** #else
 404:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 
 405:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** static __inline__
 406:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 407:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** void wdt_enable (const uint8_t value)
 408:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** {
 409:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 410:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 	{
 411:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 412:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 413:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 414:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 415:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				"out %0, %1" "\n\t"
 416:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 417:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				"out %0, %2" "\n \t"
 418:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				: /* no outputs */
 419:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				: "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 420:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 421:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 422:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 423:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				: "r0"
 424:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 		);
 425:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 	}
 426:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 	else
 427:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 	{
 428:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 429:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 430:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 431:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 432:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				"sts %0, %1" "\n\t"
 433:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 434:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				"sts %0, %2" "\n \t"
 435:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				: /* no outputs */
 436:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 437:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 438:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 439:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 440:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				: "r0"
 441:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 		);
 442:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 	}
 443:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** }
 444:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 
 445:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** static __inline__
 446:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 447:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** void wdt_disable (void)
 138               		.loc 2 447 6 view .LVU33
 139               	.LBB20:
 448:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** {
 449:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 140               		.loc 2 449 2 view .LVU34
 141               	.LBB21:
 450:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 	{
 451:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****         uint8_t register temp_reg;
 452:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 453:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__"    "\n\t"
 454:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				"cli"                        "\n\t"
 455:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				"wdr"                        "\n\t"
 456:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				"in  %[TEMPREG],%[WDTREG]"   "\n\t"
 457:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				"ori %[TEMPREG],%[WDCE_WDE]" "\n\t"
 458:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMPREG]"   "\n\t"
 459:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				"out %[WDTREG],__zero_reg__" "\n\t"
 460:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__"   "\n\t"
 461:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				: [TEMPREG] "=d" (temp_reg)
 462:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				: [WDTREG]  "I"  (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 463:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
 464:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 				: "r0"
 465:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 		);
 466:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 	}
 467:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 	else
 468:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 	{
 469:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h ****         uint8_t register temp_reg;
 142               		.loc 2 469 9 view .LVU35
 470:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 143               		.loc 2 470 3 view .LVU36
 144               	/* #APP */
 145               	 ;  470 "/usr/local/Cellar/avr-gcc/9.1.0/avr/include/avr/wdt.h" 1
 146 003a 0FB6      		in __tmp_reg__,__SREG__
 147 003c F894      		cli
 148 003e A895      		wdr
 149 0040 8091 6000 		lds r24,96
 150 0044 8861      		ori r24,24
 151 0046 8093 6000 		sts 96,r24
 152 004a 1092 6000 		sts 96,__zero_reg__
 153 004e 0FBE      		out __SREG__,__tmp_reg__
 154               		
 155               	 ;  0 "" 2
 156               	.LVL3:
 157               	/* #NOAPP */
 158               	.L2:
 159               	/* epilogue start */
 160               		.loc 2 470 3 is_stmt 0 view .LVU37
 161               	.LBE21:
 162               	.LBE20:
 163               	.LBE19:
 164               	.LBE18:
 165               	.LBE17:
 113:../../tmk_core/common/avr/suspend.c **** #endif
 114:../../tmk_core/common/avr/suspend.c **** }
 166               		.loc 1 114 1 view .LVU38
 167 0050 0895      		ret
 168               		.cfi_endproc
 169               	.LFE106:
 171               		.section	.text.suspend_wakeup_condition,"ax",@progbits
 172               	.global	suspend_wakeup_condition
 174               	suspend_wakeup_condition:
 175               	.LFB107:
 115:../../tmk_core/common/avr/suspend.c **** 
 116:../../tmk_core/common/avr/suspend.c **** bool suspend_wakeup_condition(void)
 117:../../tmk_core/common/avr/suspend.c **** {
 176               		.loc 1 117 1 is_stmt 1 view -0
 177               		.cfi_startproc
 178 0000 CF93      		push r28
 179               	.LCFI0:
 180               		.cfi_def_cfa_offset 3
 181               		.cfi_offset 28, -2
 182               	/* prologue: function */
 183               	/* frame size = 0 */
 184               	/* stack size = 1 */
 185               	.L__stack_usage = 1
 118:../../tmk_core/common/avr/suspend.c ****     matrix_power_up();
 186               		.loc 1 118 5 view .LVU40
 187 0002 0E94 0000 		call matrix_power_up
 188               	.LVL4:
 119:../../tmk_core/common/avr/suspend.c ****     matrix_scan();
 189               		.loc 1 119 5 view .LVU41
 190 0006 0E94 0000 		call matrix_scan
 191               	.LVL5:
 120:../../tmk_core/common/avr/suspend.c ****     matrix_power_down();
 192               		.loc 1 120 5 view .LVU42
 193 000a 0E94 0000 		call matrix_power_down
 194               	.LVL6:
 121:../../tmk_core/common/avr/suspend.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 195               		.loc 1 121 5 view .LVU43
 196               	.LBB22:
 197               		.loc 1 121 10 view .LVU44
 198               		.loc 1 121 18 is_stmt 0 view .LVU45
 199 000e C0E0      		ldi r28,0
 200               	.LVL7:
 201               	.L9:
 122:../../tmk_core/common/avr/suspend.c ****         if (matrix_get_row(r)) return true;
 202               		.loc 1 122 9 is_stmt 1 view .LVU46
 203               		.loc 1 122 13 is_stmt 0 view .LVU47
 204 0010 8C2F      		mov r24,r28
 205 0012 0E94 0000 		call matrix_get_row
 206               	.LVL8:
 207               		.loc 1 122 12 view .LVU48
 208 0016 8111      		cpse r24,__zero_reg__
 209 0018 00C0      		rjmp .L10
 121:../../tmk_core/common/avr/suspend.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 210               		.loc 1 121 43 discriminator 2 view .LVU49
 211 001a CF5F      		subi r28,lo8(-(1))
 212               	.LVL9:
 121:../../tmk_core/common/avr/suspend.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 213               		.loc 1 121 5 discriminator 2 view .LVU50
 214 001c C031      		cpi r28,lo8(16)
 215 001e 01F4      		brne .L9
 216               	.L7:
 217               	/* epilogue start */
 121:../../tmk_core/common/avr/suspend.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 218               		.loc 1 121 5 discriminator 2 view .LVU51
 219               	.LBE22:
 123:../../tmk_core/common/avr/suspend.c ****     }
 124:../../tmk_core/common/avr/suspend.c ****     return false;
 125:../../tmk_core/common/avr/suspend.c **** }
 220               		.loc 1 125 1 view .LVU52
 221 0020 CF91      		pop r28
 222               	.LVL10:
 223               		.loc 1 125 1 view .LVU53
 224 0022 0895      		ret
 225               	.LVL11:
 226               	.L10:
 227               	.LBB23:
 122:../../tmk_core/common/avr/suspend.c ****         if (matrix_get_row(r)) return true;
 228               		.loc 1 122 39 view .LVU54
 229 0024 81E0      		ldi r24,lo8(1)
 230 0026 00C0      		rjmp .L7
 231               	.LBE23:
 232               		.cfi_endproc
 233               	.LFE107:
 235               		.section	.text.suspend_wakeup_init,"ax",@progbits
 236               	.global	suspend_wakeup_init
 238               	suspend_wakeup_init:
 239               	.LFB108:
 126:../../tmk_core/common/avr/suspend.c **** 
 127:../../tmk_core/common/avr/suspend.c **** // run immediately after wakeup
 128:../../tmk_core/common/avr/suspend.c **** void suspend_wakeup_init(void)
 129:../../tmk_core/common/avr/suspend.c **** {
 240               		.loc 1 129 1 is_stmt 1 view -0
 241               		.cfi_startproc
 242               	/* prologue: function */
 243               	/* frame size = 0 */
 244               	/* stack size = 0 */
 245               	.L__stack_usage = 0
 130:../../tmk_core/common/avr/suspend.c ****     // clear keyboard state
 131:../../tmk_core/common/avr/suspend.c ****     matrix_clear();
 246               		.loc 1 131 5 view .LVU56
 247 0000 0E94 0000 		call matrix_clear
 248               	.LVL12:
 132:../../tmk_core/common/avr/suspend.c ****     clear_keyboard();
 249               		.loc 1 132 5 view .LVU57
 250 0004 0C94 0000 		jmp clear_keyboard
 251               	.LVL13:
 252               		.cfi_endproc
 253               	.LFE108:
 255               		.section	.text.__vector_13,"ax",@progbits
 256               	.global	__vector_13
 258               	__vector_13:
 259               	.LFB109:
 133:../../tmk_core/common/avr/suspend.c **** #ifdef BACKLIGHT_ENABLE
 134:../../tmk_core/common/avr/suspend.c ****     backlight_init();
 135:../../tmk_core/common/avr/suspend.c **** #endif
 136:../../tmk_core/common/avr/suspend.c **** }
 137:../../tmk_core/common/avr/suspend.c **** 
 138:../../tmk_core/common/avr/suspend.c **** #ifndef NO_SUSPEND_POWER_DOWN
 139:../../tmk_core/common/avr/suspend.c **** /* watchdog timeout */
 140:../../tmk_core/common/avr/suspend.c **** ISR(WDT_vect)
 141:../../tmk_core/common/avr/suspend.c **** {
 260               		.loc 1 141 1 view -0
 261               		.cfi_startproc
 262 0000 1F92 1FB6 		__gcc_isr 1
 262      1F92 1124 
 262      8F93 
 263 000a 9F93      		push r25
 264               	.LCFI1:
 265               		.cfi_def_cfa_offset 3
 266               		.cfi_offset 25, -2
 267 000c AF93      		push r26
 268               	.LCFI2:
 269               		.cfi_def_cfa_offset 4
 270               		.cfi_offset 26, -3
 271 000e BF93      		push r27
 272               	.LCFI3:
 273               		.cfi_def_cfa_offset 5
 274               		.cfi_offset 27, -4
 275               	/* prologue: Signal */
 276               	/* frame size = 0 */
 277               	/* stack size = 3...7 */
 278               	.L__stack_usage = 3 + __gcc_isr.n_pushed
 142:../../tmk_core/common/avr/suspend.c ****     // compensate timer for sleep
 143:../../tmk_core/common/avr/suspend.c ****     switch (wdt_timeout) {
 279               		.loc 1 143 5 view .LVU59
 280 0010 8091 0000 		lds r24,wdt_timeout
 281 0014 8111      		cpse r24,__zero_reg__
 282 0016 00C0      		rjmp .L13
 144:../../tmk_core/common/avr/suspend.c ****         case WDTO_15MS:
 145:../../tmk_core/common/avr/suspend.c ****             timer_count += 15 + 2;  // WDTO_15MS + 2(from observation)
 283               		.loc 1 145 13 view .LVU60
 284               		.loc 1 145 25 is_stmt 0 view .LVU61
 285 0018 8091 0000 		lds r24,timer_count
 286 001c 9091 0000 		lds r25,timer_count+1
 287 0020 A091 0000 		lds r26,timer_count+2
 288 0024 B091 0000 		lds r27,timer_count+3
 289 0028 4196      		adiw r24,17
 290 002a A11D      		adc r26,__zero_reg__
 291 002c B11D      		adc r27,__zero_reg__
 292 002e 8093 0000 		sts timer_count,r24
 293 0032 9093 0000 		sts timer_count+1,r25
 294 0036 A093 0000 		sts timer_count+2,r26
 295 003a B093 0000 		sts timer_count+3,r27
 146:../../tmk_core/common/avr/suspend.c ****             break;
 296               		.loc 1 146 13 is_stmt 1 view .LVU62
 147:../../tmk_core/common/avr/suspend.c ****         default:
 148:../../tmk_core/common/avr/suspend.c ****             ;
 297               		.loc 1 148 13 view .LVU63
 298               	.L13:
 299               	/* epilogue start */
 149:../../tmk_core/common/avr/suspend.c ****     }
 150:../../tmk_core/common/avr/suspend.c **** }
 300               		.loc 1 150 1 is_stmt 0 view .LVU64
 301 003e BF91      		pop r27
 302 0040 AF91      		pop r26
 303 0042 9F91      		pop r25
 304 0044 8F91 1F90 		__gcc_isr 2
 304      1FBE 1F90 
 305 004c 1895      		reti
 306               		__gcc_isr 0,r24
 307               		.cfi_endproc
 308               	.LFE109:
 310               		.section	.bss.wdt_timeout,"aw",@nobits
 313               	wdt_timeout:
 314 0000 00        		.zero	1
 315               		.text
 316               	.Letext0:
 317               		.file 3 "/usr/local/Cellar/avr-gcc/9.1.0/avr/include/stdint.h"
 318               		.file 4 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 319               		.file 5 "../../tmk_core/common/timer.h"
 320               		.file 6 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 321               		.file 7 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 322               		.file 8 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/HostStandardReq.h"
 323               		.file 9 "/usr/local/Cellar/avr-gcc/9.1.0/avr/include/stdio.h"
 324               		.file 10 "../../tmk_core/common/report.h"
 325               		.file 11 "../../tmk_core/common/host_driver.h"
 326               		.file 12 "../../tmk_core/common/host.h"
 327               		.file 13 "../../tmk_core/protocol/lufa/lufa.h"
 328               		.file 14 "../../tmk_core/common/matrix.h"
 329               		.file 15 "../../tmk_core/common/action.h"
 330               		.file 16 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../Device.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 suspend.c
/var/folders/cl/jr07md_52y31f_27z07pkw7h0000gp/T//cc0e1ila.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/cl/jr07md_52y31f_27z07pkw7h0000gp/T//cc0e1ila.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/cl/jr07md_52y31f_27z07pkw7h0000gp/T//cc0e1ila.s:4      *ABS*:000000000000003f __SREG__
/var/folders/cl/jr07md_52y31f_27z07pkw7h0000gp/T//cc0e1ila.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/cl/jr07md_52y31f_27z07pkw7h0000gp/T//cc0e1ila.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/cl/jr07md_52y31f_27z07pkw7h0000gp/T//cc0e1ila.s:13     .text.suspend_idle:0000000000000000 suspend_idle
/var/folders/cl/jr07md_52y31f_27z07pkw7h0000gp/T//cc0e1ila.s:68     .text.suspend_power_down:0000000000000000 suspend_power_down
/var/folders/cl/jr07md_52y31f_27z07pkw7h0000gp/T//cc0e1ila.s:313    .bss.wdt_timeout:0000000000000000 wdt_timeout
/var/folders/cl/jr07md_52y31f_27z07pkw7h0000gp/T//cc0e1ila.s:174    .text.suspend_wakeup_condition:0000000000000000 suspend_wakeup_condition
/var/folders/cl/jr07md_52y31f_27z07pkw7h0000gp/T//cc0e1ila.s:238    .text.suspend_wakeup_init:0000000000000000 suspend_wakeup_init
/var/folders/cl/jr07md_52y31f_27z07pkw7h0000gp/T//cc0e1ila.s:258    .text.__vector_13:0000000000000000 __vector_13
                            *ABS*:0000000000000003 __gcc_isr.n_pushed.001

UNDEFINED SYMBOLS
USB_DeviceState
matrix_power_up
matrix_scan
matrix_power_down
matrix_get_row
matrix_clear
clear_keyboard
timer_count
__do_clear_bss
