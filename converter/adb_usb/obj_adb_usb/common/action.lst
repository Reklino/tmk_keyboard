   1               		.file	"action.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.action_exec,"ax",@progbits
  11               	.global	action_exec
  13               	action_exec:
  14               	.LFB10:
  15               		.file 1 "../../tmk_core/common/action.c"
   1:../../tmk_core/common/action.c **** /*
   2:../../tmk_core/common/action.c **** Copyright 2012,2013 Jun Wako <wakojun@gmail.com>
   3:../../tmk_core/common/action.c **** 
   4:../../tmk_core/common/action.c **** This program is free software: you can redistribute it and/or modify
   5:../../tmk_core/common/action.c **** it under the terms of the GNU General Public License as published by
   6:../../tmk_core/common/action.c **** the Free Software Foundation, either version 2 of the License, or
   7:../../tmk_core/common/action.c **** (at your option) any later version.
   8:../../tmk_core/common/action.c **** 
   9:../../tmk_core/common/action.c **** This program is distributed in the hope that it will be useful,
  10:../../tmk_core/common/action.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../tmk_core/common/action.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../tmk_core/common/action.c **** GNU General Public License for more details.
  13:../../tmk_core/common/action.c **** 
  14:../../tmk_core/common/action.c **** You should have received a copy of the GNU General Public License
  15:../../tmk_core/common/action.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../tmk_core/common/action.c **** */
  17:../../tmk_core/common/action.c **** #include "host.h"
  18:../../tmk_core/common/action.c **** #include "keycode.h"
  19:../../tmk_core/common/action.c **** #include "keyboard.h"
  20:../../tmk_core/common/action.c **** #include "mousekey.h"
  21:../../tmk_core/common/action.c **** #include "command.h"
  22:../../tmk_core/common/action.c **** #include "led.h"
  23:../../tmk_core/common/action.c **** #include "backlight.h"
  24:../../tmk_core/common/action.c **** #include "action_layer.h"
  25:../../tmk_core/common/action.c **** #include "action_tapping.h"
  26:../../tmk_core/common/action.c **** #include "action_macro.h"
  27:../../tmk_core/common/action.c **** #include "action_util.h"
  28:../../tmk_core/common/action.c **** #include "action.h"
  29:../../tmk_core/common/action.c **** #include "hook.h"
  30:../../tmk_core/common/action.c **** #include "wait.h"
  31:../../tmk_core/common/action.c **** 
  32:../../tmk_core/common/action.c **** #ifdef DEBUG_ACTION
  33:../../tmk_core/common/action.c **** #include "debug.h"
  34:../../tmk_core/common/action.c **** #else
  35:../../tmk_core/common/action.c **** #include "nodebug.h"
  36:../../tmk_core/common/action.c **** #endif
  37:../../tmk_core/common/action.c **** 
  38:../../tmk_core/common/action.c **** 
  39:../../tmk_core/common/action.c **** void action_exec(keyevent_t event)
  40:../../tmk_core/common/action.c **** {
  16               		.loc 1 40 1 view -0
  17               		.cfi_startproc
  18 0000 CF93      		push r28
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 28, -2
  22 0002 DF93      		push r29
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 29, -3
  26 0004 CDB7      		in r28,__SP_L__
  27 0006 DEB7      		in r29,__SP_H__
  28               	.LCFI2:
  29               		.cfi_def_cfa_register 28
  30 0008 2B97      		sbiw r28,11
  31               	.LCFI3:
  32               		.cfi_def_cfa_offset 15
  33 000a 0FB6      		in __tmp_reg__,__SREG__
  34 000c F894      		cli
  35 000e DEBF      		out __SP_H__,r29
  36 0010 0FBE      		out __SREG__,__tmp_reg__
  37 0012 CDBF      		out __SP_L__,r28
  38               	/* prologue: function */
  39               	/* frame size = 11 */
  40               	/* stack size = 13 */
  41               	.L__stack_usage = 13
  42 0014 4F83      		std Y+7,r20
  43 0016 5887      		std Y+8,r21
  44 0018 6987      		std Y+9,r22
  45 001a 7A87      		std Y+10,r23
  46 001c 8B87      		std Y+11,r24
  47               	.LVL0:
  41:../../tmk_core/common/action.c ****     if (!IS_NOEVENT(event)) {
  48               		.loc 1 41 5 view .LVU1
  49               	.LBB16:
  50               	.LBI16:
  51               		.file 2 "../../tmk_core/common/keyboard.h"
   1:../../tmk_core/common/keyboard.h **** /*
   2:../../tmk_core/common/keyboard.h **** Copyright 2011,2012,2013 Jun Wako <wakojun@gmail.com>
   3:../../tmk_core/common/keyboard.h **** 
   4:../../tmk_core/common/keyboard.h **** This program is free software: you can redistribute it and/or modify
   5:../../tmk_core/common/keyboard.h **** it under the terms of the GNU General Public License as published by
   6:../../tmk_core/common/keyboard.h **** the Free Software Foundation, either version 2 of the License, or
   7:../../tmk_core/common/keyboard.h **** (at your option) any later version.
   8:../../tmk_core/common/keyboard.h **** 
   9:../../tmk_core/common/keyboard.h **** This program is distributed in the hope that it will be useful,
  10:../../tmk_core/common/keyboard.h **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../tmk_core/common/keyboard.h **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../tmk_core/common/keyboard.h **** GNU General Public License for more details.
  13:../../tmk_core/common/keyboard.h **** 
  14:../../tmk_core/common/keyboard.h **** You should have received a copy of the GNU General Public License
  15:../../tmk_core/common/keyboard.h **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../tmk_core/common/keyboard.h **** */
  17:../../tmk_core/common/keyboard.h **** 
  18:../../tmk_core/common/keyboard.h **** #ifndef KEYBOARD_H
  19:../../tmk_core/common/keyboard.h **** #define KEYBOARD_H
  20:../../tmk_core/common/keyboard.h **** 
  21:../../tmk_core/common/keyboard.h **** #include <stdbool.h>
  22:../../tmk_core/common/keyboard.h **** #include <stdint.h>
  23:../../tmk_core/common/keyboard.h **** 
  24:../../tmk_core/common/keyboard.h **** 
  25:../../tmk_core/common/keyboard.h **** #ifdef __cplusplus
  26:../../tmk_core/common/keyboard.h **** extern "C" {
  27:../../tmk_core/common/keyboard.h **** #endif
  28:../../tmk_core/common/keyboard.h **** 
  29:../../tmk_core/common/keyboard.h **** /* key matrix position */
  30:../../tmk_core/common/keyboard.h **** typedef struct {
  31:../../tmk_core/common/keyboard.h ****     uint8_t col;
  32:../../tmk_core/common/keyboard.h ****     uint8_t row;
  33:../../tmk_core/common/keyboard.h **** } keypos_t;
  34:../../tmk_core/common/keyboard.h **** 
  35:../../tmk_core/common/keyboard.h **** /* key event */
  36:../../tmk_core/common/keyboard.h **** typedef struct {
  37:../../tmk_core/common/keyboard.h ****     keypos_t key;
  38:../../tmk_core/common/keyboard.h ****     bool     pressed;
  39:../../tmk_core/common/keyboard.h ****     uint16_t time;
  40:../../tmk_core/common/keyboard.h **** } keyevent_t;
  41:../../tmk_core/common/keyboard.h **** 
  42:../../tmk_core/common/keyboard.h **** /* equivalent test of keypos_t */
  43:../../tmk_core/common/keyboard.h **** #define KEYEQ(keya, keyb)       ((keya).row == (keyb).row && (keya).col == (keyb).col)
  44:../../tmk_core/common/keyboard.h **** 
  45:../../tmk_core/common/keyboard.h **** /* Rules for No Event:
  46:../../tmk_core/common/keyboard.h ****  * 1) (time == 0) to handle (keyevent_t){} as empty event
  47:../../tmk_core/common/keyboard.h ****  * 2) Matrix(255, 255) to make TICK event available
  48:../../tmk_core/common/keyboard.h ****  */
  49:../../tmk_core/common/keyboard.h **** static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 &
  52               		.loc 2 49 20 view .LVU2
  53               	.LBB17:
  54               		.loc 2 49 51 view .LVU3
  55               		.loc 2 49 74 is_stmt 0 view .LVU4
  56 001e 8A85      		ldd r24,Y+10
  57 0020 9B85      		ldd r25,Y+11
  58 0022 892B      		or r24,r25
  59 0024 01F0      		breq .L2
  60 0026 842F      		mov r24,r20
  61 0028 8523      		and r24,r21
  62 002a 8F3F      		cpi r24,lo8(-1)
  63 002c 01F4      		brne .L3
  64               	.LVL1:
  65               	.L2:
  66               		.loc 2 49 74 view .LVU5
  67               	.LBE17:
  68               	.LBE16:
  42:../../tmk_core/common/action.c ****         dprint("\n---- action_exec: start -----\n");
  43:../../tmk_core/common/action.c ****         dprint("EVENT: "); debug_event(event); dprintln();
  44:../../tmk_core/common/action.c ****         hook_matrix_change(event);
  45:../../tmk_core/common/action.c ****     }
  46:../../tmk_core/common/action.c **** 
  47:../../tmk_core/common/action.c ****     keyrecord_t record = { .event = event };
  69               		.loc 1 47 5 is_stmt 1 view .LVU6
  70               		.loc 1 47 17 is_stmt 0 view .LVU7
  71 002e 1E82      		std Y+6,__zero_reg__
  72 0030 85E0      		ldi r24,lo8(5)
  73 0032 FE01      		movw r30,r28
  74 0034 3796      		adiw r30,7
  75 0036 DE01      		movw r26,r28
  76 0038 1196      		adiw r26,1
  77               		0:
  78 003a 0190      		ld r0,Z+
  79 003c 0D92      		st X+,r0
  80 003e 8A95      		dec r24
  81 0040 01F4      		brne 0b
  48:../../tmk_core/common/action.c **** 
  49:../../tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
  50:../../tmk_core/common/action.c ****     action_tapping_process(record);
  82               		.loc 1 50 5 is_stmt 1 view .LVU8
  83 0042 4981      		ldd r20,Y+1
  84 0044 5A81      		ldd r21,Y+2
  85 0046 6B81      		ldd r22,Y+3
  86 0048 7C81      		ldd r23,Y+4
  87 004a 8D81      		ldd r24,Y+5
  88 004c 9E81      		ldd r25,Y+6
  89               	/* epilogue start */
  51:../../tmk_core/common/action.c **** #else
  52:../../tmk_core/common/action.c ****     process_action(&record);
  53:../../tmk_core/common/action.c ****     if (!IS_NOEVENT(record.event)) {
  54:../../tmk_core/common/action.c ****         dprint("processed: "); debug_record(record); dprintln();
  55:../../tmk_core/common/action.c ****     }
  56:../../tmk_core/common/action.c **** #endif
  57:../../tmk_core/common/action.c **** }
  90               		.loc 1 57 1 is_stmt 0 view .LVU9
  91 004e 2B96      		adiw r28,11
  92 0050 0FB6      		in __tmp_reg__,__SREG__
  93 0052 F894      		cli
  94 0054 DEBF      		out __SP_H__,r29
  95 0056 0FBE      		out __SREG__,__tmp_reg__
  96 0058 CDBF      		out __SP_L__,r28
  97 005a DF91      		pop r29
  98 005c CF91      		pop r28
  50:../../tmk_core/common/action.c **** #else
  99               		.loc 1 50 5 view .LVU10
 100 005e 0C94 0000 		jmp action_tapping_process
 101               	.LVL2:
 102               	.L3:
  42:../../tmk_core/common/action.c ****         dprint("EVENT: "); debug_event(event); dprintln();
 103               		.loc 1 42 9 is_stmt 1 view .LVU11
  43:../../tmk_core/common/action.c ****         hook_matrix_change(event);
 104               		.loc 1 43 9 view .LVU12
  43:../../tmk_core/common/action.c ****         hook_matrix_change(event);
 105               		.loc 1 43 28 view .LVU13
  43:../../tmk_core/common/action.c ****         hook_matrix_change(event);
 106               		.loc 1 43 48 view .LVU14
  44:../../tmk_core/common/action.c ****     }
 107               		.loc 1 44 9 view .LVU15
 108 0062 6985      		ldd r22,Y+9
 109 0064 7A85      		ldd r23,Y+10
 110 0066 8B85      		ldd r24,Y+11
 111 0068 0E94 0000 		call hook_matrix_change
 112               	.LVL3:
  44:../../tmk_core/common/action.c ****     }
 113               		.loc 1 44 9 is_stmt 0 view .LVU16
 114 006c 00C0      		rjmp .L2
 115               		.cfi_endproc
 116               	.LFE10:
 118               		.section	.text.register_code,"ax",@progbits
 119               	.global	register_code
 121               	register_code:
 122               	.LVL4:
 123               	.LFB12:
  58:../../tmk_core/common/action.c **** 
  59:../../tmk_core/common/action.c **** void process_action(keyrecord_t *record)
  60:../../tmk_core/common/action.c **** {
  61:../../tmk_core/common/action.c ****     if (hook_process_action(record)) return;
  62:../../tmk_core/common/action.c **** 
  63:../../tmk_core/common/action.c ****     keyevent_t event = record->event;
  64:../../tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
  65:../../tmk_core/common/action.c ****     uint8_t tap_count = record->tap.count;
  66:../../tmk_core/common/action.c **** #endif
  67:../../tmk_core/common/action.c **** 
  68:../../tmk_core/common/action.c ****     if (IS_NOEVENT(event)) { return; }
  69:../../tmk_core/common/action.c **** 
  70:../../tmk_core/common/action.c ****     action_t action = layer_switch_get_action(event);
  71:../../tmk_core/common/action.c ****     dprint("ACTION: "); debug_action(action);
  72:../../tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
  73:../../tmk_core/common/action.c ****     dprint(" layer_state: "); layer_debug();
  74:../../tmk_core/common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
  75:../../tmk_core/common/action.c **** #endif
  76:../../tmk_core/common/action.c ****     dprintln();
  77:../../tmk_core/common/action.c **** 
  78:../../tmk_core/common/action.c ****     switch (action.kind.id) {
  79:../../tmk_core/common/action.c ****         /* Key and Mods */
  80:../../tmk_core/common/action.c ****         case ACT_LMODS:
  81:../../tmk_core/common/action.c ****         case ACT_RMODS:
  82:../../tmk_core/common/action.c ****             {
  83:../../tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
  84:../../tmk_core/common/action.c ****                                                                 action.key.mods<<4;
  85:../../tmk_core/common/action.c ****                 if (event.pressed) {
  86:../../tmk_core/common/action.c ****                     if (mods) {
  87:../../tmk_core/common/action.c ****                         add_weak_mods(mods);
  88:../../tmk_core/common/action.c ****                         send_keyboard_report();
  89:../../tmk_core/common/action.c ****                     }
  90:../../tmk_core/common/action.c ****                     register_code(action.key.code);
  91:../../tmk_core/common/action.c ****                 } else {
  92:../../tmk_core/common/action.c ****                     unregister_code(action.key.code);
  93:../../tmk_core/common/action.c ****                     if (mods) {
  94:../../tmk_core/common/action.c ****                         del_weak_mods(mods);
  95:../../tmk_core/common/action.c ****                         send_keyboard_report();
  96:../../tmk_core/common/action.c ****                     }
  97:../../tmk_core/common/action.c ****                 }
  98:../../tmk_core/common/action.c ****             }
  99:../../tmk_core/common/action.c ****             break;
 100:../../tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 101:../../tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 102:../../tmk_core/common/action.c ****         case ACT_RMODS_TAP:
 103:../../tmk_core/common/action.c ****             {
 104:../../tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
 105:../../tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 106:../../tmk_core/common/action.c ****                 switch (action.key.code) {
 107:../../tmk_core/common/action.c ****     #ifndef NO_ACTION_ONESHOT
 108:../../tmk_core/common/action.c ****                     case MODS_ONESHOT:
 109:../../tmk_core/common/action.c ****                         // Oneshot modifier
 110:../../tmk_core/common/action.c ****                         if (event.pressed) {
 111:../../tmk_core/common/action.c ****                             if (tap_count == 0) {
 112:../../tmk_core/common/action.c ****                                 register_mods(mods);
 113:../../tmk_core/common/action.c ****                             }
 114:../../tmk_core/common/action.c ****                             else if (tap_count == 1) {
 115:../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: start\n");
 116:../../tmk_core/common/action.c ****                                 set_oneshot_mods(mods);
 117:../../tmk_core/common/action.c ****                             }
 118:../../tmk_core/common/action.c ****                             else {
 119:../../tmk_core/common/action.c ****                                 register_mods(mods);
 120:../../tmk_core/common/action.c ****                             }
 121:../../tmk_core/common/action.c ****                         } else {
 122:../../tmk_core/common/action.c ****                             if (tap_count == 0) {
 123:../../tmk_core/common/action.c ****                                 clear_oneshot_mods();
 124:../../tmk_core/common/action.c ****                                 unregister_mods(mods);
 125:../../tmk_core/common/action.c ****                             }
 126:../../tmk_core/common/action.c ****                             else if (tap_count == 1) {
 127:../../tmk_core/common/action.c ****                                 // Retain Oneshot mods
 128:../../tmk_core/common/action.c ****                             }
 129:../../tmk_core/common/action.c ****                             else {
 130:../../tmk_core/common/action.c ****                                 clear_oneshot_mods();
 131:../../tmk_core/common/action.c ****                                 unregister_mods(mods);
 132:../../tmk_core/common/action.c ****                             }
 133:../../tmk_core/common/action.c ****                         }
 134:../../tmk_core/common/action.c ****                         break;
 135:../../tmk_core/common/action.c ****     #endif
 136:../../tmk_core/common/action.c ****                     case MODS_TAP_TOGGLE:
 137:../../tmk_core/common/action.c ****                         if (event.pressed) {
 138:../../tmk_core/common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 139:../../tmk_core/common/action.c ****                                 if (mods & get_mods()) {
 140:../../tmk_core/common/action.c ****                                     dprint("MODS_TAP_TOGGLE: toggle mods off\n");
 141:../../tmk_core/common/action.c ****                                     unregister_mods(mods);
 142:../../tmk_core/common/action.c ****                                 } else {
 143:../../tmk_core/common/action.c ****                                     dprint("MODS_TAP_TOGGLE: toggle mods on\n");
 144:../../tmk_core/common/action.c ****                                     register_mods(mods);
 145:../../tmk_core/common/action.c ****                                 }
 146:../../tmk_core/common/action.c ****                             }
 147:../../tmk_core/common/action.c ****                         } else {
 148:../../tmk_core/common/action.c ****                             if (tap_count < TAPPING_TOGGLE) {
 149:../../tmk_core/common/action.c ****                                 dprint("MODS_TAP_TOGGLE: release : unregister_mods\n");
 150:../../tmk_core/common/action.c ****                                 unregister_mods(mods);
 151:../../tmk_core/common/action.c ****                             }
 152:../../tmk_core/common/action.c ****                         }
 153:../../tmk_core/common/action.c ****                         break;
 154:../../tmk_core/common/action.c ****                     default:
 155:../../tmk_core/common/action.c ****                         if (event.pressed) {
 156:../../tmk_core/common/action.c ****                             if (tap_count > 0) {
 157:../../tmk_core/common/action.c ****                                 if (record->tap.interrupted) {
 158:../../tmk_core/common/action.c ****                                     dprint("MODS_TAP: Tap: Cancel: add_mods\n");
 159:../../tmk_core/common/action.c ****                                     // ad hoc: set 0 to cancel tap
 160:../../tmk_core/common/action.c ****                                     record->tap.count = 0;
 161:../../tmk_core/common/action.c ****                                     register_mods(mods);
 162:../../tmk_core/common/action.c ****                                 } else {
 163:../../tmk_core/common/action.c ****                                     dprint("MODS_TAP: Tap: register_code\n");
 164:../../tmk_core/common/action.c ****                                     register_code(action.key.code);
 165:../../tmk_core/common/action.c ****                                 }
 166:../../tmk_core/common/action.c ****                             } else {
 167:../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: No tap: add_mods\n");
 168:../../tmk_core/common/action.c ****                                 register_mods(mods);
 169:../../tmk_core/common/action.c ****                             }
 170:../../tmk_core/common/action.c ****                         } else {
 171:../../tmk_core/common/action.c ****                             if (tap_count > 0) {
 172:../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 173:../../tmk_core/common/action.c ****                                 unregister_code(action.key.code);
 174:../../tmk_core/common/action.c ****                             } else {
 175:../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: No tap: add_mods\n");
 176:../../tmk_core/common/action.c ****                                 unregister_mods(mods);
 177:../../tmk_core/common/action.c ****                             }
 178:../../tmk_core/common/action.c ****                         }
 179:../../tmk_core/common/action.c ****                         break;
 180:../../tmk_core/common/action.c ****                 }
 181:../../tmk_core/common/action.c ****             }
 182:../../tmk_core/common/action.c ****             break;
 183:../../tmk_core/common/action.c **** #endif
 184:../../tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 185:../../tmk_core/common/action.c ****         /* other HID usage */
 186:../../tmk_core/common/action.c ****         case ACT_USAGE:
 187:../../tmk_core/common/action.c ****             switch (action.usage.page) {
 188:../../tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 189:../../tmk_core/common/action.c ****                     if (event.pressed) {
 190:../../tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 191:../../tmk_core/common/action.c ****                     } else {
 192:../../tmk_core/common/action.c ****                         host_system_send(0);
 193:../../tmk_core/common/action.c ****                     }
 194:../../tmk_core/common/action.c ****                     break;
 195:../../tmk_core/common/action.c ****                 case PAGE_CONSUMER:
 196:../../tmk_core/common/action.c ****                     if (event.pressed) {
 197:../../tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 198:../../tmk_core/common/action.c ****                     } else {
 199:../../tmk_core/common/action.c ****                         host_consumer_send(0);
 200:../../tmk_core/common/action.c ****                     }
 201:../../tmk_core/common/action.c ****                     break;
 202:../../tmk_core/common/action.c ****             }
 203:../../tmk_core/common/action.c ****             break;
 204:../../tmk_core/common/action.c **** #endif
 205:../../tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 206:../../tmk_core/common/action.c ****         /* Mouse key */
 207:../../tmk_core/common/action.c ****         case ACT_MOUSEKEY:
 208:../../tmk_core/common/action.c ****             if (event.pressed) {
 209:../../tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 210:../../tmk_core/common/action.c ****                 mousekey_send();
 211:../../tmk_core/common/action.c ****             } else {
 212:../../tmk_core/common/action.c ****                 mousekey_off(action.key.code);
 213:../../tmk_core/common/action.c ****                 mousekey_send();
 214:../../tmk_core/common/action.c ****             }
 215:../../tmk_core/common/action.c ****             break;
 216:../../tmk_core/common/action.c **** #endif
 217:../../tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 218:../../tmk_core/common/action.c ****         case ACT_LAYER:
 219:../../tmk_core/common/action.c ****             if (action.layer_bitop.on == 0) {
 220:../../tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 221:../../tmk_core/common/action.c ****                 if (!event.pressed) {
 222:../../tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 223:../../tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 224:../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 225:../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 226:../../tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 227:../../tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 228:../../tmk_core/common/action.c ****                         case OP_BIT_XOR: default_layer_xor(bits | mask); break;
 229:../../tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 230:../../tmk_core/common/action.c ****                     }
 231:../../tmk_core/common/action.c ****                 }
 232:../../tmk_core/common/action.c ****             } else {
 233:../../tmk_core/common/action.c ****                 /* Layer Bitwise Operation */
 234:../../tmk_core/common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 235:../../tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 236:../../tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 237:../../tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 238:../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 239:../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 240:../../tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 241:../../tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 242:../../tmk_core/common/action.c ****                         case OP_BIT_XOR: layer_xor(bits | mask); break;
 243:../../tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 244:../../tmk_core/common/action.c ****                     }
 245:../../tmk_core/common/action.c ****                 }
 246:../../tmk_core/common/action.c ****             }
 247:../../tmk_core/common/action.c ****             break;
 248:../../tmk_core/common/action.c ****     #ifndef NO_ACTION_TAPPING
 249:../../tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 250:../../tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 251:../../tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 252:../../tmk_core/common/action.c ****                 case 0xc0 ... 0xdf:
 253:../../tmk_core/common/action.c ****                     /* layer On/Off with modifiers */
 254:../../tmk_core/common/action.c ****                     if (event.pressed) {
 255:../../tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 256:../../tmk_core/common/action.c ****                         register_mods((action.layer_tap.code & 0x10) ?
 257:../../tmk_core/common/action.c ****                                 (action.layer_tap.code & 0x0f) << 4 :
 258:../../tmk_core/common/action.c ****                                 (action.layer_tap.code & 0x0f));
 259:../../tmk_core/common/action.c ****                     } else {
 260:../../tmk_core/common/action.c ****                         layer_off(action.layer_tap.val);
 261:../../tmk_core/common/action.c ****                         unregister_mods((action.layer_tap.code & 0x10) ?
 262:../../tmk_core/common/action.c ****                                 (action.layer_tap.code & 0x0f) << 4 :
 263:../../tmk_core/common/action.c ****                                 (action.layer_tap.code & 0x0f));
 264:../../tmk_core/common/action.c ****                     }
 265:../../tmk_core/common/action.c ****                     break;
 266:../../tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 267:../../tmk_core/common/action.c ****                     /* tap toggle */
 268:../../tmk_core/common/action.c ****                     if (event.pressed) {
 269:../../tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 270:../../tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 271:../../tmk_core/common/action.c ****                         }
 272:../../tmk_core/common/action.c ****                     } else {
 273:../../tmk_core/common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 274:../../tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 275:../../tmk_core/common/action.c ****                         }
 276:../../tmk_core/common/action.c ****                     }
 277:../../tmk_core/common/action.c ****                     break;
 278:../../tmk_core/common/action.c ****                 case OP_ON_OFF:
 279:../../tmk_core/common/action.c ****                     event.pressed ? layer_on(action.layer_tap.val) :
 280:../../tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 281:../../tmk_core/common/action.c ****                     break;
 282:../../tmk_core/common/action.c ****                 case OP_OFF_ON:
 283:../../tmk_core/common/action.c ****                     event.pressed ? layer_off(action.layer_tap.val) :
 284:../../tmk_core/common/action.c ****                                     layer_on(action.layer_tap.val);
 285:../../tmk_core/common/action.c ****                     break;
 286:../../tmk_core/common/action.c ****                 case OP_SET_CLEAR:
 287:../../tmk_core/common/action.c ****                     event.pressed ? layer_move(action.layer_tap.val) :
 288:../../tmk_core/common/action.c ****                                     layer_clear();
 289:../../tmk_core/common/action.c ****                     break;
 290:../../tmk_core/common/action.c ****                 default:
 291:../../tmk_core/common/action.c ****                     /* tap key */
 292:../../tmk_core/common/action.c ****                     if (event.pressed) {
 293:../../tmk_core/common/action.c ****                         if (tap_count > 0) {
 294:../../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 295:../../tmk_core/common/action.c ****                             register_code(action.layer_tap.code);
 296:../../tmk_core/common/action.c ****                         } else {
 297:../../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
 298:../../tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 299:../../tmk_core/common/action.c ****                         }
 300:../../tmk_core/common/action.c ****                     } else {
 301:../../tmk_core/common/action.c ****                         if (tap_count > 0) {
 302:../../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 303:../../tmk_core/common/action.c ****                             unregister_code(action.layer_tap.code);
 304:../../tmk_core/common/action.c ****                         } else {
 305:../../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: Off on release\n");
 306:../../tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 307:../../tmk_core/common/action.c ****                         }
 308:../../tmk_core/common/action.c ****                     }
 309:../../tmk_core/common/action.c ****                     break;
 310:../../tmk_core/common/action.c ****             }
 311:../../tmk_core/common/action.c ****             break;
 312:../../tmk_core/common/action.c ****     #endif
 313:../../tmk_core/common/action.c **** #endif
 314:../../tmk_core/common/action.c ****         /* Extentions */
 315:../../tmk_core/common/action.c **** #ifndef NO_ACTION_MACRO
 316:../../tmk_core/common/action.c ****         case ACT_MACRO:
 317:../../tmk_core/common/action.c ****             action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
 318:../../tmk_core/common/action.c ****             break;
 319:../../tmk_core/common/action.c **** #endif
 320:../../tmk_core/common/action.c **** #ifdef BACKLIGHT_ENABLE
 321:../../tmk_core/common/action.c ****         case ACT_BACKLIGHT:
 322:../../tmk_core/common/action.c ****             if (!event.pressed) {
 323:../../tmk_core/common/action.c ****                 switch (action.backlight.opt) {
 324:../../tmk_core/common/action.c ****                     case BACKLIGHT_INCREASE:
 325:../../tmk_core/common/action.c ****                         backlight_increase();
 326:../../tmk_core/common/action.c ****                         break;
 327:../../tmk_core/common/action.c ****                     case BACKLIGHT_DECREASE:
 328:../../tmk_core/common/action.c ****                         backlight_decrease();
 329:../../tmk_core/common/action.c ****                         break;
 330:../../tmk_core/common/action.c ****                     case BACKLIGHT_TOGGLE:
 331:../../tmk_core/common/action.c ****                         backlight_toggle();
 332:../../tmk_core/common/action.c ****                         break;
 333:../../tmk_core/common/action.c ****                     case BACKLIGHT_STEP:
 334:../../tmk_core/common/action.c ****                         backlight_step();
 335:../../tmk_core/common/action.c ****                         break;
 336:../../tmk_core/common/action.c ****                     case BACKLIGHT_LEVEL:
 337:../../tmk_core/common/action.c ****                         backlight_level(action.backlight.level);
 338:../../tmk_core/common/action.c ****                         break;
 339:../../tmk_core/common/action.c ****                 }
 340:../../tmk_core/common/action.c ****             }
 341:../../tmk_core/common/action.c ****             break;
 342:../../tmk_core/common/action.c **** #endif
 343:../../tmk_core/common/action.c ****         case ACT_COMMAND:
 344:../../tmk_core/common/action.c ****             break;
 345:../../tmk_core/common/action.c **** #ifndef NO_ACTION_FUNCTION
 346:../../tmk_core/common/action.c ****         case ACT_FUNCTION:
 347:../../tmk_core/common/action.c ****             action_function(record, action.func.id, action.func.opt);
 348:../../tmk_core/common/action.c ****             break;
 349:../../tmk_core/common/action.c **** #endif
 350:../../tmk_core/common/action.c ****         default:
 351:../../tmk_core/common/action.c ****             break;
 352:../../tmk_core/common/action.c ****     }
 353:../../tmk_core/common/action.c **** }
 354:../../tmk_core/common/action.c **** 
 355:../../tmk_core/common/action.c **** 
 356:../../tmk_core/common/action.c **** 
 357:../../tmk_core/common/action.c **** 
 358:../../tmk_core/common/action.c **** /*
 359:../../tmk_core/common/action.c ****  * Utilities for actions.
 360:../../tmk_core/common/action.c ****  */
 361:../../tmk_core/common/action.c **** void register_code(uint8_t code)
 362:../../tmk_core/common/action.c **** {
 124               		.loc 1 362 1 is_stmt 1 view -0
 125               		.cfi_startproc
 126               		.loc 1 362 1 is_stmt 0 view .LVU18
 127 0000 CF93      		push r28
 128               	.LCFI4:
 129               		.cfi_def_cfa_offset 3
 130               		.cfi_offset 28, -2
 131               	/* prologue: function */
 132               	/* frame size = 0 */
 133               	/* stack size = 1 */
 134               	.L__stack_usage = 1
 135 0002 C82F      		mov r28,r24
 363:../../tmk_core/common/action.c ****     if (code == KC_NO) {
 136               		.loc 1 363 5 is_stmt 1 view .LVU19
 137               		.loc 1 363 8 is_stmt 0 view .LVU20
 138 0004 8823      		tst r24
 139 0006 01F4      		brne .+2
 140 0008 00C0      		rjmp .L7
 364:../../tmk_core/common/action.c ****         return;
 365:../../tmk_core/common/action.c ****     }
 366:../../tmk_core/common/action.c **** 
 367:../../tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 368:../../tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 141               		.loc 1 368 10 is_stmt 1 view .LVU21
 142               		.loc 1 368 13 is_stmt 0 view .LVU22
 143 000a 8238      		cpi r24,lo8(-126)
 144 000c 01F4      		brne .L10
 369:../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 370:../../tmk_core/common/action.c ****         // Resync: ignore if caps lock already is on
 371:../../tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
 145               		.loc 1 371 9 is_stmt 1 view .LVU23
 146               		.loc 1 371 13 is_stmt 0 view .LVU24
 147 000e 0E94 0000 		call host_keyboard_leds
 148               	.LVL5:
 149               		.loc 1 371 12 view .LVU25
 150 0012 81FD      		sbrc r24,1
 151 0014 00C0      		rjmp .L7
 372:../../tmk_core/common/action.c **** #endif
 373:../../tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 152               		.loc 1 373 9 is_stmt 1 view .LVU26
 153 0016 89E3      		ldi r24,lo8(57)
 154 0018 0E94 0000 		call add_key
 155               	.LVL6:
 374:../../tmk_core/common/action.c ****         send_keyboard_report();
 156               		.loc 1 374 9 view .LVU27
 157 001c 0E94 0000 		call send_keyboard_report
 158               	.LVL7:
 375:../../tmk_core/common/action.c ****         wait_ms(100);
 159               		.loc 1 375 9 view .LVU28
 160               	.LBB18:
 161               	.LBI18:
 162               		.file 3 "/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h"
   1:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 
   6:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 
   9:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 
  12:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****      distribution.
  16:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 
  17:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 
  21:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 
  33:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 
  35:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 
  38:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** #  endif
  42:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 
  44:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** #include <math.h>
  47:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 
  48:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** /** \file */
  49:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****     \code
  51:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****     \endcode
  55:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 
  56:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****     used.
  60:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 
  61:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 
  70:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 
  79:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 
  83:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** */
  84:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 
  85:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** #endif
  89:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 
  90:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 
  97:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 
 103:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****     integer value.
 107:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****  */
 108:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** #endif
 110:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 
 111:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** #endif
 114:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 
 115:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** #endif
 120:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 
 121:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** /**
 122:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 
 124:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 
 126:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 
 129:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 
 131:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 
 137:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 
 142:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 
 147:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****    respectively.
 151:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 
 152:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****    \note
 153:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 
 154:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 
 164:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****  */
 165:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** void
 166:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** _delay_ms(double __ms)
 163               		.loc 3 166 1 view .LVU29
 164               	.LBB19:
 167:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** {
 168:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 	double __tmp ;
 165               		.loc 3 168 2 view .LVU30
 169:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 166               		.loc 3 172 2 view .LVU31
 173:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 167               		.loc 3 173 2 view .LVU32
 174:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 168               		.loc 3 174 2 view .LVU33
 175:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 
 176:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 
 179:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 
 182:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 	#else
 183:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 		//round up by default
 184:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 169               		.loc 3 184 3 view .LVU34
 185:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 	#endif
 186:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 
 187:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 170               		.loc 3 187 2 view .LVU35
 171 0020 2FEF      		ldi r18,lo8(319999)
 172 0022 81EE      		ldi r24,hi8(319999)
 173 0024 94E0      		ldi r25,hlo8(319999)
 174 0026 2150      	1:	subi r18,1
 175 0028 8040      		sbci r24,0
 176 002a 9040      		sbci r25,0
 177 002c 01F4      		brne 1b
 178 002e 00C0      		rjmp .
 179 0030 0000      		nop
 180               	.LVL8:
 181               		.loc 3 187 2 is_stmt 0 view .LVU36
 182               	.LBE19:
 183               	.LBE18:
 376:../../tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 184               		.loc 1 376 9 is_stmt 1 view .LVU37
 185 0032 89E3      		ldi r24,lo8(57)
 186               	.L30:
 377:../../tmk_core/common/action.c ****         send_keyboard_report();
 378:../../tmk_core/common/action.c ****     }
 379:../../tmk_core/common/action.c **** 
 380:../../tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 381:../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 382:../../tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
 383:../../tmk_core/common/action.c **** #endif
 384:../../tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 385:../../tmk_core/common/action.c ****         send_keyboard_report();
 386:../../tmk_core/common/action.c ****         wait_ms(100);
 387:../../tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 187               		.loc 1 387 9 is_stmt 0 view .LVU38
 188 0034 0E94 0000 		call del_key
 189               	.LVL9:
 190               	.L31:
 388:../../tmk_core/common/action.c ****         send_keyboard_report();
 191               		.loc 1 388 9 is_stmt 1 view .LVU39
 192               	/* epilogue start */
 389:../../tmk_core/common/action.c ****     }
 390:../../tmk_core/common/action.c **** 
 391:../../tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 392:../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 393:../../tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
 394:../../tmk_core/common/action.c **** #endif
 395:../../tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 396:../../tmk_core/common/action.c ****         send_keyboard_report();
 397:../../tmk_core/common/action.c ****         wait_ms(100);
 398:../../tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 399:../../tmk_core/common/action.c ****         send_keyboard_report();
 400:../../tmk_core/common/action.c ****     }
 401:../../tmk_core/common/action.c **** #endif
 402:../../tmk_core/common/action.c **** 
 403:../../tmk_core/common/action.c ****     else if IS_KEY(code) {
 404:../../tmk_core/common/action.c ****         // TODO: should push command_proc out of this block?
 405:../../tmk_core/common/action.c ****         if (command_proc(code)) return;
 406:../../tmk_core/common/action.c **** 
 407:../../tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 408:../../tmk_core/common/action.c **** /* TODO: remove
 409:../../tmk_core/common/action.c ****         if (oneshot_state.mods && !oneshot_state.disabled) {
 410:../../tmk_core/common/action.c ****             uint8_t tmp_mods = get_mods();
 411:../../tmk_core/common/action.c ****             add_mods(oneshot_state.mods);
 412:../../tmk_core/common/action.c **** 
 413:../../tmk_core/common/action.c ****             add_key(code);
 414:../../tmk_core/common/action.c ****             send_keyboard_report();
 415:../../tmk_core/common/action.c **** 
 416:../../tmk_core/common/action.c ****             set_mods(tmp_mods);
 417:../../tmk_core/common/action.c ****             send_keyboard_report();
 418:../../tmk_core/common/action.c ****             oneshot_cancel();
 419:../../tmk_core/common/action.c ****         } else 
 420:../../tmk_core/common/action.c **** */
 421:../../tmk_core/common/action.c **** #endif
 422:../../tmk_core/common/action.c ****         {
 423:../../tmk_core/common/action.c ****             add_key(code);
 424:../../tmk_core/common/action.c ****             send_keyboard_report();
 425:../../tmk_core/common/action.c ****         }
 426:../../tmk_core/common/action.c ****     }
 427:../../tmk_core/common/action.c ****     else if IS_MOD(code) {
 428:../../tmk_core/common/action.c ****         add_mods(MOD_BIT(code));
 429:../../tmk_core/common/action.c ****         send_keyboard_report();
 430:../../tmk_core/common/action.c ****     }
 431:../../tmk_core/common/action.c ****     else if IS_SYSTEM(code) {
 432:../../tmk_core/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 433:../../tmk_core/common/action.c ****     }
 434:../../tmk_core/common/action.c ****     else if IS_CONSUMER(code) {
 435:../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 436:../../tmk_core/common/action.c ****     }
 437:../../tmk_core/common/action.c **** }
 193               		.loc 1 437 1 is_stmt 0 view .LVU40
 194 0038 CF91      		pop r28
 388:../../tmk_core/common/action.c ****         send_keyboard_report();
 195               		.loc 1 388 9 view .LVU41
 196 003a 0C94 0000 		jmp send_keyboard_report
 197               	.LVL10:
 198               	.L10:
 380:../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 199               		.loc 1 380 10 is_stmt 1 view .LVU42
 380:../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 200               		.loc 1 380 13 is_stmt 0 view .LVU43
 201 003e 8338      		cpi r24,lo8(-125)
 202 0040 01F4      		brne .L12
 382:../../tmk_core/common/action.c **** #endif
 203               		.loc 1 382 9 is_stmt 1 view .LVU44
 382:../../tmk_core/common/action.c **** #endif
 204               		.loc 1 382 13 is_stmt 0 view .LVU45
 205 0042 0E94 0000 		call host_keyboard_leds
 206               	.LVL11:
 382:../../tmk_core/common/action.c **** #endif
 207               		.loc 1 382 12 view .LVU46
 208 0046 80FD      		sbrc r24,0
 209 0048 00C0      		rjmp .L7
 384:../../tmk_core/common/action.c ****         send_keyboard_report();
 210               		.loc 1 384 9 is_stmt 1 view .LVU47
 211 004a 83E5      		ldi r24,lo8(83)
 212 004c 0E94 0000 		call add_key
 213               	.LVL12:
 385:../../tmk_core/common/action.c ****         wait_ms(100);
 214               		.loc 1 385 9 view .LVU48
 215 0050 0E94 0000 		call send_keyboard_report
 216               	.LVL13:
 386:../../tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 217               		.loc 1 386 9 view .LVU49
 218               	.LBB20:
 219               	.LBI20:
 166:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** {
 220               		.loc 3 166 1 view .LVU50
 221               	.LBB21:
 168:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 222               		.loc 3 168 2 view .LVU51
 172:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 223               		.loc 3 172 2 view .LVU52
 173:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 224               		.loc 3 173 2 view .LVU53
 174:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 
 225               		.loc 3 174 2 view .LVU54
 184:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 	#endif
 226               		.loc 3 184 3 view .LVU55
 227               		.loc 3 187 2 view .LVU56
 228 0054 2FEF      		ldi r18,lo8(319999)
 229 0056 81EE      		ldi r24,hi8(319999)
 230 0058 94E0      		ldi r25,hlo8(319999)
 231 005a 2150      	1:	subi r18,1
 232 005c 8040      		sbci r24,0
 233 005e 9040      		sbci r25,0
 234 0060 01F4      		brne 1b
 235 0062 00C0      		rjmp .
 236 0064 0000      		nop
 237               	.LVL14:
 238               		.loc 3 187 2 is_stmt 0 view .LVU57
 239               	.LBE21:
 240               	.LBE20:
 387:../../tmk_core/common/action.c ****         send_keyboard_report();
 241               		.loc 1 387 9 is_stmt 1 view .LVU58
 242 0066 83E5      		ldi r24,lo8(83)
 243 0068 00C0      		rjmp .L30
 244               	.LVL15:
 245               	.L12:
 391:../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 246               		.loc 1 391 10 view .LVU59
 391:../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 247               		.loc 1 391 13 is_stmt 0 view .LVU60
 248 006a 8438      		cpi r24,lo8(-124)
 249 006c 01F4      		brne .L13
 393:../../tmk_core/common/action.c **** #endif
 250               		.loc 1 393 9 is_stmt 1 view .LVU61
 393:../../tmk_core/common/action.c **** #endif
 251               		.loc 1 393 13 is_stmt 0 view .LVU62
 252 006e 0E94 0000 		call host_keyboard_leds
 253               	.LVL16:
 393:../../tmk_core/common/action.c **** #endif
 254               		.loc 1 393 12 view .LVU63
 255 0072 82FD      		sbrc r24,2
 256 0074 00C0      		rjmp .L7
 395:../../tmk_core/common/action.c ****         send_keyboard_report();
 257               		.loc 1 395 9 is_stmt 1 view .LVU64
 258 0076 87E4      		ldi r24,lo8(71)
 259 0078 0E94 0000 		call add_key
 260               	.LVL17:
 396:../../tmk_core/common/action.c ****         wait_ms(100);
 261               		.loc 1 396 9 view .LVU65
 262 007c 0E94 0000 		call send_keyboard_report
 263               	.LVL18:
 397:../../tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 264               		.loc 1 397 9 view .LVU66
 265               	.LBB22:
 266               	.LBI22:
 166:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** {
 267               		.loc 3 166 1 view .LVU67
 268               	.LBB23:
 168:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 269               		.loc 3 168 2 view .LVU68
 172:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 270               		.loc 3 172 2 view .LVU69
 173:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 271               		.loc 3 173 2 view .LVU70
 174:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 
 272               		.loc 3 174 2 view .LVU71
 184:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 	#endif
 273               		.loc 3 184 3 view .LVU72
 274               		.loc 3 187 2 view .LVU73
 275 0080 2FEF      		ldi r18,lo8(319999)
 276 0082 81EE      		ldi r24,hi8(319999)
 277 0084 94E0      		ldi r25,hlo8(319999)
 278 0086 2150      	1:	subi r18,1
 279 0088 8040      		sbci r24,0
 280 008a 9040      		sbci r25,0
 281 008c 01F4      		brne 1b
 282 008e 00C0      		rjmp .
 283 0090 0000      		nop
 284               	.LVL19:
 285               		.loc 3 187 2 is_stmt 0 view .LVU74
 286               	.LBE23:
 287               	.LBE22:
 398:../../tmk_core/common/action.c ****         send_keyboard_report();
 288               		.loc 1 398 9 is_stmt 1 view .LVU75
 289 0092 87E4      		ldi r24,lo8(71)
 290 0094 00C0      		rjmp .L30
 291               	.LVL20:
 292               	.L13:
 403:../../tmk_core/common/action.c ****         // TODO: should push command_proc out of this block?
 293               		.loc 1 403 10 view .LVU76
 403:../../tmk_core/common/action.c ****         // TODO: should push command_proc out of this block?
 294               		.loc 1 403 13 is_stmt 0 view .LVU77
 295 0096 8CEF      		ldi r24,lo8(-4)
 296               	.LVL21:
 403:../../tmk_core/common/action.c ****         // TODO: should push command_proc out of this block?
 297               		.loc 1 403 13 view .LVU78
 298 0098 8C0F      		add r24,r28
 299 009a 813A      		cpi r24,lo8(-95)
 300 009c 00F0      		brlo .L14
 403:../../tmk_core/common/action.c ****         // TODO: should push command_proc out of this block?
 301               		.loc 1 403 13 discriminator 1 view .LVU79
 302 009e 80E5      		ldi r24,lo8(80)
 303 00a0 8C0F      		add r24,r28
 304 00a2 8E32      		cpi r24,lo8(46)
 305 00a4 00F4      		brsh .L15
 306               	.L14:
 405:../../tmk_core/common/action.c **** 
 307               		.loc 1 405 9 is_stmt 1 view .LVU80
 405:../../tmk_core/common/action.c **** 
 308               		.loc 1 405 13 is_stmt 0 view .LVU81
 309 00a6 8C2F      		mov r24,r28
 310 00a8 0E94 0000 		call command_proc
 311               	.LVL22:
 405:../../tmk_core/common/action.c **** 
 312               		.loc 1 405 12 view .LVU82
 313 00ac 8111      		cpse r24,__zero_reg__
 314 00ae 00C0      		rjmp .L7
 423:../../tmk_core/common/action.c ****             send_keyboard_report();
 315               		.loc 1 423 13 is_stmt 1 view .LVU83
 316 00b0 8C2F      		mov r24,r28
 317 00b2 0E94 0000 		call add_key
 318               	.LVL23:
 424:../../tmk_core/common/action.c ****         }
 319               		.loc 1 424 13 view .LVU84
 320 00b6 00C0      		rjmp .L31
 321               	.L15:
 427:../../tmk_core/common/action.c ****         add_mods(MOD_BIT(code));
 322               		.loc 1 427 10 view .LVU85
 427:../../tmk_core/common/action.c ****         add_mods(MOD_BIT(code));
 323               		.loc 1 427 13 is_stmt 0 view .LVU86
 324 00b8 80E2      		ldi r24,lo8(32)
 325 00ba 8C0F      		add r24,r28
 326 00bc 8830      		cpi r24,lo8(8)
 327 00be 00F4      		brsh .L16
 428:../../tmk_core/common/action.c ****         send_keyboard_report();
 328               		.loc 1 428 9 is_stmt 1 view .LVU87
 428:../../tmk_core/common/action.c ****         send_keyboard_report();
 329               		.loc 1 428 18 is_stmt 0 view .LVU88
 330 00c0 C770      		andi r28,lo8(7)
 331               	.LVL24:
 428:../../tmk_core/common/action.c ****         send_keyboard_report();
 332               		.loc 1 428 9 view .LVU89
 333 00c2 81E0      		ldi r24,lo8(1)
 334 00c4 00C0      		rjmp 2f
 335               		1:
 336 00c6 880F      		lsl r24
 337               		2:
 338 00c8 CA95      		dec r28
 339 00ca 02F4      		brpl 1b
 340 00cc 0E94 0000 		call add_mods
 341               	.LVL25:
 429:../../tmk_core/common/action.c ****     }
 342               		.loc 1 429 9 is_stmt 1 view .LVU90
 343 00d0 00C0      		rjmp .L31
 344               	.LVL26:
 345               	.L16:
 431:../../tmk_core/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 346               		.loc 1 431 10 view .LVU91
 431:../../tmk_core/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 347               		.loc 1 431 13 is_stmt 0 view .LVU92
 348 00d2 8BE5      		ldi r24,lo8(91)
 349 00d4 8C0F      		add r24,r28
 350 00d6 8330      		cpi r24,lo8(3)
 351 00d8 00F4      		brsh .L17
 432:../../tmk_core/common/action.c ****     }
 352               		.loc 1 432 9 is_stmt 1 view .LVU93
 353 00da 81E8      		ldi r24,lo8(-127)
 354 00dc 90E0      		ldi r25,0
 355 00de C53A      		cpi r28,lo8(-91)
 356 00e0 01F0      		breq .L18
 432:../../tmk_core/common/action.c ****     }
 357               		.loc 1 432 26 is_stmt 0 discriminator 1 view .LVU94
 358 00e2 83E8      		ldi r24,lo8(-125)
 359 00e4 90E0      		ldi r25,0
 360 00e6 C63A      		cpi r28,lo8(-90)
 361 00e8 01F4      		brne .L18
 432:../../tmk_core/common/action.c ****     }
 362               		.loc 1 432 26 view .LVU95
 363 00ea 82E8      		ldi r24,lo8(-126)
 364 00ec 90E0      		ldi r25,0
 365               	.L18:
 366               	/* epilogue start */
 367               		.loc 1 437 1 discriminator 12 view .LVU96
 368 00ee CF91      		pop r28
 369               	.LVL27:
 432:../../tmk_core/common/action.c ****     }
 370               		.loc 1 432 9 discriminator 12 view .LVU97
 371 00f0 0C94 0000 		jmp host_system_send
 372               	.LVL28:
 373               	.L17:
 434:../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 374               		.loc 1 434 10 is_stmt 1 view .LVU98
 434:../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 375               		.loc 1 434 13 is_stmt 0 view .LVU99
 376 00f4 88E5      		ldi r24,lo8(88)
 377 00f6 8C0F      		add r24,r28
 378 00f8 8531      		cpi r24,lo8(21)
 379 00fa 00F4      		brsh .L7
 435:../../tmk_core/common/action.c ****     }
 380               		.loc 1 435 9 is_stmt 1 view .LVU100
 381 00fc 82EE      		ldi r24,lo8(-30)
 382 00fe 90E0      		ldi r25,0
 383 0100 C83A      		cpi r28,lo8(-88)
 384 0102 01F0      		breq .L19
 435:../../tmk_core/common/action.c ****     }
 385               		.loc 1 435 28 is_stmt 0 discriminator 1 view .LVU101
 386 0104 89EE      		ldi r24,lo8(-23)
 387 0106 90E0      		ldi r25,0
 388 0108 C93A      		cpi r28,lo8(-87)
 389 010a 01F0      		breq .L19
 435:../../tmk_core/common/action.c ****     }
 390               		.loc 1 435 28 discriminator 3 view .LVU102
 391 010c 8AEE      		ldi r24,lo8(-22)
 392 010e 90E0      		ldi r25,0
 393 0110 CA3A      		cpi r28,lo8(-86)
 394 0112 01F0      		breq .L19
 435:../../tmk_core/common/action.c ****     }
 395               		.loc 1 435 28 discriminator 5 view .LVU103
 396 0114 85EB      		ldi r24,lo8(-75)
 397 0116 90E0      		ldi r25,0
 398 0118 CB3A      		cpi r28,lo8(-85)
 399 011a 01F0      		breq .L19
 435:../../tmk_core/common/action.c ****     }
 400               		.loc 1 435 28 discriminator 7 view .LVU104
 401 011c 86EB      		ldi r24,lo8(-74)
 402 011e 90E0      		ldi r25,0
 403 0120 CC3A      		cpi r28,lo8(-84)
 404 0122 01F0      		breq .L19
 435:../../tmk_core/common/action.c ****     }
 405               		.loc 1 435 28 discriminator 9 view .LVU105
 406 0124 83EB      		ldi r24,lo8(-77)
 407 0126 90E0      		ldi r25,0
 408 0128 CD3A      		cpi r28,lo8(-83)
 409 012a 01F0      		breq .L19
 435:../../tmk_core/common/action.c ****     }
 410               		.loc 1 435 28 discriminator 11 view .LVU106
 411 012c 84EB      		ldi r24,lo8(-76)
 412 012e 90E0      		ldi r25,0
 413 0130 CE3A      		cpi r28,lo8(-82)
 414 0132 01F0      		breq .L19
 435:../../tmk_core/common/action.c ****     }
 415               		.loc 1 435 28 discriminator 13 view .LVU107
 416 0134 90E0      		ldi r25,0
 417 0136 80E0      		ldi r24,0
 418 0138 CF3A      		cpi r28,lo8(-81)
 419 013a 01F4      		brne .L19
 435:../../tmk_core/common/action.c ****     }
 420               		.loc 1 435 28 view .LVU108
 421 013c 87EB      		ldi r24,lo8(-73)
 422 013e 90E0      		ldi r25,0
 423               	.L19:
 424               	/* epilogue start */
 425               		.loc 1 437 1 discriminator 84 view .LVU109
 426 0140 CF91      		pop r28
 427               	.LVL29:
 435:../../tmk_core/common/action.c ****     }
 428               		.loc 1 435 9 discriminator 84 view .LVU110
 429 0142 0C94 0000 		jmp host_consumer_send
 430               	.LVL30:
 431               	.L7:
 432               	/* epilogue start */
 433               		.loc 1 437 1 view .LVU111
 434 0146 CF91      		pop r28
 435               	.LVL31:
 436               		.loc 1 437 1 view .LVU112
 437 0148 0895      		ret
 438               		.cfi_endproc
 439               	.LFE12:
 441               		.section	.text.unregister_code,"ax",@progbits
 442               	.global	unregister_code
 444               	unregister_code:
 445               	.LVL32:
 446               	.LFB13:
 438:../../tmk_core/common/action.c **** 
 439:../../tmk_core/common/action.c **** void unregister_code(uint8_t code)
 440:../../tmk_core/common/action.c **** {
 447               		.loc 1 440 1 is_stmt 1 view -0
 448               		.cfi_startproc
 449               	/* prologue: function */
 450               	/* frame size = 0 */
 451               	/* stack size = 0 */
 452               	.L__stack_usage = 0
 441:../../tmk_core/common/action.c ****     if (code == KC_NO) {
 453               		.loc 1 441 5 view .LVU114
 454               		.loc 1 441 8 is_stmt 0 view .LVU115
 455 0000 8823      		tst r24
 456 0002 01F4      		brne .+2
 457 0004 00C0      		rjmp .L32
 442:../../tmk_core/common/action.c ****         return;
 443:../../tmk_core/common/action.c ****     }
 444:../../tmk_core/common/action.c **** 
 445:../../tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 446:../../tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 458               		.loc 1 446 10 is_stmt 1 view .LVU116
 459               		.loc 1 446 13 is_stmt 0 view .LVU117
 460 0006 8238      		cpi r24,lo8(-126)
 461 0008 01F4      		brne .L35
 447:../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 448:../../tmk_core/common/action.c ****         // Resync: ignore if caps lock already is off
 449:../../tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
 462               		.loc 1 449 9 is_stmt 1 view .LVU118
 463               		.loc 1 449 15 is_stmt 0 view .LVU119
 464 000a 0E94 0000 		call host_keyboard_leds
 465               	.LVL33:
 466               		.loc 1 449 12 view .LVU120
 467 000e 81FF      		sbrs r24,1
 468 0010 00C0      		rjmp .L32
 450:../../tmk_core/common/action.c **** #endif
 451:../../tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 469               		.loc 1 451 9 is_stmt 1 view .LVU121
 470 0012 89E3      		ldi r24,lo8(57)
 471 0014 0E94 0000 		call add_key
 472               	.LVL34:
 452:../../tmk_core/common/action.c ****         send_keyboard_report();
 473               		.loc 1 452 9 view .LVU122
 474 0018 0E94 0000 		call send_keyboard_report
 475               	.LVL35:
 453:../../tmk_core/common/action.c ****         wait_ms(100);
 476               		.loc 1 453 9 view .LVU123
 477               	.LBB24:
 478               	.LBI24:
 166:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** {
 479               		.loc 3 166 1 view .LVU124
 480               	.LBB25:
 168:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 481               		.loc 3 168 2 view .LVU125
 172:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 482               		.loc 3 172 2 view .LVU126
 173:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 483               		.loc 3 173 2 view .LVU127
 174:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 
 484               		.loc 3 174 2 view .LVU128
 184:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 	#endif
 485               		.loc 3 184 3 view .LVU129
 486               		.loc 3 187 2 view .LVU130
 487 001c 2FEF      		ldi r18,lo8(319999)
 488 001e 81EE      		ldi r24,hi8(319999)
 489 0020 94E0      		ldi r25,hlo8(319999)
 490 0022 2150      	1:	subi r18,1
 491 0024 8040      		sbci r24,0
 492 0026 9040      		sbci r25,0
 493 0028 01F4      		brne 1b
 494 002a 00C0      		rjmp .
 495 002c 0000      		nop
 496               	.LVL36:
 497               		.loc 3 187 2 is_stmt 0 view .LVU131
 498               	.LBE25:
 499               	.LBE24:
 454:../../tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 500               		.loc 1 454 9 is_stmt 1 view .LVU132
 501 002e 89E3      		ldi r24,lo8(57)
 502               	.L52:
 455:../../tmk_core/common/action.c ****         send_keyboard_report();
 456:../../tmk_core/common/action.c ****     }
 457:../../tmk_core/common/action.c **** 
 458:../../tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 459:../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 460:../../tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
 461:../../tmk_core/common/action.c **** #endif
 462:../../tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 463:../../tmk_core/common/action.c ****         send_keyboard_report();
 464:../../tmk_core/common/action.c ****         wait_ms(100);
 465:../../tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 503               		.loc 1 465 9 is_stmt 0 view .LVU133
 504 0030 0E94 0000 		call del_key
 505               	.LVL37:
 506               	.L53:
 466:../../tmk_core/common/action.c ****         send_keyboard_report();
 507               		.loc 1 466 9 is_stmt 1 view .LVU134
 508 0034 0C94 0000 		jmp send_keyboard_report
 509               	.LVL38:
 510               	.L35:
 458:../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 511               		.loc 1 458 10 view .LVU135
 458:../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 512               		.loc 1 458 13 is_stmt 0 view .LVU136
 513 0038 8338      		cpi r24,lo8(-125)
 514 003a 01F4      		brne .L37
 460:../../tmk_core/common/action.c **** #endif
 515               		.loc 1 460 9 is_stmt 1 view .LVU137
 460:../../tmk_core/common/action.c **** #endif
 516               		.loc 1 460 15 is_stmt 0 view .LVU138
 517 003c 0E94 0000 		call host_keyboard_leds
 518               	.LVL39:
 460:../../tmk_core/common/action.c **** #endif
 519               		.loc 1 460 12 view .LVU139
 520 0040 80FF      		sbrs r24,0
 521 0042 00C0      		rjmp .L32
 462:../../tmk_core/common/action.c ****         send_keyboard_report();
 522               		.loc 1 462 9 is_stmt 1 view .LVU140
 523 0044 83E5      		ldi r24,lo8(83)
 524 0046 0E94 0000 		call add_key
 525               	.LVL40:
 463:../../tmk_core/common/action.c ****         wait_ms(100);
 526               		.loc 1 463 9 view .LVU141
 527 004a 0E94 0000 		call send_keyboard_report
 528               	.LVL41:
 464:../../tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 529               		.loc 1 464 9 view .LVU142
 530               	.LBB26:
 531               	.LBI26:
 166:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** {
 532               		.loc 3 166 1 view .LVU143
 533               	.LBB27:
 168:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 534               		.loc 3 168 2 view .LVU144
 172:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 535               		.loc 3 172 2 view .LVU145
 173:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 536               		.loc 3 173 2 view .LVU146
 174:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 
 537               		.loc 3 174 2 view .LVU147
 184:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 	#endif
 538               		.loc 3 184 3 view .LVU148
 539               		.loc 3 187 2 view .LVU149
 540 004e 2FEF      		ldi r18,lo8(319999)
 541 0050 81EE      		ldi r24,hi8(319999)
 542 0052 94E0      		ldi r25,hlo8(319999)
 543 0054 2150      	1:	subi r18,1
 544 0056 8040      		sbci r24,0
 545 0058 9040      		sbci r25,0
 546 005a 01F4      		brne 1b
 547 005c 00C0      		rjmp .
 548 005e 0000      		nop
 549               	.LVL42:
 550               		.loc 3 187 2 is_stmt 0 view .LVU150
 551               	.LBE27:
 552               	.LBE26:
 465:../../tmk_core/common/action.c ****         send_keyboard_report();
 553               		.loc 1 465 9 is_stmt 1 view .LVU151
 554 0060 83E5      		ldi r24,lo8(83)
 555 0062 00C0      		rjmp .L52
 556               	.LVL43:
 557               	.L37:
 467:../../tmk_core/common/action.c ****     }
 468:../../tmk_core/common/action.c **** 
 469:../../tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 558               		.loc 1 469 10 view .LVU152
 559               		.loc 1 469 13 is_stmt 0 view .LVU153
 560 0064 8438      		cpi r24,lo8(-124)
 561 0066 01F4      		brne .L38
 470:../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 471:../../tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
 562               		.loc 1 471 9 is_stmt 1 view .LVU154
 563               		.loc 1 471 15 is_stmt 0 view .LVU155
 564 0068 0E94 0000 		call host_keyboard_leds
 565               	.LVL44:
 566               		.loc 1 471 12 view .LVU156
 567 006c 82FF      		sbrs r24,2
 568 006e 00C0      		rjmp .L32
 472:../../tmk_core/common/action.c **** #endif
 473:../../tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 569               		.loc 1 473 9 is_stmt 1 view .LVU157
 570 0070 87E4      		ldi r24,lo8(71)
 571 0072 0E94 0000 		call add_key
 572               	.LVL45:
 474:../../tmk_core/common/action.c ****         send_keyboard_report();
 573               		.loc 1 474 9 view .LVU158
 574 0076 0E94 0000 		call send_keyboard_report
 575               	.LVL46:
 475:../../tmk_core/common/action.c ****         wait_ms(100);
 576               		.loc 1 475 9 view .LVU159
 577               	.LBB28:
 578               	.LBI28:
 166:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** {
 579               		.loc 3 166 1 view .LVU160
 580               	.LBB29:
 168:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 581               		.loc 3 168 2 view .LVU161
 172:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 582               		.loc 3 172 2 view .LVU162
 173:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 583               		.loc 3 173 2 view .LVU163
 174:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 
 584               		.loc 3 174 2 view .LVU164
 184:/usr/local/Cellar/avr-gcc/9.1.0/avr/include/util/delay.h **** 	#endif
 585               		.loc 3 184 3 view .LVU165
 586               		.loc 3 187 2 view .LVU166
 587 007a 2FEF      		ldi r18,lo8(319999)
 588 007c 81EE      		ldi r24,hi8(319999)
 589 007e 94E0      		ldi r25,hlo8(319999)
 590 0080 2150      	1:	subi r18,1
 591 0082 8040      		sbci r24,0
 592 0084 9040      		sbci r25,0
 593 0086 01F4      		brne 1b
 594 0088 00C0      		rjmp .
 595 008a 0000      		nop
 596               	.LVL47:
 597               		.loc 3 187 2 is_stmt 0 view .LVU167
 598               	.LBE29:
 599               	.LBE28:
 476:../../tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 600               		.loc 1 476 9 is_stmt 1 view .LVU168
 601 008c 87E4      		ldi r24,lo8(71)
 602 008e 00C0      		rjmp .L52
 603               	.LVL48:
 604               	.L38:
 477:../../tmk_core/common/action.c ****         send_keyboard_report();
 478:../../tmk_core/common/action.c ****     }
 479:../../tmk_core/common/action.c **** #endif
 480:../../tmk_core/common/action.c **** 
 481:../../tmk_core/common/action.c ****     else if IS_KEY(code) {
 605               		.loc 1 481 10 view .LVU169
 606               		.loc 1 481 13 is_stmt 0 view .LVU170
 607 0090 9CEF      		ldi r25,lo8(-4)
 608 0092 980F      		add r25,r24
 609 0094 913A      		cpi r25,lo8(-95)
 610 0096 00F0      		brlo .L52
 611               		.loc 1 481 13 discriminator 1 view .LVU171
 612 0098 90E5      		ldi r25,lo8(80)
 613 009a 980F      		add r25,r24
 614 009c 9E32      		cpi r25,lo8(46)
 615 009e 00F0      		brlo .L52
 482:../../tmk_core/common/action.c ****         del_key(code);
 483:../../tmk_core/common/action.c ****         send_keyboard_report();
 484:../../tmk_core/common/action.c ****     }
 485:../../tmk_core/common/action.c ****     else if IS_MOD(code) {
 616               		.loc 1 485 10 is_stmt 1 view .LVU172
 617               		.loc 1 485 13 is_stmt 0 view .LVU173
 618 00a0 90E2      		ldi r25,lo8(32)
 619 00a2 980F      		add r25,r24
 620 00a4 9830      		cpi r25,lo8(8)
 621 00a6 00F4      		brsh .L41
 486:../../tmk_core/common/action.c ****         del_mods(MOD_BIT(code));
 622               		.loc 1 486 9 is_stmt 1 view .LVU174
 623               		.loc 1 486 18 is_stmt 0 view .LVU175
 624 00a8 8770      		andi r24,lo8(7)
 625               	.LVL49:
 626               		.loc 1 486 9 view .LVU176
 627 00aa 91E0      		ldi r25,lo8(1)
 628 00ac 00C0      		rjmp 2f
 629               		1:
 630 00ae 990F      		lsl r25
 631               		2:
 632 00b0 8A95      		dec r24
 633 00b2 02F4      		brpl 1b
 634 00b4 892F      		mov r24,r25
 635 00b6 0E94 0000 		call del_mods
 636               	.LVL50:
 487:../../tmk_core/common/action.c ****         send_keyboard_report();
 637               		.loc 1 487 9 is_stmt 1 view .LVU177
 638 00ba 00C0      		rjmp .L53
 639               	.LVL51:
 640               	.L41:
 488:../../tmk_core/common/action.c ****     }
 489:../../tmk_core/common/action.c ****     else if IS_SYSTEM(code) {
 641               		.loc 1 489 10 view .LVU178
 642               		.loc 1 489 13 is_stmt 0 view .LVU179
 643 00bc 9BE5      		ldi r25,lo8(91)
 644 00be 980F      		add r25,r24
 645 00c0 9330      		cpi r25,lo8(3)
 646 00c2 00F4      		brsh .L42
 490:../../tmk_core/common/action.c ****         host_system_send(0);
 647               		.loc 1 490 9 is_stmt 1 view .LVU180
 648 00c4 90E0      		ldi r25,0
 649 00c6 80E0      		ldi r24,0
 650               	.LVL52:
 651               		.loc 1 490 9 is_stmt 0 view .LVU181
 652 00c8 0C94 0000 		jmp host_system_send
 653               	.LVL53:
 654               	.L42:
 491:../../tmk_core/common/action.c ****     }
 492:../../tmk_core/common/action.c ****     else if IS_CONSUMER(code) {
 655               		.loc 1 492 10 is_stmt 1 view .LVU182
 656               		.loc 1 492 13 is_stmt 0 view .LVU183
 657 00cc 885A      		subi r24,lo8(-(88))
 658               	.LVL54:
 659               		.loc 1 492 13 view .LVU184
 660 00ce 8531      		cpi r24,lo8(21)
 661 00d0 00F4      		brsh .L32
 493:../../tmk_core/common/action.c ****         host_consumer_send(0);
 662               		.loc 1 493 9 is_stmt 1 view .LVU185
 663 00d2 90E0      		ldi r25,0
 664 00d4 80E0      		ldi r24,0
 665               	.LVL55:
 666               		.loc 1 493 9 is_stmt 0 view .LVU186
 667 00d6 0C94 0000 		jmp host_consumer_send
 668               	.LVL56:
 669               	.L32:
 670               	/* epilogue start */
 494:../../tmk_core/common/action.c ****     }
 495:../../tmk_core/common/action.c **** }
 671               		.loc 1 495 1 view .LVU187
 672 00da 0895      		ret
 673               		.cfi_endproc
 674               	.LFE13:
 676               		.section	.text.type_code,"ax",@progbits
 677               	.global	type_code
 679               	type_code:
 680               	.LVL57:
 681               	.LFB14:
 496:../../tmk_core/common/action.c **** 
 497:../../tmk_core/common/action.c **** void type_code(uint8_t code)
 498:../../tmk_core/common/action.c **** {
 682               		.loc 1 498 1 is_stmt 1 view -0
 683               		.cfi_startproc
 684               		.loc 1 498 1 is_stmt 0 view .LVU189
 685 0000 CF93      		push r28
 686               	.LCFI5:
 687               		.cfi_def_cfa_offset 3
 688               		.cfi_offset 28, -2
 689               	/* prologue: function */
 690               	/* frame size = 0 */
 691               	/* stack size = 1 */
 692               	.L__stack_usage = 1
 693 0002 C82F      		mov r28,r24
 499:../../tmk_core/common/action.c ****     register_code(code);
 694               		.loc 1 499 5 is_stmt 1 view .LVU190
 695 0004 0E94 0000 		call register_code
 696               	.LVL58:
 500:../../tmk_core/common/action.c ****     unregister_code(code);
 697               		.loc 1 500 5 view .LVU191
 698 0008 8C2F      		mov r24,r28
 699               	/* epilogue start */
 501:../../tmk_core/common/action.c **** }
 700               		.loc 1 501 1 is_stmt 0 view .LVU192
 701 000a CF91      		pop r28
 702               	.LVL59:
 500:../../tmk_core/common/action.c ****     unregister_code(code);
 703               		.loc 1 500 5 view .LVU193
 704 000c 0C94 0000 		jmp unregister_code
 705               	.LVL60:
 500:../../tmk_core/common/action.c ****     unregister_code(code);
 706               		.loc 1 500 5 view .LVU194
 707               		.cfi_endproc
 708               	.LFE14:
 710               		.section	.text.register_mods,"ax",@progbits
 711               	.global	register_mods
 713               	register_mods:
 714               	.LVL61:
 715               	.LFB15:
 502:../../tmk_core/common/action.c **** 
 503:../../tmk_core/common/action.c **** void register_mods(uint8_t mods)
 504:../../tmk_core/common/action.c **** {
 716               		.loc 1 504 1 is_stmt 1 view -0
 717               		.cfi_startproc
 718               	/* prologue: function */
 719               	/* frame size = 0 */
 720               	/* stack size = 0 */
 721               	.L__stack_usage = 0
 505:../../tmk_core/common/action.c ****     if (mods) {
 722               		.loc 1 505 5 view .LVU196
 723               		.loc 1 505 8 is_stmt 0 view .LVU197
 724 0000 8823      		tst r24
 725 0002 01F0      		breq .L55
 506:../../tmk_core/common/action.c ****         add_mods(mods);
 726               		.loc 1 506 9 is_stmt 1 view .LVU198
 727 0004 0E94 0000 		call add_mods
 728               	.LVL62:
 507:../../tmk_core/common/action.c ****         send_keyboard_report();
 729               		.loc 1 507 9 view .LVU199
 730 0008 0C94 0000 		jmp send_keyboard_report
 731               	.LVL63:
 732               	.L55:
 733               	/* epilogue start */
 508:../../tmk_core/common/action.c ****     }
 509:../../tmk_core/common/action.c **** }
 734               		.loc 1 509 1 is_stmt 0 view .LVU200
 735 000c 0895      		ret
 736               		.cfi_endproc
 737               	.LFE15:
 739               		.section	.text.unregister_mods,"ax",@progbits
 740               	.global	unregister_mods
 742               	unregister_mods:
 743               	.LVL64:
 744               	.LFB16:
 510:../../tmk_core/common/action.c **** 
 511:../../tmk_core/common/action.c **** void unregister_mods(uint8_t mods)
 512:../../tmk_core/common/action.c **** {
 745               		.loc 1 512 1 is_stmt 1 view -0
 746               		.cfi_startproc
 747               	/* prologue: function */
 748               	/* frame size = 0 */
 749               	/* stack size = 0 */
 750               	.L__stack_usage = 0
 513:../../tmk_core/common/action.c ****     if (mods) {
 751               		.loc 1 513 5 view .LVU202
 752               		.loc 1 513 8 is_stmt 0 view .LVU203
 753 0000 8823      		tst r24
 754 0002 01F0      		breq .L57
 514:../../tmk_core/common/action.c ****         del_mods(mods);
 755               		.loc 1 514 9 is_stmt 1 view .LVU204
 756 0004 0E94 0000 		call del_mods
 757               	.LVL65:
 515:../../tmk_core/common/action.c ****         send_keyboard_report();
 758               		.loc 1 515 9 view .LVU205
 759 0008 0C94 0000 		jmp send_keyboard_report
 760               	.LVL66:
 761               	.L57:
 762               	/* epilogue start */
 516:../../tmk_core/common/action.c ****     }
 517:../../tmk_core/common/action.c **** }
 763               		.loc 1 517 1 is_stmt 0 view .LVU206
 764 000c 0895      		ret
 765               		.cfi_endproc
 766               	.LFE16:
 768               		.section	.text.process_action,"ax",@progbits
 769               	.global	process_action
 771               	process_action:
 772               	.LVL67:
 773               	.LFB11:
  60:../../tmk_core/common/action.c ****     if (hook_process_action(record)) return;
 774               		.loc 1 60 1 is_stmt 1 view -0
 775               		.cfi_startproc
  60:../../tmk_core/common/action.c ****     if (hook_process_action(record)) return;
 776               		.loc 1 60 1 is_stmt 0 view .LVU208
 777 0000 AF92      		push r10
 778               	.LCFI6:
 779               		.cfi_def_cfa_offset 3
 780               		.cfi_offset 10, -2
 781 0002 BF92      		push r11
 782               	.LCFI7:
 783               		.cfi_def_cfa_offset 4
 784               		.cfi_offset 11, -3
 785 0004 CF92      		push r12
 786               	.LCFI8:
 787               		.cfi_def_cfa_offset 5
 788               		.cfi_offset 12, -4
 789 0006 DF92      		push r13
 790               	.LCFI9:
 791               		.cfi_def_cfa_offset 6
 792               		.cfi_offset 13, -5
 793 0008 EF92      		push r14
 794               	.LCFI10:
 795               		.cfi_def_cfa_offset 7
 796               		.cfi_offset 14, -6
 797 000a FF92      		push r15
 798               	.LCFI11:
 799               		.cfi_def_cfa_offset 8
 800               		.cfi_offset 15, -7
 801 000c 0F93      		push r16
 802               	.LCFI12:
 803               		.cfi_def_cfa_offset 9
 804               		.cfi_offset 16, -8
 805 000e 1F93      		push r17
 806               	.LCFI13:
 807               		.cfi_def_cfa_offset 10
 808               		.cfi_offset 17, -9
 809 0010 CF93      		push r28
 810               	.LCFI14:
 811               		.cfi_def_cfa_offset 11
 812               		.cfi_offset 28, -10
 813 0012 DF93      		push r29
 814               	.LCFI15:
 815               		.cfi_def_cfa_offset 12
 816               		.cfi_offset 29, -11
 817 0014 CDB7      		in r28,__SP_L__
 818 0016 DEB7      		in r29,__SP_H__
 819               	.LCFI16:
 820               		.cfi_def_cfa_register 28
 821 0018 2997      		sbiw r28,9
 822               	.LCFI17:
 823               		.cfi_def_cfa_offset 21
 824 001a 0FB6      		in __tmp_reg__,__SREG__
 825 001c F894      		cli
 826 001e DEBF      		out __SP_H__,r29
 827 0020 0FBE      		out __SREG__,__tmp_reg__
 828 0022 CDBF      		out __SP_L__,r28
 829               	/* prologue: function */
 830               	/* frame size = 9 */
 831               	/* stack size = 19 */
 832               	.L__stack_usage = 19
 833 0024 5C01      		movw r10,r24
  61:../../tmk_core/common/action.c **** 
 834               		.loc 1 61 5 is_stmt 1 view .LVU209
  61:../../tmk_core/common/action.c **** 
 835               		.loc 1 61 9 is_stmt 0 view .LVU210
 836 0026 0E94 0000 		call hook_process_action
 837               	.LVL68:
  61:../../tmk_core/common/action.c **** 
 838               		.loc 1 61 8 view .LVU211
 839 002a 8111      		cpse r24,__zero_reg__
 840 002c 00C0      		rjmp .L59
  63:../../tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 841               		.loc 1 63 5 is_stmt 1 view .LVU212
  63:../../tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 842               		.loc 1 63 16 is_stmt 0 view .LVU213
 843 002e 85E0      		ldi r24,lo8(5)
 844 0030 F501      		movw r30,r10
 845 0032 DE01      		movw r26,r28
 846 0034 1196      		adiw r26,1
 847               		0:
 848 0036 0190      		ld r0,Z+
 849 0038 0D92      		st X+,r0
 850 003a 8A95      		dec r24
 851 003c 01F4      		brne 0b
 852               	.LVL69:
  63:../../tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 853               		.loc 1 63 16 view .LVU214
 854 003e F501      		movw r30,r10
 855 0040 8381      		ldd r24,Z+3
 856 0042 9481      		ldd r25,Z+4
 857               	.LVL70:
  65:../../tmk_core/common/action.c **** #endif
 858               		.loc 1 65 5 is_stmt 1 view .LVU215
  68:../../tmk_core/common/action.c **** 
 859               		.loc 1 68 5 view .LVU216
 860               	.LBB36:
 861               	.LBI36:
 862               		.loc 2 49 20 view .LVU217
 863               	.LBB37:
 864               		.loc 2 49 51 view .LVU218
 865               		.loc 2 49 74 is_stmt 0 view .LVU219
 866 0044 0097      		sbiw r24,0
 867 0046 01F0      		breq .L59
 868               	.LBE37:
 869               	.LBE36:
  63:../../tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 870               		.loc 1 63 16 view .LVU220
 871 0048 4081      		ld r20,Z
 872 004a 5181      		ldd r21,Z+1
 873               	.LBB39:
 874               	.LBB38:
 875               		.loc 2 49 74 view .LVU221
 876 004c 242F      		mov r18,r20
 877 004e 2523      		and r18,r21
 878 0050 2F3F      		cpi r18,lo8(-1)
 879 0052 01F0      		breq .+2
 880 0054 00C0      		rjmp .L152
 881               	.LVL71:
 882               	.L59:
 883               	/* epilogue start */
 884               		.loc 2 49 74 view .LVU222
 885               	.LBE38:
 886               	.LBE39:
 353:../../tmk_core/common/action.c **** 
 887               		.loc 1 353 1 view .LVU223
 888 0056 2996      		adiw r28,9
 889 0058 0FB6      		in __tmp_reg__,__SREG__
 890 005a F894      		cli
 891 005c DEBF      		out __SP_H__,r29
 892 005e 0FBE      		out __SREG__,__tmp_reg__
 893 0060 CDBF      		out __SP_L__,r28
 894 0062 DF91      		pop r29
 895 0064 CF91      		pop r28
 896 0066 1F91      		pop r17
 897               	.LVL72:
 353:../../tmk_core/common/action.c **** 
 898               		.loc 1 353 1 view .LVU224
 899 0068 0F91      		pop r16
 353:../../tmk_core/common/action.c **** 
 900               		.loc 1 353 1 view .LVU225
 901 006a FF90      		pop r15
 902 006c EF90      		pop r14
 903 006e DF90      		pop r13
 904 0070 CF90      		pop r12
 905 0072 BF90      		pop r11
 906 0074 AF90      		pop r10
 907               	.LVL73:
 353:../../tmk_core/common/action.c **** 
 908               		.loc 1 353 1 view .LVU226
 909 0076 0895      		ret
 910               	.LVL74:
 911               	.L62:
 912               	.LBB40:
  83:../../tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 913               		.loc 1 83 17 is_stmt 1 view .LVU227
 914 0078 F12F      		mov r31,r17
 915 007a FF70      		andi r31,lo8(15)
 916 007c EF2E      		mov r14,r31
  83:../../tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 917               		.loc 1 83 48 is_stmt 0 view .LVU228
 918 007e 107F      		andi r17,lo8(-16)
  83:../../tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 919               		.loc 1 83 25 view .LVU229
 920 0080 01F0      		breq .L63
  83:../../tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 921               		.loc 1 83 25 discriminator 2 view .LVU230
 922 0082 E294      		swap r14
 923 0084 40EF      		ldi r20,lo8(-16)
 924 0086 E422      		and r14,r20
 925               	.L63:
 926               	.LVL75:
  85:../../tmk_core/common/action.c ****                     if (mods) {
 927               		.loc 1 85 17 is_stmt 1 discriminator 4 view .LVU231
  85:../../tmk_core/common/action.c ****                     if (mods) {
 928               		.loc 1 85 20 is_stmt 0 discriminator 4 view .LVU232
 929 0088 FF20      		tst r15
 930 008a 01F0      		breq .L64
  86:../../tmk_core/common/action.c ****                         add_weak_mods(mods);
 931               		.loc 1 86 21 is_stmt 1 view .LVU233
  86:../../tmk_core/common/action.c ****                         add_weak_mods(mods);
 932               		.loc 1 86 24 is_stmt 0 view .LVU234
 933 008c EE20      		tst r14
 934 008e 01F0      		breq .L158
  87:../../tmk_core/common/action.c ****                         send_keyboard_report();
 935               		.loc 1 87 25 is_stmt 1 view .LVU235
 936 0090 8E2D      		mov r24,r14
 937 0092 0E94 0000 		call add_weak_mods
 938               	.LVL76:
  88:../../tmk_core/common/action.c ****                     }
 939               		.loc 1 88 25 view .LVU236
 940 0096 0E94 0000 		call send_keyboard_report
 941               	.LVL77:
  90:../../tmk_core/common/action.c ****                 } else {
 942               		.loc 1 90 21 view .LVU237
 943               	.L158:
  90:../../tmk_core/common/action.c ****                 } else {
 944               		.loc 1 90 21 is_stmt 0 view .LVU238
 945               	.LBE40:
 294:../../tmk_core/common/action.c ****                             register_code(action.layer_tap.code);
 946               		.loc 1 294 29 is_stmt 1 view .LVU239
 295:../../tmk_core/common/action.c ****                         } else {
 947               		.loc 1 295 29 view .LVU240
 948 009a 802F      		mov r24,r16
 949               	/* epilogue start */
 353:../../tmk_core/common/action.c **** 
 950               		.loc 1 353 1 is_stmt 0 view .LVU241
 951 009c 2996      		adiw r28,9
 952 009e 0FB6      		in __tmp_reg__,__SREG__
 953 00a0 F894      		cli
 954 00a2 DEBF      		out __SP_H__,r29
 955 00a4 0FBE      		out __SREG__,__tmp_reg__
 956 00a6 CDBF      		out __SP_L__,r28
 957 00a8 DF91      		pop r29
 958 00aa CF91      		pop r28
 959 00ac 1F91      		pop r17
 960               	.LVL78:
 353:../../tmk_core/common/action.c **** 
 961               		.loc 1 353 1 view .LVU242
 962 00ae 0F91      		pop r16
 353:../../tmk_core/common/action.c **** 
 963               		.loc 1 353 1 view .LVU243
 964 00b0 FF90      		pop r15
 965 00b2 EF90      		pop r14
 966 00b4 DF90      		pop r13
 967 00b6 CF90      		pop r12
 968 00b8 BF90      		pop r11
 969 00ba AF90      		pop r10
 970               	.LVL79:
 295:../../tmk_core/common/action.c ****                         } else {
 971               		.loc 1 295 29 view .LVU244
 972 00bc 0C94 0000 		jmp register_code
 973               	.LVL80:
 974               	.L64:
 975               	.LBB41:
  92:../../tmk_core/common/action.c ****                     if (mods) {
 976               		.loc 1 92 21 is_stmt 1 view .LVU245
  92:../../tmk_core/common/action.c ****                     if (mods) {
 977               		.loc 1 92 21 is_stmt 0 view .LVU246
 978 00c0 802F      		mov r24,r16
 979 00c2 0E94 0000 		call unregister_code
 980               	.LVL81:
  93:../../tmk_core/common/action.c ****                         del_weak_mods(mods);
 981               		.loc 1 93 21 is_stmt 1 view .LVU247
  93:../../tmk_core/common/action.c ****                         del_weak_mods(mods);
 982               		.loc 1 93 24 is_stmt 0 view .LVU248
 983 00c6 EE20      		tst r14
 984 00c8 01F0      		breq .L59
  94:../../tmk_core/common/action.c ****                         send_keyboard_report();
 985               		.loc 1 94 25 is_stmt 1 view .LVU249
 986 00ca 8E2D      		mov r24,r14
 987 00cc 0E94 0000 		call del_weak_mods
 988               	.LVL82:
  95:../../tmk_core/common/action.c ****                     }
 989               		.loc 1 95 25 view .LVU250
 990               	/* epilogue start */
 991               	.LBE41:
 353:../../tmk_core/common/action.c **** 
 992               		.loc 1 353 1 is_stmt 0 view .LVU251
 993 00d0 2996      		adiw r28,9
 994 00d2 0FB6      		in __tmp_reg__,__SREG__
 995 00d4 F894      		cli
 996 00d6 DEBF      		out __SP_H__,r29
 997 00d8 0FBE      		out __SREG__,__tmp_reg__
 998 00da CDBF      		out __SP_L__,r28
 999 00dc DF91      		pop r29
 1000 00de CF91      		pop r28
 1001 00e0 1F91      		pop r17
 1002 00e2 0F91      		pop r16
 353:../../tmk_core/common/action.c **** 
 1003               		.loc 1 353 1 view .LVU252
 1004 00e4 FF90      		pop r15
 1005 00e6 EF90      		pop r14
 1006               	.LVL83:
 353:../../tmk_core/common/action.c **** 
 1007               		.loc 1 353 1 view .LVU253
 1008 00e8 DF90      		pop r13
 1009 00ea CF90      		pop r12
 1010 00ec BF90      		pop r11
 1011 00ee AF90      		pop r10
 1012               	.LVL84:
 1013               	.LBB42:
  95:../../tmk_core/common/action.c ****                     }
 1014               		.loc 1 95 25 view .LVU254
 1015 00f0 0C94 0000 		jmp send_keyboard_report
 1016               	.LVL85:
 1017               	.L68:
  95:../../tmk_core/common/action.c ****                     }
 1018               		.loc 1 95 25 view .LVU255
 1019               	.LBE42:
 1020               	.LBB43:
 104:../../tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 1021               		.loc 1 104 17 is_stmt 1 view .LVU256
 1022 00f4 212F      		mov r18,r17
 1023 00f6 2F70      		andi r18,lo8(15)
 1024 00f8 D22E      		mov r13,r18
 104:../../tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 1025               		.loc 1 104 48 is_stmt 0 view .LVU257
 1026 00fa 107F      		andi r17,lo8(-16)
 104:../../tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 1027               		.loc 1 104 25 view .LVU258
 1028 00fc 1032      		cpi r17,lo8(32)
 1029 00fe 01F0      		breq .L69
 104:../../tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 1030               		.loc 1 104 25 discriminator 2 view .LVU259
 1031 0100 D294      		swap r13
 1032 0102 30EF      		ldi r19,lo8(-16)
 1033 0104 D322      		and r13,r19
 1034               	.L69:
 1035               	.LVL86:
 106:../../tmk_core/common/action.c ****     #ifndef NO_ACTION_ONESHOT
 1036               		.loc 1 106 17 is_stmt 1 discriminator 4 view .LVU260
 106:../../tmk_core/common/action.c ****     #ifndef NO_ACTION_ONESHOT
 1037               		.loc 1 106 17 is_stmt 0 discriminator 4 view .LVU261
 1038 0106 0023      		tst r16
 1039 0108 01F0      		breq .L70
 1040 010a 0130      		cpi r16,lo8(1)
 1041 010c 01F4      		brne .+2
 1042 010e 00C0      		rjmp .L71
 155:../../tmk_core/common/action.c ****                             if (tap_count > 0) {
 1043               		.loc 1 155 25 is_stmt 1 view .LVU262
 155:../../tmk_core/common/action.c ****                             if (tap_count > 0) {
 1044               		.loc 1 155 28 is_stmt 0 view .LVU263
 1045 0110 FF20      		tst r15
 1046 0112 01F4      		brne .+2
 1047 0114 00C0      		rjmp .L80
 156:../../tmk_core/common/action.c ****                                 if (record->tap.interrupted) {
 1048               		.loc 1 156 29 is_stmt 1 view .LVU264
 156:../../tmk_core/common/action.c ****                                 if (record->tap.interrupted) {
 1049               		.loc 1 156 32 is_stmt 0 view .LVU265
 1050 0116 EE20      		tst r14
 1051 0118 01F0      		breq .L79
 157:../../tmk_core/common/action.c ****                                     dprint("MODS_TAP: Tap: Cancel: add_mods\n");
 1052               		.loc 1 157 33 is_stmt 1 view .LVU266
 157:../../tmk_core/common/action.c ****                                     dprint("MODS_TAP: Tap: Cancel: add_mods\n");
 1053               		.loc 1 157 37 is_stmt 0 view .LVU267
 1054 011a F501      		movw r30,r10
 1055 011c 8581      		ldd r24,Z+5
 157:../../tmk_core/common/action.c ****                                     dprint("MODS_TAP: Tap: Cancel: add_mods\n");
 1056               		.loc 1 157 36 view .LVU268
 1057 011e 80FF      		sbrs r24,0
 1058 0120 00C0      		rjmp .L158
 158:../../tmk_core/common/action.c ****                                     // ad hoc: set 0 to cancel tap
 1059               		.loc 1 158 37 is_stmt 1 view .LVU269
 160:../../tmk_core/common/action.c ****                                     register_mods(mods);
 1060               		.loc 1 160 37 view .LVU270
 160:../../tmk_core/common/action.c ****                                     register_mods(mods);
 1061               		.loc 1 160 55 is_stmt 0 view .LVU271
 1062 0122 8F70      		andi r24,lo8(15)
 1063 0124 8583      		std Z+5,r24
 161:../../tmk_core/common/action.c ****                                 } else {
 1064               		.loc 1 161 37 is_stmt 1 view .LVU272
 1065 0126 00C0      		rjmp .L79
 1066               	.L70:
 110:../../tmk_core/common/action.c ****                             if (tap_count == 0) {
 1067               		.loc 1 110 25 view .LVU273
 110:../../tmk_core/common/action.c ****                             if (tap_count == 0) {
 1068               		.loc 1 110 28 is_stmt 0 view .LVU274
 1069 0128 FF20      		tst r15
 1070 012a 01F0      		breq .L73
 111:../../tmk_core/common/action.c ****                                 register_mods(mods);
 1071               		.loc 1 111 29 is_stmt 1 view .LVU275
 111:../../tmk_core/common/action.c ****                                 register_mods(mods);
 1072               		.loc 1 111 32 is_stmt 0 view .LVU276
 1073 012c E110      		cpse r14,__zero_reg__
 1074 012e 00C0      		rjmp .L74
 1075               	.L79:
 143:../../tmk_core/common/action.c ****                                     register_mods(mods);
 1076               		.loc 1 143 37 is_stmt 1 view .LVU277
 144:../../tmk_core/common/action.c ****                                 }
 1077               		.loc 1 144 37 view .LVU278
 1078 0130 8D2D      		mov r24,r13
 1079               	.LVL87:
 1080               	.L154:
 1081               	/* epilogue start */
 144:../../tmk_core/common/action.c ****                                 }
 1082               		.loc 1 144 37 is_stmt 0 view .LVU279
 1083               	.LBE43:
 353:../../tmk_core/common/action.c **** 
 1084               		.loc 1 353 1 view .LVU280
 1085 0132 2996      		adiw r28,9
 1086 0134 0FB6      		in __tmp_reg__,__SREG__
 1087 0136 F894      		cli
 1088 0138 DEBF      		out __SP_H__,r29
 1089 013a 0FBE      		out __SREG__,__tmp_reg__
 1090 013c CDBF      		out __SP_L__,r28
 1091 013e DF91      		pop r29
 1092 0140 CF91      		pop r28
 1093 0142 1F91      		pop r17
 1094 0144 0F91      		pop r16
 353:../../tmk_core/common/action.c **** 
 1095               		.loc 1 353 1 view .LVU281
 1096 0146 FF90      		pop r15
 1097 0148 EF90      		pop r14
 1098 014a DF90      		pop r13
 1099 014c CF90      		pop r12
 1100 014e BF90      		pop r11
 1101 0150 AF90      		pop r10
 1102               	.LVL88:
 1103               	.LBB44:
 144:../../tmk_core/common/action.c ****                                 }
 1104               		.loc 1 144 37 view .LVU282
 1105 0152 0C94 0000 		jmp register_mods
 1106               	.LVL89:
 1107               	.L74:
 114:../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: start\n");
 1108               		.loc 1 114 34 is_stmt 1 view .LVU283
 114:../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: start\n");
 1109               		.loc 1 114 37 is_stmt 0 view .LVU284
 1110 0156 31E0      		ldi r19,lo8(1)
 116:../../tmk_core/common/action.c ****                             }
 1111               		.loc 1 116 33 view .LVU285
 1112 0158 8D2D      		mov r24,r13
 114:../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: start\n");
 1113               		.loc 1 114 37 view .LVU286
 1114 015a E312      		cpse r14,r19
 1115 015c 00C0      		rjmp .L154
 115:../../tmk_core/common/action.c ****                                 set_oneshot_mods(mods);
 1116               		.loc 1 115 33 is_stmt 1 view .LVU287
 116:../../tmk_core/common/action.c ****                             }
 1117               		.loc 1 116 33 view .LVU288
 1118               	/* epilogue start */
 1119               	.LBE44:
 353:../../tmk_core/common/action.c **** 
 1120               		.loc 1 353 1 is_stmt 0 view .LVU289
 1121 015e 2996      		adiw r28,9
 1122 0160 0FB6      		in __tmp_reg__,__SREG__
 1123 0162 F894      		cli
 1124 0164 DEBF      		out __SP_H__,r29
 1125 0166 0FBE      		out __SREG__,__tmp_reg__
 1126 0168 CDBF      		out __SP_L__,r28
 1127 016a DF91      		pop r29
 1128 016c CF91      		pop r28
 1129 016e 1F91      		pop r17
 1130 0170 0F91      		pop r16
 353:../../tmk_core/common/action.c **** 
 1131               		.loc 1 353 1 view .LVU290
 1132 0172 FF90      		pop r15
 1133 0174 EF90      		pop r14
 1134 0176 DF90      		pop r13
 1135               	.LVL90:
 353:../../tmk_core/common/action.c **** 
 1136               		.loc 1 353 1 view .LVU291
 1137 0178 CF90      		pop r12
 1138 017a BF90      		pop r11
 1139 017c AF90      		pop r10
 1140               	.LVL91:
 1141               	.LBB45:
 116:../../tmk_core/common/action.c ****                             }
 1142               		.loc 1 116 33 view .LVU292
 1143 017e 0C94 0000 		jmp set_oneshot_mods
 1144               	.LVL92:
 1145               	.L73:
 122:../../tmk_core/common/action.c ****                                 clear_oneshot_mods();
 1146               		.loc 1 122 29 is_stmt 1 view .LVU293
 122:../../tmk_core/common/action.c ****                                 clear_oneshot_mods();
 1147               		.loc 1 122 32 is_stmt 0 view .LVU294
 1148 0182 E110      		cpse r14,__zero_reg__
 1149 0184 00C0      		rjmp .L76
 1150               	.L155:
 130:../../tmk_core/common/action.c ****                                 unregister_mods(mods);
 1151               		.loc 1 130 33 is_stmt 1 view .LVU295
 1152 0186 0E94 0000 		call clear_oneshot_mods
 1153               	.LVL93:
 131:../../tmk_core/common/action.c ****                             }
 1154               		.loc 1 131 33 view .LVU296
 1155               	.L83:
 175:../../tmk_core/common/action.c ****                                 unregister_mods(mods);
 1156               		.loc 1 175 33 view .LVU297
 176:../../tmk_core/common/action.c ****                             }
 1157               		.loc 1 176 33 view .LVU298
 1158 018a 8D2D      		mov r24,r13
 1159               	.LVL94:
 1160               	.L116:
 1161               	/* epilogue start */
 176:../../tmk_core/common/action.c ****                             }
 1162               		.loc 1 176 33 is_stmt 0 view .LVU299
 1163               	.LBE45:
 353:../../tmk_core/common/action.c **** 
 1164               		.loc 1 353 1 discriminator 4 view .LVU300
 1165 018c 2996      		adiw r28,9
 1166 018e 0FB6      		in __tmp_reg__,__SREG__
 1167 0190 F894      		cli
 1168 0192 DEBF      		out __SP_H__,r29
 1169 0194 0FBE      		out __SREG__,__tmp_reg__
 1170 0196 CDBF      		out __SP_L__,r28
 1171 0198 DF91      		pop r29
 1172 019a CF91      		pop r28
 1173 019c 1F91      		pop r17
 1174 019e 0F91      		pop r16
 353:../../tmk_core/common/action.c **** 
 1175               		.loc 1 353 1 discriminator 4 view .LVU301
 1176 01a0 FF90      		pop r15
 1177 01a2 EF90      		pop r14
 1178 01a4 DF90      		pop r13
 1179 01a6 CF90      		pop r12
 1180 01a8 BF90      		pop r11
 1181 01aa AF90      		pop r10
 1182               	.LVL95:
 261:../../tmk_core/common/action.c ****                                 (action.layer_tap.code & 0x0f) << 4 :
 1183               		.loc 1 261 25 discriminator 4 view .LVU302
 1184 01ac 0C94 0000 		jmp unregister_mods
 1185               	.LVL96:
 1186               	.L76:
 1187               	.LBB46:
 126:../../tmk_core/common/action.c ****                                 // Retain Oneshot mods
 1188               		.loc 1 126 34 is_stmt 1 view .LVU303
 126:../../tmk_core/common/action.c ****                                 // Retain Oneshot mods
 1189               		.loc 1 126 37 is_stmt 0 view .LVU304
 1190 01b0 41E0      		ldi r20,lo8(1)
 1191 01b2 E416      		cp r14,r20
 1192 01b4 01F4      		brne .+2
 1193 01b6 00C0      		rjmp .L59
 1194 01b8 00C0      		rjmp .L155
 1195               	.L71:
 137:../../tmk_core/common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 1196               		.loc 1 137 25 is_stmt 1 view .LVU305
 137:../../tmk_core/common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 1197               		.loc 1 137 28 is_stmt 0 view .LVU306
 1198 01ba FF20      		tst r15
 1199 01bc 01F0      		breq .L78
 138:../../tmk_core/common/action.c ****                                 if (mods & get_mods()) {
 1200               		.loc 1 138 29 is_stmt 1 view .LVU307
 138:../../tmk_core/common/action.c ****                                 if (mods & get_mods()) {
 1201               		.loc 1 138 32 is_stmt 0 view .LVU308
 1202 01be 55E0      		ldi r21,lo8(5)
 1203 01c0 5E15      		cp r21,r14
 1204 01c2 00F4      		brsh .+2
 1205 01c4 00C0      		rjmp .L59
 139:../../tmk_core/common/action.c ****                                     dprint("MODS_TAP_TOGGLE: toggle mods off\n");
 1206               		.loc 1 139 33 is_stmt 1 view .LVU309
 139:../../tmk_core/common/action.c ****                                     dprint("MODS_TAP_TOGGLE: toggle mods off\n");
 1207               		.loc 1 139 44 is_stmt 0 view .LVU310
 1208 01c6 0E94 0000 		call get_mods
 1209               	.LVL97:
 139:../../tmk_core/common/action.c ****                                     dprint("MODS_TAP_TOGGLE: toggle mods off\n");
 1210               		.loc 1 139 37 view .LVU311
 1211 01ca 8D21      		and r24,r13
 139:../../tmk_core/common/action.c ****                                     dprint("MODS_TAP_TOGGLE: toggle mods off\n");
 1212               		.loc 1 139 36 view .LVU312
 1213 01cc 01F4      		brne .+2
 1214 01ce 00C0      		rjmp .L79
 1215 01d0 00C0      		rjmp .L83
 1216               	.L78:
 148:../../tmk_core/common/action.c ****                                 dprint("MODS_TAP_TOGGLE: release : unregister_mods\n");
 1217               		.loc 1 148 29 is_stmt 1 view .LVU313
 148:../../tmk_core/common/action.c ****                                 dprint("MODS_TAP_TOGGLE: release : unregister_mods\n");
 1218               		.loc 1 148 32 is_stmt 0 view .LVU314
 1219 01d2 84E0      		ldi r24,lo8(4)
 1220 01d4 8E15      		cp r24,r14
 1221 01d6 00F4      		brsh .+2
 1222 01d8 00C0      		rjmp .L59
 1223 01da 00C0      		rjmp .L83
 1224               	.L80:
 171:../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 1225               		.loc 1 171 29 is_stmt 1 view .LVU315
 171:../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 1226               		.loc 1 171 32 is_stmt 0 view .LVU316
 1227 01dc EE20      		tst r14
 1228 01de 01F0      		breq .L83
 1229               	.LVL98:
 1230               	.L161:
 171:../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 1231               		.loc 1 171 32 view .LVU317
 1232               	.LBE46:
 302:../../tmk_core/common/action.c ****                             unregister_code(action.layer_tap.code);
 1233               		.loc 1 302 29 is_stmt 1 view .LVU318
 303:../../tmk_core/common/action.c ****                         } else {
 1234               		.loc 1 303 29 view .LVU319
 1235 01e0 802F      		mov r24,r16
 1236               	/* epilogue start */
 353:../../tmk_core/common/action.c **** 
 1237               		.loc 1 353 1 is_stmt 0 view .LVU320
 1238 01e2 2996      		adiw r28,9
 1239 01e4 0FB6      		in __tmp_reg__,__SREG__
 1240 01e6 F894      		cli
 1241 01e8 DEBF      		out __SP_H__,r29
 1242 01ea 0FBE      		out __SREG__,__tmp_reg__
 1243 01ec CDBF      		out __SP_L__,r28
 1244 01ee DF91      		pop r29
 1245 01f0 CF91      		pop r28
 1246 01f2 1F91      		pop r17
 1247               	.LVL99:
 353:../../tmk_core/common/action.c **** 
 1248               		.loc 1 353 1 view .LVU321
 1249 01f4 0F91      		pop r16
 353:../../tmk_core/common/action.c **** 
 1250               		.loc 1 353 1 view .LVU322
 1251 01f6 FF90      		pop r15
 1252 01f8 EF90      		pop r14
 1253 01fa DF90      		pop r13
 1254 01fc CF90      		pop r12
 1255 01fe BF90      		pop r11
 1256 0200 AF90      		pop r10
 1257               	.LVL100:
 303:../../tmk_core/common/action.c ****                         } else {
 1258               		.loc 1 303 29 view .LVU323
 1259 0202 0C94 0000 		jmp unregister_code
 1260               	.LVL101:
 1261               	.L84:
 187:../../tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 1262               		.loc 1 187 13 is_stmt 1 view .LVU324
 187:../../tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 1263               		.loc 1 187 33 is_stmt 0 view .LVU325
 1264 0206 812F      		mov r24,r17
 1265 0208 8695      		lsr r24
 1266 020a 8695      		lsr r24
 1267 020c 8370      		andi r24,lo8(3)
 1268 020e 01F0      		breq .L85
 1269 0210 8130      		cpi r24,lo8(1)
 1270 0212 01F0      		breq .+2
 1271 0214 00C0      		rjmp .L59
 196:../../tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 1272               		.loc 1 196 21 is_stmt 1 view .LVU326
 197:../../tmk_core/common/action.c ****                     } else {
 1273               		.loc 1 197 25 is_stmt 0 view .LVU327
 1274 0216 C801      		movw r24,r16
 1275 0218 9370      		andi r25,lo8(3)
 196:../../tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 1276               		.loc 1 196 24 view .LVU328
 1277 021a F110      		cpse r15,__zero_reg__
 1278 021c 00C0      		rjmp .L164
 199:../../tmk_core/common/action.c ****                     }
 1279               		.loc 1 199 25 is_stmt 1 view .LVU329
 1280 021e 90E0      		ldi r25,0
 1281 0220 80E0      		ldi r24,0
 1282               	.L164:
 1283               	/* epilogue start */
 353:../../tmk_core/common/action.c **** 
 1284               		.loc 1 353 1 is_stmt 0 view .LVU330
 1285 0222 2996      		adiw r28,9
 1286 0224 0FB6      		in __tmp_reg__,__SREG__
 1287 0226 F894      		cli
 1288 0228 DEBF      		out __SP_H__,r29
 1289 022a 0FBE      		out __SREG__,__tmp_reg__
 1290 022c CDBF      		out __SP_L__,r28
 1291 022e DF91      		pop r29
 1292 0230 CF91      		pop r28
 1293 0232 1F91      		pop r17
 353:../../tmk_core/common/action.c **** 
 1294               		.loc 1 353 1 view .LVU331
 1295 0234 0F91      		pop r16
 1296 0236 FF90      		pop r15
 1297 0238 EF90      		pop r14
 1298 023a DF90      		pop r13
 1299 023c CF90      		pop r12
 1300 023e BF90      		pop r11
 1301 0240 AF90      		pop r10
 1302               	.LVL102:
 199:../../tmk_core/common/action.c ****                     }
 1303               		.loc 1 199 25 view .LVU332
 1304 0242 0C94 0000 		jmp host_consumer_send
 1305               	.LVL103:
 1306               	.L85:
 189:../../tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 1307               		.loc 1 189 21 is_stmt 1 view .LVU333
 190:../../tmk_core/common/action.c ****                     } else {
 1308               		.loc 1 190 25 is_stmt 0 view .LVU334
 1309 0246 C801      		movw r24,r16
 1310 0248 9370      		andi r25,lo8(3)
 189:../../tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 1311               		.loc 1 189 24 view .LVU335
 1312 024a F110      		cpse r15,__zero_reg__
 1313 024c 00C0      		rjmp .L162
 192:../../tmk_core/common/action.c ****                     }
 1314               		.loc 1 192 25 is_stmt 1 view .LVU336
 1315 024e 90E0      		ldi r25,0
 1316 0250 80E0      		ldi r24,0
 1317               	.L162:
 1318               	/* epilogue start */
 353:../../tmk_core/common/action.c **** 
 1319               		.loc 1 353 1 is_stmt 0 view .LVU337
 1320 0252 2996      		adiw r28,9
 1321 0254 0FB6      		in __tmp_reg__,__SREG__
 1322 0256 F894      		cli
 1323 0258 DEBF      		out __SP_H__,r29
 1324 025a 0FBE      		out __SREG__,__tmp_reg__
 1325 025c CDBF      		out __SP_L__,r28
 1326 025e DF91      		pop r29
 1327 0260 CF91      		pop r28
 1328 0262 1F91      		pop r17
 353:../../tmk_core/common/action.c **** 
 1329               		.loc 1 353 1 view .LVU338
 1330 0264 0F91      		pop r16
 1331 0266 FF90      		pop r15
 1332 0268 EF90      		pop r14
 1333 026a DF90      		pop r13
 1334 026c CF90      		pop r12
 1335 026e BF90      		pop r11
 1336 0270 AF90      		pop r10
 1337               	.LVL104:
 192:../../tmk_core/common/action.c ****                     }
 1338               		.loc 1 192 25 view .LVU339
 1339 0272 0C94 0000 		jmp host_system_send
 1340               	.LVL105:
 1341               	.L89:
 208:../../tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 1342               		.loc 1 208 13 is_stmt 1 view .LVU340
 209:../../tmk_core/common/action.c ****                 mousekey_send();
 1343               		.loc 1 209 17 is_stmt 0 view .LVU341
 1344 0276 802F      		mov r24,r16
 208:../../tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 1345               		.loc 1 208 16 view .LVU342
 1346 0278 FF20      		tst r15
 1347 027a 01F0      		breq .L90
 209:../../tmk_core/common/action.c ****                 mousekey_send();
 1348               		.loc 1 209 17 is_stmt 1 view .LVU343
 1349 027c 0E94 0000 		call mousekey_on
 1350               	.LVL106:
 210:../../tmk_core/common/action.c ****             } else {
 1351               		.loc 1 210 17 view .LVU344
 1352               	.L165:
 213:../../tmk_core/common/action.c ****             }
 1353               		.loc 1 213 17 view .LVU345
 1354               	/* epilogue start */
 353:../../tmk_core/common/action.c **** 
 1355               		.loc 1 353 1 is_stmt 0 view .LVU346
 1356 0280 2996      		adiw r28,9
 1357 0282 0FB6      		in __tmp_reg__,__SREG__
 1358 0284 F894      		cli
 1359 0286 DEBF      		out __SP_H__,r29
 1360 0288 0FBE      		out __SREG__,__tmp_reg__
 1361 028a CDBF      		out __SP_L__,r28
 1362 028c DF91      		pop r29
 1363 028e CF91      		pop r28
 1364 0290 1F91      		pop r17
 1365               	.LVL107:
 353:../../tmk_core/common/action.c **** 
 1366               		.loc 1 353 1 view .LVU347
 1367 0292 0F91      		pop r16
 353:../../tmk_core/common/action.c **** 
 1368               		.loc 1 353 1 view .LVU348
 1369 0294 FF90      		pop r15
 1370 0296 EF90      		pop r14
 1371 0298 DF90      		pop r13
 1372 029a CF90      		pop r12
 1373 029c BF90      		pop r11
 1374 029e AF90      		pop r10
 1375               	.LVL108:
 213:../../tmk_core/common/action.c ****             }
 1376               		.loc 1 213 17 view .LVU349
 1377 02a0 0C94 0000 		jmp mousekey_send
 1378               	.LVL109:
 1379               	.L90:
 212:../../tmk_core/common/action.c ****                 mousekey_send();
 1380               		.loc 1 212 17 is_stmt 1 view .LVU350
 1381 02a4 0E94 0000 		call mousekey_off
 1382               	.LVL110:
 1383 02a8 00C0      		rjmp .L165
 1384               	.LVL111:
 1385               	.L91:
 219:../../tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 1386               		.loc 1 219 13 view .LVU351
 219:../../tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 1387               		.loc 1 219 39 is_stmt 0 view .LVU352
 1388 02aa 812F      		mov r24,r17
 1389 02ac 8370      		andi r24,lo8(3)
 219:../../tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 1390               		.loc 1 219 16 view .LVU353
 1391 02ae 01F0      		breq .+2
 1392 02b0 00C0      		rjmp .L92
 221:../../tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 1393               		.loc 1 221 17 is_stmt 1 view .LVU354
 221:../../tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 1394               		.loc 1 221 20 is_stmt 0 view .LVU355
 1395 02b2 F110      		cpse r15,__zero_reg__
 1396 02b4 00C0      		rjmp .L59
 1397               	.LBB47:
 222:../../tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1398               		.loc 1 222 21 is_stmt 1 view .LVU356
 1399               	.LVL112:
 223:../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1400               		.loc 1 223 21 view .LVU357
 222:../../tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1401               		.loc 1 222 55 is_stmt 0 view .LVU358
 1402 02b6 202F      		mov r18,r16
 1403 02b8 2295      		swap r18
 1404 02ba 2695      		lsr r18
 1405 02bc 2770      		andi r18,lo8(7)
 222:../../tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1406               		.loc 1 222 29 view .LVU359
 1407 02be 220F      		lsl r18
 1408 02c0 220F      		lsl r18
 223:../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1409               		.loc 1 223 66 view .LVU360
 1410 02c2 802F      		mov r24,r16
 1411 02c4 8F70      		andi r24,lo8(15)
 223:../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1412               		.loc 1 223 38 view .LVU361
 1413 02c6 90E0      		ldi r25,0
 1414 02c8 B0E0      		ldi r27,0
 1415 02ca A0E0      		ldi r26,0
 223:../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1416               		.loc 1 223 30 view .LVU362
 1417 02cc 6C01      		movw r12,r24
 1418 02ce 7D01      		movw r14,r26
 1419 02d0 022E      		mov r0,r18
 1420 02d2 00C0      		rjmp 2f
 1421               		1:
 1422 02d4 CC0C      		lsl r12
 1423 02d6 DD1C      		rol r13
 1424 02d8 EE1C      		rol r14
 1425 02da FF1C      		rol r15
 1426               		2:
 1427 02dc 0A94      		dec r0
 1428 02de 02F4      		brpl 1b
 1429               	.LVL113:
 224:../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1430               		.loc 1 224 21 is_stmt 1 view .LVU363
 224:../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1431               		.loc 1 224 91 is_stmt 0 view .LVU364
 1432 02e0 60E0      		ldi r22,0
 1433 02e2 70E0      		ldi r23,0
 1434 02e4 CB01      		movw r24,r22
 1435 02e6 04FF      		sbrs r16,4
 1436 02e8 00C0      		rjmp .L93
 224:../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1437               		.loc 1 224 82 discriminator 1 view .LVU365
 1438 02ea 6FE0      		ldi r22,lo8(15)
 1439 02ec 70E0      		ldi r23,0
 1440 02ee 80E0      		ldi r24,0
 1441 02f0 90E0      		ldi r25,0
 1442 02f2 00C0      		rjmp 2f
 1443               		1:
 1444 02f4 660F      		lsl r22
 1445 02f6 771F      		rol r23
 1446 02f8 881F      		rol r24
 1447 02fa 991F      		rol r25
 1448               		2:
 1449 02fc 2A95      		dec r18
 1450 02fe 02F4      		brpl 1b
 224:../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1451               		.loc 1 224 91 discriminator 1 view .LVU366
 1452 0300 6095      		com r22
 1453 0302 7095      		com r23
 1454 0304 8095      		com r24
 1455 0306 9095      		com r25
 1456               	.L93:
 1457               	.LVL114:
 225:../../tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 1458               		.loc 1 225 21 is_stmt 1 discriminator 4 view .LVU367
 225:../../tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 1459               		.loc 1 225 47 is_stmt 0 discriminator 4 view .LVU368
 1460 0308 1695      		lsr r17
 1461 030a 1695      		lsr r17
 1462               	.LVL115:
 225:../../tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 1463               		.loc 1 225 47 discriminator 4 view .LVU369
 1464 030c 1370      		andi r17,lo8(3)
 1465 030e 1230      		cpi r17,lo8(2)
 1466 0310 01F0      		breq .L94
 1467 0312 1330      		cpi r17,lo8(3)
 1468 0314 01F4      		brne .+2
 1469 0316 00C0      		rjmp .L95
 1470 0318 9B01      		movw r18,r22
 1471 031a AC01      		movw r20,r24
 1472 031c 2C29      		or r18,r12
 1473 031e 3D29      		or r19,r13
 1474 0320 4E29      		or r20,r14
 1475 0322 5F29      		or r21,r15
 1476 0324 2E83      		std Y+6,r18
 1477 0326 3F83      		std Y+7,r19
 1478 0328 4887      		std Y+8,r20
 1479 032a 5987      		std Y+9,r21
 1480 032c 1130      		cpi r17,lo8(1)
 1481 032e 01F0      		breq .L96
 226:../../tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 1482               		.loc 1 226 42 is_stmt 1 view .LVU370
 1483 0330 CA01      		movw r24,r20
 1484 0332 B901      		movw r22,r18
 1485               	.LVL116:
 1486               	/* epilogue start */
 226:../../tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 1487               		.loc 1 226 42 is_stmt 0 view .LVU371
 1488               	.LBE47:
 353:../../tmk_core/common/action.c **** 
 1489               		.loc 1 353 1 view .LVU372
 1490 0334 2996      		adiw r28,9
 1491 0336 0FB6      		in __tmp_reg__,__SREG__
 1492 0338 F894      		cli
 1493 033a DEBF      		out __SP_H__,r29
 1494 033c 0FBE      		out __SREG__,__tmp_reg__
 1495 033e CDBF      		out __SP_L__,r28
 1496 0340 DF91      		pop r29
 1497 0342 CF91      		pop r28
 1498 0344 1F91      		pop r17
 1499 0346 0F91      		pop r16
 353:../../tmk_core/common/action.c **** 
 1500               		.loc 1 353 1 view .LVU373
 1501 0348 FF90      		pop r15
 1502 034a EF90      		pop r14
 1503 034c DF90      		pop r13
 1504 034e CF90      		pop r12
 1505               	.LVL117:
 353:../../tmk_core/common/action.c **** 
 1506               		.loc 1 353 1 view .LVU374
 1507 0350 BF90      		pop r11
 1508 0352 AF90      		pop r10
 1509               	.LVL118:
 1510               	.LBB48:
 226:../../tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 1511               		.loc 1 226 42 view .LVU375
 1512 0354 0C94 0000 		jmp default_layer_and
 1513               	.LVL119:
 1514               	.L96:
 227:../../tmk_core/common/action.c ****                         case OP_BIT_XOR: default_layer_xor(bits | mask); break;
 1515               		.loc 1 227 42 is_stmt 1 view .LVU376
 1516 0358 6E81      		ldd r22,Y+6
 1517 035a 7F81      		ldd r23,Y+7
 1518 035c 8885      		ldd r24,Y+8
 1519 035e 9985      		ldd r25,Y+9
 1520               	.LVL120:
 1521               	.L166:
 1522               	/* epilogue start */
 227:../../tmk_core/common/action.c ****                         case OP_BIT_XOR: default_layer_xor(bits | mask); break;
 1523               		.loc 1 227 42 is_stmt 0 view .LVU377
 1524               	.LBE48:
 353:../../tmk_core/common/action.c **** 
 1525               		.loc 1 353 1 view .LVU378
 1526 0360 2996      		adiw r28,9
 1527 0362 0FB6      		in __tmp_reg__,__SREG__
 1528 0364 F894      		cli
 1529 0366 DEBF      		out __SP_H__,r29
 1530 0368 0FBE      		out __SREG__,__tmp_reg__
 1531 036a CDBF      		out __SP_L__,r28
 1532 036c DF91      		pop r29
 1533 036e CF91      		pop r28
 1534 0370 1F91      		pop r17
 1535 0372 0F91      		pop r16
 353:../../tmk_core/common/action.c **** 
 1536               		.loc 1 353 1 view .LVU379
 1537 0374 FF90      		pop r15
 1538 0376 EF90      		pop r14
 1539 0378 DF90      		pop r13
 1540 037a CF90      		pop r12
 1541               	.LVL121:
 353:../../tmk_core/common/action.c **** 
 1542               		.loc 1 353 1 view .LVU380
 1543 037c BF90      		pop r11
 1544 037e AF90      		pop r10
 1545               	.LVL122:
 1546               	.LBB49:
 229:../../tmk_core/common/action.c ****                     }
 1547               		.loc 1 229 67 view .LVU381
 1548 0380 0C94 0000 		jmp default_layer_or
 1549               	.LVL123:
 1550               	.L94:
 228:../../tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1551               		.loc 1 228 42 is_stmt 1 view .LVU382
 1552 0384 9B01      		movw r18,r22
 1553 0386 AC01      		movw r20,r24
 1554 0388 2C29      		or r18,r12
 1555 038a 3D29      		or r19,r13
 1556 038c 4E29      		or r20,r14
 1557 038e 5F29      		or r21,r15
 1558 0390 2E83      		std Y+6,r18
 1559 0392 3F83      		std Y+7,r19
 1560 0394 4887      		std Y+8,r20
 1561 0396 5987      		std Y+9,r21
 1562 0398 CA01      		movw r24,r20
 1563 039a B901      		movw r22,r18
 1564               	.LVL124:
 1565               	/* epilogue start */
 228:../../tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1566               		.loc 1 228 42 is_stmt 0 view .LVU383
 1567               	.LBE49:
 353:../../tmk_core/common/action.c **** 
 1568               		.loc 1 353 1 view .LVU384
 1569 039c 2996      		adiw r28,9
 1570 039e 0FB6      		in __tmp_reg__,__SREG__
 1571 03a0 F894      		cli
 1572 03a2 DEBF      		out __SP_H__,r29
 1573 03a4 0FBE      		out __SREG__,__tmp_reg__
 1574 03a6 CDBF      		out __SP_L__,r28
 1575 03a8 DF91      		pop r29
 1576 03aa CF91      		pop r28
 1577 03ac 1F91      		pop r17
 1578 03ae 0F91      		pop r16
 353:../../tmk_core/common/action.c **** 
 1579               		.loc 1 353 1 view .LVU385
 1580 03b0 FF90      		pop r15
 1581 03b2 EF90      		pop r14
 1582 03b4 DF90      		pop r13
 1583 03b6 CF90      		pop r12
 1584               	.LVL125:
 353:../../tmk_core/common/action.c **** 
 1585               		.loc 1 353 1 view .LVU386
 1586 03b8 BF90      		pop r11
 1587 03ba AF90      		pop r10
 1588               	.LVL126:
 1589               	.LBB50:
 228:../../tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1590               		.loc 1 228 42 view .LVU387
 1591 03bc 0C94 0000 		jmp default_layer_xor
 1592               	.LVL127:
 1593               	.L95:
 229:../../tmk_core/common/action.c ****                     }
 1594               		.loc 1 229 42 is_stmt 1 view .LVU388
 1595 03c0 0E94 0000 		call default_layer_and
 1596               	.LVL128:
 229:../../tmk_core/common/action.c ****                     }
 1597               		.loc 1 229 67 view .LVU389
 1598 03c4 C701      		movw r24,r14
 1599 03c6 B601      		movw r22,r12
 1600 03c8 00C0      		rjmp .L166
 1601               	.LVL129:
 1602               	.L92:
 229:../../tmk_core/common/action.c ****                     }
 1603               		.loc 1 229 67 is_stmt 0 view .LVU390
 1604               	.LBE50:
 234:../../tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1605               		.loc 1 234 17 is_stmt 1 view .LVU391
 234:../../tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1606               		.loc 1 234 21 is_stmt 0 view .LVU392
 1607 03ca 8695      		lsr r24
 1608 03cc FF20      		tst r15
 1609 03ce 01F0      		breq .L98
 234:../../tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1610               		.loc 1 234 21 discriminator 1 view .LVU393
 1611 03d0 812F      		mov r24,r17
 1612 03d2 8170      		andi r24,lo8(1)
 1613               	.L98:
 234:../../tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1614               		.loc 1 234 20 discriminator 4 view .LVU394
 1615 03d4 8823      		tst r24
 1616 03d6 01F4      		brne .+2
 1617 03d8 00C0      		rjmp .L59
 1618               	.LBB51:
 236:../../tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1619               		.loc 1 236 21 is_stmt 1 view .LVU395
 1620               	.LVL130:
 237:../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1621               		.loc 1 237 21 view .LVU396
 236:../../tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1622               		.loc 1 236 55 is_stmt 0 view .LVU397
 1623 03da 202F      		mov r18,r16
 1624 03dc 2295      		swap r18
 1625 03de 2695      		lsr r18
 1626 03e0 2770      		andi r18,lo8(7)
 236:../../tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1627               		.loc 1 236 29 view .LVU398
 1628 03e2 220F      		lsl r18
 1629 03e4 220F      		lsl r18
 237:../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1630               		.loc 1 237 66 view .LVU399
 1631 03e6 802F      		mov r24,r16
 1632 03e8 8F70      		andi r24,lo8(15)
 237:../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1633               		.loc 1 237 38 view .LVU400
 1634 03ea 90E0      		ldi r25,0
 1635 03ec B0E0      		ldi r27,0
 1636 03ee A0E0      		ldi r26,0
 237:../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1637               		.loc 1 237 30 view .LVU401
 1638 03f0 6C01      		movw r12,r24
 1639 03f2 7D01      		movw r14,r26
 1640 03f4 022E      		mov r0,r18
 1641 03f6 00C0      		rjmp 2f
 1642               		1:
 1643 03f8 CC0C      		lsl r12
 1644 03fa DD1C      		rol r13
 1645 03fc EE1C      		rol r14
 1646 03fe FF1C      		rol r15
 1647               		2:
 1648 0400 0A94      		dec r0
 1649 0402 02F4      		brpl 1b
 1650               	.LVL131:
 238:../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1651               		.loc 1 238 21 is_stmt 1 view .LVU402
 238:../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1652               		.loc 1 238 91 is_stmt 0 view .LVU403
 1653 0404 60E0      		ldi r22,0
 1654 0406 70E0      		ldi r23,0
 1655 0408 CB01      		movw r24,r22
 1656 040a 04FF      		sbrs r16,4
 1657 040c 00C0      		rjmp .L99
 238:../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1658               		.loc 1 238 82 discriminator 1 view .LVU404
 1659 040e 6FE0      		ldi r22,lo8(15)
 1660 0410 70E0      		ldi r23,0
 1661 0412 80E0      		ldi r24,0
 1662 0414 90E0      		ldi r25,0
 1663 0416 00C0      		rjmp 2f
 1664               		1:
 1665 0418 660F      		lsl r22
 1666 041a 771F      		rol r23
 1667 041c 881F      		rol r24
 1668 041e 991F      		rol r25
 1669               		2:
 1670 0420 2A95      		dec r18
 1671 0422 02F4      		brpl 1b
 238:../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1672               		.loc 1 238 91 discriminator 1 view .LVU405
 1673 0424 6095      		com r22
 1674 0426 7095      		com r23
 1675 0428 8095      		com r24
 1676 042a 9095      		com r25
 1677               	.L99:
 1678               	.LVL132:
 239:../../tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 1679               		.loc 1 239 21 is_stmt 1 discriminator 4 view .LVU406
 239:../../tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 1680               		.loc 1 239 47 is_stmt 0 discriminator 4 view .LVU407
 1681 042c 1695      		lsr r17
 1682 042e 1695      		lsr r17
 1683               	.LVL133:
 239:../../tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 1684               		.loc 1 239 47 discriminator 4 view .LVU408
 1685 0430 1370      		andi r17,lo8(3)
 1686 0432 1230      		cpi r17,lo8(2)
 1687 0434 01F0      		breq .L100
 1688 0436 1330      		cpi r17,lo8(3)
 1689 0438 01F4      		brne .+2
 1690 043a 00C0      		rjmp .L101
 1691 043c 9B01      		movw r18,r22
 1692 043e AC01      		movw r20,r24
 1693 0440 2C29      		or r18,r12
 1694 0442 3D29      		or r19,r13
 1695 0444 4E29      		or r20,r14
 1696 0446 5F29      		or r21,r15
 1697 0448 2E83      		std Y+6,r18
 1698 044a 3F83      		std Y+7,r19
 1699 044c 4887      		std Y+8,r20
 1700 044e 5987      		std Y+9,r21
 1701 0450 1130      		cpi r17,lo8(1)
 1702 0452 01F0      		breq .L102
 240:../../tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 1703               		.loc 1 240 42 is_stmt 1 view .LVU409
 1704 0454 CA01      		movw r24,r20
 1705 0456 B901      		movw r22,r18
 1706               	.LVL134:
 1707               	/* epilogue start */
 240:../../tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 1708               		.loc 1 240 42 is_stmt 0 view .LVU410
 1709               	.LBE51:
 353:../../tmk_core/common/action.c **** 
 1710               		.loc 1 353 1 view .LVU411
 1711 0458 2996      		adiw r28,9
 1712 045a 0FB6      		in __tmp_reg__,__SREG__
 1713 045c F894      		cli
 1714 045e DEBF      		out __SP_H__,r29
 1715 0460 0FBE      		out __SREG__,__tmp_reg__
 1716 0462 CDBF      		out __SP_L__,r28
 1717 0464 DF91      		pop r29
 1718 0466 CF91      		pop r28
 1719 0468 1F91      		pop r17
 1720 046a 0F91      		pop r16
 353:../../tmk_core/common/action.c **** 
 1721               		.loc 1 353 1 view .LVU412
 1722 046c FF90      		pop r15
 1723 046e EF90      		pop r14
 1724 0470 DF90      		pop r13
 1725 0472 CF90      		pop r12
 1726               	.LVL135:
 353:../../tmk_core/common/action.c **** 
 1727               		.loc 1 353 1 view .LVU413
 1728 0474 BF90      		pop r11
 1729 0476 AF90      		pop r10
 1730               	.LVL136:
 1731               	.LBB52:
 240:../../tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 1732               		.loc 1 240 42 view .LVU414
 1733 0478 0C94 0000 		jmp layer_and
 1734               	.LVL137:
 1735               	.L102:
 241:../../tmk_core/common/action.c ****                         case OP_BIT_XOR: layer_xor(bits | mask); break;
 1736               		.loc 1 241 42 is_stmt 1 view .LVU415
 1737 047c 6E81      		ldd r22,Y+6
 1738 047e 7F81      		ldd r23,Y+7
 1739 0480 8885      		ldd r24,Y+8
 1740 0482 9985      		ldd r25,Y+9
 1741               	.LVL138:
 1742               	.L163:
 1743               	/* epilogue start */
 241:../../tmk_core/common/action.c ****                         case OP_BIT_XOR: layer_xor(bits | mask); break;
 1744               		.loc 1 241 42 is_stmt 0 view .LVU416
 1745               	.LBE52:
 353:../../tmk_core/common/action.c **** 
 1746               		.loc 1 353 1 view .LVU417
 1747 0484 2996      		adiw r28,9
 1748 0486 0FB6      		in __tmp_reg__,__SREG__
 1749 0488 F894      		cli
 1750 048a DEBF      		out __SP_H__,r29
 1751 048c 0FBE      		out __SREG__,__tmp_reg__
 1752 048e CDBF      		out __SP_L__,r28
 1753 0490 DF91      		pop r29
 1754 0492 CF91      		pop r28
 1755 0494 1F91      		pop r17
 1756 0496 0F91      		pop r16
 353:../../tmk_core/common/action.c **** 
 1757               		.loc 1 353 1 view .LVU418
 1758 0498 FF90      		pop r15
 1759 049a EF90      		pop r14
 1760 049c DF90      		pop r13
 1761 049e CF90      		pop r12
 1762               	.LVL139:
 353:../../tmk_core/common/action.c **** 
 1763               		.loc 1 353 1 view .LVU419
 1764 04a0 BF90      		pop r11
 1765 04a2 AF90      		pop r10
 1766               	.LVL140:
 1767               	.LBB53:
 243:../../tmk_core/common/action.c ****                     }
 1768               		.loc 1 243 59 view .LVU420
 1769 04a4 0C94 0000 		jmp layer_or
 1770               	.LVL141:
 1771               	.L100:
 242:../../tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1772               		.loc 1 242 42 is_stmt 1 view .LVU421
 1773 04a8 9B01      		movw r18,r22
 1774 04aa AC01      		movw r20,r24
 1775 04ac 2C29      		or r18,r12
 1776 04ae 3D29      		or r19,r13
 1777 04b0 4E29      		or r20,r14
 1778 04b2 5F29      		or r21,r15
 1779 04b4 2E83      		std Y+6,r18
 1780 04b6 3F83      		std Y+7,r19
 1781 04b8 4887      		std Y+8,r20
 1782 04ba 5987      		std Y+9,r21
 1783 04bc CA01      		movw r24,r20
 1784 04be B901      		movw r22,r18
 1785               	.LVL142:
 1786               	/* epilogue start */
 242:../../tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1787               		.loc 1 242 42 is_stmt 0 view .LVU422
 1788               	.LBE53:
 353:../../tmk_core/common/action.c **** 
 1789               		.loc 1 353 1 view .LVU423
 1790 04c0 2996      		adiw r28,9
 1791 04c2 0FB6      		in __tmp_reg__,__SREG__
 1792 04c4 F894      		cli
 1793 04c6 DEBF      		out __SP_H__,r29
 1794 04c8 0FBE      		out __SREG__,__tmp_reg__
 1795 04ca CDBF      		out __SP_L__,r28
 1796 04cc DF91      		pop r29
 1797 04ce CF91      		pop r28
 1798 04d0 1F91      		pop r17
 1799 04d2 0F91      		pop r16
 353:../../tmk_core/common/action.c **** 
 1800               		.loc 1 353 1 view .LVU424
 1801 04d4 FF90      		pop r15
 1802 04d6 EF90      		pop r14
 1803 04d8 DF90      		pop r13
 1804 04da CF90      		pop r12
 1805               	.LVL143:
 353:../../tmk_core/common/action.c **** 
 1806               		.loc 1 353 1 view .LVU425
 1807 04dc BF90      		pop r11
 1808 04de AF90      		pop r10
 1809               	.LVL144:
 1810               	.LBB54:
 242:../../tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1811               		.loc 1 242 42 view .LVU426
 1812 04e0 0C94 0000 		jmp layer_xor
 1813               	.LVL145:
 1814               	.L101:
 243:../../tmk_core/common/action.c ****                     }
 1815               		.loc 1 243 42 is_stmt 1 view .LVU427
 1816 04e4 0E94 0000 		call layer_and
 1817               	.LVL146:
 243:../../tmk_core/common/action.c ****                     }
 1818               		.loc 1 243 59 view .LVU428
 1819 04e8 C701      		movw r24,r14
 1820 04ea B601      		movw r22,r12
 1821 04ec 00C0      		rjmp .L163
 1822               	.LVL147:
 1823               	.L103:
 243:../../tmk_core/common/action.c ****                     }
 1824               		.loc 1 243 59 is_stmt 0 view .LVU429
 1825               	.LBE54:
 251:../../tmk_core/common/action.c ****                 case 0xc0 ... 0xdf:
 1826               		.loc 1 251 13 is_stmt 1 view .LVU430
 251:../../tmk_core/common/action.c ****                 case 0xc0 ... 0xdf:
 1827               		.loc 1 251 13 is_stmt 0 view .LVU431
 1828 04ee 013F      		cpi r16,lo8(-15)
 1829 04f0 01F4      		brne .+2
 1830 04f2 00C0      		rjmp .L104
 1831 04f4 00F4      		brsh .L105
 1832 04f6 003E      		cpi r16,lo8(-32)
 1833 04f8 00F4      		brsh .L106
 1834 04fa 003C      		cpi r16,lo8(-64)
 1835 04fc 00F0      		brlo .L108
 254:../../tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1836               		.loc 1 254 21 is_stmt 1 view .LVU432
 1837 04fe 812F      		mov r24,r17
 1838 0500 8F71      		andi r24,lo8(31)
 1839 0502 102F      		mov r17,r16
 1840               	.LVL148:
 254:../../tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1841               		.loc 1 254 21 is_stmt 0 view .LVU433
 1842 0504 1071      		andi r17,lo8(16)
 254:../../tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1843               		.loc 1 254 24 view .LVU434
 1844 0506 FF20      		tst r15
 1845 0508 01F0      		breq .L112
 255:../../tmk_core/common/action.c ****                         register_mods((action.layer_tap.code & 0x10) ?
 1846               		.loc 1 255 25 is_stmt 1 view .LVU435
 1847 050a 0E94 0000 		call layer_on
 1848               	.LVL149:
 256:../../tmk_core/common/action.c ****                                 (action.layer_tap.code & 0x0f) << 4 :
 1849               		.loc 1 256 25 view .LVU436
 1850 050e 802F      		mov r24,r16
 256:../../tmk_core/common/action.c ****                                 (action.layer_tap.code & 0x0f) << 4 :
 1851               		.loc 1 256 25 is_stmt 0 view .LVU437
 1852 0510 8295      		swap r24
 1853 0512 807F      		andi r24,lo8(-16)
 1854 0514 1111      		cpse r17,__zero_reg__
 1855 0516 00C0      		rjmp .L154
 256:../../tmk_core/common/action.c ****                                 (action.layer_tap.code & 0x0f) << 4 :
 1856               		.loc 1 256 25 discriminator 2 view .LVU438
 1857 0518 802F      		mov r24,r16
 1858 051a 8F70      		andi r24,lo8(15)
 1859 051c 00C0      		rjmp .L154
 1860               	.LVL150:
 1861               	.L106:
 256:../../tmk_core/common/action.c ****                                 (action.layer_tap.code & 0x0f) << 4 :
 1862               		.loc 1 256 25 discriminator 2 view .LVU439
 1863 051e 003F      		cpi r16,lo8(-16)
 1864 0520 01F0      		breq .L109
 1865               	.L108:
 292:../../tmk_core/common/action.c ****                         if (tap_count > 0) {
 1866               		.loc 1 292 21 is_stmt 1 view .LVU440
 292:../../tmk_core/common/action.c ****                         if (tap_count > 0) {
 1867               		.loc 1 292 24 is_stmt 0 view .LVU441
 1868 0522 FF20      		tst r15
 1869 0524 01F4      		brne .+2
 1870 0526 00C0      		rjmp .L122
 293:../../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 1871               		.loc 1 293 25 is_stmt 1 view .LVU442
 293:../../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 1872               		.loc 1 293 28 is_stmt 0 view .LVU443
 1873 0528 E110      		cpse r14,__zero_reg__
 1874 052a 00C0      		rjmp .L158
 297:../../tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 1875               		.loc 1 297 29 is_stmt 1 view .LVU444
 298:../../tmk_core/common/action.c ****                         }
 1876               		.loc 1 298 29 view .LVU445
 1877 052c 812F      		mov r24,r17
 1878 052e 8F71      		andi r24,lo8(31)
 1879 0530 00C0      		rjmp .L159
 1880               	.L105:
 1881 0532 023F      		cpi r16,lo8(-14)
 1882 0534 01F4      		brne .+2
 1883 0536 00C0      		rjmp .L110
 1884 0538 033F      		cpi r16,lo8(-13)
 1885 053a 01F4      		brne .L108
 287:../../tmk_core/common/action.c ****                                     layer_clear();
 1886               		.loc 1 287 21 view .LVU446
 287:../../tmk_core/common/action.c ****                                     layer_clear();
 1887               		.loc 1 287 70 is_stmt 0 view .LVU447
 1888 053c FF20      		tst r15
 1889 053e 01F4      		brne .+2
 1890 0540 00C0      		rjmp .L121
 287:../../tmk_core/common/action.c ****                                     layer_clear();
 1891               		.loc 1 287 37 discriminator 1 view .LVU448
 1892 0542 812F      		mov r24,r17
 1893 0544 8F71      		andi r24,lo8(31)
 1894               	/* epilogue start */
 353:../../tmk_core/common/action.c **** 
 1895               		.loc 1 353 1 discriminator 1 view .LVU449
 1896 0546 2996      		adiw r28,9
 1897 0548 0FB6      		in __tmp_reg__,__SREG__
 1898 054a F894      		cli
 1899 054c DEBF      		out __SP_H__,r29
 1900 054e 0FBE      		out __SREG__,__tmp_reg__
 1901 0550 CDBF      		out __SP_L__,r28
 1902 0552 DF91      		pop r29
 1903 0554 CF91      		pop r28
 1904 0556 1F91      		pop r17
 1905               	.LVL151:
 353:../../tmk_core/common/action.c **** 
 1906               		.loc 1 353 1 discriminator 1 view .LVU450
 1907 0558 0F91      		pop r16
 353:../../tmk_core/common/action.c **** 
 1908               		.loc 1 353 1 discriminator 1 view .LVU451
 1909 055a FF90      		pop r15
 1910 055c EF90      		pop r14
 1911 055e DF90      		pop r13
 1912 0560 CF90      		pop r12
 1913 0562 BF90      		pop r11
 1914 0564 AF90      		pop r10
 1915               	.LVL152:
 287:../../tmk_core/common/action.c ****                                     layer_clear();
 1916               		.loc 1 287 37 discriminator 1 view .LVU452
 1917 0566 0C94 0000 		jmp layer_move
 1918               	.LVL153:
 1919               	.L112:
 260:../../tmk_core/common/action.c ****                         unregister_mods((action.layer_tap.code & 0x10) ?
 1920               		.loc 1 260 25 is_stmt 1 view .LVU453
 1921 056a 0E94 0000 		call layer_off
 1922               	.LVL154:
 261:../../tmk_core/common/action.c ****                                 (action.layer_tap.code & 0x0f) << 4 :
 1923               		.loc 1 261 25 view .LVU454
 1924 056e 802F      		mov r24,r16
 1925 0570 8295      		swap r24
 1926 0572 807F      		andi r24,lo8(-16)
 1927 0574 1111      		cpse r17,__zero_reg__
 1928 0576 00C0      		rjmp .L116
 261:../../tmk_core/common/action.c ****                                 (action.layer_tap.code & 0x0f) << 4 :
 1929               		.loc 1 261 25 is_stmt 0 discriminator 2 view .LVU455
 1930 0578 802F      		mov r24,r16
 1931 057a 8F70      		andi r24,lo8(15)
 1932 057c 00C0      		rjmp .L116
 1933               	.LVL155:
 1934               	.L109:
 268:../../tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 1935               		.loc 1 268 21 is_stmt 1 view .LVU456
 268:../../tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 1936               		.loc 1 268 24 is_stmt 0 view .LVU457
 1937 057e FF20      		tst r15
 1938 0580 01F0      		breq .L117
 269:../../tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1939               		.loc 1 269 25 is_stmt 1 view .LVU458
 269:../../tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1940               		.loc 1 269 28 is_stmt 0 view .LVU459
 1941 0582 34E0      		ldi r19,lo8(4)
 1942 0584 3E15      		cp r19,r14
 1943 0586 00F4      		brsh .+2
 1944 0588 00C0      		rjmp .L59
 1945               	.L118:
 270:../../tmk_core/common/action.c ****                         }
 1946               		.loc 1 270 29 is_stmt 1 view .LVU460
 1947 058a 812F      		mov r24,r17
 1948 058c 8F71      		andi r24,lo8(31)
 1949               	/* epilogue start */
 353:../../tmk_core/common/action.c **** 
 1950               		.loc 1 353 1 is_stmt 0 view .LVU461
 1951 058e 2996      		adiw r28,9
 1952 0590 0FB6      		in __tmp_reg__,__SREG__
 1953 0592 F894      		cli
 1954 0594 DEBF      		out __SP_H__,r29
 1955 0596 0FBE      		out __SREG__,__tmp_reg__
 1956 0598 CDBF      		out __SP_L__,r28
 1957 059a DF91      		pop r29
 1958 059c CF91      		pop r28
 1959 059e 1F91      		pop r17
 1960               	.LVL156:
 353:../../tmk_core/common/action.c **** 
 1961               		.loc 1 353 1 view .LVU462
 1962 05a0 0F91      		pop r16
 353:../../tmk_core/common/action.c **** 
 1963               		.loc 1 353 1 view .LVU463
 1964 05a2 FF90      		pop r15
 1965 05a4 EF90      		pop r14
 1966 05a6 DF90      		pop r13
 1967 05a8 CF90      		pop r12
 1968 05aa BF90      		pop r11
 1969 05ac AF90      		pop r10
 1970               	.LVL157:
 270:../../tmk_core/common/action.c ****                         }
 1971               		.loc 1 270 29 view .LVU464
 1972 05ae 0C94 0000 		jmp layer_invert
 1973               	.LVL158:
 1974               	.L117:
 273:../../tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1975               		.loc 1 273 25 is_stmt 1 view .LVU465
 273:../../tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1976               		.loc 1 273 28 is_stmt 0 view .LVU466
 1977 05b2 45E0      		ldi r20,lo8(5)
 1978 05b4 4E15      		cp r20,r14
 1979 05b6 00F4      		brsh .+2
 1980 05b8 00C0      		rjmp .L59
 1981 05ba 00C0      		rjmp .L118
 1982               	.L104:
 279:../../tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 1983               		.loc 1 279 21 is_stmt 1 view .LVU467
 1984 05bc 812F      		mov r24,r17
 1985 05be 8F71      		andi r24,lo8(31)
 279:../../tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 1986               		.loc 1 279 68 is_stmt 0 view .LVU468
 1987 05c0 FF20      		tst r15
 1988 05c2 01F0      		breq .L160
 1989               	.L159:
 1990               	/* epilogue start */
 353:../../tmk_core/common/action.c **** 
 1991               		.loc 1 353 1 view .LVU469
 1992 05c4 2996      		adiw r28,9
 1993 05c6 0FB6      		in __tmp_reg__,__SREG__
 1994 05c8 F894      		cli
 1995 05ca DEBF      		out __SP_H__,r29
 1996 05cc 0FBE      		out __SREG__,__tmp_reg__
 1997 05ce CDBF      		out __SP_L__,r28
 1998 05d0 DF91      		pop r29
 1999 05d2 CF91      		pop r28
 2000 05d4 1F91      		pop r17
 2001               	.LVL159:
 353:../../tmk_core/common/action.c **** 
 2002               		.loc 1 353 1 view .LVU470
 2003 05d6 0F91      		pop r16
 353:../../tmk_core/common/action.c **** 
 2004               		.loc 1 353 1 view .LVU471
 2005 05d8 FF90      		pop r15
 2006 05da EF90      		pop r14
 2007 05dc DF90      		pop r13
 2008 05de CF90      		pop r12
 2009 05e0 BF90      		pop r11
 2010 05e2 AF90      		pop r10
 2011               	.LVL160:
 298:../../tmk_core/common/action.c ****                         }
 2012               		.loc 1 298 29 view .LVU472
 2013 05e4 0C94 0000 		jmp layer_on
 2014               	.LVL161:
 2015               	.L110:
 283:../../tmk_core/common/action.c ****                                     layer_on(action.layer_tap.val);
 2016               		.loc 1 283 21 is_stmt 1 view .LVU473
 2017 05e8 812F      		mov r24,r17
 2018 05ea 8F71      		andi r24,lo8(31)
 283:../../tmk_core/common/action.c ****                                     layer_on(action.layer_tap.val);
 2019               		.loc 1 283 69 is_stmt 0 view .LVU474
 2020 05ec FF20      		tst r15
 2021 05ee 01F0      		breq .L159
 2022               	.L160:
 2023               	/* epilogue start */
 353:../../tmk_core/common/action.c **** 
 2024               		.loc 1 353 1 view .LVU475
 2025 05f0 2996      		adiw r28,9
 2026 05f2 0FB6      		in __tmp_reg__,__SREG__
 2027 05f4 F894      		cli
 2028 05f6 DEBF      		out __SP_H__,r29
 2029 05f8 0FBE      		out __SREG__,__tmp_reg__
 2030 05fa CDBF      		out __SP_L__,r28
 2031 05fc DF91      		pop r29
 2032 05fe CF91      		pop r28
 2033 0600 1F91      		pop r17
 2034               	.LVL162:
 353:../../tmk_core/common/action.c **** 
 2035               		.loc 1 353 1 view .LVU476
 2036 0602 0F91      		pop r16
 353:../../tmk_core/common/action.c **** 
 2037               		.loc 1 353 1 view .LVU477
 2038 0604 FF90      		pop r15
 2039 0606 EF90      		pop r14
 2040 0608 DF90      		pop r13
 2041 060a CF90      		pop r12
 2042 060c BF90      		pop r11
 2043 060e AF90      		pop r10
 2044               	.LVL163:
 306:../../tmk_core/common/action.c ****                         }
 2045               		.loc 1 306 29 view .LVU478
 2046 0610 0C94 0000 		jmp layer_off
 2047               	.LVL164:
 2048               	.L121:
 2049               	/* epilogue start */
 353:../../tmk_core/common/action.c **** 
 2050               		.loc 1 353 1 view .LVU479
 2051 0614 2996      		adiw r28,9
 2052 0616 0FB6      		in __tmp_reg__,__SREG__
 2053 0618 F894      		cli
 2054 061a DEBF      		out __SP_H__,r29
 2055 061c 0FBE      		out __SREG__,__tmp_reg__
 2056 061e CDBF      		out __SP_L__,r28
 2057 0620 DF91      		pop r29
 2058 0622 CF91      		pop r28
 2059 0624 1F91      		pop r17
 2060               	.LVL165:
 353:../../tmk_core/common/action.c **** 
 2061               		.loc 1 353 1 view .LVU480
 2062 0626 0F91      		pop r16
 353:../../tmk_core/common/action.c **** 
 2063               		.loc 1 353 1 view .LVU481
 2064 0628 FF90      		pop r15
 2065 062a EF90      		pop r14
 2066 062c DF90      		pop r13
 2067 062e CF90      		pop r12
 2068 0630 BF90      		pop r11
 2069 0632 AF90      		pop r10
 2070               	.LVL166:
 288:../../tmk_core/common/action.c ****                     break;
 2071               		.loc 1 288 37 view .LVU482
 2072 0634 0C94 0000 		jmp layer_clear
 2073               	.LVL167:
 2074               	.L122:
 301:../../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 2075               		.loc 1 301 25 is_stmt 1 view .LVU483
 301:../../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 2076               		.loc 1 301 28 is_stmt 0 view .LVU484
 2077 0638 E110      		cpse r14,__zero_reg__
 2078 063a 00C0      		rjmp .L161
 305:../../tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 2079               		.loc 1 305 29 is_stmt 1 view .LVU485
 306:../../tmk_core/common/action.c ****                         }
 2080               		.loc 1 306 29 view .LVU486
 2081 063c 812F      		mov r24,r17
 2082 063e 8F71      		andi r24,lo8(31)
 2083 0640 00C0      		rjmp .L160
 2084               	.LVL168:
 2085               	.L125:
 317:../../tmk_core/common/action.c ****             break;
 2086               		.loc 1 317 13 view .LVU487
 317:../../tmk_core/common/action.c ****             break;
 2087               		.loc 1 317 83 is_stmt 0 view .LVU488
 2088 0642 412F      		mov r20,r17
 2089 0644 4F70      		andi r20,lo8(15)
 2090               	.LVL169:
 317:../../tmk_core/common/action.c ****             break;
 2091               		.loc 1 317 13 view .LVU489
 2092 0646 602F      		mov r22,r16
 2093 0648 C501      		movw r24,r10
 2094 064a 0E94 0000 		call action_get_macro
 2095               	.LVL170:
 2096               	/* epilogue start */
 353:../../tmk_core/common/action.c **** 
 2097               		.loc 1 353 1 view .LVU490
 2098 064e 2996      		adiw r28,9
 2099 0650 0FB6      		in __tmp_reg__,__SREG__
 2100 0652 F894      		cli
 2101 0654 DEBF      		out __SP_H__,r29
 2102 0656 0FBE      		out __SREG__,__tmp_reg__
 2103 0658 CDBF      		out __SP_L__,r28
 2104 065a DF91      		pop r29
 2105 065c CF91      		pop r28
 2106 065e 1F91      		pop r17
 2107               	.LVL171:
 353:../../tmk_core/common/action.c **** 
 2108               		.loc 1 353 1 view .LVU491
 2109 0660 0F91      		pop r16
 353:../../tmk_core/common/action.c **** 
 2110               		.loc 1 353 1 view .LVU492
 2111 0662 FF90      		pop r15
 2112 0664 EF90      		pop r14
 2113 0666 DF90      		pop r13
 2114 0668 CF90      		pop r12
 2115 066a BF90      		pop r11
 2116 066c AF90      		pop r10
 2117               	.LVL172:
 317:../../tmk_core/common/action.c ****             break;
 2118               		.loc 1 317 13 view .LVU493
 2119 066e 0C94 0000 		jmp action_macro_play
 2120               	.LVL173:
 2121               	.L126:
 347:../../tmk_core/common/action.c ****             break;
 2122               		.loc 1 347 13 is_stmt 1 view .LVU494
 347:../../tmk_core/common/action.c ****             break;
 2123               		.loc 1 347 64 is_stmt 0 view .LVU495
 2124 0672 412F      		mov r20,r17
 2125 0674 4F70      		andi r20,lo8(15)
 2126               	.LVL174:
 347:../../tmk_core/common/action.c ****             break;
 2127               		.loc 1 347 13 view .LVU496
 2128 0676 602F      		mov r22,r16
 2129 0678 C501      		movw r24,r10
 2130               	/* epilogue start */
 353:../../tmk_core/common/action.c **** 
 2131               		.loc 1 353 1 view .LVU497
 2132 067a 2996      		adiw r28,9
 2133 067c 0FB6      		in __tmp_reg__,__SREG__
 2134 067e F894      		cli
 2135 0680 DEBF      		out __SP_H__,r29
 2136 0682 0FBE      		out __SREG__,__tmp_reg__
 2137 0684 CDBF      		out __SP_L__,r28
 2138 0686 DF91      		pop r29
 2139 0688 CF91      		pop r28
 2140 068a 1F91      		pop r17
 2141               	.LVL175:
 353:../../tmk_core/common/action.c **** 
 2142               		.loc 1 353 1 view .LVU498
 2143 068c 0F91      		pop r16
 353:../../tmk_core/common/action.c **** 
 2144               		.loc 1 353 1 view .LVU499
 2145 068e FF90      		pop r15
 2146 0690 EF90      		pop r14
 2147 0692 DF90      		pop r13
 2148 0694 CF90      		pop r12
 2149 0696 BF90      		pop r11
 2150 0698 AF90      		pop r10
 2151               	.LVL176:
 347:../../tmk_core/common/action.c ****             break;
 2152               		.loc 1 347 13 view .LVU500
 2153 069a 0C94 0000 		jmp action_function
 2154               	.LVL177:
 2155               	.L152:
  63:../../tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 2156               		.loc 1 63 16 view .LVU501
 2157 069e F280      		ldd r15,Z+2
  65:../../tmk_core/common/action.c **** #endif
 2158               		.loc 1 65 36 view .LVU502
 2159 06a0 E580      		ldd r14,Z+5
 2160 06a2 E294      		swap r14
 2161 06a4 2FE0      		ldi r18,lo8(15)
 2162 06a6 E222      		and r14,r18
  70:../../tmk_core/common/action.c ****     dprint("ACTION: "); debug_action(action);
 2163               		.loc 1 70 5 is_stmt 1 view .LVU503
  70:../../tmk_core/common/action.c ****     dprint("ACTION: "); debug_action(action);
 2164               		.loc 1 70 23 is_stmt 0 view .LVU504
 2165 06a8 782F      		mov r23,r24
 2166 06aa 9D83      		std Y+5,r25
 2167 06ac 8C83      		std Y+4,r24
 2168 06ae 6F2D      		mov r22,r15
 2169 06b0 8D81      		ldd r24,Y+5
 2170               	.LVL178:
  70:../../tmk_core/common/action.c ****     dprint("ACTION: "); debug_action(action);
 2171               		.loc 1 70 23 view .LVU505
 2172 06b2 0E94 0000 		call layer_switch_get_action
 2173               	.LVL179:
  70:../../tmk_core/common/action.c ****     dprint("ACTION: "); debug_action(action);
 2174               		.loc 1 70 23 view .LVU506
 2175 06b6 8C01      		movw r16,r24
  71:../../tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 2176               		.loc 1 71 5 is_stmt 1 view .LVU507
  71:../../tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 2177               		.loc 1 71 25 view .LVU508
  73:../../tmk_core/common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
 2178               		.loc 1 73 5 view .LVU509
  73:../../tmk_core/common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
 2179               		.loc 1 73 31 view .LVU510
 2180 06b8 0E94 0000 		call layer_debug
 2181               	.LVL180:
  74:../../tmk_core/common/action.c **** #endif
 2182               		.loc 1 74 5 view .LVU511
  74:../../tmk_core/common/action.c **** #endif
 2183               		.loc 1 74 39 view .LVU512
 2184 06bc 0E94 0000 		call default_layer_debug
 2185               	.LVL181:
  76:../../tmk_core/common/action.c **** 
 2186               		.loc 1 76 5 view .LVU513
  78:../../tmk_core/common/action.c ****         /* Key and Mods */
 2187               		.loc 1 78 5 view .LVU514
  78:../../tmk_core/common/action.c ****         /* Key and Mods */
 2188               		.loc 1 78 24 is_stmt 0 view .LVU515
 2189 06c0 E12F      		mov r30,r17
 2190 06c2 E295      		swap r30
 2191 06c4 EF70      		andi r30,lo8(15)
 2192 06c6 F0E0      		ldi r31,0
 2193 06c8 E050      		subi r30,lo8(-(gs(.L128)))
 2194 06ca F040      		sbci r31,hi8(-(gs(.L128)))
 2195 06cc 0C94 0000 		jmp __tablejump2__
 2196               		.section	.jumptables.gcc.process_action,"a",@progbits
 2197               		.p2align	1
 2198               	.L128:
 2199 0000 0000      		.word gs(.L62)
 2200 0002 0000      		.word gs(.L62)
 2201 0004 0000      		.word gs(.L68)
 2202 0006 0000      		.word gs(.L68)
 2203 0008 0000      		.word gs(.L84)
 2204 000a 0000      		.word gs(.L89)
 2205 000c 0000      		.word gs(.L59)
 2206 000e 0000      		.word gs(.L59)
 2207 0010 0000      		.word gs(.L91)
 2208 0012 0000      		.word gs(.L59)
 2209 0014 0000      		.word gs(.L103)
 2210 0016 0000      		.word gs(.L103)
 2211 0018 0000      		.word gs(.L125)
 2212 001a 0000      		.word gs(.L59)
 2213 001c 0000      		.word gs(.L59)
 2214 001e 0000      		.word gs(.L126)
 2215               		.section	.text.process_action
 2216               		.cfi_endproc
 2217               	.LFE11:
 2219               		.section	.text.clear_keyboard_but_mods,"ax",@progbits
 2220               	.global	clear_keyboard_but_mods
 2222               	clear_keyboard_but_mods:
 2223               	.LFB18:
 518:../../tmk_core/common/action.c **** 
 519:../../tmk_core/common/action.c **** void clear_keyboard(void)
 520:../../tmk_core/common/action.c **** {
 521:../../tmk_core/common/action.c ****     clear_mods();
 522:../../tmk_core/common/action.c ****     clear_keyboard_but_mods();
 523:../../tmk_core/common/action.c **** }
 524:../../tmk_core/common/action.c **** 
 525:../../tmk_core/common/action.c **** void clear_keyboard_but_mods(void)
 526:../../tmk_core/common/action.c **** {
 2224               		.loc 1 526 1 is_stmt 1 view -0
 2225               		.cfi_startproc
 2226               	/* prologue: function */
 2227               	/* frame size = 0 */
 2228               	/* stack size = 0 */
 2229               	.L__stack_usage = 0
 527:../../tmk_core/common/action.c ****     clear_weak_mods();
 2230               		.loc 1 527 5 view .LVU517
 2231 0000 0E94 0000 		call clear_weak_mods
 2232               	.LVL182:
 528:../../tmk_core/common/action.c ****     clear_keys();
 2233               		.loc 1 528 5 view .LVU518
 2234 0004 0E94 0000 		call clear_keys
 2235               	.LVL183:
 529:../../tmk_core/common/action.c ****     send_keyboard_report();
 2236               		.loc 1 529 5 view .LVU519
 2237 0008 0E94 0000 		call send_keyboard_report
 2238               	.LVL184:
 530:../../tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 531:../../tmk_core/common/action.c ****     mousekey_clear();
 2239               		.loc 1 531 5 view .LVU520
 2240 000c 0E94 0000 		call mousekey_clear
 2241               	.LVL185:
 532:../../tmk_core/common/action.c ****     mousekey_send();
 2242               		.loc 1 532 5 view .LVU521
 2243 0010 0E94 0000 		call mousekey_send
 2244               	.LVL186:
 533:../../tmk_core/common/action.c **** #endif
 534:../../tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 535:../../tmk_core/common/action.c ****     host_system_send(0);
 2245               		.loc 1 535 5 view .LVU522
 2246 0014 90E0      		ldi r25,0
 2247 0016 80E0      		ldi r24,0
 2248 0018 0E94 0000 		call host_system_send
 2249               	.LVL187:
 536:../../tmk_core/common/action.c ****     host_consumer_send(0);
 2250               		.loc 1 536 5 view .LVU523
 2251 001c 90E0      		ldi r25,0
 2252 001e 80E0      		ldi r24,0
 2253 0020 0C94 0000 		jmp host_consumer_send
 2254               	.LVL188:
 2255               		.cfi_endproc
 2256               	.LFE18:
 2258               		.section	.text.clear_keyboard,"ax",@progbits
 2259               	.global	clear_keyboard
 2261               	clear_keyboard:
 2262               	.LFB17:
 520:../../tmk_core/common/action.c ****     clear_mods();
 2263               		.loc 1 520 1 view -0
 2264               		.cfi_startproc
 2265               	/* prologue: function */
 2266               	/* frame size = 0 */
 2267               	/* stack size = 0 */
 2268               	.L__stack_usage = 0
 521:../../tmk_core/common/action.c ****     clear_keyboard_but_mods();
 2269               		.loc 1 521 5 view .LVU525
 2270 0000 0E94 0000 		call clear_mods
 2271               	.LVL189:
 522:../../tmk_core/common/action.c **** }
 2272               		.loc 1 522 5 view .LVU526
 2273 0004 0C94 0000 		jmp clear_keyboard_but_mods
 2274               	.LVL190:
 2275               		.cfi_endproc
 2276               	.LFE17:
 2278               		.section	.text.is_tap_key,"ax",@progbits
 2279               	.global	is_tap_key
 2281               	is_tap_key:
 2282               	.LFB19:
 537:../../tmk_core/common/action.c **** #endif
 538:../../tmk_core/common/action.c **** }
 539:../../tmk_core/common/action.c **** 
 540:../../tmk_core/common/action.c **** bool is_tap_key(keyevent_t event)
 541:../../tmk_core/common/action.c **** {
 2283               		.loc 1 541 1 view -0
 2284               		.cfi_startproc
 2285 0000 CF93      		push r28
 2286               	.LCFI18:
 2287               		.cfi_def_cfa_offset 3
 2288               		.cfi_offset 28, -2
 2289 0002 DF93      		push r29
 2290               	.LCFI19:
 2291               		.cfi_def_cfa_offset 4
 2292               		.cfi_offset 29, -3
 2293 0004 00D0      		rcall .
 2294 0006 00D0      		rcall .
 2295 0008 0F92      		push __tmp_reg__
 2296               	.LCFI20:
 2297               		.cfi_def_cfa_offset 9
 2298 000a CDB7      		in r28,__SP_L__
 2299 000c DEB7      		in r29,__SP_H__
 2300               	.LCFI21:
 2301               		.cfi_def_cfa_register 28
 2302               	/* prologue: function */
 2303               	/* frame size = 5 */
 2304               	/* stack size = 7 */
 2305               	.L__stack_usage = 7
 2306 000e 6B83      		std Y+3,r22
 2307 0010 7C83      		std Y+4,r23
 2308 0012 8D83      		std Y+5,r24
 542:../../tmk_core/common/action.c ****     if (IS_NOEVENT(event)) { return false; }
 2309               		.loc 1 542 5 view .LVU528
 2310               	.LBB57:
 2311               	.LBI57:
 2312               		.loc 2 49 20 view .LVU529
 2313               	.LBB58:
 2314               		.loc 2 49 51 view .LVU530
 2315               		.loc 2 49 74 is_stmt 0 view .LVU531
 2316 0014 8C81      		ldd r24,Y+4
 2317 0016 9D81      		ldd r25,Y+5
 2318 0018 892B      		or r24,r25
 2319 001a 01F0      		breq .L198
 2320 001c 842F      		mov r24,r20
 2321 001e 8523      		and r24,r21
 2322 0020 8F3F      		cpi r24,lo8(-1)
 2323 0022 01F4      		brne .L196
 2324               	.LVL191:
 2325               	.L198:
 2326               		.loc 2 49 74 view .LVU532
 2327               	.LBE58:
 2328               	.LBE57:
 543:../../tmk_core/common/action.c **** 
 544:../../tmk_core/common/action.c ****     action_t action = layer_switch_get_action(event);
 545:../../tmk_core/common/action.c **** 
 546:../../tmk_core/common/action.c ****     switch (action.kind.id) {
 2329               		.loc 1 546 5 view .LVU533
 2330 0024 80E0      		ldi r24,0
 2331               	.LVL192:
 2332               		.loc 1 546 5 view .LVU534
 2333 0026 00C0      		rjmp .L186
 2334               	.LVL193:
 2335               	.L172:
 2336               		.loc 1 546 5 view .LVU535
 2337 0028 80E2      		ldi r24,lo8(32)
 2338 002a 820F      		add r24,r18
 2339 002c 8830      		cpi r24,lo8(8)
 2340 002e 00F0      		brlo .L184
 2341               	.L178:
 547:../../tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 548:../../tmk_core/common/action.c ****         case ACT_RMODS_TAP:
 549:../../tmk_core/common/action.c ****             switch (action.key.code) {
 550:../../tmk_core/common/action.c ****                 case MODS_ONESHOT:
 551:../../tmk_core/common/action.c ****                 case MODS_TAP_TOGGLE:
 552:../../tmk_core/common/action.c ****                 case KC_A ... KC_EXSEL:                 // tap key
 553:../../tmk_core/common/action.c ****                 case KC_LCTRL ... KC_RGUI:              // tap key
 554:../../tmk_core/common/action.c ****                     return true;
 555:../../tmk_core/common/action.c ****             }
 556:../../tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 557:../../tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 558:../../tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 2342               		.loc 1 558 13 is_stmt 1 view .LVU536
 2343 0030 283E      		cpi r18,lo8(-24)
 2344 0032 00F4      		brsh .L174
 2345 0034 203E      		cpi r18,lo8(-32)
 2346 0036 00F4      		brsh .L184
 2347               	.L173:
 2348 0038 2450      		subi r18,lo8(-(-4))
 2349               	.LVL194:
 2350               		.loc 1 558 13 is_stmt 0 view .LVU537
 2351 003a 81E0      		ldi r24,lo8(1)
 2352 003c 213A      		cpi r18,lo8(-95)
 2353 003e 00F4      		brsh .L198
 2354               	.LVL195:
 2355               	.L186:
 2356               	/* epilogue start */
 559:../../tmk_core/common/action.c ****                 case 0xc0 ... 0xdf:         // with modifiers
 560:../../tmk_core/common/action.c ****                     return false;
 561:../../tmk_core/common/action.c ****                 case KC_A ... KC_EXSEL:     // tap key
 562:../../tmk_core/common/action.c ****                 case KC_LCTRL ... KC_RGUI:  // tap key
 563:../../tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 564:../../tmk_core/common/action.c ****                     return true;
 565:../../tmk_core/common/action.c ****             }
 566:../../tmk_core/common/action.c ****             return false;
 567:../../tmk_core/common/action.c ****         case ACT_MACRO:
 568:../../tmk_core/common/action.c ****         case ACT_FUNCTION:
 569:../../tmk_core/common/action.c ****             if (action.func.opt & FUNC_TAP) { return true; }
 570:../../tmk_core/common/action.c ****             return false;
 571:../../tmk_core/common/action.c ****     }
 572:../../tmk_core/common/action.c ****     return false;
 573:../../tmk_core/common/action.c **** }
 2357               		.loc 1 573 1 view .LVU538
 2358 0040 0F90      		pop __tmp_reg__
 2359 0042 0F90      		pop __tmp_reg__
 2360 0044 0F90      		pop __tmp_reg__
 2361 0046 0F90      		pop __tmp_reg__
 2362 0048 0F90      		pop __tmp_reg__
 2363 004a DF91      		pop r29
 2364 004c CF91      		pop r28
 2365 004e 0895      		ret
 2366               	.LVL196:
 2367               	.L174:
 2368               		.loc 1 573 1 view .LVU539
 2369 0050 81E0      		ldi r24,lo8(1)
 2370 0052 203F      		cpi r18,lo8(-16)
 2371 0054 01F4      		brne .L198
 2372 0056 00C0      		rjmp .L186
 2373               	.LVL197:
 2374               	.L196:
 544:../../tmk_core/common/action.c **** 
 2375               		.loc 1 544 5 is_stmt 1 view .LVU540
 544:../../tmk_core/common/action.c **** 
 2376               		.loc 1 544 23 is_stmt 0 view .LVU541
 2377 0058 6B81      		ldd r22,Y+3
 2378 005a 7C81      		ldd r23,Y+4
 2379 005c 8D81      		ldd r24,Y+5
 2380 005e 0E94 0000 		call layer_switch_get_action
 2381               	.LVL198:
 2382 0062 282F      		mov r18,r24
 2383               	.LVL199:
 546:../../tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 2384               		.loc 1 546 5 is_stmt 1 view .LVU542
 546:../../tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 2385               		.loc 1 546 24 is_stmt 0 view .LVU543
 2386 0064 892F      		mov r24,r25
 2387 0066 8295      		swap r24
 2388 0068 8F70      		andi r24,lo8(15)
 546:../../tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 2389               		.loc 1 546 5 view .LVU544
 2390 006a 903C      		cpi r25,lo8(-64)
 2391 006c 00F4      		brsh .L177
 2392 006e 8A30      		cpi r24,lo8(10)
 2393 0070 00F4      		brsh .L178
 2394 0072 825F      		subi r24,lo8(-(14))
 2395 0074 8F70      		andi r24,lo8(15)
 2396 0076 8230      		cpi r24,lo8(2)
 2397 0078 00F4      		brsh .L198
 549:../../tmk_core/common/action.c ****                 case MODS_ONESHOT:
 2398               		.loc 1 549 13 is_stmt 1 view .LVU545
 2399 007a 253A      		cpi r18,lo8(-91)
 2400 007c 00F4      		brsh .L172
 2401 007e 8EEF      		ldi r24,lo8(-2)
 2402 0080 820F      		add r24,r18
 2403 0082 8230      		cpi r24,lo8(2)
 2404 0084 00F0      		brlo .L173
 2405               	.L184:
 564:../../tmk_core/common/action.c ****             }
 2406               		.loc 1 564 28 is_stmt 0 view .LVU546
 2407 0086 81E0      		ldi r24,lo8(1)
 2408 0088 00C0      		rjmp .L186
 2409               	.L177:
 546:../../tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 2410               		.loc 1 546 5 view .LVU547
 2411 008a 8C30      		cpi r24,lo8(12)
 2412 008c 01F0      		breq .L180
 2413 008e 8F30      		cpi r24,lo8(15)
 2414 0090 01F4      		brne .L198
 2415               	.L180:
 569:../../tmk_core/common/action.c ****             return false;
 2416               		.loc 1 569 13 is_stmt 1 view .LVU548
 569:../../tmk_core/common/action.c ****             return false;
 2417               		.loc 1 569 16 is_stmt 0 view .LVU549
 2418 0092 93FB      		bst r25,3
 2419 0094 8827      		clr r24
 2420 0096 80F9      		bld r24,0
 2421 0098 00C0      		rjmp .L186
 2422               		.cfi_endproc
 2423               	.LFE19:
 2425               		.section	.text.debug_event,"ax",@progbits
 2426               	.global	debug_event
 2428               	debug_event:
 2429               	.LFB20:
 574:../../tmk_core/common/action.c **** 
 575:../../tmk_core/common/action.c **** 
 576:../../tmk_core/common/action.c **** /*
 577:../../tmk_core/common/action.c ****  * debug print
 578:../../tmk_core/common/action.c ****  */
 579:../../tmk_core/common/action.c **** void debug_event(keyevent_t event)
 580:../../tmk_core/common/action.c **** {
 2430               		.loc 1 580 1 is_stmt 1 view -0
 2431               		.cfi_startproc
 2432 0000 CF93      		push r28
 2433               	.LCFI22:
 2434               		.cfi_def_cfa_offset 3
 2435               		.cfi_offset 28, -2
 2436 0002 DF93      		push r29
 2437               	.LCFI23:
 2438               		.cfi_def_cfa_offset 4
 2439               		.cfi_offset 29, -3
 2440 0004 00D0      		rcall .
 2441 0006 00D0      		rcall .
 2442 0008 0F92      		push __tmp_reg__
 2443               	.LCFI24:
 2444               		.cfi_def_cfa_offset 9
 2445 000a CDB7      		in r28,__SP_L__
 2446 000c DEB7      		in r29,__SP_H__
 2447               	.LCFI25:
 2448               		.cfi_def_cfa_register 28
 2449               	/* prologue: function */
 2450               	/* frame size = 5 */
 2451               	/* stack size = 7 */
 2452               	.L__stack_usage = 7
 581:../../tmk_core/common/action.c ****     dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.ti
 2453               		.loc 1 581 5 view .LVU551
 2454               	/* epilogue start */
 582:../../tmk_core/common/action.c **** }
 2455               		.loc 1 582 1 is_stmt 0 view .LVU552
 2456 000e 0F90      		pop __tmp_reg__
 2457 0010 0F90      		pop __tmp_reg__
 2458 0012 0F90      		pop __tmp_reg__
 2459 0014 0F90      		pop __tmp_reg__
 2460 0016 0F90      		pop __tmp_reg__
 2461 0018 DF91      		pop r29
 2462 001a CF91      		pop r28
 2463 001c 0895      		ret
 2464               		.cfi_endproc
 2465               	.LFE20:
 2467               		.section	.text.debug_record,"ax",@progbits
 2468               	.global	debug_record
 2470               	debug_record:
 2471               	.LFB21:
 583:../../tmk_core/common/action.c **** 
 584:../../tmk_core/common/action.c **** void debug_record(keyrecord_t record)
 585:../../tmk_core/common/action.c **** {
 2472               		.loc 1 585 1 is_stmt 1 view -0
 2473               		.cfi_startproc
 2474 0000 CF93      		push r28
 2475               	.LCFI26:
 2476               		.cfi_def_cfa_offset 3
 2477               		.cfi_offset 28, -2
 2478 0002 DF93      		push r29
 2479               	.LCFI27:
 2480               		.cfi_def_cfa_offset 4
 2481               		.cfi_offset 29, -3
 2482 0004 00D0      		rcall .
 2483 0006 00D0      		rcall .
 2484 0008 00D0      		rcall .
 2485               	.LCFI28:
 2486               		.cfi_def_cfa_offset 10
 2487 000a CDB7      		in r28,__SP_L__
 2488 000c DEB7      		in r29,__SP_H__
 2489               	.LCFI29:
 2490               		.cfi_def_cfa_register 28
 2491               	/* prologue: function */
 2492               	/* frame size = 6 */
 2493               	/* stack size = 8 */
 2494               	.L__stack_usage = 8
 586:../../tmk_core/common/action.c ****     debug_event(record.event);
 2495               		.loc 1 586 5 view .LVU554
 587:../../tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 588:../../tmk_core/common/action.c ****     dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
 2496               		.loc 1 588 5 view .LVU555
 2497               	/* epilogue start */
 589:../../tmk_core/common/action.c **** #endif
 590:../../tmk_core/common/action.c **** }
 2498               		.loc 1 590 1 is_stmt 0 view .LVU556
 2499 000e 2696      		adiw r28,6
 2500 0010 0FB6      		in __tmp_reg__,__SREG__
 2501 0012 F894      		cli
 2502 0014 DEBF      		out __SP_H__,r29
 2503 0016 0FBE      		out __SREG__,__tmp_reg__
 2504 0018 CDBF      		out __SP_L__,r28
 2505 001a DF91      		pop r29
 2506 001c CF91      		pop r28
 2507 001e 0895      		ret
 2508               		.cfi_endproc
 2509               	.LFE21:
 2511               		.section	.text.debug_action,"ax",@progbits
 2512               	.global	debug_action
 2514               	debug_action:
 2515               	.LVL200:
 2516               	.LFB22:
 591:../../tmk_core/common/action.c **** 
 592:../../tmk_core/common/action.c **** void debug_action(action_t action)
 593:../../tmk_core/common/action.c **** {
 2517               		.loc 1 593 1 is_stmt 1 view -0
 2518               		.cfi_startproc
 2519               	/* prologue: function */
 2520               	/* frame size = 0 */
 2521               	/* stack size = 0 */
 2522               	.L__stack_usage = 0
 594:../../tmk_core/common/action.c ****     switch (action.kind.id) {
 2523               		.loc 1 594 5 view .LVU558
 595:../../tmk_core/common/action.c ****         case ACT_LMODS:             dprint("ACT_LMODS");             break;
 596:../../tmk_core/common/action.c ****         case ACT_RMODS:             dprint("ACT_RMODS");             break;
 597:../../tmk_core/common/action.c ****         case ACT_LMODS_TAP:         dprint("ACT_LMODS_TAP");         break;
 598:../../tmk_core/common/action.c ****         case ACT_RMODS_TAP:         dprint("ACT_RMODS_TAP");         break;
 599:../../tmk_core/common/action.c ****         case ACT_USAGE:             dprint("ACT_USAGE");             break;
 600:../../tmk_core/common/action.c ****         case ACT_MOUSEKEY:          dprint("ACT_MOUSEKEY");          break;
 601:../../tmk_core/common/action.c ****         case ACT_LAYER:             dprint("ACT_LAYER");             break;
 602:../../tmk_core/common/action.c ****         case ACT_LAYER_TAP:         dprint("ACT_LAYER_TAP");         break;
 603:../../tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:     dprint("ACT_LAYER_TAP_EXT");     break;
 604:../../tmk_core/common/action.c ****         case ACT_MACRO:             dprint("ACT_MACRO");             break;
 605:../../tmk_core/common/action.c ****         case ACT_COMMAND:           dprint("ACT_COMMAND");           break;
 606:../../tmk_core/common/action.c ****         case ACT_FUNCTION:          dprint("ACT_FUNCTION");          break;
 607:../../tmk_core/common/action.c ****         default:                    dprint("UNKNOWN");               break;
 608:../../tmk_core/common/action.c ****     }
 609:../../tmk_core/common/action.c ****     dprintf("[%X:%02X]", action.kind.param>>8, action.kind.param&0xff);
 2524               		.loc 1 609 5 view .LVU559
 2525               	/* epilogue start */
 610:../../tmk_core/common/action.c **** }
 2526               		.loc 1 610 1 is_stmt 0 view .LVU560
 2527 0000 0895      		ret
 2528               		.cfi_endproc
 2529               	.LFE22:
 2531               		.text
 2532               	.Letext0:
 2533               		.file 4 "/usr/local/Cellar/avr-gcc/9.1.0/avr/include/stdint.h"
 2534               		.file 5 "../../tmk_core/common/keycode.h"
 2535               		.file 6 "../../tmk_core/common/report.h"
 2536               		.file 7 "../../tmk_core/common/host.h"
 2537               		.file 8 "../../tmk_core/common/mousekey.h"
 2538               		.file 9 "../../tmk_core/common/command.h"
 2539               		.file 10 "../../tmk_core/common/action_code.h"
 2540               		.file 11 "../../tmk_core/common/action.h"
 2541               		.file 12 "../../tmk_core/common/action_layer.h"
 2542               		.file 13 "../../tmk_core/common/action_util.h"
 2543               		.file 14 "../../tmk_core/common/avr/xprintf.h"
 2544               		.file 15 "../../tmk_core/common/debug.h"
 2545               		.file 16 "../../tmk_core/common/hook.h"
 2546               		.file 17 "../../tmk_core/common/action_macro.h"
 2547               		.file 18 "../../tmk_core/common/action_tapping.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action.c
/var/folders/cl/jr07md_52y31f_27z07pkw7h0000gp/T//ccJf6kCr.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/cl/jr07md_52y31f_27z07pkw7h0000gp/T//ccJf6kCr.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/cl/jr07md_52y31f_27z07pkw7h0000gp/T//ccJf6kCr.s:4      *ABS*:000000000000003f __SREG__
/var/folders/cl/jr07md_52y31f_27z07pkw7h0000gp/T//ccJf6kCr.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/cl/jr07md_52y31f_27z07pkw7h0000gp/T//ccJf6kCr.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/cl/jr07md_52y31f_27z07pkw7h0000gp/T//ccJf6kCr.s:13     .text.action_exec:0000000000000000 action_exec
/var/folders/cl/jr07md_52y31f_27z07pkw7h0000gp/T//ccJf6kCr.s:121    .text.register_code:0000000000000000 register_code
/var/folders/cl/jr07md_52y31f_27z07pkw7h0000gp/T//ccJf6kCr.s:444    .text.unregister_code:0000000000000000 unregister_code
/var/folders/cl/jr07md_52y31f_27z07pkw7h0000gp/T//ccJf6kCr.s:679    .text.type_code:0000000000000000 type_code
/var/folders/cl/jr07md_52y31f_27z07pkw7h0000gp/T//ccJf6kCr.s:713    .text.register_mods:0000000000000000 register_mods
/var/folders/cl/jr07md_52y31f_27z07pkw7h0000gp/T//ccJf6kCr.s:742    .text.unregister_mods:0000000000000000 unregister_mods
/var/folders/cl/jr07md_52y31f_27z07pkw7h0000gp/T//ccJf6kCr.s:771    .text.process_action:0000000000000000 process_action
/var/folders/cl/jr07md_52y31f_27z07pkw7h0000gp/T//ccJf6kCr.s:2222   .text.clear_keyboard_but_mods:0000000000000000 clear_keyboard_but_mods
/var/folders/cl/jr07md_52y31f_27z07pkw7h0000gp/T//ccJf6kCr.s:2261   .text.clear_keyboard:0000000000000000 clear_keyboard
/var/folders/cl/jr07md_52y31f_27z07pkw7h0000gp/T//ccJf6kCr.s:2281   .text.is_tap_key:0000000000000000 is_tap_key
/var/folders/cl/jr07md_52y31f_27z07pkw7h0000gp/T//ccJf6kCr.s:2428   .text.debug_event:0000000000000000 debug_event
/var/folders/cl/jr07md_52y31f_27z07pkw7h0000gp/T//ccJf6kCr.s:2470   .text.debug_record:0000000000000000 debug_record
/var/folders/cl/jr07md_52y31f_27z07pkw7h0000gp/T//ccJf6kCr.s:2514   .text.debug_action:0000000000000000 debug_action

UNDEFINED SYMBOLS
action_tapping_process
hook_matrix_change
host_keyboard_leds
add_key
send_keyboard_report
del_key
command_proc
add_mods
host_system_send
host_consumer_send
del_mods
hook_process_action
add_weak_mods
del_weak_mods
set_oneshot_mods
clear_oneshot_mods
get_mods
mousekey_on
mousekey_send
mousekey_off
default_layer_and
default_layer_or
default_layer_xor
layer_and
layer_or
layer_xor
layer_on
layer_move
layer_off
layer_invert
layer_clear
action_get_macro
action_macro_play
action_function
layer_switch_get_action
layer_debug
default_layer_debug
__tablejump2__
clear_weak_mods
clear_keys
mousekey_clear
clear_mods
