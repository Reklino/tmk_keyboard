
adb_usb.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  0000577e  00005832  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000577e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000022e  00800152  00800152  00005b84  2**0
                  ALLOC
  3 .noinit       00000004  00800380  00800380  00005b84  2**0
                  ALLOC
  4 .keymap       00000300  00006800  00006800  00005884  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .stab         000008b8  00000000  00000000  00005b84  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      000000a0  00000000  00000000  0000643c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .comment      00000011  00000000  00000000  000064dc  2**0
                  CONTENTS, READONLY
  8 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000064f0  2**2
                  CONTENTS, READONLY
  9 .debug_aranges 000009e0  00000000  00000000  00006530  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00012b3e  00000000  00000000  00006f10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004d89  00000000  00000000  00019a4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001194e  00000000  00000000  0001e7d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001bb4  00000000  00000000  00030128  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004743  00000000  00000000  00031cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00009b31  00000000  00000000  0003641f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000012e8  00000000  00000000  0003ff50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ac 05 	jmp	0xb58	; 0xb58 <__ctors_end>
       4:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <__bad_interrupt>
       8:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <__bad_interrupt>
       c:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <__bad_interrupt>
      10:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <__bad_interrupt>
      14:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <__bad_interrupt>
      18:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <__bad_interrupt>
      1c:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <__bad_interrupt>
      20:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <__bad_interrupt>
      24:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <__bad_interrupt>
      28:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <__bad_interrupt>
      2c:	0c 94 3b 12 	jmp	0x2476	; 0x2476 <__vector_11>
      30:	0c 94 eb 12 	jmp	0x25d6	; 0x25d6 <__vector_12>
      34:	0c 94 a5 22 	jmp	0x454a	; 0x454a <__vector_13>
      38:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <__bad_interrupt>
      3c:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <__bad_interrupt>
      40:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <__bad_interrupt>
      44:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <__bad_interrupt>
      48:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <__bad_interrupt>
      4c:	0c 94 26 23 	jmp	0x464c	; 0x464c <__vector_19>
      50:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <__bad_interrupt>
      54:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <__bad_interrupt>
      58:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <__bad_interrupt>
      5c:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <__bad_interrupt>
      60:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <__bad_interrupt>
      64:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <__bad_interrupt>
      68:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <__bad_interrupt>
      6c:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <__bad_interrupt>
      70:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <__bad_interrupt>

00000074 <unimap_trans>:
      74:	04 16 07 09 0b 0a 1d 1b 06 19 64 05 14 1a 08 15     ..........d.....
      84:	1c 17 1e 1f 20 21 23 22 2e 26 24 2d 25 27 30 12     .... !#".&$-%'0.
      94:	18 2f 0c 13 28 0f 0d 34 0e 33 31 36 38 11 10 37     ./..(..4.3168..7
      a4:	2b 2c 35 2a 58 29 78 7b 79 39 7a 50 4f 51 52 72     +,5*X)x{y9zPOQRr
      b4:	6c 63 68 56 80 66 80 53 02 01 03 55 58 80 57 6d     lchV.f.S...UX.Wm
      c4:	6e 54 62 59 5a 5b 5c 5d 5e 5f 6f 60 61 74 75 66     nTbYZ[\]^_o`atuf
      d4:	3e 3f 40 3c 41 42 77 44 76 46 6b 47 80 43 65 45     >?@<ABwDvFkG.CeE
      e4:	80 48 49 4a 4b 4c 3d 4d 3b 4e 3a 7d 7e 7c 7f 73     .HIJKL=M;N:}~|.s

000000f4 <__c.2400>:
      f4:	0a 00                                               ..

000000f6 <__c.2398>:
      f6:	25 30 34 58 00                                      %04X.

000000fb <__c.2396>:
      fb:	61 64 62 5f 68 6f 73 74 5f 6b 62 64 5f 72 65 63     adb_host_kbd_rec
     10b:	76 3a 20 00                                         v: .

0000010f <__c.2394>:
     10f:	45 52 52 4f 52 3a 20 6d 65 64 69 61 20 6b 65 79     ERROR: media key
     11f:	30 0a 00                                            0..

00000122 <__c.2386>:
     122:	45 52 52 4f 52 3a 20 6d 65 64 69 61 20 6b 65 79     ERROR: media key
     132:	31 0a 00                                            1..

00000135 <__c.2369>:
     135:	5b 42 3a 25 30 32 58 2c 20 58 3a 25 64 28 25 64     [B:%02X, X:%d(%d
     145:	29 2c 20 59 3a 25 64 28 25 64 29 2c 20 41 3a 25     ), Y:%d(%d), A:%
     155:	64 5d 0a 00                                         d]..

00000159 <__c.2367>:
     159:	5d 20 00                                            ] .

0000015c <__c.2362>:
     15c:	25 30 32 58 20 00                                   %02X .

00000162 <__c.2359>:
     162:	4d 6f 75 73 65 3a 20 5b 00                          Mouse: [.

0000016b <__c.2264>:
     16b:	20 61 64 64 72 3a 25 64 2c 20 72 65 67 33 3a 25      addr:%d, reg3:%
     17b:	30 34 58 0a 00                                      04X..

00000180 <__c.2260>:
     180:	0a 53 63 61 6e 3a 0a 00                             .Scan:..

00000188 <__c.2337>:
     188:	64 65 74 65 63 74 20 61 67 61 69 6e 0a 00           detect again..

00000196 <__c.2333>:
     196:	54 4d 35 3a 20 65 78 74 0a 00                       TM5: ext..

000001a0 <__c.2331>:
     1a0:	55 6e 6b 6e 6f 77 6e 0a 00                          Unknown..

000001a9 <__c.2329>:
     1a9:	54 4d 35 3a 20 64 65 66 61 75 6c 74 0a 00           TM5: default..

000001b7 <__c.2327>:
     1b7:	5d 20 63 70 69 3d 25 64 0a 00                       ] cpi=%d..

000001c1 <__c.2322>:
     1c1:	25 30 32 58 20 00                                   %02X .

000001c7 <__c.2319>:
     1c7:	45 78 74 3a 20 5b 00                                Ext: [.

000001ce <__c.2315>:
     1ce:	43 6c 61 73 73 69 63 20 32 30 30 63 70 69 0a 00     Classic 200cpi..

000001de <__c.2313>:
     1de:	43 6c 61 73 73 69 63 20 31 30 30 63 70 69 0a 00     Classic 100cpi..

000001ee <__c.2310>:
     1ee:	61 64 64 72 25 64 20 72 65 67 33 3a 20 25 30 32     addr%d reg3: %02
     1fe:	58 0a 00                                            X..

00000201 <__c.2308>:
     201:	6d 6f 76 65 20 66 61 69 6c 0a 00                    move fail..

0000020c <__c.2306>:
     20c:	61 64 64 72 25 64 20 72 65 67 33 3a 20 25 30 32     addr%d reg3: %02
     21c:	58 0a 00                                            X..

0000021f <__c.2293>:
     21f:	0a 4d 6f 75 73 65 3a 0a 00                          .Mouse:..

00000228 <__c.2291>:
     228:	4d 65 64 69 61 20 6b 65 79 73 0a 00                 Media keys..

00000234 <__c.2289>:
     234:	68 61 64 6c 65 72 3a 20 25 30 32 58 2c 20 49 53     hadler: %02X, IS
     244:	4f 3a 20 25 73 0a 00                                O: %s..

0000024b <__c.2272>:
     24b:	0a 4b 65 79 62 6f 61 72 64 3a 0a 00                 .Keyboard:..

00000257 <__c.1919>:
     257:	73 00                                               s.

00000259 <__c.1917>:
     259:	53 00                                               S.

0000025b <__c.1915>:
     25b:	52 00                                               R.

0000025d <__c.5002>:
     25d:	0a 4b 65 79 62 6f 61 72 64 20 73 74 61 72 74 2e     .Keyboard start.
     26d:	0a 00                                               ..

0000026f <__c.5000>:
     26f:	0a 55 53 42 20 63 6f 6e 66 69 67 75 72 65 64 2e     .USB configured.
     27f:	0a 00                                               ..

00000281 <__c.4995>:
     281:	0a 0a 54 4d 4b 3a 66 35 65 34 38 37 62 63 2f 4c     ..TMK:f5e487bc/L
     291:	55 46 41 0a 0a 00                                   UFA...

00000297 <ProductString>:
     297:	2e 03 41 00 44 00 42 00 20 00 6b 00 65 00 79 00     ..A.D.B. .k.e.y.
     2a7:	62 00 6f 00 61 00 72 00 64 00 20 00 63 00 6f 00     b.o.a.r.d. .c.o.
     2b7:	6e 00 76 00 65 00 72 00 74 00 65 00 72 00 00 00     n.v.e.r.t.e.r...

000002c7 <ManufacturerString>:
     2c7:	0e 03 74 00 2e 00 6d 00 2e 00 6b 00 2e 00 00 00     ..t...m...k.....

000002d7 <LanguageString>:
     2d7:	04 03 09 04                                         ....

000002db <ConfigurationDescriptor>:
     2db:	09 02 74 00 04 01 00 a0 32 09 04 00 00 01 03 01     ..t.....2.......
     2eb:	01 00 09 21 11 01 00 01 22 40 00 07 05 81 03 08     ...!...."@......
     2fb:	00 0a 09 04 01 00 01 03 01 02 00 09 21 11 01 00     ............!...
     30b:	01 22 4d 00 07 05 82 03 08 00 0a 09 04 02 00 01     ."M.............
     31b:	03 00 00 00 09 21 11 01 00 01 22 36 00 07 05 83     .....!...."6....
     32b:	03 08 00 0a 09 04 03 00 02 03 00 00 00 09 21 11     ..............!.
     33b:	01 00 01 22 22 00 07 05 84 03 20 00 01 07 05 04     ...""..... .....
     34b:	03 20 00 01                                         . ..

0000034f <DeviceDescriptor>:
     34f:	12 01 10 01 00 00 00 08 ed fe db 0a 01 01 01 02     ................
     35f:	00 01                                               ..

00000361 <ConsoleReport>:
     361:	06 31 ff 09 74 a1 01 09 75 15 00 26 ff 00 95 20     .1..t...u..&... 
     371:	75 08 81 02 09 76 15 00 26 ff 00 95 20 75 08 91     u....v..&... u..
     381:	02 c0                                               ..

00000383 <ExtrakeyReport>:
     383:	05 01 09 80 a1 01 85 02 16 01 00 26 37 00 1a 81     ...........&7...
     393:	00 2a b7 00 75 10 95 01 81 00 c0 05 0c 09 01 a1     .*..u...........
     3a3:	01 85 03 16 01 00 26 9c 02 1a 01 00 2a 9c 02 75     ......&.....*..u
     3b3:	10 95 01 81 00 c0                                   ......

000003b9 <MouseReport>:
     3b9:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 05     ..............).
     3c9:	15 00 25 01 95 05 75 01 81 02 95 01 75 03 81 01     ..%...u.....u...
     3d9:	05 01 09 30 09 31 15 81 25 7f 95 02 75 08 81 06     ...0.1..%...u...
     3e9:	09 38 15 81 25 7f 95 01 75 08 81 06 05 0c 0a 38     .8..%...u......8
     3f9:	02 15 81 25 7f 95 01 75 08 81 06 c0 c0              ...%...u.....

00000406 <KeyboardReport>:
     406:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     416:	95 08 75 01 81 02 95 01 75 08 81 01 05 08 19 01     ..u.....u.......
     426:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 05 07     )...u.....u.....
     436:	19 00 29 ff 15 00 26 ff 00 95 06 75 08 81 00 c0     ..)...&....u....

00000446 <__c.2142>:
     446:	63 6f 6e 73 75 6d 65 72 3a 20 25 30 34 58 0a 00     consumer: %04X..

00000456 <__c.2137>:
     456:	73 79 73 74 65 6d 3a 20 25 30 34 58 0a 00           system: %04X..

00000464 <__c.2129>:
     464:	0a 00                                               ..

00000466 <__c.2124>:
     466:	25 30 32 58 20 00                                   %02X .

0000046c <__c.2121>:
     46c:	6b 65 79 62 6f 61 72 64 3a 20 00                    keyboard: .

00000477 <__c.2451>:
     477:	4c 45 44 3a 20 25 30 32 58 0a 00                    LED: %02X..

00000482 <__c.1775>:
     482:	25 30 32 58 3a 20 25 30 38 62 25 73 0a 00           %02X: %08b%s..

00000490 <__c.1772>:
     490:	72 2f 63 20 30 31 32 33 34 35 36 37 0a 00           r/c 01234567..

0000049e <__c.2202>:
     49e:	29 0a 00                                            )..

000004a1 <__c.2200>:
     4a1:	25 75 00                                            %u.

000004a4 <__c.2198>:
     4a4:	2f 00                                               /.

000004a6 <__c.2196>:
     4a6:	25 75 00                                            %u.

000004a9 <__c.2194>:
     4a9:	5d 28 00                                            ](.

000004ac <__c.2192>:
     4ac:	25 64 00                                            %d.

000004af <__c.2190>:
     4af:	20 00                                                .

000004b1 <__c.2188>:
     4b1:	25 64 00                                            %d.

000004b4 <__c.2186>:
     4b4:	20 00                                                .

000004b6 <__c.2184>:
     4b6:	25 64 00                                            %d.

000004b9 <__c.2182>:
     4b9:	20 00                                                .

000004bb <__c.2180>:
     4bb:	25 64 00                                            %d.

000004be <__c.2178>:
     4be:	7c 00                                               |.

000004c0 <__c.2176>:
     4c0:	25 30 32 58 00                                      %02X.

000004c5 <__c.2174>:
     4c5:	6d 6f 75 73 65 6b 65 79 20 5b 62 74 6e 7c 78 20     mousekey [btn|x 
     4d5:	79 20 76 20 68 5d 28 72 65 70 2f 61 63 6c 29 3a     y v h](rep/acl):
     4e5:	20 5b 00                                             [.

000004e8 <__c.2823>:
     4e8:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     4f8:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

00000503 <__c.2820>:
     503:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     513:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

0000051c <__c.2817>:
     51c:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     52c:	20 25 64 0a 00                                       %d..

00000531 <__c.2814>:
     531:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     541:	64 0a 00                                            d..

00000544 <__c.2811>:
     544:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     554:	0a 00                                               ..

00000556 <__c.2807>:
     556:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

00000565 <__c.2800>:
     565:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     575:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

00000580 <__c.2797>:
     580:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     590:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

00000599 <__c.2794>:
     599:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     5a9:	20 25 64 0a 00                                       %d..

000005ae <__c.2791>:
     5ae:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     5be:	64 0a 00                                            d..

000005c1 <__c.2788>:
     5c1:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     5d1:	0a 00                                               ..

000005d3 <__c.2784>:
     5d3:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

000005e2 <__c.2777>:
     5e2:	0a 00                                               ..

000005e4 <__c.2775>:
     5e4:	25 75 00                                            %u.

000005e7 <__c.2773>:
     5e7:	36 3a 20 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     6: wheel_time_to
     5f7:	5f 6d 61 78 3a 20 00                                _max: .

000005fe <__c.2771>:
     5fe:	0a 00                                               ..

00000600 <__c.2769>:
     600:	25 75 00                                            %u.

00000603 <__c.2767>:
     603:	35 3a 20 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     5: wheel_max_spe
     613:	65 64 3a 20 00                                      ed: .

00000618 <__c.2765>:
     618:	0a 00                                               ..

0000061a <__c.2763>:
     61a:	25 75 00                                            %u.

0000061d <__c.2761>:
     61d:	34 3a 20 74 69 6d 65 5f 74 6f 5f 6d 61 78 3a 20     4: time_to_max: 
     62d:	00                                                  .

0000062e <__c.2759>:
     62e:	0a 00                                               ..

00000630 <__c.2757>:
     630:	25 75 00                                            %u.

00000633 <__c.2755>:
     633:	33 3a 20 6d 61 78 5f 73 70 65 65 64 3a 20 00        3: max_speed: .

00000642 <__c.2753>:
     642:	0a 00                                               ..

00000644 <__c.2751>:
     644:	25 75 00                                            %u.

00000647 <__c.2749>:
     647:	32 3a 20 69 6e 74 65 72 76 61 6c 28 6d 73 29 3a     2: interval(ms):
     657:	20 00                                                .

00000659 <__c.2747>:
     659:	0a 00                                               ..

0000065b <__c.2745>:
     65b:	25 75 00                                            %u.

0000065e <__c.2743>:
     65e:	31 3a 20 64 65 6c 61 79 28 2a 31 30 6d 73 29 3a     1: delay(*10ms):
     66e:	20 00                                                .

00000670 <__c.2741>:
     670:	0a 09 2d 20 56 61 6c 75 65 73 20 2d 0a 00           ..- Values -..

0000067e <__c.2861>:
     67e:	4d 3e 00                                            M>.

00000681 <__c.2859>:
     681:	4d 25 64 3e 20 00                                   M%d> .

00000687 <__c.2857>:
     687:	3f 00                                               ?.

00000689 <__c.2854>:
     689:	73 65 74 20 64 65 66 61 75 6c 74 0a 00              set default..

00000696 <__c.2840>:
     696:	43 3e 20 00                                         C> .

0000069a <__c.2830>:
     69a:	77 68 65 72 65 20 64 65 6c 74 61 3a 20 63 75 72     where delta: cur
     6aa:	73 6f 72 3d 25 64 2c 20 77 68 65 65 6c 3d 25 64     sor=%d, wheel=%d
     6ba:	0a 53 65 65 20 68 74 74 70 3a 2f 2f 65 6e 2e 77     .See http://en.w
     6ca:	69 6b 69 70 65 64 69 61 2e 6f 72 67 2f 77 69 6b     ikipedia.org/wik
     6da:	69 2f 4d 6f 75 73 65 5f 6b 65 79 73 0a 00           i/Mouse_keys..

000006e8 <__c.2828>:
     6e8:	0a 09 2d 20 4d 6f 75 73 65 6b 65 79 20 2d 0a 45     ..- Mousekey -.E
     6f8:	53 43 2f 71 3a 09 71 75 69 74 0a 31 3a 09 64 65     SC/q:.quit.1:.de
     708:	6c 61 79 28 2a 31 30 6d 73 29 0a 32 3a 09 69 6e     lay(*10ms).2:.in
     718:	74 65 72 76 61 6c 28 6d 73 29 0a 33 3a 09 6d 61     terval(ms).3:.ma
     728:	78 5f 73 70 65 65 64 0a 34 3a 09 74 69 6d 65 5f     x_speed.4:.time_
     738:	74 6f 5f 6d 61 78 0a 35 3a 09 77 68 65 65 6c 5f     to_max.5:.wheel_
     748:	6d 61 78 5f 73 70 65 65 64 0a 36 3a 09 77 68 65     max_speed.6:.whe
     758:	65 6c 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 0a 0a     el_time_to_max..
     768:	70 3a 09 70 72 69 6e 74 20 76 61 6c 75 65 73 0a     p:.print values.
     778:	64 3a 09 73 65 74 20 64 65 66 61 75 6c 74 73 0a     d:.set defaults.
     788:	75 70 3a 09 2b 31 0a 64 6f 77 6e 3a 09 2d 31 0a     up:.+1.down:.-1.
     798:	70 67 75 70 3a 09 2b 31 30 0a 70 67 64 6f 77 6e     pgup:.+10.pgdown
     7a8:	3a 09 2d 31 30 0a 0a 73 70 65 65 64 20 3d 20 64     :.-10..speed = d
     7b8:	65 6c 74 61 20 2a 20 6d 61 78 5f 73 70 65 65 64     elta * max_speed
     7c8:	20 2a 20 28 72 65 70 65 61 74 20 2f 20 74 69 6d      * (repeat / tim
     7d8:	65 5f 74 6f 5f 6d 61 78 29 0a 00                    e_to_max)..

000007e3 <__c.2733>:
     7e3:	3f 00                                               ?.

000007e5 <__c.2730>:
     7e5:	4d 3e 20 00                                         M> .

000007e9 <__c.2735>:
     7e9:	43 3e 20 00                                         C> .

000007ed <__c.2879>:
     7ed:	4c 25 64 0a 00                                      L%d..

000007f2 <__c.2719>:
     7f2:	0a 09 2d 20 43 6f 6e 73 6f 6c 65 20 2d 0a 45 53     ..- Console -.ES
     802:	43 2f 71 3a 09 71 75 69 74 0a 6d 3a 09 6d 6f 75     C/q:.quit.m:.mou
     812:	73 65 6b 65 79 0a 00                                sekey..

00000819 <__c.2649>:
     819:	0a 09 2d 20 4d 61 67 69 63 20 2d 0a 64 3a 09 64     ..- Magic -.d:.d
     829:	65 62 75 67 0a 78 3a 09 64 65 62 75 67 20 6d 61     ebug.x:.debug ma
     839:	74 72 69 78 0a 6b 3a 09 64 65 62 75 67 20 6b 65     trix.k:.debug ke
     849:	79 62 6f 61 72 64 0a 6d 3a 09 64 65 62 75 67 20     yboard.m:.debug 
     859:	6d 6f 75 73 65 0a 76 3a 09 76 65 72 73 69 6f 6e     mouse.v:.version
     869:	0a 73 3a 09 73 74 61 74 75 73 0a 63 3a 09 63 6f     .s:.status.c:.co
     879:	6e 73 6f 6c 65 20 6d 6f 64 65 0a 30 2d 34 3a 09     nsole mode.0-4:.
     889:	6c 61 79 65 72 30 2d 34 28 46 31 30 2d 46 34 29     layer0-4(F10-F4)
     899:	0a 50 61 75 73 3a 09 62 6f 6f 74 6c 6f 61 64 65     .Paus:.bootloade
     8a9:	72 0a 00                                            r..

000008ac <__c.2714>:
     8ac:	3f 00                                               ?.

000008ae <__c.2705>:
     8ae:	74 69 6d 65 72 5f 72 65 61 64 33 32 28 29 3a 20     timer_read32(): 
     8be:	25 30 34 6c 58 0a 00                                %04lX..

000008c5 <__c.2703>:
     8c5:	6b 65 79 62 6f 61 72 64 5f 69 64 6c 65 3a 20 25     keyboard_idle: %
     8d5:	58 0a 00                                            X..

000008d8 <__c.2701>:
     8d8:	6b 65 79 62 6f 61 72 64 5f 70 72 6f 74 6f 63 6f     keyboard_protoco
     8e8:	6c 3a 20 25 58 0a 00                                l: %X..

000008ef <__c.2699>:
     8ef:	68 6f 73 74 5f 6b 65 79 62 6f 61 72 64 5f 6c 65     host_keyboard_le
     8ff:	64 73 28 29 3a 20 25 58 0a 00                       ds(): %X..

00000909 <__c.2697>:
     909:	0a 09 2d 20 53 74 61 74 75 73 20 2d 0a 00           ..- Status -..

00000917 <__c.2694>:
     917:	47 43 43 3a 20 39 2e 31 2e 30 20 41 56 52 2d 4c     GCC: 9.1.0 AVR-L
     927:	49 42 43 3a 20 32 2e 30 2e 30 20 41 56 52 5f 41     IBC: 2.0.0 AVR_A
     937:	52 43 48 3a 20 61 76 72 33 35 0a 00                 RCH: avr35..

00000943 <__c.2692>:
     943:	4f 50 54 49 4f 4e 53 3a 20 4c 55 46 41 20 4d 4f     OPTIONS: LUFA MO
     953:	55 53 45 4b 45 59 20 45 58 54 52 41 4b 45 59 20     USEKEY EXTRAKEY 
     963:	43 4f 4e 53 4f 4c 45 20 43 4f 4d 4d 41 4e 44 20     CONSOLE COMMAND 
     973:	4b 45 59 4d 41 50 5f 53 45 43 54 49 4f 4e 20 34     KEYMAP_SECTION 4
     983:	30 39 36 0a 00                                      096..

00000988 <__c.2690>:
     988:	42 55 49 4c 44 3a 20 66 35 65 34 38 37 62 63 20     BUILD: f5e487bc 
     998:	28 31 39 3a 31 30 3a 35 32 20 53 65 70 20 31 30     (19:10:52 Sep 10
     9a8:	20 32 30 31 39 29 0a 00                              2019)..

000009b0 <__c.2688>:
     9b0:	56 49 44 3a 20 30 78 46 45 45 44 28 74 2e 6d 2e     VID: 0xFEED(t.m.
     9c0:	6b 2e 29 20 50 49 44 3a 20 30 78 30 41 44 42 28     k.) PID: 0x0ADB(
     9d0:	41 44 42 20 6b 65 79 62 6f 61 72 64 20 63 6f 6e     ADB keyboard con
     9e0:	76 65 72 74 65 72 29 20 56 45 52 3a 20 30 78 30     verter) VER: 0x0
     9f0:	31 30 31 0a 00                                      101..

000009f5 <__c.2686>:
     9f5:	44 45 53 43 3a 20 63 6f 6e 76 65 72 74 20 41 44     DESC: convert AD
     a05:	42 20 6b 65 79 62 6f 61 72 64 20 74 6f 20 55 53     B keyboard to US
     a15:	42 0a 00                                            B..

00000a18 <__c.2684>:
     a18:	0a 09 2d 20 56 65 72 73 69 6f 6e 20 2d 0a 00        ..- Version -..

00000a27 <__c.2681>:
     a27:	0a 6d 6f 75 73 65 3a 20 6f 66 66 0a 00              .mouse: off..

00000a34 <__c.2679>:
     a34:	0a 6d 6f 75 73 65 3a 20 6f 6e 0a 00                 .mouse: on..

00000a40 <__c.2676>:
     a40:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 66 66 0a 00     .keyboard: off..

00000a50 <__c.2674>:
     a50:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 6e 0a 00        .keyboard: on..

00000a5f <__c.2671>:
     a5f:	0a 6d 61 74 72 69 78 3a 20 6f 66 66 0a 00           .matrix: off..

00000a6d <__c.2669>:
     a6d:	0a 6d 61 74 72 69 78 3a 20 6f 6e 0a 00              .matrix: on..

00000a7a <__c.2666>:
     a7a:	0a 64 65 62 75 67 3a 20 6f 6e 0a 00                 .debug: on..

00000a86 <__c.2664>:
     a86:	0a 64 65 62 75 67 3a 20 6f 66 66 0a 00              .debug: off..

00000a93 <__c.2661>:
     a93:	0a 0a 62 6f 6f 74 6c 6f 61 64 65 72 2e 2e 2e 20     ..bootloader... 
     aa3:	00                                                  .

00000aa4 <__c.2658>:
     aa4:	43 3e 20 00                                         C> .

00000aa8 <__trampolines_end>:
     aa8:	1a 0b       	sbc	r17, r26
     aaa:	1a 0b       	sbc	r17, r26
     aac:	6d 0b       	sbc	r22, r29
     aae:	1a 0b       	sbc	r17, r26
     ab0:	6d 0b       	sbc	r22, r29
     ab2:	1a 0b       	sbc	r17, r26
     ab4:	6d 0b       	sbc	r22, r29
     ab6:	6d 0b       	sbc	r22, r29
     ab8:	6d 0b       	sbc	r22, r29
     aba:	1a 0b       	sbc	r17, r26
     abc:	6d 0b       	sbc	r22, r29
     abe:	6d 0b       	sbc	r22, r29
     ac0:	6d 0b       	sbc	r22, r29
     ac2:	1a 0b       	sbc	r17, r26
     ac4:	6d 0b       	sbc	r22, r29
     ac6:	6d 0b       	sbc	r22, r29
     ac8:	1a 0b       	sbc	r17, r26
     aca:	6d 0b       	sbc	r22, r29
     acc:	6d 0b       	sbc	r22, r29
     ace:	6d 0b       	sbc	r22, r29
     ad0:	6d 0b       	sbc	r22, r29
     ad2:	1a 0b       	sbc	r17, r26
     ad4:	6d 0b       	sbc	r22, r29
     ad6:	6d 0b       	sbc	r22, r29
     ad8:	6d 0b       	sbc	r22, r29
     ada:	1a 0b       	sbc	r17, r26
     adc:	58 13       	cpse	r21, r24
     ade:	7d 13       	cpse	r23, r29
     ae0:	61 14       	cp	r6, r1
     ae2:	7d 13       	cpse	r23, r29
     ae4:	61 14       	cp	r6, r1
     ae6:	ad 13       	cpse	r26, r29
     ae8:	ce 13       	cpse	r28, r30
     aea:	61 14       	cp	r6, r1
     aec:	23 14       	cp	r2, r3
     aee:	2f 14       	cp	r2, r15
     af0:	d2 17       	cp	r29, r18
     af2:	d2 17       	cp	r29, r18
     af4:	10 18       	sub	r1, r0
     af6:	10 18       	sub	r1, r0
     af8:	99 18       	sub	r9, r9
     afa:	d1 18       	sub	r13, r1
     afc:	c1 17       	cp	r28, r17
     afe:	c1 17       	cp	r28, r17
     b00:	eb 18       	sub	r14, r11
     b02:	c1 17       	cp	r28, r17
     b04:	0d 1a       	sub	r0, r29
     b06:	0d 1a       	sub	r0, r29
     b08:	b7 1a       	sub	r11, r23
     b0a:	c1 17       	cp	r28, r17
     b0c:	c1 17       	cp	r28, r17
     b0e:	cf 1a       	sub	r12, r31
     b10:	4b 28       	or	r4, r11
     b12:	5c 28       	or	r5, r12
     b14:	28 28       	or	r2, r8
     b16:	28 28       	or	r2, r8
     b18:	28 28       	or	r2, r8
     b1a:	46 28       	or	r4, r6
     b1c:	28 28       	or	r2, r8
     b1e:	28 28       	or	r2, r8
     b20:	82 28       	or	r8, r2
     b22:	28 28       	or	r2, r8
     b24:	92 28       	or	r9, r2
     b26:	28 28       	or	r2, r8
     b28:	28 28       	or	r2, r8
     b2a:	28 28       	or	r2, r8
     b2c:	28 28       	or	r2, r8
     b2e:	28 28       	or	r2, r8
     b30:	b9 28       	or	r11, r9
     b32:	28 28       	or	r2, r8
     b34:	28 28       	or	r2, r8
     b36:	a2 28       	or	r10, r2
     b38:	28 28       	or	r2, r8
     b3a:	72 28       	or	r7, r2
     b3c:	28 28       	or	r2, r8
     b3e:	28 28       	or	r2, r8
     b40:	f4 28       	or	r15, r4
     b42:	f4 28       	or	r15, r4
     b44:	f4 28       	or	r15, r4
     b46:	f4 28       	or	r15, r4
     b48:	f4 28       	or	r15, r4
     b4a:	f4 28       	or	r15, r4
     b4c:	f4 28       	or	r15, r4
     b4e:	f4 28       	or	r15, r4
     b50:	f4 28       	or	r15, r4
     b52:	f0 28       	or	r15, r0
     b54:	28 28       	or	r2, r8
     b56:	f0 28       	or	r15, r0

00000b58 <__ctors_end>:
     b58:	11 24       	eor	r1, r1
     b5a:	1f be       	out	0x3f, r1	; 63
     b5c:	cf ef       	ldi	r28, 0xFF	; 255
     b5e:	d4 e0       	ldi	r29, 0x04	; 4
     b60:	de bf       	out	0x3e, r29	; 62
     b62:	cd bf       	out	0x3d, r28	; 61

00000b64 <bootloader_jump_after_watchdog_reset>:

/* this runs before main() */
void bootloader_jump_after_watchdog_reset(void) __attribute__ ((used, naked, section (".init3")));
void bootloader_jump_after_watchdog_reset(void)
{
    if ((MCUSR & (1<<WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
     b64:	04 b6       	in	r0, 0x34	; 52
     b66:	03 fe       	sbrs	r0, 3
     b68:	27 c0       	rjmp	.+78     	; 0xbb8 <__do_copy_data>
     b6a:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <__bss_end>
     b6e:	90 91 81 03 	lds	r25, 0x0381	; 0x800381 <__bss_end+0x1>
     b72:	a0 91 82 03 	lds	r26, 0x0382	; 0x800382 <__bss_end+0x2>
     b76:	b0 91 83 03 	lds	r27, 0x0383	; 0x800383 <__bss_end+0x3>
     b7a:	87 30       	cpi	r24, 0x07	; 7
     b7c:	90 4b       	sbci	r25, 0xB0	; 176
     b7e:	a7 40       	sbci	r26, 0x07	; 7
     b80:	b0 4b       	sbci	r27, 0xB0	; 176
     b82:	d1 f4       	brne	.+52     	; 0xbb8 <__do_copy_data>
        reset_key = 0;
     b84:	10 92 80 03 	sts	0x0380, r1	; 0x800380 <__bss_end>
     b88:	10 92 81 03 	sts	0x0381, r1	; 0x800381 <__bss_end+0x1>
     b8c:	10 92 82 03 	sts	0x0382, r1	; 0x800382 <__bss_end+0x2>
     b90:	10 92 83 03 	sts	0x0383, r1	; 0x800383 <__bss_end+0x3>

        // My custom USBasploader requires this to come up.
        MCUSR = 0;
     b94:	14 be       	out	0x34, r1	; 52

        // Seems like Teensy halfkay loader requires clearing WDRF and disabling watchdog.
        MCUSR &= ~(1<<WDRF);
     b96:	84 b7       	in	r24, 0x34	; 52
     b98:	87 7f       	andi	r24, 0xF7	; 247
     b9a:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     b9c:	0f b6       	in	r0, 0x3f	; 63
     b9e:	f8 94       	cli
     ba0:	a8 95       	wdr
     ba2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <actionmaps+0x7f9860>
     ba6:	88 61       	ori	r24, 0x18	; 24
     ba8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <actionmaps+0x7f9860>
     bac:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <actionmaps+0x7f9860>
     bb0:	0f be       	out	0x3f, r0	; 63
        wdt_disable();

        // This is compled into 'icall', address should be in word unit, not byte.
        ((void (*)(void))(BOOTLOADER_START/2))();
     bb2:	e0 e0       	ldi	r30, 0x00	; 0
     bb4:	f8 e3       	ldi	r31, 0x38	; 56
     bb6:	09 95       	icall

00000bb8 <__do_copy_data>:
     bb8:	11 e0       	ldi	r17, 0x01	; 1
     bba:	a0 e0       	ldi	r26, 0x00	; 0
     bbc:	b1 e0       	ldi	r27, 0x01	; 1
     bbe:	ee e7       	ldi	r30, 0x7E	; 126
     bc0:	f7 e5       	ldi	r31, 0x57	; 87
     bc2:	02 c0       	rjmp	.+4      	; 0xbc8 <__do_copy_data+0x10>
     bc4:	05 90       	lpm	r0, Z+
     bc6:	0d 92       	st	X+, r0
     bc8:	a2 35       	cpi	r26, 0x52	; 82
     bca:	b1 07       	cpc	r27, r17
     bcc:	d9 f7       	brne	.-10     	; 0xbc4 <__do_copy_data+0xc>

00000bce <__do_clear_bss>:
     bce:	23 e0       	ldi	r18, 0x03	; 3
     bd0:	a2 e5       	ldi	r26, 0x52	; 82
     bd2:	b1 e0       	ldi	r27, 0x01	; 1
     bd4:	01 c0       	rjmp	.+2      	; 0xbd8 <.do_clear_bss_start>

00000bd6 <.do_clear_bss_loop>:
     bd6:	1d 92       	st	X+, r1

00000bd8 <.do_clear_bss_start>:
     bd8:	a0 38       	cpi	r26, 0x80	; 128
     bda:	b2 07       	cpc	r27, r18
     bdc:	e1 f7       	brne	.-8      	; 0xbd6 <.do_clear_bss_loop>
     bde:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <main>
     be2:	0c 94 bd 2b 	jmp	0x577a	; 0x577a <_exit>

00000be6 <__bad_interrupt>:
     be6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000bea <xputc>:
	ldi	r24, 13		;
	rcall	1f		;
	ldi	r24, 10		;/
1:
#endif
	push	ZH
     bea:	ff 93       	push	r31
	push	ZL
     bec:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
     bee:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <__data_end>
	lds	ZH, xfunc_out+1	;/
     bf2:	f0 91 53 01 	lds	r31, 0x0153	; 0x800153 <__data_end+0x1>
	sbiw	ZL, 0		;Skip if null
     bf6:	30 97       	sbiw	r30, 0x00	; 0
	breq	2f		;/
     bf8:	09 f0       	breq	.+2      	; 0xbfc <xputc+0x12>
	icall
     bfa:	09 95       	icall
2:	pop	ZL
     bfc:	ef 91       	pop	r30
	pop	ZH
     bfe:	ff 91       	pop	r31
	ret
     c00:	08 95       	ret

00000c02 <xputs>:
;			);

.func xputs
.global xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
     c02:	fc 01       	movw	r30, r24
1:	_LPMI	r24
     c04:	85 91       	lpm	r24, Z+
	cpi	r24, 0
     c06:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
     c08:	11 f0       	breq	.+4      	; 0xc0e <xputs+0xc>
	rcall	xputc
     c0a:	ef df       	rcall	.-34     	; 0xbea <xputc>
	rjmp	1b
     c0c:	fb cf       	rjmp	.-10     	; 0xc04 <xputs+0x2>
2:	ret
     c0e:	08 95       	ret

00000c10 <xitoa>:

.func xitoa
.global xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
     c10:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
     c12:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
     c14:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
     c16:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
     c18:	0c c0       	rjmp	.+24     	; 0xc32 <xitoa+0x22>
	neg	r20		;
     c1a:	41 95       	neg	r20
	sbrs	r25, 7		;
     c1c:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
     c1e:	09 c0       	rjmp	.+18     	; 0xc32 <xitoa+0x22>
	ldi	r30, '-'	;
     c20:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
     c22:	60 95       	com	r22
	com	r23		;
     c24:	70 95       	com	r23
	com	r24		;
     c26:	80 95       	com	r24
	com	r25		;
     c28:	90 95       	com	r25
	adc	r22, r1		;
     c2a:	61 1d       	adc	r22, r1
	adc	r23, r1		;
     c2c:	71 1d       	adc	r23, r1
	adc	r24, r1		;
     c2e:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
     c30:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
     c32:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
     c34:	02 c0       	rjmp	.+4      	; 0xc3a <xitoa+0x2a>
	neg	r18		;
     c36:	21 95       	neg	r18
	ldi	r19, '0'	;/
     c38:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
     c3a:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
     c3c:	aa 27       	eor	r26, r26
2:	lsl	r22		;
     c3e:	66 0f       	add	r22, r22
	rol	r23		;
     c40:	77 1f       	adc	r23, r23
	rol	r24		;
     c42:	88 1f       	adc	r24, r24
	rol	r25		;
     c44:	99 1f       	adc	r25, r25
	rol	r26		;
     c46:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
     c48:	a4 17       	cp	r26, r20
	brcs	3f		;
     c4a:	10 f0       	brcs	.+4      	; 0xc50 <xitoa+0x40>
	sub	r26, r20	;
     c4c:	a4 1b       	sub	r26, r20
	inc	r22		;
     c4e:	63 95       	inc	r22
3:	dec	r21		;
     c50:	5a 95       	dec	r21
	brne	2b		;/
     c52:	a9 f7       	brne	.-22     	; 0xc3e <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
     c54:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
     c56:	08 f0       	brcs	.+2      	; 0xc5a <xitoa+0x4a>
	subi	r26, -7		;
     c58:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
     c5a:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
     c5c:	af 93       	push	r26
	inc	r31		;/
     c5e:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
     c60:	61 15       	cp	r22, r1
	cpc	r23, r1		;
     c62:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
     c64:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
     c66:	91 05       	cpc	r25, r1
	brne	1b		;/
     c68:	41 f7       	brne	.-48     	; 0xc3a <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
     c6a:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
     c6c:	11 f4       	brne	.+4      	; 0xc72 <xitoa+0x62>
	push	r30		;
     c6e:	ef 93       	push	r30
	inc	r31		;/
     c70:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
     c72:	f2 17       	cp	r31, r18
	brcc	6f		;
     c74:	18 f4       	brcc	.+6      	; 0xc7c <xitoa+0x6c>
	push	r19		;
     c76:	3f 93       	push	r19
	inc	r31		;
     c78:	f3 95       	inc	r31
	rjmp	5b		;/
     c7a:	fb cf       	rjmp	.-10     	; 0xc72 <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
     c7c:	8f 91       	pop	r24
	rcall	xputc		;
     c7e:	b5 df       	rcall	.-150    	; 0xbea <xputc>
	dec	r31		;
     c80:	fa 95       	dec	r31
	brne	6b		;/
     c82:	e1 f7       	brne	.-8      	; 0xc7c <xitoa+0x6c>

	ret
     c84:	08 95       	ret

00000c86 <xvprintf>:

#if USE_XPRINTF

.func xvprintf
xvprintf:
	ld	ZL, Y+		;Z = pointer to format string
     c86:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
     c88:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
     c8a:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
     c8c:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
     c8e:	21 f0       	breq	.+8      	; 0xc98 <xvprintf+0x12>
	cpi	r24, '%'	;Is format?
     c90:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
     c92:	19 f0       	breq	.+6      	; 0xc9a <xvprintf+0x14>
1:	rcall	xputc		;Put a normal character
     c94:	aa df       	rcall	.-172    	; 0xbea <xputc>
	rjmp	0b		;/
     c96:	f9 cf       	rjmp	.-14     	; 0xc8a <xvprintf+0x4>
90:	ret
     c98:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
     c9a:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
     c9c:	e8 94       	clt
	_LPMI	r21		;Get flags
     c9e:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
     ca0:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
     ca2:	c1 f3       	breq	.-16     	; 0xc94 <xvprintf+0xe>
	cpi	r21, '0'	;Zero filled?
     ca4:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
     ca6:	11 f4       	brne	.+4      	; 0xcac <xvprintf+0x26>
	set			;/
     ca8:	68 94       	set
22:	_LPMI	r21		;Get width
     caa:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
     cac:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
     cae:	48 f4       	brcc	.+18     	; 0xcc2 <xvprintf+0x3c>
	subi	r21, '0'	;
     cb0:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
     cb2:	90 f3       	brcs	.-28     	; 0xc98 <xvprintf+0x12>
	lsl	r18		;
     cb4:	22 0f       	add	r18, r18
	mov	r0, r18		;
     cb6:	02 2e       	mov	r0, r18
	lsl	r18		;
     cb8:	22 0f       	add	r18, r18
	lsl	r18		;
     cba:	22 0f       	add	r18, r18
	add	r18, r0		;
     cbc:	20 0d       	add	r18, r0
	add	r18, r21	;
     cbe:	25 0f       	add	r18, r21
	rjmp	22b		;/
     cc0:	f4 cf       	rjmp	.-24     	; 0xcaa <xvprintf+0x24>

24:	brtc	25f		;get value (low word)
     cc2:	0e f4       	brtc	.+2      	; 0xcc6 <xvprintf+0x40>
	neg	r18		;
     cc4:	21 95       	neg	r18
25:	ld	r24, Y+		;
     cc6:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
     cc8:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
     cca:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
     ccc:	19 f3       	breq	.-58     	; 0xc94 <xvprintf+0xe>
	cpi	r21, 's'	;Is type RAM string?
     cce:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
     cd0:	29 f1       	breq	.+74     	; 0xd1c <xvprintf+0x96>
	cpi	r21, 'S'	;Is type ROM string?
     cd2:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
     cd4:	59 f1       	breq	.+86     	; 0xd2c <xvprintf+0xa6>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
     cd6:	bc 01       	movw	r22, r24
	clr	r24		;
     cd8:	88 27       	eor	r24, r24
	clr	r25		;
     cda:	99 27       	eor	r25, r25
	clt			;/
     cdc:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
     cde:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
     ce0:	21 f4       	brne	.+8      	; 0xcea <xvprintf+0x64>
	ld	r24, Y+		;get value (high word)
     ce2:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
     ce4:	99 91       	ld	r25, Y+
	set			;
     ce6:	68 94       	set
	_LPMI	r21		;/
     ce8:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
     cea:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
     cec:	39 f4       	brne	.+14     	; 0xcfc <xvprintf+0x76>
	ldi	r20, -10	;
     cee:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
     cf0:	7e f0       	brts	.+30     	; 0xd10 <xvprintf+0x8a>
	sbrs	r23, 7		;
     cf2:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
     cf4:	0d c0       	rjmp	.+26     	; 0xd10 <xvprintf+0x8a>
	ldi	r24, -1		;
     cf6:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
     cf8:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
     cfa:	0a c0       	rjmp	.+20     	; 0xd10 <xvprintf+0x8a>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
     cfc:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
     cfe:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
     d00:	39 f0       	breq	.+14     	; 0xd10 <xvprintf+0x8a>
	cpi	r21, 'X'	;Is type hexdecimal?
     d02:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
     d04:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
     d06:	21 f0       	breq	.+8      	; 0xd10 <xvprintf+0x8a>
	cpi	r21, 'b'	;Is type binary?
     d08:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
     d0a:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
     d0c:	09 f0       	breq	.+2      	; 0xd10 <xvprintf+0x8a>
	ret			;abort
     d0e:	08 95       	ret
40:	push	ZH		;Output the value
     d10:	ff 93       	push	r31
	push	ZL		;
     d12:	ef 93       	push	r30
	rcall	xitoa		;
     d14:	7d df       	rcall	.-262    	; 0xc10 <xitoa>
42:	pop	ZL		;
     d16:	ef 91       	pop	r30
	pop	ZH		;
     d18:	ff 91       	pop	r31
	rjmp	0b		;/
     d1a:	b7 cf       	rjmp	.-146    	; 0xc8a <xvprintf+0x4>

50:	push	ZH		;Put a string on the RAM
     d1c:	ff 93       	push	r31
	push	ZL
     d1e:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
     d20:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
     d22:	81 91       	ld	r24, Z+
	cpi	r24, 0
     d24:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
     d26:	b9 f3       	breq	.-18     	; 0xd16 <xvprintf+0x90>
	rcall	xputc
     d28:	60 df       	rcall	.-320    	; 0xbea <xputc>
	rjmp	51b
     d2a:	fb cf       	rjmp	.-10     	; 0xd22 <xvprintf+0x9c>

60:	push	ZH		;Put a string on the ROM
     d2c:	ff 93       	push	r31
	push	ZL
     d2e:	ef 93       	push	r30
	rcall	xputs
     d30:	68 df       	rcall	.-304    	; 0xc02 <xputs>
	rjmp	42b
     d32:	f1 cf       	rjmp	.-30     	; 0xd16 <xvprintf+0x90>

00000d34 <__xprintf>:


.func __xprintf
.global __xprintf
__xprintf:
	push	YH
     d34:	df 93       	push	r29
	push	YL
     d36:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
     d38:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
     d3a:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
	adiw	YL, 5		;Y = pointer to arguments
     d3c:	25 96       	adiw	r28, 0x05	; 5
	rcall	xvprintf
     d3e:	a3 df       	rcall	.-186    	; 0xc86 <xvprintf>
	pop	YL
     d40:	cf 91       	pop	r28
	pop	YH
     d42:	df 91       	pop	r29
	ret
     d44:	08 95       	ret

00000d46 <register_key>:
inline
static void register_key(uint8_t key)
{
    uint8_t col, row;
    col = key&0x07;
    row = (key>>3)&0x0F;
     d46:	e8 2f       	mov	r30, r24
     d48:	e6 95       	lsr	r30
     d4a:	e6 95       	lsr	r30
     d4c:	e6 95       	lsr	r30
     d4e:	ef 70       	andi	r30, 0x0F	; 15
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	e0 5a       	subi	r30, 0xA0	; 160
     d54:	fe 4f       	sbci	r31, 0xFE	; 254
     d56:	90 81       	ld	r25, Z
    col = key&0x07;
     d58:	48 2f       	mov	r20, r24
     d5a:	47 70       	andi	r20, 0x07	; 7
     d5c:	21 e0       	ldi	r18, 0x01	; 1
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	01 c0       	rjmp	.+2      	; 0xd64 <register_key+0x1e>
     d62:	22 0f       	add	r18, r18
     d64:	4a 95       	dec	r20
     d66:	ea f7       	brpl	.-6      	; 0xd62 <register_key+0x1c>
    if (key&0x80) {
     d68:	87 ff       	sbrs	r24, 7
     d6a:	04 c0       	rjmp	.+8      	; 0xd74 <register_key+0x2e>
        matrix[row] &= ~(1<<col);
     d6c:	20 95       	com	r18
     d6e:	29 23       	and	r18, r25
    } else {
        matrix[row] |=  (1<<col);
     d70:	20 83       	st	Z, r18
    }
}
     d72:	08 95       	ret
        matrix[row] |=  (1<<col);
     d74:	29 2b       	or	r18, r25
     d76:	fc cf       	rjmp	.-8      	; 0xd70 <register_key+0x2a>

00000d78 <device_scan>:
{
     d78:	0f 93       	push	r16
     d7a:	1f 93       	push	r17
     d7c:	cf 93       	push	r28
     d7e:	df 93       	push	r29
    xprintf("\nScan:\n");
     d80:	80 e8       	ldi	r24, 0x80	; 128
     d82:	91 e0       	ldi	r25, 0x01	; 1
     d84:	9f 93       	push	r25
     d86:	8f 93       	push	r24
     d88:	0e 94 9a 06 	call	0xd34	; 0xd34 <__xprintf>
     d8c:	0f 90       	pop	r0
     d8e:	0f 90       	pop	r0
     d90:	d0 e0       	ldi	r29, 0x00	; 0
     d92:	c0 e0       	ldi	r28, 0x00	; 0
            xprintf(" addr:%d, reg3:%04X\n", addr, reg3);
     d94:	0b e6       	ldi	r16, 0x6B	; 107
     d96:	11 e0       	ldi	r17, 0x01	; 1
        uint16_t reg3 = adb_host_talk(addr, ADB_REG_3);
     d98:	63 e0       	ldi	r22, 0x03	; 3
     d9a:	8c 2f       	mov	r24, r28
     d9c:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <adb_host_talk>
     da0:	9c 01       	movw	r18, r24
        if (reg3) {
     da2:	00 97       	sbiw	r24, 0x00	; 0
     da4:	71 f0       	breq	.+28     	; 0xdc2 <device_scan+0x4a>
            xprintf(" addr:%d, reg3:%04X\n", addr, reg3);
     da6:	3f 93       	push	r19
     da8:	8f 93       	push	r24
     daa:	df 93       	push	r29
     dac:	cf 93       	push	r28
     dae:	1f 93       	push	r17
     db0:	0f 93       	push	r16
     db2:	0e 94 9a 06 	call	0xd34	; 0xd34 <__xprintf>
     db6:	0f 90       	pop	r0
     db8:	0f 90       	pop	r0
     dba:	0f 90       	pop	r0
     dbc:	0f 90       	pop	r0
     dbe:	0f 90       	pop	r0
     dc0:	0f 90       	pop	r0
     dc2:	21 96       	adiw	r28, 0x01	; 1
    for (uint8_t addr = 0; addr < 16; addr++) {
     dc4:	c0 31       	cpi	r28, 0x10	; 16
     dc6:	d1 05       	cpc	r29, r1
     dc8:	39 f7       	brne	.-50     	; 0xd98 <device_scan+0x20>
}
     dca:	df 91       	pop	r29
     dcc:	cf 91       	pop	r28
     dce:	1f 91       	pop	r17
     dd0:	0f 91       	pop	r16
     dd2:	08 95       	ret

00000dd4 <mouse_init.constprop.0>:
static void mouse_init(uint8_t orig_addr)
     dd4:	3f 92       	push	r3
     dd6:	4f 92       	push	r4
     dd8:	5f 92       	push	r5
     dda:	6f 92       	push	r6
     ddc:	7f 92       	push	r7
     dde:	8f 92       	push	r8
     de0:	9f 92       	push	r9
     de2:	af 92       	push	r10
     de4:	bf 92       	push	r11
     de6:	cf 92       	push	r12
     de8:	df 92       	push	r13
     dea:	ef 92       	push	r14
     dec:	ff 92       	push	r15
     dee:	0f 93       	push	r16
     df0:	1f 93       	push	r17
     df2:	cf 93       	push	r28
     df4:	df 93       	push	r29
     df6:	cd b7       	in	r28, 0x3d	; 61
     df8:	de b7       	in	r29, 0x3e	; 62
     dfa:	28 97       	sbiw	r28, 0x08	; 8
     dfc:	0f b6       	in	r0, 0x3f	; 63
     dfe:	f8 94       	cli
     e00:	de bf       	out	0x3e, r29	; 62
     e02:	0f be       	out	0x3f, r0	; 63
     e04:	cd bf       	out	0x3d, r28	; 61
        xprintf("TM5: ext\n");
     e06:	96 e9       	ldi	r25, 0x96	; 150
     e08:	49 2e       	mov	r4, r25
     e0a:	91 e0       	ldi	r25, 0x01	; 1
     e0c:	59 2e       	mov	r5, r25
            xprintf("Unknown\n");
     e0e:	20 ea       	ldi	r18, 0xA0	; 160
     e10:	62 2e       	mov	r6, r18
     e12:	21 e0       	ldi	r18, 0x01	; 1
     e14:	72 2e       	mov	r7, r18
            xprintf("TM5: default\n");
     e16:	39 ea       	ldi	r19, 0xA9	; 169
     e18:	c3 2e       	mov	r12, r19
     e1a:	31 e0       	ldi	r19, 0x01	; 1
     e1c:	d3 2e       	mov	r13, r19
            for (int8_t i = 0; i < len; i++) xprintf("%02X ", buf[i]);
     e1e:	41 ec       	ldi	r20, 0xC1	; 193
     e20:	a4 2e       	mov	r10, r20
     e22:	41 e0       	ldi	r20, 0x01	; 1
     e24:	b4 2e       	mov	r11, r20
    mouse_handler = (reg3  = adb_host_talk(orig_addr, ADB_REG_3)) & 0xFF;
     e26:	63 e0       	ldi	r22, 0x03	; 3
     e28:	83 e0       	ldi	r24, 0x03	; 3
     e2a:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <adb_host_talk>
     e2e:	8c 01       	movw	r16, r24
    if (!reg3) return;
     e30:	89 2b       	or	r24, r25
     e32:	09 f4       	brne	.+2      	; 0xe36 <mouse_init.constprop.0+0x62>
     e34:	4a c1       	rjmp	.+660    	; 0x10ca <mouse_init.constprop.0+0x2f6>
    dmprintf("addr%d reg3: %02X\n", orig_addr, reg3);
     e36:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <debug_config>
     e3a:	83 ff       	sbrs	r24, 3
     e3c:	11 c0       	rjmp	.+34     	; 0xe60 <mouse_init.constprop.0+0x8c>
     e3e:	1f 93       	push	r17
     e40:	0f 93       	push	r16
     e42:	1f 92       	push	r1
     e44:	83 e0       	ldi	r24, 0x03	; 3
     e46:	8f 93       	push	r24
     e48:	8c e0       	ldi	r24, 0x0C	; 12
     e4a:	92 e0       	ldi	r25, 0x02	; 2
     e4c:	9f 93       	push	r25
     e4e:	8f 93       	push	r24
     e50:	0e 94 9a 06 	call	0xd34	; 0xd34 <__xprintf>
     e54:	0f 90       	pop	r0
     e56:	0f 90       	pop	r0
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	0f 90       	pop	r0
     e5e:	0f 90       	pop	r0
    adb_host_flush(orig_addr);
     e60:	83 e0       	ldi	r24, 0x03	; 3
     e62:	0e 94 cd 0c 	call	0x199a	; 0x199a <adb_host_flush>
    adb_host_listen(orig_addr, ADB_REG_3, ((reg3 >> 8) & 0xF0) | ADB_ADDR_TMP, 0xFE);
     e66:	41 2f       	mov	r20, r17
     e68:	4f 60       	ori	r20, 0x0F	; 15
     e6a:	2e ef       	ldi	r18, 0xFE	; 254
     e6c:	63 e0       	ldi	r22, 0x03	; 3
     e6e:	83 e0       	ldi	r24, 0x03	; 3
     e70:	0e 94 bb 0c 	call	0x1976	; 0x1976 <adb_host_listen>
    adb_host_flush(ADB_ADDR_TMP);
     e74:	8f e0       	ldi	r24, 0x0F	; 15
     e76:	0e 94 cd 0c 	call	0x199a	; 0x199a <adb_host_flush>
    mouse_handler = (reg3  = adb_host_talk(ADB_ADDR_TMP, ADB_REG_3)) & 0xFF;
     e7a:	63 e0       	ldi	r22, 0x03	; 3
     e7c:	8f e0       	ldi	r24, 0x0F	; 15
     e7e:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <adb_host_talk>
     e82:	8c 01       	movw	r16, r24
    if (!reg3) {
     e84:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <debug_config>
     e88:	01 15       	cp	r16, r1
     e8a:	11 05       	cpc	r17, r1
     e8c:	59 f4       	brne	.+22     	; 0xea4 <mouse_init.constprop.0+0xd0>
        dmprintf("move fail\n");
     e8e:	83 ff       	sbrs	r24, 3
     e90:	ca cf       	rjmp	.-108    	; 0xe26 <mouse_init.constprop.0+0x52>
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	92 e0       	ldi	r25, 0x02	; 2
     e96:	9f 93       	push	r25
     e98:	8f 93       	push	r24
     e9a:	0e 94 9a 06 	call	0xd34	; 0xd34 <__xprintf>
     e9e:	0f 90       	pop	r0
     ea0:	0f 90       	pop	r0
     ea2:	c1 cf       	rjmp	.-126    	; 0xe26 <mouse_init.constprop.0+0x52>
    dmprintf("addr%d reg3: %02X\n", addr, reg3);
     ea4:	83 ff       	sbrs	r24, 3
     ea6:	11 c0       	rjmp	.+34     	; 0xeca <mouse_init.constprop.0+0xf6>
     ea8:	1f 93       	push	r17
     eaa:	0f 93       	push	r16
     eac:	1f 92       	push	r1
     eae:	8f e0       	ldi	r24, 0x0F	; 15
     eb0:	8f 93       	push	r24
     eb2:	8e ee       	ldi	r24, 0xEE	; 238
     eb4:	91 e0       	ldi	r25, 0x01	; 1
     eb6:	9f 93       	push	r25
     eb8:	8f 93       	push	r24
     eba:	0e 94 9a 06 	call	0xd34	; 0xd34 <__xprintf>
     ebe:	0f 90       	pop	r0
     ec0:	0f 90       	pop	r0
     ec2:	0f 90       	pop	r0
     ec4:	0f 90       	pop	r0
     ec6:	0f 90       	pop	r0
     ec8:	0f 90       	pop	r0
    mouse_handler = (reg3  = adb_host_talk(ADB_ADDR_TMP, ADB_REG_3)) & 0xFF;
     eca:	90 2e       	mov	r9, r16
            mouse_cpi = 100;
     ecc:	84 e6       	ldi	r24, 0x64	; 100
     ece:	e8 2e       	mov	r14, r24
     ed0:	f1 2c       	mov	r15, r1
    if (mouse_handler == ADB_HANDLER_CLASSIC1_MOUSE || mouse_handler == ADB_HANDLER_CLASSIC2_MOUSE) {
     ed2:	8f ef       	ldi	r24, 0xFF	; 255
     ed4:	89 0d       	add	r24, r9
     ed6:	82 30       	cpi	r24, 0x02	; 2
     ed8:	08 f0       	brcs	.+2      	; 0xedc <mouse_init.constprop.0+0x108>
     eda:	64 c0       	rjmp	.+200    	; 0xfa4 <mouse_init.constprop.0+0x1d0>
        adb_host_flush(addr);
     edc:	8f e0       	ldi	r24, 0x0F	; 15
     ede:	0e 94 cd 0c 	call	0x199a	; 0x199a <adb_host_flush>
        adb_host_listen(addr, ADB_REG_3, (reg3 >> 8), ADB_HANDLER_EXTENDED_MOUSE);
     ee2:	24 e0       	ldi	r18, 0x04	; 4
     ee4:	41 2f       	mov	r20, r17
     ee6:	63 e0       	ldi	r22, 0x03	; 3
     ee8:	8f e0       	ldi	r24, 0x0F	; 15
     eea:	0e 94 bb 0c 	call	0x1976	; 0x1976 <adb_host_listen>
        mouse_handler = (reg3  = adb_host_talk(addr, ADB_REG_3)) & 0xFF;
     eee:	63 e0       	ldi	r22, 0x03	; 3
     ef0:	8f e0       	ldi	r24, 0x0F	; 15
     ef2:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <adb_host_talk>
     ef6:	8c 01       	movw	r16, r24
     ef8:	98 2e       	mov	r9, r24
        if (mouse_handler == ADB_HANDLER_CLASSIC1_MOUSE) {
     efa:	21 e0       	ldi	r18, 0x01	; 1
     efc:	82 13       	cpse	r24, r18
     efe:	12 c0       	rjmp	.+36     	; 0xf24 <mouse_init.constprop.0+0x150>
            adb_host_flush(addr);
     f00:	8f e0       	ldi	r24, 0x0F	; 15
     f02:	0e 94 cd 0c 	call	0x199a	; 0x199a <adb_host_flush>
            adb_host_listen(addr, ADB_REG_3, (reg3 >> 8), ADB_HANDLER_CLASSIC2_MOUSE);
     f06:	22 e0       	ldi	r18, 0x02	; 2
     f08:	41 2f       	mov	r20, r17
     f0a:	63 e0       	ldi	r22, 0x03	; 3
     f0c:	8f e0       	ldi	r24, 0x0F	; 15
     f0e:	0e 94 bb 0c 	call	0x1976	; 0x1976 <adb_host_listen>
            mouse_handler = (reg3  = adb_host_talk(addr, ADB_REG_3)) & 0xFF;
     f12:	63 e0       	ldi	r22, 0x03	; 3
     f14:	8f e0       	ldi	r24, 0x0F	; 15
     f16:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <adb_host_talk>
     f1a:	8c 01       	movw	r16, r24
     f1c:	98 2e       	mov	r9, r24
        if (mouse_handler == ADB_HANDLER_CLASSIC1_MOUSE) {
     f1e:	31 e0       	ldi	r19, 0x01	; 1
     f20:	83 17       	cp	r24, r19
     f22:	81 f0       	breq	.+32     	; 0xf44 <mouse_init.constprop.0+0x170>
        if (mouse_handler == ADB_HANDLER_CLASSIC2_MOUSE) {
     f24:	82 e0       	ldi	r24, 0x02	; 2
     f26:	98 12       	cpse	r9, r24
     f28:	3d c0       	rjmp	.+122    	; 0xfa4 <mouse_init.constprop.0+0x1d0>
            xprintf("Classic 200cpi\n");
     f2a:	8e ec       	ldi	r24, 0xCE	; 206
     f2c:	91 e0       	ldi	r25, 0x01	; 1
     f2e:	9f 93       	push	r25
     f30:	8f 93       	push	r24
     f32:	0e 94 9a 06 	call	0xd34	; 0xd34 <__xprintf>
            mouse_cpi = 200;
     f36:	28 ec       	ldi	r18, 0xC8	; 200
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	30 93 13 01 	sts	0x0113, r19	; 0x800113 <mouse_cpi+0x1>
     f3e:	20 93 12 01 	sts	0x0112, r18	; 0x800112 <mouse_cpi>
    if (mouse_handler == ADB_HANDLER_EXTENDED_MOUSE) {
     f42:	0a c0       	rjmp	.+20     	; 0xf58 <mouse_init.constprop.0+0x184>
            xprintf("Classic 100cpi\n");
     f44:	ee ed       	ldi	r30, 0xDE	; 222
     f46:	f1 e0       	ldi	r31, 0x01	; 1
     f48:	ff 93       	push	r31
     f4a:	ef 93       	push	r30
     f4c:	0e 94 9a 06 	call	0xd34	; 0xd34 <__xprintf>
            mouse_cpi = 100;
     f50:	f0 92 13 01 	sts	0x0113, r15	; 0x800113 <mouse_cpi+0x1>
     f54:	e0 92 12 01 	sts	0x0112, r14	; 0x800112 <mouse_cpi>
        adb_host_listen_buf(addr, ADB_REG_2, cmd2, sizeof(cmd2));
     f58:	0f 90       	pop	r0
     f5a:	0f 90       	pop	r0
    adb_host_flush(addr);
     f5c:	8f e0       	ldi	r24, 0x0F	; 15
     f5e:	0e 94 cd 0c 	call	0x199a	; 0x199a <adb_host_flush>
    adb_host_listen(addr, ADB_REG_3, ((reg3 >> 8) & 0xF0) | ADB_ADDR_MOUSE_POLL, 0xFE);
     f62:	41 2f       	mov	r20, r17
     f64:	40 7f       	andi	r20, 0xF0	; 240
     f66:	4a 60       	ori	r20, 0x0A	; 10
     f68:	2e ef       	ldi	r18, 0xFE	; 254
     f6a:	63 e0       	ldi	r22, 0x03	; 3
     f6c:	8f e0       	ldi	r24, 0x0F	; 15
     f6e:	0e 94 bb 0c 	call	0x1976	; 0x1976 <adb_host_listen>
    adb_host_flush(ADB_ADDR_MOUSE_POLL);
     f72:	8a e0       	ldi	r24, 0x0A	; 10
     f74:	0e 94 cd 0c 	call	0x199a	; 0x199a <adb_host_flush>
    mouse_handler = (reg3  = adb_host_talk(addr, ADB_REG_3)) & 0xFF;
     f78:	63 e0       	ldi	r22, 0x03	; 3
     f7a:	8f e0       	ldi	r24, 0x0F	; 15
     f7c:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <adb_host_talk>
     f80:	8c 01       	movw	r16, r24
     f82:	98 2e       	mov	r9, r24
    if (reg3) {
     f84:	89 2b       	or	r24, r25
     f86:	09 f4       	brne	.+2      	; 0xf8a <mouse_init.constprop.0+0x1b6>
     f88:	4e cf       	rjmp	.-356    	; 0xe26 <mouse_init.constprop.0+0x52>
        dmprintf("detect again\n");
     f8a:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <debug_config>
     f8e:	83 ff       	sbrs	r24, 3
     f90:	a0 cf       	rjmp	.-192    	; 0xed2 <mouse_init.constprop.0+0xfe>
     f92:	e8 e8       	ldi	r30, 0x88	; 136
     f94:	f1 e0       	ldi	r31, 0x01	; 1
     f96:	ff 93       	push	r31
     f98:	ef 93       	push	r30
     f9a:	0e 94 9a 06 	call	0xd34	; 0xd34 <__xprintf>
     f9e:	0f 90       	pop	r0
     fa0:	0f 90       	pop	r0
     fa2:	97 cf       	rjmp	.-210    	; 0xed2 <mouse_init.constprop.0+0xfe>
    if (mouse_handler == ADB_HANDLER_EXTENDED_MOUSE) {
     fa4:	34 e0       	ldi	r19, 0x04	; 4
     fa6:	93 12       	cpse	r9, r19
     fa8:	74 c0       	rjmp	.+232    	; 0x1092 <mouse_init.constprop.0+0x2be>
        len = adb_host_talk_buf(addr, ADB_REG_1, buf, sizeof(buf));
     faa:	28 e0       	ldi	r18, 0x08	; 8
     fac:	ae 01       	movw	r20, r28
     fae:	4f 5f       	subi	r20, 0xFF	; 255
     fb0:	5f 4f       	sbci	r21, 0xFF	; 255
     fb2:	61 e0       	ldi	r22, 0x01	; 1
     fb4:	8f e0       	ldi	r24, 0x0F	; 15
     fb6:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <adb_host_talk_buf>
        if (len > 5) {
     fba:	86 30       	cpi	r24, 0x06	; 6
     fbc:	80 f1       	brcs	.+96     	; 0x101e <mouse_init.constprop.0+0x24a>
            mouse_cpi = (buf[4]<<8) | buf[5];
     fbe:	2d 81       	ldd	r18, Y+5	; 0x05
     fc0:	3e 81       	ldd	r19, Y+6	; 0x06
     fc2:	32 27       	eor	r19, r18
     fc4:	23 27       	eor	r18, r19
     fc6:	32 27       	eor	r19, r18
     fc8:	30 93 13 01 	sts	0x0113, r19	; 0x800113 <mouse_cpi+0x1>
     fcc:	20 93 12 01 	sts	0x0112, r18	; 0x800112 <mouse_cpi>
            xprintf("Ext: [", len);
     fd0:	88 2e       	mov	r8, r24
     fd2:	91 2c       	mov	r9, r1
     fd4:	1f 92       	push	r1
     fd6:	8f 93       	push	r24
     fd8:	87 ec       	ldi	r24, 0xC7	; 199
     fda:	91 e0       	ldi	r25, 0x01	; 1
     fdc:	9f 93       	push	r25
     fde:	8f 93       	push	r24
     fe0:	0e 94 9a 06 	call	0xd34	; 0xd34 <__xprintf>
            for (int8_t i = 0; i < len; i++) xprintf("%02X ", buf[i]);
     fe4:	0f 90       	pop	r0
     fe6:	0f 90       	pop	r0
     fe8:	0f 90       	pop	r0
     fea:	0f 90       	pop	r0
     fec:	31 2c       	mov	r3, r1
     fee:	83 2d       	mov	r24, r3
     ff0:	03 2c       	mov	r0, r3
     ff2:	00 0c       	add	r0, r0
     ff4:	99 0b       	sbc	r25, r25
     ff6:	88 15       	cp	r24, r8
     ff8:	99 05       	cpc	r25, r9
     ffa:	94 f1       	brlt	.+100    	; 0x1060 <mouse_init.constprop.0+0x28c>
            xprintf("] cpi=%d\n", mouse_cpi);
     ffc:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <mouse_cpi+0x1>
    1000:	8f 93       	push	r24
    1002:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <mouse_cpi>
    1006:	8f 93       	push	r24
    1008:	27 eb       	ldi	r18, 0xB7	; 183
    100a:	31 e0       	ldi	r19, 0x01	; 1
    100c:	3f 93       	push	r19
    100e:	2f 93       	push	r18
    1010:	0e 94 9a 06 	call	0xd34	; 0xd34 <__xprintf>
    1014:	0f 90       	pop	r0
    1016:	0f 90       	pop	r0
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	06 c0       	rjmp	.+12     	; 0x102a <mouse_init.constprop.0+0x256>
            mouse_cpi = 100;
    101e:	f0 92 13 01 	sts	0x0113, r15	; 0x800113 <mouse_cpi+0x1>
    1022:	e0 92 12 01 	sts	0x0112, r14	; 0x800112 <mouse_cpi>
        if (len) {
    1026:	81 11       	cpse	r24, r1
    1028:	d3 cf       	rjmp	.-90     	; 0xfd0 <mouse_init.constprop.0+0x1fc>
        if (buf[0] == 0x4B && buf[1] == 0x4D && buf[2] == 0x4C && buf[3] == 0x31) {
    102a:	89 81       	ldd	r24, Y+1	; 0x01
    102c:	8b 34       	cpi	r24, 0x4B	; 75
    102e:	61 f5       	brne	.+88     	; 0x1088 <mouse_init.constprop.0+0x2b4>
    1030:	8a 81       	ldd	r24, Y+2	; 0x02
    1032:	8d 34       	cpi	r24, 0x4D	; 77
    1034:	49 f5       	brne	.+82     	; 0x1088 <mouse_init.constprop.0+0x2b4>
    1036:	8b 81       	ldd	r24, Y+3	; 0x03
    1038:	8c 34       	cpi	r24, 0x4C	; 76
    103a:	31 f5       	brne	.+76     	; 0x1088 <mouse_init.constprop.0+0x2b4>
    103c:	8c 81       	ldd	r24, Y+4	; 0x04
    103e:	81 33       	cpi	r24, 0x31	; 49
    1040:	19 f5       	brne	.+70     	; 0x1088 <mouse_init.constprop.0+0x2b4>
            xprintf("TM5: default\n");
    1042:	df 92       	push	r13
    1044:	cf 92       	push	r12
    1046:	0e 94 9a 06 	call	0xd34	; 0xd34 <__xprintf>
            adb_host_flush(addr);
    104a:	8f e0       	ldi	r24, 0x0F	; 15
    104c:	0e 94 cd 0c 	call	0x199a	; 0x199a <adb_host_flush>
            adb_host_listen(addr, ADB_REG_3, ((reg3 >> 8) & 0xF0) | ADB_ADDR_0, 0xFE);
    1050:	2e ef       	ldi	r18, 0xFE	; 254
    1052:	41 2f       	mov	r20, r17
    1054:	40 7f       	andi	r20, 0xF0	; 240
    1056:	63 e0       	ldi	r22, 0x03	; 3
    1058:	8f e0       	ldi	r24, 0x0F	; 15
    105a:	0e 94 bb 0c 	call	0x1976	; 0x1976 <adb_host_listen>
    105e:	7c cf       	rjmp	.-264    	; 0xf58 <mouse_init.constprop.0+0x184>
            for (int8_t i = 0; i < len; i++) xprintf("%02X ", buf[i]);
    1060:	21 e0       	ldi	r18, 0x01	; 1
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	2c 0f       	add	r18, r28
    1066:	3d 1f       	adc	r19, r29
    1068:	82 0f       	add	r24, r18
    106a:	93 1f       	adc	r25, r19
    106c:	fc 01       	movw	r30, r24
    106e:	80 81       	ld	r24, Z
    1070:	1f 92       	push	r1
    1072:	8f 93       	push	r24
    1074:	bf 92       	push	r11
    1076:	af 92       	push	r10
    1078:	0e 94 9a 06 	call	0xd34	; 0xd34 <__xprintf>
    107c:	33 94       	inc	r3
    107e:	0f 90       	pop	r0
    1080:	0f 90       	pop	r0
    1082:	0f 90       	pop	r0
    1084:	0f 90       	pop	r0
    1086:	b3 cf       	rjmp	.-154    	; 0xfee <mouse_init.constprop.0+0x21a>
            xprintf("Unknown\n");
    1088:	7f 92       	push	r7
    108a:	6f 92       	push	r6
    108c:	0e 94 9a 06 	call	0xd34	; 0xd34 <__xprintf>
    1090:	63 cf       	rjmp	.-314    	; 0xf58 <mouse_init.constprop.0+0x184>
    if (mouse_handler == ADB_HANDLER_TURBO_MOUSE) {
    1092:	92 e3       	ldi	r25, 0x32	; 50
    1094:	99 12       	cpse	r9, r25
    1096:	62 cf       	rjmp	.-316    	; 0xf5c <mouse_init.constprop.0+0x188>
        xprintf("TM5: ext\n");
    1098:	5f 92       	push	r5
    109a:	4f 92       	push	r4
    109c:	0e 94 9a 06 	call	0xd34	; 0xd34 <__xprintf>
        adb_host_flush(addr);
    10a0:	8f e0       	ldi	r24, 0x0F	; 15
    10a2:	0e 94 cd 0c 	call	0x199a	; 0x199a <adb_host_flush>
        adb_host_listen_buf(addr, ADB_REG_2, cmd1, sizeof(cmd1));
    10a6:	28 e0       	ldi	r18, 0x08	; 8
    10a8:	4a e0       	ldi	r20, 0x0A	; 10
    10aa:	51 e0       	ldi	r21, 0x01	; 1
    10ac:	62 e0       	ldi	r22, 0x02	; 2
    10ae:	8f e0       	ldi	r24, 0x0F	; 15
    10b0:	0e 94 83 0c 	call	0x1906	; 0x1906 <adb_host_listen_buf>
        adb_host_flush(addr);
    10b4:	8f e0       	ldi	r24, 0x0F	; 15
    10b6:	0e 94 cd 0c 	call	0x199a	; 0x199a <adb_host_flush>
        adb_host_listen_buf(addr, ADB_REG_2, cmd2, sizeof(cmd2));
    10ba:	28 e0       	ldi	r18, 0x08	; 8
    10bc:	42 e0       	ldi	r20, 0x02	; 2
    10be:	51 e0       	ldi	r21, 0x01	; 1
    10c0:	62 e0       	ldi	r22, 0x02	; 2
    10c2:	8f e0       	ldi	r24, 0x0F	; 15
    10c4:	0e 94 83 0c 	call	0x1906	; 0x1906 <adb_host_listen_buf>
    10c8:	47 cf       	rjmp	.-370    	; 0xf58 <mouse_init.constprop.0+0x184>
}
    10ca:	28 96       	adiw	r28, 0x08	; 8
    10cc:	0f b6       	in	r0, 0x3f	; 63
    10ce:	f8 94       	cli
    10d0:	de bf       	out	0x3e, r29	; 62
    10d2:	0f be       	out	0x3f, r0	; 63
    10d4:	cd bf       	out	0x3d, r28	; 61
    10d6:	df 91       	pop	r29
    10d8:	cf 91       	pop	r28
    10da:	1f 91       	pop	r17
    10dc:	0f 91       	pop	r16
    10de:	ff 90       	pop	r15
    10e0:	ef 90       	pop	r14
    10e2:	df 90       	pop	r13
    10e4:	cf 90       	pop	r12
    10e6:	bf 90       	pop	r11
    10e8:	af 90       	pop	r10
    10ea:	9f 90       	pop	r9
    10ec:	8f 90       	pop	r8
    10ee:	7f 90       	pop	r7
    10f0:	6f 90       	pop	r6
    10f2:	5f 90       	pop	r5
    10f4:	4f 90       	pop	r4
    10f6:	3f 90       	pop	r3
    10f8:	08 95       	ret

000010fa <adb_mouse_task>:
{
    10fa:	9f 92       	push	r9
    10fc:	af 92       	push	r10
    10fe:	bf 92       	push	r11
    1100:	cf 92       	push	r12
    1102:	df 92       	push	r13
    1104:	ef 92       	push	r14
    1106:	ff 92       	push	r15
    1108:	0f 93       	push	r16
    110a:	1f 93       	push	r17
    110c:	cf 93       	push	r28
    110e:	df 93       	push	r29
    1110:	00 d0       	rcall	.+0      	; 0x1112 <adb_mouse_task+0x18>
    1112:	00 d0       	rcall	.+0      	; 0x1114 <adb_mouse_task+0x1a>
    1114:	0f 92       	push	r0
    1116:	cd b7       	in	r28, 0x3d	; 61
    1118:	de b7       	in	r29, 0x3e	; 62
    if (timer_elapsed(tick_ms) < 12) return;
    111a:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <tick_ms.2348>
    111e:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <tick_ms.2348+0x1>
    1122:	0e 94 01 23 	call	0x4602	; 0x4602 <timer_elapsed>
    1126:	0c 97       	sbiw	r24, 0x0c	; 12
    1128:	08 f4       	brcc	.+2      	; 0x112c <adb_mouse_task+0x32>
    112a:	20 c1       	rjmp	.+576    	; 0x136c <adb_mouse_task+0x272>
    tick_ms = timer_read();
    112c:	0e 94 d5 22 	call	0x45aa	; 0x45aa <timer_read>
    1130:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <tick_ms.2348+0x1>
    1134:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <tick_ms.2348>
    if (timer_elapsed(detect_ms) > 1000) {
    1138:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <detect_ms.2349>
    113c:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <detect_ms.2349+0x1>
    1140:	0e 94 01 23 	call	0x4602	; 0x4602 <timer_elapsed>
    1144:	89 3e       	cpi	r24, 0xE9	; 233
    1146:	93 40       	sbci	r25, 0x03	; 3
    1148:	40 f0       	brcs	.+16     	; 0x115a <adb_mouse_task+0x60>
        detect_ms = timer_read();
    114a:	0e 94 d5 22 	call	0x45aa	; 0x45aa <timer_read>
    114e:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <detect_ms.2349+0x1>
    1152:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <detect_ms.2349>
        mouse_init(ADB_ADDR_MOUSE);
    1156:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <mouse_init.constprop.0>
    len = adb_host_talk_buf(ADB_ADDR_MOUSE_POLL, ADB_REG_0, buf, sizeof(buf));
    115a:	25 e0       	ldi	r18, 0x05	; 5
    115c:	ae 01       	movw	r20, r28
    115e:	4f 5f       	subi	r20, 0xFF	; 255
    1160:	5f 4f       	sbci	r21, 0xFF	; 255
    1162:	60 e0       	ldi	r22, 0x00	; 0
    1164:	8a e0       	ldi	r24, 0x0A	; 10
    1166:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <adb_host_talk_buf>
    116a:	a8 2e       	mov	r10, r24
    if (len < 2) {
    116c:	31 e0       	ldi	r19, 0x01	; 1
        mouseacc = 1;
    116e:	81 e0       	ldi	r24, 0x01	; 1
    if (len < 2) {
    1170:	3a 15       	cp	r19, r10
    1172:	08 f0       	brcs	.+2      	; 0x1176 <adb_mouse_task+0x7c>
    1174:	f9 c0       	rjmp	.+498    	; 0x1368 <adb_mouse_task+0x26e>
    if (len == 2) {
    1176:	b9 81       	ldd	r27, Y+1	; 0x01
    1178:	aa 81       	ldd	r26, Y+2	; 0x02
    117a:	82 e0       	ldi	r24, 0x02	; 2
        if (buf[0] & 0x40) yneg = true;
    117c:	b6 fb       	bst	r27, 6
    117e:	44 27       	eor	r20, r20
    1180:	40 f9       	bld	r20, 0
        if (buf[1] & 0x40) xneg = true;
    1182:	a6 fb       	bst	r26, 6
    1184:	22 27       	eor	r18, r18
    1186:	20 f9       	bld	r18, 0
    if (len == 2) {
    1188:	a8 16       	cp	r10, r24
    118a:	51 f0       	breq	.+20     	; 0x11a0 <adb_mouse_task+0xa6>
        if (buf[len - 1] & 0x40) yneg = true;
    118c:	fe 01       	movw	r30, r28
    118e:	ea 0d       	add	r30, r10
    1190:	f1 1d       	adc	r31, r1
    1192:	20 81       	ld	r18, Z
    1194:	26 fb       	bst	r18, 6
    1196:	44 27       	eor	r20, r20
    1198:	40 f9       	bld	r20, 0
        if (buf[len - 1] & 0x04) xneg = true;
    119a:	22 fb       	bst	r18, 2
    119c:	22 27       	eor	r18, r18
    119e:	20 f9       	bld	r18, 0
    for (int8_t i = len; i < sizeof(buf); i++) {
    11a0:	3a 2d       	mov	r19, r10
        if (yneg) buf[i] |= 0x70;
    11a2:	58 ef       	ldi	r21, 0xF8	; 248
        buf[i] = 0x88;
    11a4:	68 e8       	ldi	r22, 0x88	; 136
    for (int8_t i = len; i < sizeof(buf); i++) {
    11a6:	35 30       	cpi	r19, 0x05	; 5
    11a8:	08 f4       	brcc	.+2      	; 0x11ac <adb_mouse_task+0xb2>
    11aa:	f1 c0       	rjmp	.+482    	; 0x138e <adb_mouse_task+0x294>
    if (!(buf[4] & 0x08)) buttons |= MOUSE_BTN8;
    11ac:	8d 81       	ldd	r24, Y+5	; 0x05
    11ae:	08 2f       	mov	r16, r24
    11b0:	10 e0       	ldi	r17, 0x00	; 0
    11b2:	90 e8       	ldi	r25, 0x80	; 128
    11b4:	83 fd       	sbrc	r24, 3
    uint8_t buttons = 0;
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    if (!(buf[4] & 0x80)) buttons |= MOUSE_BTN7;
    11b8:	87 ff       	sbrs	r24, 7
    11ba:	90 64       	ori	r25, 0x40	; 64
    if (!(buf[3] & 0x08)) buttons |= MOUSE_BTN6;
    11bc:	8c 81       	ldd	r24, Y+4	; 0x04
    11be:	48 2f       	mov	r20, r24
    11c0:	50 e0       	ldi	r21, 0x00	; 0
    11c2:	83 ff       	sbrs	r24, 3
    11c4:	90 62       	ori	r25, 0x20	; 32
    if (!(buf[3] & 0x80)) buttons |= MOUSE_BTN5;
    11c6:	87 ff       	sbrs	r24, 7
    11c8:	90 61       	ori	r25, 0x10	; 16
    if (!(buf[2] & 0x08)) buttons |= MOUSE_BTN4;
    11ca:	8b 81       	ldd	r24, Y+3	; 0x03
    11cc:	68 2f       	mov	r22, r24
    11ce:	70 e0       	ldi	r23, 0x00	; 0
    11d0:	83 ff       	sbrs	r24, 3
    11d2:	98 60       	ori	r25, 0x08	; 8
    if (!(buf[2] & 0x80)) buttons |= MOUSE_BTN3;
    11d4:	87 ff       	sbrs	r24, 7
    11d6:	94 60       	ori	r25, 0x04	; 4
    if (!(buf[1] & 0x80)) buttons |= MOUSE_BTN2;
    11d8:	a7 ff       	sbrs	r26, 7
    11da:	92 60       	ori	r25, 0x02	; 2
    if (!(buf[0] & 0x80)) buttons |= MOUSE_BTN1;
    11dc:	b7 ff       	sbrs	r27, 7
    11de:	91 60       	ori	r25, 0x01	; 1
    mouse_report.buttons = buttons;
    11e0:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <mouse_report>
    yy = (buf[0] & 0x7F) | (buf[2] & 0x70) << 3 | (buf[3] & 0x70) << 6 | (buf[4] & 0x70) << 9;
    11e4:	7b 01       	movw	r14, r22
    11e6:	93 e0       	ldi	r25, 0x03	; 3
    11e8:	ee 0c       	add	r14, r14
    11ea:	ff 1c       	adc	r15, r15
    11ec:	9a 95       	dec	r25
    11ee:	e1 f7       	brne	.-8      	; 0x11e8 <adb_mouse_task+0xee>
    11f0:	90 e8       	ldi	r25, 0x80	; 128
    11f2:	e9 22       	and	r14, r25
    11f4:	93 e0       	ldi	r25, 0x03	; 3
    11f6:	f9 22       	and	r15, r25
    11f8:	ca 01       	movw	r24, r20
    11fa:	26 e0       	ldi	r18, 0x06	; 6
    11fc:	88 0f       	add	r24, r24
    11fe:	99 1f       	adc	r25, r25
    1200:	2a 95       	dec	r18
    1202:	e1 f7       	brne	.-8      	; 0x11fc <adb_mouse_task+0x102>
    1204:	88 27       	eor	r24, r24
    1206:	9c 71       	andi	r25, 0x1C	; 28
    1208:	e8 2a       	or	r14, r24
    120a:	f9 2a       	or	r15, r25
    120c:	bf 77       	andi	r27, 0x7F	; 127
    120e:	eb 2a       	or	r14, r27
    1210:	c8 01       	movw	r24, r16
    1212:	98 2f       	mov	r25, r24
    1214:	88 27       	eor	r24, r24
    1216:	99 0f       	add	r25, r25
    1218:	88 27       	eor	r24, r24
    121a:	90 7e       	andi	r25, 0xE0	; 224
    121c:	e8 2a       	or	r14, r24
    121e:	f9 2a       	or	r15, r25
    xx = (buf[1] & 0x7F) | (buf[2] & 0x07) << 7 | (buf[3] & 0x07) << 10 | (buf[4] & 0x07) << 13;
    1220:	af 77       	andi	r26, 0x7F	; 127
    1222:	10 2f       	mov	r17, r16
    1224:	00 27       	eor	r16, r16
    1226:	12 95       	swap	r17
    1228:	11 0f       	add	r17, r17
    122a:	10 7e       	andi	r17, 0xE0	; 224
    122c:	0a 2b       	or	r16, r26
    122e:	76 95       	lsr	r23
    1230:	76 2f       	mov	r23, r22
    1232:	66 27       	eor	r22, r22
    1234:	77 95       	ror	r23
    1236:	67 95       	ror	r22
    1238:	60 78       	andi	r22, 0x80	; 128
    123a:	73 70       	andi	r23, 0x03	; 3
    123c:	06 2b       	or	r16, r22
    123e:	17 2b       	or	r17, r23
    1240:	54 2f       	mov	r21, r20
    1242:	44 27       	eor	r20, r20
    1244:	55 0f       	add	r21, r21
    1246:	55 0f       	add	r21, r21
    1248:	44 27       	eor	r20, r20
    124a:	5c 71       	andi	r21, 0x1C	; 28
    124c:	04 2b       	or	r16, r20
    124e:	15 2b       	or	r17, r21
    x = xx * mouseacc;
    1250:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <mouseacc.2347>
    1254:	02 2e       	mov	r0, r18
    1256:	00 0c       	add	r0, r0
    1258:	33 0b       	sbc	r19, r19
    125a:	c9 01       	movw	r24, r18
    125c:	b8 01       	movw	r22, r16
    125e:	0e 94 7e 2b 	call	0x56fc	; 0x56fc <__mulhi3>
    1262:	fc 01       	movw	r30, r24
    y = yy * mouseacc;
    1264:	c9 01       	movw	r24, r18
    1266:	b7 01       	movw	r22, r14
    1268:	0e 94 7e 2b 	call	0x56fc	; 0x56fc <__mulhi3>
    126c:	9c 01       	movw	r18, r24
    mouse_report.x = -MAX(-MAX(x, -127), -127);
    126e:	ef 37       	cpi	r30, 0x7F	; 127
    1270:	f1 05       	cpc	r31, r1
    1272:	0c f0       	brlt	.+2      	; 0x1276 <adb_mouse_task+0x17c>
    1274:	a8 c0       	rjmp	.+336    	; 0x13c6 <adb_mouse_task+0x2cc>
    1276:	e1 38       	cpi	r30, 0x81	; 129
    1278:	8f ef       	ldi	r24, 0xFF	; 255
    127a:	f8 07       	cpc	r31, r24
    127c:	14 f4       	brge	.+4      	; 0x1282 <adb_mouse_task+0x188>
    127e:	e1 e8       	ldi	r30, 0x81	; 129
    1280:	ff ef       	ldi	r31, 0xFF	; 255
    1282:	e0 93 5c 01 	sts	0x015C, r30	; 0x80015c <mouse_report+0x1>
    mouse_report.y = -MAX(-MAX(y, -127), -127);
    1286:	2f 37       	cpi	r18, 0x7F	; 127
    1288:	31 05       	cpc	r19, r1
    128a:	0c f0       	brlt	.+2      	; 0x128e <adb_mouse_task+0x194>
    128c:	9e c0       	rjmp	.+316    	; 0x13ca <adb_mouse_task+0x2d0>
    128e:	21 38       	cpi	r18, 0x81	; 129
    1290:	9f ef       	ldi	r25, 0xFF	; 255
    1292:	39 07       	cpc	r19, r25
    1294:	14 f4       	brge	.+4      	; 0x129a <adb_mouse_task+0x1a0>
    1296:	21 e8       	ldi	r18, 0x81	; 129
    1298:	3f ef       	ldi	r19, 0xFF	; 255
    129a:	20 93 5d 01 	sts	0x015D, r18	; 0x80015d <mouse_report+0x2>
    if (debug_mouse) {
    129e:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <debug_config>
    12a2:	83 ff       	sbrs	r24, 3
    12a4:	47 c0       	rjmp	.+142    	; 0x1334 <adb_mouse_task+0x23a>
        xprintf("Mouse: [");
    12a6:	82 e6       	ldi	r24, 0x62	; 98
    12a8:	91 e0       	ldi	r25, 0x01	; 1
    12aa:	9f 93       	push	r25
    12ac:	8f 93       	push	r24
    12ae:	0e 94 9a 06 	call	0xd34	; 0xd34 <__xprintf>
        for (int8_t i = 0; i < len; i++) xprintf("%02X ", buf[i]);
    12b2:	0f 90       	pop	r0
    12b4:	0f 90       	pop	r0
    12b6:	91 2c       	mov	r9, r1
    12b8:	b1 2c       	mov	r11, r1
    12ba:	8c e5       	ldi	r24, 0x5C	; 92
    12bc:	c8 2e       	mov	r12, r24
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	d8 2e       	mov	r13, r24
    12c2:	89 2d       	mov	r24, r9
    12c4:	09 2c       	mov	r0, r9
    12c6:	00 0c       	add	r0, r0
    12c8:	99 0b       	sbc	r25, r25
    12ca:	8a 15       	cp	r24, r10
    12cc:	9b 05       	cpc	r25, r11
    12ce:	0c f4       	brge	.+2      	; 0x12d2 <adb_mouse_task+0x1d8>
    12d0:	7e c0       	rjmp	.+252    	; 0x13ce <adb_mouse_task+0x2d4>
        xprintf("] ");
    12d2:	89 e5       	ldi	r24, 0x59	; 89
    12d4:	91 e0       	ldi	r25, 0x01	; 1
    12d6:	9f 93       	push	r25
    12d8:	8f 93       	push	r24
    12da:	0e 94 9a 06 	call	0xd34	; 0xd34 <__xprintf>
        xprintf("[B:%02X, X:%d(%d), Y:%d(%d), A:%d]\n", mouse_report.buttons, mouse_report.x, xx, mouse_report.y, yy, mouseacc);
    12de:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <mouseacc.2347>
    12e2:	28 2f       	mov	r18, r24
    12e4:	08 2e       	mov	r0, r24
    12e6:	00 0c       	add	r0, r0
    12e8:	33 0b       	sbc	r19, r19
    12ea:	3f 93       	push	r19
    12ec:	8f 93       	push	r24
    12ee:	ff 92       	push	r15
    12f0:	ef 92       	push	r14
    12f2:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <mouse_report+0x2>
    12f6:	28 2f       	mov	r18, r24
    12f8:	08 2e       	mov	r0, r24
    12fa:	00 0c       	add	r0, r0
    12fc:	33 0b       	sbc	r19, r19
    12fe:	3f 93       	push	r19
    1300:	8f 93       	push	r24
    1302:	1f 93       	push	r17
    1304:	0f 93       	push	r16
    1306:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <mouse_report+0x1>
    130a:	28 2f       	mov	r18, r24
    130c:	08 2e       	mov	r0, r24
    130e:	00 0c       	add	r0, r0
    1310:	33 0b       	sbc	r19, r19
    1312:	3f 93       	push	r19
    1314:	8f 93       	push	r24
    1316:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <mouse_report>
    131a:	1f 92       	push	r1
    131c:	8f 93       	push	r24
    131e:	85 e3       	ldi	r24, 0x35	; 53
    1320:	91 e0       	ldi	r25, 0x01	; 1
    1322:	9f 93       	push	r25
    1324:	8f 93       	push	r24
    1326:	0e 94 9a 06 	call	0xd34	; 0xd34 <__xprintf>
    132a:	0f b6       	in	r0, 0x3f	; 63
    132c:	f8 94       	cli
    132e:	de bf       	out	0x3e, r29	; 62
    1330:	0f be       	out	0x3f, r0	; 63
    1332:	cd bf       	out	0x3d, r28	; 61
    host_mouse_send(&mouse_report);
    1334:	8b e5       	ldi	r24, 0x5B	; 91
    1336:	91 e0       	ldi	r25, 0x01	; 1
    1338:	0e 94 d6 14 	call	0x29ac	; 0x29ac <host_mouse_send>
    mouseacc += ( mouseacc < (mouse_cpi < 200 ? ADB_MOUSE_MAXACC : ADB_MOUSE_MAXACC/2) ? 1 : 0 );
    133c:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <mouseacc.2347>
    1340:	49 2f       	mov	r20, r25
    1342:	09 2e       	mov	r0, r25
    1344:	00 0c       	add	r0, r0
    1346:	55 0b       	sbc	r21, r21
    1348:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <mouse_cpi>
    134c:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <mouse_cpi+0x1>
    1350:	28 3c       	cpi	r18, 0xC8	; 200
    1352:	31 05       	cpc	r19, r1
    1354:	08 f4       	brcc	.+2      	; 0x1358 <adb_mouse_task+0x25e>
    1356:	4f c0       	rjmp	.+158    	; 0x13f6 <adb_mouse_task+0x2fc>
    1358:	24 e0       	ldi	r18, 0x04	; 4
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	42 17       	cp	r20, r18
    1360:	53 07       	cpc	r21, r19
    1362:	0c f0       	brlt	.+2      	; 0x1366 <adb_mouse_task+0x26c>
    1364:	80 e0       	ldi	r24, 0x00	; 0
    1366:	89 0f       	add	r24, r25
    1368:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <mouseacc.2347>
}
    136c:	0f 90       	pop	r0
    136e:	0f 90       	pop	r0
    1370:	0f 90       	pop	r0
    1372:	0f 90       	pop	r0
    1374:	0f 90       	pop	r0
    1376:	df 91       	pop	r29
    1378:	cf 91       	pop	r28
    137a:	1f 91       	pop	r17
    137c:	0f 91       	pop	r16
    137e:	ff 90       	pop	r15
    1380:	ef 90       	pop	r14
    1382:	df 90       	pop	r13
    1384:	cf 90       	pop	r12
    1386:	bf 90       	pop	r11
    1388:	af 90       	pop	r10
    138a:	9f 90       	pop	r9
    138c:	08 95       	ret
        buf[i] = 0x88;
    138e:	83 2f       	mov	r24, r19
    1390:	03 2e       	mov	r0, r19
    1392:	00 0c       	add	r0, r0
    1394:	99 0b       	sbc	r25, r25
        if (yneg) buf[i] |= 0x70;
    1396:	e1 e0       	ldi	r30, 0x01	; 1
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	ec 0f       	add	r30, r28
    139c:	fd 1f       	adc	r31, r29
    139e:	e8 0f       	add	r30, r24
    13a0:	f9 1f       	adc	r31, r25
    13a2:	41 11       	cpse	r20, r1
    13a4:	0e c0       	rjmp	.+28     	; 0x13c2 <adb_mouse_task+0x2c8>
        buf[i] = 0x88;
    13a6:	60 83       	st	Z, r22
        if (xneg) buf[i] |= 0x07;
    13a8:	22 23       	and	r18, r18
    13aa:	49 f0       	breq	.+18     	; 0x13be <adb_mouse_task+0x2c4>
    13ac:	e1 e0       	ldi	r30, 0x01	; 1
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	ec 0f       	add	r30, r28
    13b2:	fd 1f       	adc	r31, r29
    13b4:	e8 0f       	add	r30, r24
    13b6:	f9 1f       	adc	r31, r25
    13b8:	80 81       	ld	r24, Z
    13ba:	87 60       	ori	r24, 0x07	; 7
    13bc:	80 83       	st	Z, r24
    13be:	3f 5f       	subi	r19, 0xFF	; 255
    13c0:	f2 ce       	rjmp	.-540    	; 0x11a6 <adb_mouse_task+0xac>
        if (yneg) buf[i] |= 0x70;
    13c2:	50 83       	st	Z, r21
    13c4:	f1 cf       	rjmp	.-30     	; 0x13a8 <adb_mouse_task+0x2ae>
    mouse_report.x = -MAX(-MAX(x, -127), -127);
    13c6:	ef e7       	ldi	r30, 0x7F	; 127
    13c8:	5c cf       	rjmp	.-328    	; 0x1282 <adb_mouse_task+0x188>
    mouse_report.y = -MAX(-MAX(y, -127), -127);
    13ca:	2f e7       	ldi	r18, 0x7F	; 127
    13cc:	66 cf       	rjmp	.-308    	; 0x129a <adb_mouse_task+0x1a0>
        for (int8_t i = 0; i < len; i++) xprintf("%02X ", buf[i]);
    13ce:	e1 e0       	ldi	r30, 0x01	; 1
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	ec 0f       	add	r30, r28
    13d4:	fd 1f       	adc	r31, r29
    13d6:	8e 0f       	add	r24, r30
    13d8:	9f 1f       	adc	r25, r31
    13da:	fc 01       	movw	r30, r24
    13dc:	80 81       	ld	r24, Z
    13de:	1f 92       	push	r1
    13e0:	8f 93       	push	r24
    13e2:	df 92       	push	r13
    13e4:	cf 92       	push	r12
    13e6:	0e 94 9a 06 	call	0xd34	; 0xd34 <__xprintf>
    13ea:	93 94       	inc	r9
    13ec:	0f 90       	pop	r0
    13ee:	0f 90       	pop	r0
    13f0:	0f 90       	pop	r0
    13f2:	0f 90       	pop	r0
    13f4:	66 cf       	rjmp	.-308    	; 0x12c2 <adb_mouse_task+0x1c8>
    mouseacc += ( mouseacc < (mouse_cpi < 200 ? ADB_MOUSE_MAXACC : ADB_MOUSE_MAXACC/2) ? 1 : 0 );
    13f6:	28 e0       	ldi	r18, 0x08	; 8
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	b0 cf       	rjmp	.-160    	; 0x135c <adb_mouse_task+0x262>

000013fc <matrix_scan>:
{
    13fc:	1f 93       	push	r17
    13fe:	cf 93       	push	r28
    1400:	df 93       	push	r29
    codes = extra_key;
    1402:	c0 91 00 01 	lds	r28, 0x0100	; 0x800100 <__data_start>
    1406:	d0 91 01 01 	lds	r29, 0x0101	; 0x800101 <__data_start+0x1>
    extra_key = 0xFFFF;
    140a:	8f ef       	ldi	r24, 0xFF	; 255
    140c:	9f ef       	ldi	r25, 0xFF	; 255
    140e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    1412:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    if ( codes == 0xFFFF )
    1416:	cf 3f       	cpi	r28, 0xFF	; 255
    1418:	dc 07       	cpc	r29, r28
    141a:	09 f0       	breq	.+2      	; 0x141e <matrix_scan+0x22>
    141c:	6d c0       	rjmp	.+218    	; 0x14f8 <matrix_scan+0xfc>
        if (timer_elapsed(tick_ms) < 12) return 0;
    141e:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <tick_ms.2378>
    1422:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <tick_ms.2378+0x1>
    1426:	0e 94 01 23 	call	0x4602	; 0x4602 <timer_elapsed>
    142a:	0c 97       	sbiw	r24, 0x0c	; 12
    142c:	28 f4       	brcc	.+10     	; 0x1438 <matrix_scan+0x3c>
    142e:	80 e0       	ldi	r24, 0x00	; 0
}
    1430:	df 91       	pop	r29
    1432:	cf 91       	pop	r28
    1434:	1f 91       	pop	r17
    1436:	08 95       	ret
        tick_ms = timer_read();
    1438:	0e 94 d5 22 	call	0x45aa	; 0x45aa <timer_read>
    143c:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <tick_ms.2378+0x1>
    1440:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <tick_ms.2378>
        codes = adb_host_kbd_recv(ADB_ADDR_KEYBOARD);
    1444:	82 e0       	ldi	r24, 0x02	; 2
    1446:	0e 94 80 0c 	call	0x1900	; 0x1900 <adb_host_kbd_recv>
    144a:	ec 01       	movw	r28, r24
        if (codes == 0 && has_media_keys &&
    144c:	89 2b       	or	r24, r25
    144e:	09 f0       	breq	.+2      	; 0x1452 <matrix_scan+0x56>
    1450:	53 c0       	rjmp	.+166    	; 0x14f8 <matrix_scan+0xfc>
    1452:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <has_media_keys>
    1456:	88 23       	and	r24, r24
    1458:	09 f4       	brne	.+2      	; 0x145c <matrix_scan+0x60>
    145a:	4e c0       	rjmp	.+156    	; 0x14f8 <matrix_scan+0xfc>
                (codes = adb_host_kbd_recv(ADB_ADDR_APPLIANCE))) {
    145c:	87 e0       	ldi	r24, 0x07	; 7
    145e:	0e 94 80 0c 	call	0x1900	; 0x1900 <adb_host_kbd_recv>
    1462:	9c 01       	movw	r18, r24
        if (codes == 0 && has_media_keys &&
    1464:	00 97       	sbiw	r24, 0x00	; 0
    1466:	09 f4       	brne	.+2      	; 0x146a <matrix_scan+0x6e>
    1468:	47 c0       	rjmp	.+142    	; 0x14f8 <matrix_scan+0xfc>
            switch (codes & 0x7f ) {
    146a:	8f 77       	andi	r24, 0x7F	; 127
    146c:	99 27       	eor	r25, r25
    146e:	82 30       	cpi	r24, 0x02	; 2
    1470:	91 05       	cpc	r25, r1
    1472:	99 f1       	breq	.+102    	; 0x14da <matrix_scan+0xde>
    1474:	70 f4       	brcc	.+28     	; 0x1492 <matrix_scan+0x96>
    1476:	00 97       	sbiw	r24, 0x00	; 0
    1478:	51 f1       	breq	.+84     	; 0x14ce <matrix_scan+0xd2>
    147a:	01 97       	sbiw	r24, 0x01	; 1
    147c:	59 f1       	breq	.+86     	; 0x14d4 <matrix_scan+0xd8>
                xprintf("ERROR: media key1\n");
    147e:	82 e2       	ldi	r24, 0x22	; 34
    1480:	91 e0       	ldi	r25, 0x01	; 1
    1482:	9f 93       	push	r25
    1484:	8f 93       	push	r24
    1486:	0e 94 9a 06 	call	0xd34	; 0xd34 <__xprintf>
                return 0x11;
    148a:	0f 90       	pop	r0
    148c:	0f 90       	pop	r0
    148e:	81 e1       	ldi	r24, 0x11	; 17
    1490:	cf cf       	rjmp	.-98     	; 0x1430 <matrix_scan+0x34>
            switch (codes & 0x7f ) {
    1492:	83 30       	cpi	r24, 0x03	; 3
    1494:	91 05       	cpc	r25, r1
    1496:	21 f1       	breq	.+72     	; 0x14e0 <matrix_scan+0xe4>
    1498:	8f 37       	cpi	r24, 0x7F	; 127
    149a:	91 05       	cpc	r25, r1
    149c:	81 f7       	brne	.-32     	; 0x147e <matrix_scan+0x82>
            switch ((codes >> 8) & 0x7f ) {
    149e:	83 2f       	mov	r24, r19
    14a0:	99 27       	eor	r25, r25
    14a2:	8f 77       	andi	r24, 0x7F	; 127
    14a4:	99 27       	eor	r25, r25
    14a6:	82 30       	cpi	r24, 0x02	; 2
    14a8:	91 05       	cpc	r25, r1
    14aa:	09 f4       	brne	.+2      	; 0x14ae <matrix_scan+0xb2>
    14ac:	4c c0       	rjmp	.+152    	; 0x1546 <matrix_scan+0x14a>
    14ae:	d8 f4       	brcc	.+54     	; 0x14e6 <matrix_scan+0xea>
    14b0:	00 97       	sbiw	r24, 0x00	; 0
    14b2:	f9 f0       	breq	.+62     	; 0x14f2 <matrix_scan+0xf6>
    14b4:	01 97       	sbiw	r24, 0x01	; 1
    14b6:	09 f4       	brne	.+2      	; 0x14ba <matrix_scan+0xbe>
    14b8:	42 c0       	rjmp	.+132    	; 0x153e <matrix_scan+0x142>
                xprintf("ERROR: media key0\n");
    14ba:	8f e0       	ldi	r24, 0x0F	; 15
    14bc:	91 e0       	ldi	r25, 0x01	; 1
    14be:	9f 93       	push	r25
    14c0:	8f 93       	push	r24
    14c2:	0e 94 9a 06 	call	0xd34	; 0xd34 <__xprintf>
                return 0x10;
    14c6:	0f 90       	pop	r0
    14c8:	0f 90       	pop	r0
    14ca:	80 e1       	ldi	r24, 0x10	; 16
    14cc:	b1 cf       	rjmp	.-158    	; 0x1430 <matrix_scan+0x34>
                codes = (codes & ~0x007f) | 0x42;
    14ce:	20 78       	andi	r18, 0x80	; 128
    14d0:	22 64       	ori	r18, 0x42	; 66
                break;
    14d2:	e5 cf       	rjmp	.-54     	; 0x149e <matrix_scan+0xa2>
                codes = (codes & ~0x007f) | 0x4a;
    14d4:	20 78       	andi	r18, 0x80	; 128
    14d6:	2a 64       	ori	r18, 0x4A	; 74
                break;
    14d8:	e2 cf       	rjmp	.-60     	; 0x149e <matrix_scan+0xa2>
                codes = (codes & ~0x007f) | 0x49;
    14da:	20 78       	andi	r18, 0x80	; 128
    14dc:	29 64       	ori	r18, 0x49	; 73
                break;
    14de:	df cf       	rjmp	.-66     	; 0x149e <matrix_scan+0xa2>
                codes = (codes & ~0x007f) | 0x48;
    14e0:	20 78       	andi	r18, 0x80	; 128
    14e2:	28 64       	ori	r18, 0x48	; 72
                break;
    14e4:	dc cf       	rjmp	.-72     	; 0x149e <matrix_scan+0xa2>
            switch ((codes >> 8) & 0x7f ) {
    14e6:	03 97       	sbiw	r24, 0x03	; 3
    14e8:	41 f7       	brne	.-48     	; 0x14ba <matrix_scan+0xbe>
                codes = (codes & ~0x7f00) | (0x48 << 8);
    14ea:	30 78       	andi	r19, 0x80	; 128
    14ec:	e9 01       	movw	r28, r18
    14ee:	d8 64       	ori	r29, 0x48	; 72
                break;
    14f0:	03 c0       	rjmp	.+6      	; 0x14f8 <matrix_scan+0xfc>
                codes = (codes & ~0x7f00) | (0x42 << 8);
    14f2:	30 78       	andi	r19, 0x80	; 128
    14f4:	e9 01       	movw	r28, r18
    14f6:	d2 64       	ori	r29, 0x42	; 66
    if (debug_matrix && codes) {
    14f8:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <debug_config>
    14fc:	81 ff       	sbrs	r24, 1
    14fe:	27 c0       	rjmp	.+78     	; 0x154e <matrix_scan+0x152>
    1500:	20 97       	sbiw	r28, 0x00	; 0
    1502:	09 f4       	brne	.+2      	; 0x1506 <matrix_scan+0x10a>
    1504:	94 cf       	rjmp	.-216    	; 0x142e <matrix_scan+0x32>
        print("adb_host_kbd_recv: "); phex16(codes); print("\n");
    1506:	8b ef       	ldi	r24, 0xFB	; 251
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	0e 94 01 06 	call	0xc02	; 0xc02 <xputs>
    150e:	df 93       	push	r29
    1510:	cf 93       	push	r28
    1512:	86 ef       	ldi	r24, 0xF6	; 246
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	9f 93       	push	r25
    1518:	8f 93       	push	r24
    151a:	0e 94 9a 06 	call	0xd34	; 0xd34 <__xprintf>
    151e:	84 ef       	ldi	r24, 0xF4	; 244
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	0e 94 01 06 	call	0xc02	; 0xc02 <xputs>
    1526:	0f 90       	pop	r0
    1528:	0f 90       	pop	r0
    152a:	0f 90       	pop	r0
    152c:	0f 90       	pop	r0
    } else if (codes == 0x7F7F) {   // power key press
    152e:	cf 37       	cpi	r28, 0x7F	; 127
    1530:	dc 07       	cpc	r29, r28
    1532:	81 f4       	brne	.+32     	; 0x1554 <matrix_scan+0x158>
        register_key(0x7F);
    1534:	8f e7       	ldi	r24, 0x7F	; 127
        register_key(0xFF);
    1536:	0e 94 a3 06 	call	0xd46	; 0xd46 <register_key>
    return 1;
    153a:	81 e0       	ldi	r24, 0x01	; 1
    153c:	79 cf       	rjmp	.-270    	; 0x1430 <matrix_scan+0x34>
                codes = (codes & ~0x7f00) | (0x4a << 8);
    153e:	30 78       	andi	r19, 0x80	; 128
    1540:	e9 01       	movw	r28, r18
    1542:	da 64       	ori	r29, 0x4A	; 74
                break;
    1544:	d9 cf       	rjmp	.-78     	; 0x14f8 <matrix_scan+0xfc>
                codes = (codes & ~0x7f00) | (0x49 << 8);
    1546:	30 78       	andi	r19, 0x80	; 128
    1548:	e9 01       	movw	r28, r18
    154a:	d9 64       	ori	r29, 0x49	; 73
                break;
    154c:	d5 cf       	rjmp	.-86     	; 0x14f8 <matrix_scan+0xfc>
    if (codes == 0) {                           // no keys
    154e:	20 97       	sbiw	r28, 0x00	; 0
    1550:	71 f7       	brne	.-36     	; 0x152e <matrix_scan+0x132>
    1552:	6d cf       	rjmp	.-294    	; 0x142e <matrix_scan+0x32>
    } else if (codes == 0xFFFF) {   // power key release
    1554:	cf 3f       	cpi	r28, 0xFF	; 255
    1556:	dc 07       	cpc	r29, r28
    1558:	11 f4       	brne	.+4      	; 0x155e <matrix_scan+0x162>
        register_key(0xFF);
    155a:	8f ef       	ldi	r24, 0xFF	; 255
    155c:	ec cf       	rjmp	.-40     	; 0x1536 <matrix_scan+0x13a>
    key0 = codes>>8;
    155e:	8d 2f       	mov	r24, r29
    key1 = codes&0xFF;
    1560:	1c 2f       	mov	r17, r28
        if (key0 == 0xFF) {
    1562:	df 3f       	cpi	r29, 0xFF	; 255
    1564:	11 f4       	brne	.+4      	; 0x156a <matrix_scan+0x16e>
    key1 = codes&0xFF;
    1566:	8c 2f       	mov	r24, r28
            key1 = 0xFF;
    1568:	1f ef       	ldi	r17, 0xFF	; 255
        if (is_iso_layout) {
    156a:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <is_iso_layout>
    156e:	99 23       	and	r25, r25
    1570:	31 f0       	breq	.+12     	; 0x157e <matrix_scan+0x182>
            if ((key0 & 0x7F) == 0x32) {
    1572:	98 2f       	mov	r25, r24
    1574:	9f 77       	andi	r25, 0x7F	; 127
    1576:	92 33       	cpi	r25, 0x32	; 50
    1578:	81 f4       	brne	.+32     	; 0x159a <matrix_scan+0x19e>
                key0 = (key0 & 0x80) | 0x0A;
    157a:	80 78       	andi	r24, 0x80	; 128
    157c:	8a 60       	ori	r24, 0x0A	; 10
        register_key(key0);
    157e:	0e 94 a3 06 	call	0xd46	; 0xd46 <register_key>
        if (key1 != 0xFF)       // key1 is 0xFF when no second key.
    1582:	1f 3f       	cpi	r17, 0xFF	; 255
    1584:	d1 f2       	breq	.-76     	; 0x153a <matrix_scan+0x13e>
            extra_key = key1<<8 | 0xFF; // process in a separate call
    1586:	81 2f       	mov	r24, r17
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	98 2f       	mov	r25, r24
    158c:	88 27       	eor	r24, r24
    158e:	8f 6f       	ori	r24, 0xFF	; 255
    1590:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    1594:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    1598:	d0 cf       	rjmp	.-96     	; 0x153a <matrix_scan+0x13e>
            } else if ((key0 & 0x7F) == 0x0A) {
    159a:	9a 30       	cpi	r25, 0x0A	; 10
    159c:	81 f7       	brne	.-32     	; 0x157e <matrix_scan+0x182>
                key0 = (key0 & 0x80) | 0x32;
    159e:	80 78       	andi	r24, 0x80	; 128
    15a0:	82 63       	ori	r24, 0x32	; 50
    15a2:	ed cf       	rjmp	.-38     	; 0x157e <matrix_scan+0x182>

000015a4 <matrix_get_row>:
    return matrix[row];
    15a4:	e8 2f       	mov	r30, r24
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	e0 5a       	subi	r30, 0xA0	; 160
    15aa:	fe 4f       	sbci	r31, 0xFE	; 254
}
    15ac:	80 81       	ld	r24, Z
    15ae:	08 95       	ret

000015b0 <led_set>:

void led_set(uint8_t usb_led)
{
    adb_host_kbd_led(ADB_ADDR_KEYBOARD, ~usb_led);
    15b0:	68 2f       	mov	r22, r24
    15b2:	60 95       	com	r22
    15b4:	82 e0       	ldi	r24, 0x02	; 2
    15b6:	0c 94 e3 0c 	jmp	0x19c6	; 0x19c6 <adb_host_kbd_led>

000015ba <matrix_init>:
    debug_enable = true;
    15ba:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <debug_config>
    15be:	81 60       	ori	r24, 0x01	; 1
    15c0:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <debug_config>
    DDRD |= (1<<6); PORTD |= (1<<6);
    15c4:	56 9a       	sbi	0x0a, 6	; 10
    15c6:	5e 9a       	sbi	0x0b, 6	; 11
    adb_host_init();
    15c8:	0e 94 cf 0b 	call	0x179e	; 0x179e <adb_host_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    15cc:	2f ef       	ldi	r18, 0xFF	; 255
    15ce:	81 ee       	ldi	r24, 0xE1	; 225
    15d0:	94 e0       	ldi	r25, 0x04	; 4
    15d2:	21 50       	subi	r18, 0x01	; 1
    15d4:	80 40       	sbci	r24, 0x00	; 0
    15d6:	90 40       	sbci	r25, 0x00	; 0
    15d8:	e1 f7       	brne	.-8      	; 0x15d2 <matrix_init+0x18>
    15da:	00 c0       	rjmp	.+0      	; 0x15dc <matrix_init+0x22>
    15dc:	00 00       	nop
    device_scan();
    15de:	0e 94 bc 06 	call	0xd78	; 0xd78 <device_scan>
    xprintf("\nKeyboard:\n");
    15e2:	8b e4       	ldi	r24, 0x4B	; 75
    15e4:	92 e0       	ldi	r25, 0x02	; 2
    15e6:	9f 93       	push	r25
    15e8:	8f 93       	push	r24
    15ea:	0e 94 9a 06 	call	0xd34	; 0xd34 <__xprintf>
    uint8_t handler_id = (uint8_t) adb_host_talk(ADB_ADDR_KEYBOARD, ADB_REG_3);
    15ee:	63 e0       	ldi	r22, 0x03	; 3
    15f0:	82 e0       	ldi	r24, 0x02	; 2
    15f2:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <adb_host_talk>
    15f6:	9c 01       	movw	r18, r24
    switch (handler_id) {
    15f8:	ac 01       	movw	r20, r24
    15fa:	55 27       	eor	r21, r21
    15fc:	0f 90       	pop	r0
    15fe:	0f 90       	pop	r0
    1600:	8e 31       	cpi	r24, 0x1E	; 30
    1602:	08 f0       	brcs	.+2      	; 0x1606 <matrix_init+0x4c>
    1604:	63 c0       	rjmp	.+198    	; 0x16cc <matrix_init+0x112>
    1606:	2c 7f       	andi	r18, 0xFC	; 252
    1608:	33 27       	eor	r19, r19
    160a:	23 2b       	or	r18, r19
    160c:	09 f4       	brne	.+2      	; 0x1610 <matrix_init+0x56>
    160e:	65 c0       	rjmp	.+202    	; 0x16da <matrix_init+0x120>
    1610:	fa 01       	movw	r30, r20
    1612:	34 97       	sbiw	r30, 0x04	; 4
    1614:	ea 31       	cpi	r30, 0x1A	; 26
    1616:	f1 05       	cpc	r31, r1
    1618:	08 f0       	brcs	.+2      	; 0x161c <matrix_init+0x62>
    161a:	5f c0       	rjmp	.+190    	; 0x16da <matrix_init+0x120>
    161c:	ec 5a       	subi	r30, 0xAC	; 172
    161e:	fa 4f       	sbci	r31, 0xFA	; 250
    1620:	0c 94 a3 2b 	jmp	0x5746	; 0x5746 <__tablejump2__>
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	01 c0       	rjmp	.+2      	; 0x162a <matrix_init+0x70>
    1628:	88 0f       	add	r24, r24
    162a:	2a 95       	dec	r18
    162c:	ea f7       	brpl	.-6      	; 0x1628 <matrix_init+0x6e>
    162e:	89 74       	andi	r24, 0x49	; 73
    1630:	09 f4       	brne	.+2      	; 0x1634 <matrix_init+0x7a>
    1632:	53 c0       	rjmp	.+166    	; 0x16da <matrix_init+0x120>
        is_iso_layout = true;
    1634:	81 e0       	ldi	r24, 0x01	; 1
    1636:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <is_iso_layout>
    xprintf("hadler: %02X, ISO: %s\n", handler_id, (is_iso_layout ? "yes" : "no"));
    163a:	8c e2       	ldi	r24, 0x2C	; 44
    163c:	91 e0       	ldi	r25, 0x01	; 1
    163e:	9f 93       	push	r25
    1640:	8f 93       	push	r24
    1642:	5f 93       	push	r21
    1644:	4f 93       	push	r20
    1646:	84 e3       	ldi	r24, 0x34	; 52
    1648:	92 e0       	ldi	r25, 0x02	; 2
    164a:	9f 93       	push	r25
    164c:	8f 93       	push	r24
    164e:	0e 94 9a 06 	call	0xd34	; 0xd34 <__xprintf>
    has_media_keys = (0x02 == (adb_host_talk(ADB_ADDR_APPLIANCE, ADB_REG_3) & 0xff));
    1652:	63 e0       	ldi	r22, 0x03	; 3
    1654:	87 e0       	ldi	r24, 0x07	; 7
    1656:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <adb_host_talk>
    165a:	28 2f       	mov	r18, r24
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	91 e0       	ldi	r25, 0x01	; 1
    1660:	0f 90       	pop	r0
    1662:	0f 90       	pop	r0
    1664:	0f 90       	pop	r0
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	0f 90       	pop	r0
    166c:	82 30       	cpi	r24, 0x02	; 2
    166e:	09 f0       	breq	.+2      	; 0x1672 <matrix_init+0xb8>
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <has_media_keys>
    if (has_media_keys) {
    1676:	22 30       	cpi	r18, 0x02	; 2
    1678:	31 05       	cpc	r19, r1
    167a:	41 f4       	brne	.+16     	; 0x168c <matrix_init+0xd2>
        xprintf("Media keys\n");
    167c:	88 e2       	ldi	r24, 0x28	; 40
    167e:	92 e0       	ldi	r25, 0x02	; 2
    1680:	9f 93       	push	r25
    1682:	8f 93       	push	r24
    1684:	0e 94 9a 06 	call	0xd34	; 0xd34 <__xprintf>
    1688:	0f 90       	pop	r0
    168a:	0f 90       	pop	r0
    adb_host_listen(ADB_ADDR_KEYBOARD, ADB_REG_3, ADB_ADDR_KEYBOARD, ADB_HANDLER_EXTENDED_KEYBOARD);
    168c:	23 e0       	ldi	r18, 0x03	; 3
    168e:	42 e0       	ldi	r20, 0x02	; 2
    1690:	63 e0       	ldi	r22, 0x03	; 3
    1692:	82 e0       	ldi	r24, 0x02	; 2
    1694:	0e 94 bb 0c 	call	0x1976	; 0x1976 <adb_host_listen>
    xprintf("\nMouse:\n");
    1698:	8f e1       	ldi	r24, 0x1F	; 31
    169a:	92 e0       	ldi	r25, 0x02	; 2
    169c:	9f 93       	push	r25
    169e:	8f 93       	push	r24
    16a0:	0e 94 9a 06 	call	0xd34	; 0xd34 <__xprintf>
    mouse_init(ADB_ADDR_MOUSE);
    16a4:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <mouse_init.constprop.0>
    device_scan();
    16a8:	0e 94 bc 06 	call	0xd78	; 0xd78 <device_scan>
    for (uint8_t i=0; i < MATRIX_ROWS; i++) matrix[i] = 0x00;
    16ac:	e0 e6       	ldi	r30, 0x60	; 96
    16ae:	f1 e0       	ldi	r31, 0x01	; 1
    16b0:	0f 90       	pop	r0
    16b2:	0f 90       	pop	r0
    16b4:	11 92       	st	Z+, r1
    16b6:	21 e0       	ldi	r18, 0x01	; 1
    16b8:	e0 37       	cpi	r30, 0x70	; 112
    16ba:	f2 07       	cpc	r31, r18
    16bc:	d9 f7       	brne	.-10     	; 0x16b4 <matrix_init+0xfa>
    led_set(host_keyboard_leds());
    16be:	0e 94 7e 14 	call	0x28fc	; 0x28fc <host_keyboard_leds>
    16c2:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <led_set>
    DDRD |= (1<<6); PORTD &= ~(1<<6);
    16c6:	56 9a       	sbi	0x0a, 6	; 10
    16c8:	5e 98       	cbi	0x0b, 6	; 11
}
    16ca:	08 95       	ret
    switch (handler_id) {
    16cc:	9a 01       	movw	r18, r20
    16ce:	21 5c       	subi	r18, 0xC1	; 193
    16d0:	31 09       	sbc	r19, r1
    16d2:	27 30       	cpi	r18, 0x07	; 7
    16d4:	31 05       	cpc	r19, r1
    16d6:	08 f4       	brcc	.+2      	; 0x16da <matrix_init+0x120>
    16d8:	a5 cf       	rjmp	.-182    	; 0x1624 <matrix_init+0x6a>
        is_iso_layout = false;
    16da:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <is_iso_layout>
    xprintf("hadler: %02X, ISO: %s\n", handler_id, (is_iso_layout ? "yes" : "no"));
    16de:	80 e3       	ldi	r24, 0x30	; 48
    16e0:	91 e0       	ldi	r25, 0x01	; 1
    16e2:	ad cf       	rjmp	.-166    	; 0x163e <matrix_init+0x84>

000016e4 <place_bit0>:
    place_bit1();
}

static inline void place_bit0(void)
{
    data_lo();
    16e4:	50 9a       	sbi	0x0a, 0	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    16e6:	83 e0       	ldi	r24, 0x03	; 3
    16e8:	91 e0       	ldi	r25, 0x01	; 1
    16ea:	01 97       	sbiw	r24, 0x01	; 1
    16ec:	f1 f7       	brne	.-4      	; 0x16ea <place_bit0+0x6>
    16ee:	00 c0       	rjmp	.+0      	; 0x16f0 <place_bit0+0xc>
    16f0:	00 00       	nop
    _delay_us(65);
    data_hi();
    16f2:	50 98       	cbi	0x0a, 0	; 10
    16f4:	9a eb       	ldi	r25, 0xBA	; 186
    16f6:	9a 95       	dec	r25
    16f8:	f1 f7       	brne	.-4      	; 0x16f6 <place_bit0+0x12>
    16fa:	00 c0       	rjmp	.+0      	; 0x16fc <place_bit0+0x18>
    _delay_us(35);
}
    16fc:	08 95       	ret

000016fe <place_bit1>:

static inline void place_bit1(void)
{
    data_lo();
    16fe:	50 9a       	sbi	0x0a, 0	; 10
    1700:	8a eb       	ldi	r24, 0xBA	; 186
    1702:	8a 95       	dec	r24
    1704:	f1 f7       	brne	.-4      	; 0x1702 <place_bit1+0x4>
    1706:	00 c0       	rjmp	.+0      	; 0x1708 <place_bit1+0xa>
    _delay_us(35);
    data_hi();
    1708:	50 98       	cbi	0x0a, 0	; 10
    170a:	83 e0       	ldi	r24, 0x03	; 3
    170c:	91 e0       	ldi	r25, 0x01	; 1
    170e:	01 97       	sbiw	r24, 0x01	; 1
    1710:	f1 f7       	brne	.-4      	; 0x170e <place_bit1+0x10>
    1712:	00 c0       	rjmp	.+0      	; 0x1714 <place_bit1+0x16>
    1714:	00 00       	nop
    _delay_us(65);
}
    1716:	08 95       	ret

00001718 <send_byte>:

static inline void send_byte(uint8_t data)
{
    1718:	ef 92       	push	r14
    171a:	ff 92       	push	r15
    171c:	0f 93       	push	r16
    171e:	1f 93       	push	r17
    1720:	cf 93       	push	r28
    1722:	df 93       	push	r29
    for (int i = 0; i < 8; i++) {
    1724:	d0 e0       	ldi	r29, 0x00	; 0
    1726:	c0 e0       	ldi	r28, 0x00	; 0
        if (data&(0x80>>i))
    1728:	90 e8       	ldi	r25, 0x80	; 128
    172a:	e9 2e       	mov	r14, r25
    172c:	f1 2c       	mov	r15, r1
    172e:	08 2f       	mov	r16, r24
    1730:	10 e0       	ldi	r17, 0x00	; 0
    1732:	c7 01       	movw	r24, r14
    1734:	0c 2e       	mov	r0, r28
    1736:	02 c0       	rjmp	.+4      	; 0x173c <send_byte+0x24>
    1738:	95 95       	asr	r25
    173a:	87 95       	ror	r24
    173c:	0a 94       	dec	r0
    173e:	e2 f7       	brpl	.-8      	; 0x1738 <send_byte+0x20>
    1740:	80 23       	and	r24, r16
    1742:	91 23       	and	r25, r17
    1744:	89 2b       	or	r24, r25
    1746:	69 f0       	breq	.+26     	; 0x1762 <send_byte+0x4a>
            place_bit1();
    1748:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <place_bit1>
    for (int i = 0; i < 8; i++) {
    174c:	21 96       	adiw	r28, 0x01	; 1
    174e:	c8 30       	cpi	r28, 0x08	; 8
    1750:	d1 05       	cpc	r29, r1
    1752:	79 f7       	brne	.-34     	; 0x1732 <send_byte+0x1a>
        else
            place_bit0();
    }
}
    1754:	df 91       	pop	r29
    1756:	cf 91       	pop	r28
    1758:	1f 91       	pop	r17
    175a:	0f 91       	pop	r16
    175c:	ff 90       	pop	r15
    175e:	ef 90       	pop	r14
    1760:	08 95       	ret
            place_bit0();
    1762:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <place_bit0>
    1766:	f2 cf       	rjmp	.-28     	; 0x174c <send_byte+0x34>

00001768 <attention>:
    data_lo();
    1768:	50 9a       	sbi	0x0a, 0	; 10
    176a:	83 ef       	ldi	r24, 0xF3	; 243
    176c:	9b e0       	ldi	r25, 0x0B	; 11
    176e:	01 97       	sbiw	r24, 0x01	; 1
    1770:	f1 f7       	brne	.-4      	; 0x176e <attention+0x6>
    1772:	00 c0       	rjmp	.+0      	; 0x1774 <attention+0xc>
    1774:	00 00       	nop
    place_bit1();
    1776:	0c 94 7f 0b 	jmp	0x16fe	; 0x16fe <place_bit1>

0000177a <wait_data_lo>:
// These are carefully coded to take 6 cycles of overhead.
// inline asm approach became too convoluted
static inline uint16_t wait_data_lo(uint16_t us)
{
    do {
        if ( !data_in() )
    177a:	48 9b       	sbis	0x09, 0	; 9
    177c:	06 c0       	rjmp	.+12     	; 0x178a <wait_data_lo+0x10>
    177e:	23 e0       	ldi	r18, 0x03	; 3
    1780:	2a 95       	dec	r18
    1782:	f1 f7       	brne	.-4      	; 0x1780 <wait_data_lo+0x6>
    1784:	00 00       	nop
            break;
        _delay_us(1 - (6 * 1000000.0 / F_CPU));
    }
    while ( --us );
    1786:	01 97       	sbiw	r24, 0x01	; 1
    1788:	c1 f7       	brne	.-16     	; 0x177a <wait_data_lo>
    return us;
}
    178a:	08 95       	ret

0000178c <wait_data_hi>:

static inline uint16_t wait_data_hi(uint16_t us)
{
    do {
        if ( data_in() )
    178c:	48 99       	sbic	0x09, 0	; 9
    178e:	06 c0       	rjmp	.+12     	; 0x179c <wait_data_hi+0x10>
    1790:	23 e0       	ldi	r18, 0x03	; 3
    1792:	2a 95       	dec	r18
    1794:	f1 f7       	brne	.-4      	; 0x1792 <wait_data_hi+0x6>
    1796:	00 00       	nop
            break;
        _delay_us(1 - (6 * 1000000.0 / F_CPU));
    }
    while ( --us );
    1798:	01 97       	sbiw	r24, 0x01	; 1
    179a:	c1 f7       	brne	.-16     	; 0x178c <wait_data_hi>
    return us;
}
    179c:	08 95       	ret

0000179e <adb_host_init>:
    ADB_PORT &= ~(1<<ADB_DATA_BIT);
    179e:	58 98       	cbi	0x0b, 0	; 11
    data_hi();
    17a0:	50 98       	cbi	0x0a, 0	; 10
}
    17a2:	08 95       	ret

000017a4 <adb_mouse_init>:
    17a4:	08 95       	ret

000017a6 <adb_host_talk_buf>:
{
    17a6:	df 92       	push	r13
    17a8:	ef 92       	push	r14
    17aa:	ff 92       	push	r15
    17ac:	0f 93       	push	r16
    17ae:	1f 93       	push	r17
    17b0:	cf 93       	push	r28
    17b2:	df 93       	push	r29
    17b4:	c8 2f       	mov	r28, r24
    17b6:	d6 2f       	mov	r29, r22
    17b8:	7a 01       	movw	r14, r20
    17ba:	d2 2e       	mov	r13, r18
    for (int8_t i =0; i < len; i++) buf[i] = 0;
    17bc:	80 e0       	ldi	r24, 0x00	; 0
    17be:	42 2f       	mov	r20, r18
    17c0:	50 e0       	ldi	r21, 0x00	; 0
    17c2:	28 2f       	mov	r18, r24
    17c4:	08 2e       	mov	r0, r24
    17c6:	00 0c       	add	r0, r0
    17c8:	33 0b       	sbc	r19, r19
    17ca:	24 17       	cp	r18, r20
    17cc:	35 07       	cpc	r19, r21
    17ce:	e4 f0       	brlt	.+56     	; 0x1808 <adb_host_talk_buf+0x62>
    cli();
    17d0:	f8 94       	cli
    attention();
    17d2:	0e 94 b4 0b 	call	0x1768	; 0x1768 <attention>
    send_byte((addr<<4) | ADB_CMD_TALK | reg);
    17d6:	8c 2f       	mov	r24, r28
    17d8:	82 95       	swap	r24
    17da:	80 7f       	andi	r24, 0xF0	; 240
    17dc:	8d 2b       	or	r24, r29
    17de:	8c 60       	ori	r24, 0x0C	; 12
    17e0:	0e 94 8c 0b 	call	0x1718	; 0x1718 <send_byte>
    place_bit0();               // Stopbit(0)
    17e4:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <place_bit0>
    if (!wait_data_hi(500)) {    // Service Request(310us Adjustable Keyboard): just ignored
    17e8:	84 ef       	ldi	r24, 0xF4	; 244
    17ea:	91 e0       	ldi	r25, 0x01	; 1
    17ec:	0e 94 c6 0b 	call	0x178c	; 0x178c <wait_data_hi>
    17f0:	89 2b       	or	r24, r25
    17f2:	81 f4       	brne	.+32     	; 0x1814 <adb_host_talk_buf+0x6e>
        xprintf("R");
    17f4:	8b e5       	ldi	r24, 0x5B	; 91
    17f6:	92 e0       	ldi	r25, 0x02	; 2
        xprintf("s");
    17f8:	9f 93       	push	r25
    17fa:	8f 93       	push	r24
    17fc:	0e 94 9a 06 	call	0xd34	; 0xd34 <__xprintf>
        sei();
    1800:	78 94       	sei
        return 0;
    1802:	0f 90       	pop	r0
    1804:	0f 90       	pop	r0
    1806:	0d c0       	rjmp	.+26     	; 0x1822 <adb_host_talk_buf+0x7c>
    for (int8_t i =0; i < len; i++) buf[i] = 0;
    1808:	2e 0d       	add	r18, r14
    180a:	3f 1d       	adc	r19, r15
    180c:	f9 01       	movw	r30, r18
    180e:	10 82       	st	Z, r1
    1810:	8f 5f       	subi	r24, 0xFF	; 255
    1812:	d7 cf       	rjmp	.-82     	; 0x17c2 <adb_host_talk_buf+0x1c>
    if (!wait_data_lo(500)) {   // Tlt/Stop to Start(140-260us)
    1814:	84 ef       	ldi	r24, 0xF4	; 244
    1816:	91 e0       	ldi	r25, 0x01	; 1
    1818:	0e 94 bd 0b 	call	0x177a	; 0x177a <wait_data_lo>
    181c:	89 2b       	or	r24, r25
    181e:	51 f4       	brne	.+20     	; 0x1834 <adb_host_talk_buf+0x8e>
        sei();
    1820:	78 94       	sei
        return 0;
    1822:	80 e0       	ldi	r24, 0x00	; 0
}
    1824:	df 91       	pop	r29
    1826:	cf 91       	pop	r28
    1828:	1f 91       	pop	r17
    182a:	0f 91       	pop	r16
    182c:	ff 90       	pop	r15
    182e:	ef 90       	pop	r14
    1830:	df 90       	pop	r13
    1832:	08 95       	ret
    if (!wait_data_hi(40)) {
    1834:	88 e2       	ldi	r24, 0x28	; 40
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	0e 94 c6 0b 	call	0x178c	; 0x178c <wait_data_hi>
    183c:	89 2b       	or	r24, r25
    183e:	19 f4       	brne	.+6      	; 0x1846 <adb_host_talk_buf+0xa0>
        xprintf("S");
    1840:	89 e5       	ldi	r24, 0x59	; 89
    1842:	92 e0       	ldi	r25, 0x02	; 2
    1844:	d9 cf       	rjmp	.-78     	; 0x17f8 <adb_host_talk_buf+0x52>
    if (!wait_data_lo(100)) {
    1846:	84 e6       	ldi	r24, 0x64	; 100
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	0e 94 bd 0b 	call	0x177a	; 0x177a <wait_data_lo>
    uint8_t n = 0; // bit count
    184e:	c0 e0       	ldi	r28, 0x00	; 0
    if (!wait_data_lo(100)) {
    1850:	89 2b       	or	r24, r25
    1852:	21 f4       	brne	.+8      	; 0x185c <adb_host_talk_buf+0xb6>
        xprintf("s");
    1854:	87 e5       	ldi	r24, 0x57	; 87
    1856:	92 e0       	ldi	r25, 0x02	; 2
    1858:	cf cf       	rjmp	.-98     	; 0x17f8 <adb_host_talk_buf+0x52>
    185a:	c8 2f       	mov	r28, r24
        uint8_t lo = (uint8_t) wait_data_hi(130);
    185c:	82 e8       	ldi	r24, 0x82	; 130
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	0e 94 c6 0b 	call	0x178c	; 0x178c <wait_data_hi>
    1864:	8c 01       	movw	r16, r24
        if (!lo)
    1866:	dc 2f       	mov	r29, r28
    1868:	d6 95       	lsr	r29
    186a:	d6 95       	lsr	r29
    186c:	d6 95       	lsr	r29
    186e:	88 23       	and	r24, r24
    1870:	e1 f0       	breq	.+56     	; 0x18aa <adb_host_talk_buf+0x104>
        uint8_t hi = (uint8_t) wait_data_lo(lo);
    1872:	11 27       	eor	r17, r17
    1874:	c8 01       	movw	r24, r16
    1876:	0e 94 bd 0b 	call	0x177a	; 0x177a <wait_data_lo>
        if (!hi)
    187a:	88 23       	and	r24, r24
    187c:	b1 f0       	breq	.+44     	; 0x18aa <adb_host_talk_buf+0x104>
        if (n/8 >= len) continue; // can't store in buf
    187e:	dd 15       	cp	r29, r13
    1880:	78 f4       	brcc	.+30     	; 0x18a0 <adb_host_talk_buf+0xfa>
        buf[n/8] <<= 1;
    1882:	f7 01       	movw	r30, r14
    1884:	ed 0f       	add	r30, r29
    1886:	f1 1d       	adc	r31, r1
    1888:	90 81       	ld	r25, Z
    188a:	99 0f       	add	r25, r25
        if ((130 - lo) < (lo - hi)) {
    188c:	22 e8       	ldi	r18, 0x82	; 130
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	20 1b       	sub	r18, r16
    1892:	31 0b       	sbc	r19, r17
    1894:	08 1b       	sub	r16, r24
    1896:	11 09       	sbc	r17, r1
    1898:	20 17       	cp	r18, r16
    189a:	31 07       	cpc	r19, r17
    189c:	64 f0       	brlt	.+24     	; 0x18b6 <adb_host_talk_buf+0x110>
            buf[n/8] |= 1;
    189e:	90 83       	st	Z, r25
    while ( ++n );
    18a0:	81 e0       	ldi	r24, 0x01	; 1
    18a2:	8c 0f       	add	r24, r28
    18a4:	cf 3f       	cpi	r28, 0xFF	; 255
    18a6:	c9 f6       	brne	.-78     	; 0x185a <adb_host_talk_buf+0xb4>
error:
    18a8:	c0 e0       	ldi	r28, 0x00	; 0
    sei();
    18aa:	78 94       	sei
    return n/8;
    18ac:	8c 2f       	mov	r24, r28
    18ae:	86 95       	lsr	r24
    18b0:	86 95       	lsr	r24
    18b2:	86 95       	lsr	r24
    18b4:	b7 cf       	rjmp	.-146    	; 0x1824 <adb_host_talk_buf+0x7e>
            buf[n/8] |= 1;
    18b6:	91 60       	ori	r25, 0x01	; 1
    18b8:	f2 cf       	rjmp	.-28     	; 0x189e <adb_host_talk_buf+0xf8>

000018ba <adb_host_talk>:
{
    18ba:	cf 93       	push	r28
    18bc:	df 93       	push	r29
    18be:	cd b7       	in	r28, 0x3d	; 61
    18c0:	de b7       	in	r29, 0x3e	; 62
    18c2:	28 97       	sbiw	r28, 0x08	; 8
    18c4:	0f b6       	in	r0, 0x3f	; 63
    18c6:	f8 94       	cli
    18c8:	de bf       	out	0x3e, r29	; 62
    18ca:	0f be       	out	0x3f, r0	; 63
    18cc:	cd bf       	out	0x3d, r28	; 61
    len = adb_host_talk_buf(addr, reg, buf, 8);
    18ce:	28 e0       	ldi	r18, 0x08	; 8
    18d0:	ae 01       	movw	r20, r28
    18d2:	4f 5f       	subi	r20, 0xFF	; 255
    18d4:	5f 4f       	sbci	r21, 0xFF	; 255
    18d6:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <adb_host_talk_buf>
    if (len != 2) return 0;
    18da:	82 30       	cpi	r24, 0x02	; 2
    18dc:	71 f4       	brne	.+28     	; 0x18fa <adb_host_talk+0x40>
    return (buf[0]<<8 | buf[1]);
    18de:	89 81       	ldd	r24, Y+1	; 0x01
    18e0:	9a 81       	ldd	r25, Y+2	; 0x02
    18e2:	98 27       	eor	r25, r24
    18e4:	89 27       	eor	r24, r25
    18e6:	98 27       	eor	r25, r24
}
    18e8:	28 96       	adiw	r28, 0x08	; 8
    18ea:	0f b6       	in	r0, 0x3f	; 63
    18ec:	f8 94       	cli
    18ee:	de bf       	out	0x3e, r29	; 62
    18f0:	0f be       	out	0x3f, r0	; 63
    18f2:	cd bf       	out	0x3d, r28	; 61
    18f4:	df 91       	pop	r29
    18f6:	cf 91       	pop	r28
    18f8:	08 95       	ret
    if (len != 2) return 0;
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	80 e0       	ldi	r24, 0x00	; 0
    18fe:	f4 cf       	rjmp	.-24     	; 0x18e8 <adb_host_talk+0x2e>

00001900 <adb_host_kbd_recv>:
    return adb_host_talk(addr, ADB_REG_0);
    1900:	60 e0       	ldi	r22, 0x00	; 0
    1902:	0c 94 5d 0c 	jmp	0x18ba	; 0x18ba <adb_host_talk>

00001906 <adb_host_listen_buf>:
{
    1906:	ff 92       	push	r15
    1908:	0f 93       	push	r16
    190a:	1f 93       	push	r17
    190c:	cf 93       	push	r28
    190e:	df 93       	push	r29
    1910:	c8 2f       	mov	r28, r24
    1912:	f6 2e       	mov	r15, r22
    1914:	8a 01       	movw	r16, r20
    1916:	d2 2f       	mov	r29, r18
    cli();
    1918:	f8 94       	cli
    attention();
    191a:	0e 94 b4 0b 	call	0x1768	; 0x1768 <attention>
    send_byte((addr<<4) | ADB_CMD_LISTEN | reg);
    191e:	8c 2f       	mov	r24, r28
    1920:	82 95       	swap	r24
    1922:	80 7f       	andi	r24, 0xF0	; 240
    1924:	8f 29       	or	r24, r15
    1926:	88 60       	ori	r24, 0x08	; 8
    1928:	0e 94 8c 0b 	call	0x1718	; 0x1718 <send_byte>
    place_bit0();               // Stopbit(0)
    192c:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <place_bit0>
    1930:	8f e1       	ldi	r24, 0x1F	; 31
    1932:	93 e0       	ldi	r25, 0x03	; 3
    1934:	01 97       	sbiw	r24, 0x01	; 1
    1936:	f1 f7       	brne	.-4      	; 0x1934 <adb_host_listen_buf+0x2e>
    1938:	00 c0       	rjmp	.+0      	; 0x193a <adb_host_listen_buf+0x34>
    193a:	00 00       	nop
    place_bit1();               // Startbit(1)
    193c:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <place_bit1>
    for (int8_t i = 0; i < len; i++) {
    1940:	f1 2c       	mov	r15, r1
    1942:	cd 2f       	mov	r28, r29
    1944:	d0 e0       	ldi	r29, 0x00	; 0
    1946:	8f 2d       	mov	r24, r15
    1948:	0f 2c       	mov	r0, r15
    194a:	00 0c       	add	r0, r0
    194c:	99 0b       	sbc	r25, r25
    194e:	8c 17       	cp	r24, r28
    1950:	9d 07       	cpc	r25, r29
    1952:	4c f0       	brlt	.+18     	; 0x1966 <adb_host_listen_buf+0x60>
    place_bit0();               // Stopbit(0);
    1954:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <place_bit0>
    sei();
    1958:	78 94       	sei
}
    195a:	df 91       	pop	r29
    195c:	cf 91       	pop	r28
    195e:	1f 91       	pop	r17
    1960:	0f 91       	pop	r16
    1962:	ff 90       	pop	r15
    1964:	08 95       	ret
        send_byte(buf[i]);
    1966:	80 0f       	add	r24, r16
    1968:	91 1f       	adc	r25, r17
    196a:	fc 01       	movw	r30, r24
    196c:	80 81       	ld	r24, Z
    196e:	0e 94 8c 0b 	call	0x1718	; 0x1718 <send_byte>
    1972:	f3 94       	inc	r15
    1974:	e8 cf       	rjmp	.-48     	; 0x1946 <adb_host_listen_buf+0x40>

00001976 <adb_host_listen>:
{
    1976:	cf 93       	push	r28
    1978:	df 93       	push	r29
    197a:	00 d0       	rcall	.+0      	; 0x197c <adb_host_listen+0x6>
    197c:	cd b7       	in	r28, 0x3d	; 61
    197e:	de b7       	in	r29, 0x3e	; 62
    uint8_t buf[2] = { data_h, data_l };
    1980:	49 83       	std	Y+1, r20	; 0x01
    1982:	2a 83       	std	Y+2, r18	; 0x02
    adb_host_listen_buf(addr, reg, buf, 2);
    1984:	22 e0       	ldi	r18, 0x02	; 2
    1986:	ae 01       	movw	r20, r28
    1988:	4f 5f       	subi	r20, 0xFF	; 255
    198a:	5f 4f       	sbci	r21, 0xFF	; 255
    198c:	0e 94 83 0c 	call	0x1906	; 0x1906 <adb_host_listen_buf>
}
    1990:	0f 90       	pop	r0
    1992:	0f 90       	pop	r0
    1994:	df 91       	pop	r29
    1996:	cf 91       	pop	r28
    1998:	08 95       	ret

0000199a <adb_host_flush>:
{
    199a:	cf 93       	push	r28
    199c:	c8 2f       	mov	r28, r24
    cli();
    199e:	f8 94       	cli
    attention();
    19a0:	0e 94 b4 0b 	call	0x1768	; 0x1768 <attention>
    send_byte((addr<<4) | ADB_CMD_FLUSH);
    19a4:	8c 2f       	mov	r24, r28
    19a6:	82 95       	swap	r24
    19a8:	80 7f       	andi	r24, 0xF0	; 240
    19aa:	81 60       	ori	r24, 0x01	; 1
    19ac:	0e 94 8c 0b 	call	0x1718	; 0x1718 <send_byte>
    place_bit0();               // Stopbit(0)
    19b0:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <place_bit0>
    19b4:	8f e1       	ldi	r24, 0x1F	; 31
    19b6:	93 e0       	ldi	r25, 0x03	; 3
    19b8:	01 97       	sbiw	r24, 0x01	; 1
    19ba:	f1 f7       	brne	.-4      	; 0x19b8 <adb_host_flush+0x1e>
    19bc:	00 c0       	rjmp	.+0      	; 0x19be <adb_host_flush+0x24>
    19be:	00 00       	nop
    sei();
    19c0:	78 94       	sei
}
    19c2:	cf 91       	pop	r28
    19c4:	08 95       	ret

000019c6 <adb_host_kbd_led>:
    adb_host_listen(addr, 2, 0, led & 0x07);
    19c6:	26 2f       	mov	r18, r22
    19c8:	27 70       	andi	r18, 0x07	; 7
    19ca:	40 e0       	ldi	r20, 0x00	; 0
    19cc:	62 e0       	ldi	r22, 0x02	; 2
    19ce:	0c 94 bb 0c 	jmp	0x1976	; 0x1976 <adb_host_listen>

000019d2 <keyboard_leds>:
 * Host driver
 ******************************************************************************/
static uint8_t keyboard_leds(void)
{
    return keyboard_led_stats;
}
    19d2:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <keyboard_led_stats>
    19d6:	08 95       	ret

000019d8 <send_consumer>:
    Endpoint_ClearIN();
#endif
}

static void send_consumer(uint16_t data)
{
    19d8:	cf 93       	push	r28
    19da:	df 93       	push	r29
    19dc:	00 d0       	rcall	.+0      	; 0x19de <send_consumer+0x6>
    19de:	0f 92       	push	r0
    19e0:	cd b7       	in	r28, 0x3d	; 61
    19e2:	de b7       	in	r29, 0x3e	; 62
#ifdef EXTRAKEY_ENABLE
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    19e4:	20 91 77 03 	lds	r18, 0x0377	; 0x800377 <USB_DeviceState>
    19e8:	24 30       	cpi	r18, 0x04	; 4
    19ea:	19 f5       	brne	.+70     	; 0x1a32 <send_consumer+0x5a>
        return;

    report_extra_t r = {
    19ec:	23 e0       	ldi	r18, 0x03	; 3
    19ee:	29 83       	std	Y+1, r18	; 0x01
    19f0:	8a 83       	std	Y+2, r24	; 0x02
    19f2:	9b 83       	std	Y+3, r25	; 0x03
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    19f4:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <actionmaps+0x7f98e9>
    19f8:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    19fa:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    19fe:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1a00:	95 fd       	sbrc	r25, 5
    1a02:	06 c0       	rjmp	.+12     	; 0x1a10 <send_consumer+0x38>
    1a04:	95 ed       	ldi	r25, 0xD5	; 213
    1a06:	9a 95       	dec	r25
    1a08:	f1 f7       	brne	.-4      	; 0x1a06 <send_consumer+0x2e>
    1a0a:	00 00       	nop
    1a0c:	81 11       	cpse	r24, r1
    1a0e:	f5 cf       	rjmp	.-22     	; 0x19fa <send_consumer+0x22>
    1a10:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    if (!Endpoint_IsReadWriteAllowed()) return;
    1a14:	85 ff       	sbrs	r24, 5
    1a16:	0d c0       	rjmp	.+26     	; 0x1a32 <send_consumer+0x5a>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    1a18:	50 e0       	ldi	r21, 0x00	; 0
    1a1a:	40 e0       	ldi	r20, 0x00	; 0
    1a1c:	63 e0       	ldi	r22, 0x03	; 3
    1a1e:	70 e0       	ldi	r23, 0x00	; 0
    1a20:	ce 01       	movw	r24, r28
    1a22:	01 96       	adiw	r24, 0x01	; 1
    1a24:	0e 94 52 10 	call	0x20a4	; 0x20a4 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a28:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    1a2c:	8e 77       	andi	r24, 0x7E	; 126
    1a2e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <actionmaps+0x7f98e8>
    Endpoint_ClearIN();
#endif
}
    1a32:	0f 90       	pop	r0
    1a34:	0f 90       	pop	r0
    1a36:	0f 90       	pop	r0
    1a38:	df 91       	pop	r29
    1a3a:	cf 91       	pop	r28
    1a3c:	08 95       	ret

00001a3e <send_system>:
{
    1a3e:	cf 93       	push	r28
    1a40:	df 93       	push	r29
    1a42:	00 d0       	rcall	.+0      	; 0x1a44 <send_system+0x6>
    1a44:	0f 92       	push	r0
    1a46:	cd b7       	in	r28, 0x3d	; 61
    1a48:	de b7       	in	r29, 0x3e	; 62
    1a4a:	9c 01       	movw	r18, r24
    if (USB_DeviceState != DEVICE_STATE_Configured)
    1a4c:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <USB_DeviceState>
    1a50:	84 30       	cpi	r24, 0x04	; 4
    1a52:	31 f5       	brne	.+76     	; 0x1aa0 <send_system+0x62>
    report_extra_t r = {
    1a54:	82 e0       	ldi	r24, 0x02	; 2
    1a56:	89 83       	std	Y+1, r24	; 0x01
        .usage = data - SYSTEM_POWER_DOWN + 1
    1a58:	20 58       	subi	r18, 0x80	; 128
    1a5a:	31 09       	sbc	r19, r1
    report_extra_t r = {
    1a5c:	3b 83       	std	Y+3, r19	; 0x03
    1a5e:	2a 83       	std	Y+2, r18	; 0x02
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1a60:	83 e0       	ldi	r24, 0x03	; 3
    1a62:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <actionmaps+0x7f98e9>
    1a66:	8f ef       	ldi	r24, 0xFF	; 255
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1a68:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    1a6c:	81 50       	subi	r24, 0x01	; 1
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1a6e:	95 fd       	sbrc	r25, 5
    1a70:	06 c0       	rjmp	.+12     	; 0x1a7e <send_system+0x40>
    1a72:	95 ed       	ldi	r25, 0xD5	; 213
    1a74:	9a 95       	dec	r25
    1a76:	f1 f7       	brne	.-4      	; 0x1a74 <send_system+0x36>
    1a78:	00 00       	nop
    1a7a:	81 11       	cpse	r24, r1
    1a7c:	f5 cf       	rjmp	.-22     	; 0x1a68 <send_system+0x2a>
    1a7e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    if (!Endpoint_IsReadWriteAllowed()) return;
    1a82:	85 ff       	sbrs	r24, 5
    1a84:	0d c0       	rjmp	.+26     	; 0x1aa0 <send_system+0x62>
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    1a86:	50 e0       	ldi	r21, 0x00	; 0
    1a88:	40 e0       	ldi	r20, 0x00	; 0
    1a8a:	63 e0       	ldi	r22, 0x03	; 3
    1a8c:	70 e0       	ldi	r23, 0x00	; 0
    1a8e:	ce 01       	movw	r24, r28
    1a90:	01 96       	adiw	r24, 0x01	; 1
    1a92:	0e 94 52 10 	call	0x20a4	; 0x20a4 <Endpoint_Write_Stream_LE>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a96:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    1a9a:	8e 77       	andi	r24, 0x7E	; 126
    1a9c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <actionmaps+0x7f98e8>
}
    1aa0:	0f 90       	pop	r0
    1aa2:	0f 90       	pop	r0
    1aa4:	0f 90       	pop	r0
    1aa6:	df 91       	pop	r29
    1aa8:	cf 91       	pop	r28
    1aaa:	08 95       	ret

00001aac <send_mouse>:
    if (USB_DeviceState != DEVICE_STATE_Configured)
    1aac:	20 91 77 03 	lds	r18, 0x0377	; 0x800377 <USB_DeviceState>
    1ab0:	24 30       	cpi	r18, 0x04	; 4
    1ab2:	f1 f4       	brne	.+60     	; 0x1af0 <send_mouse+0x44>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1ab4:	22 e0       	ldi	r18, 0x02	; 2
    1ab6:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <actionmaps+0x7f98e9>
    1aba:	2f ef       	ldi	r18, 0xFF	; 255
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1abc:	30 91 e8 00 	lds	r19, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    1ac0:	21 50       	subi	r18, 0x01	; 1
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1ac2:	35 fd       	sbrc	r19, 5
    1ac4:	06 c0       	rjmp	.+12     	; 0x1ad2 <send_mouse+0x26>
    1ac6:	35 ed       	ldi	r19, 0xD5	; 213
    1ac8:	3a 95       	dec	r19
    1aca:	f1 f7       	brne	.-4      	; 0x1ac8 <send_mouse+0x1c>
    1acc:	00 00       	nop
    1ace:	21 11       	cpse	r18, r1
    1ad0:	f5 cf       	rjmp	.-22     	; 0x1abc <send_mouse+0x10>
    1ad2:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    if (!Endpoint_IsReadWriteAllowed()) return;
    1ad6:	25 ff       	sbrs	r18, 5
    1ad8:	0b c0       	rjmp	.+22     	; 0x1af0 <send_mouse+0x44>
    Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
    1ada:	50 e0       	ldi	r21, 0x00	; 0
    1adc:	40 e0       	ldi	r20, 0x00	; 0
    1ade:	65 e0       	ldi	r22, 0x05	; 5
    1ae0:	70 e0       	ldi	r23, 0x00	; 0
    1ae2:	0e 94 52 10 	call	0x20a4	; 0x20a4 <Endpoint_Write_Stream_LE>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1ae6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    1aea:	8e 77       	andi	r24, 0x7E	; 126
    1aec:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <actionmaps+0x7f98e8>
}
    1af0:	08 95       	ret

00001af2 <send_keyboard>:
{
    1af2:	cf 93       	push	r28
    1af4:	df 93       	push	r29
    1af6:	d8 2f       	mov	r29, r24
    1af8:	c9 2f       	mov	r28, r25
    if (USB_DeviceState != DEVICE_STATE_Configured)
    1afa:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <USB_DeviceState>
    1afe:	84 30       	cpi	r24, 0x04	; 4
    1b00:	21 f5       	brne	.+72     	; 0x1b4a <send_keyboard+0x58>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <actionmaps+0x7f98e9>
			}
    1b08:	81 e8       	ldi	r24, 0x81	; 129
    1b0a:	81 50       	subi	r24, 0x01	; 1
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(80);
    1b0c:	21 f0       	breq	.+8      	; 0x1b16 <send_keyboard+0x24>
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1b0e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    1b12:	95 ff       	sbrs	r25, 5
    1b14:	1d c0       	rjmp	.+58     	; 0x1b50 <send_keyboard+0x5e>
    1b16:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
        if (!Endpoint_IsReadWriteAllowed()) return;
    1b1a:	85 ff       	sbrs	r24, 5
    1b1c:	16 c0       	rjmp	.+44     	; 0x1b4a <send_keyboard+0x58>
        Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
    1b1e:	50 e0       	ldi	r21, 0x00	; 0
    1b20:	40 e0       	ldi	r20, 0x00	; 0
    1b22:	68 e0       	ldi	r22, 0x08	; 8
    1b24:	70 e0       	ldi	r23, 0x00	; 0
    1b26:	8d 2f       	mov	r24, r29
    1b28:	9c 2f       	mov	r25, r28
    1b2a:	0e 94 52 10 	call	0x20a4	; 0x20a4 <Endpoint_Write_Stream_LE>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1b2e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    1b32:	8e 77       	andi	r24, 0x7E	; 126
    1b34:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <actionmaps+0x7f98e8>
    keyboard_report_sent = *report;
    1b38:	88 e0       	ldi	r24, 0x08	; 8
    1b3a:	ed 2f       	mov	r30, r29
    1b3c:	fc 2f       	mov	r31, r28
    1b3e:	a6 e7       	ldi	r26, 0x76	; 118
    1b40:	b2 e0       	ldi	r27, 0x02	; 2
    1b42:	01 90       	ld	r0, Z+
    1b44:	0d 92       	st	X+, r0
    1b46:	8a 95       	dec	r24
    1b48:	e1 f7       	brne	.-8      	; 0x1b42 <send_keyboard+0x50>
}
    1b4a:	df 91       	pop	r29
    1b4c:	cf 91       	pop	r28
    1b4e:	08 95       	ret
    1b50:	ef e3       	ldi	r30, 0x3F	; 63
    1b52:	f1 e0       	ldi	r31, 0x01	; 1
    1b54:	31 97       	sbiw	r30, 0x01	; 1
    1b56:	f1 f7       	brne	.-4      	; 0x1b54 <send_keyboard+0x62>
    1b58:	00 c0       	rjmp	.+0      	; 0x1b5a <send_keyboard+0x68>
    1b5a:	00 00       	nop
	}
	else
		__ticks = (uint8_t)__tmp;
	_delay_loop_1(__ticks);
#endif
}
    1b5c:	d6 cf       	rjmp	.-84     	; 0x1b0a <send_keyboard+0x18>

00001b5e <console_is_ready>:
{
    1b5e:	cf 93       	push	r28
    1b60:	df 93       	push	r29
    1b62:	00 d0       	rcall	.+0      	; 0x1b64 <console_is_ready+0x6>
    1b64:	00 d0       	rcall	.+0      	; 0x1b66 <console_is_ready+0x8>
    1b66:	0f 92       	push	r0
    1b68:	cd b7       	in	r28, 0x3d	; 61
    1b6a:	de b7       	in	r29, 0x3e	; 62
    if (!hid_listen_ready) {
    1b6c:	20 91 74 01 	lds	r18, 0x0174	; 0x800174 <hid_listen_ready.4879>
    1b70:	2d 83       	std	Y+5, r18	; 0x05
    1b72:	21 11       	cpse	r18, r1
    1b74:	0c c0       	rjmp	.+24     	; 0x1b8e <console_is_ready+0x30>
        if (timer_read32() < 2500)
    1b76:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <timer_read32>
    1b7a:	64 3c       	cpi	r22, 0xC4	; 196
    1b7c:	79 40       	sbci	r23, 0x09	; 9
    1b7e:	81 05       	cpc	r24, r1
    1b80:	91 05       	cpc	r25, r1
    1b82:	28 f0       	brcs	.+10     	; 0x1b8e <console_is_ready+0x30>
        hid_listen_ready = true;
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <hid_listen_ready.4879>
    return true;
    1b8a:	b1 e0       	ldi	r27, 0x01	; 1
    1b8c:	bd 83       	std	Y+5, r27	; 0x05
}
    1b8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b90:	0f 90       	pop	r0
    1b92:	0f 90       	pop	r0
    1b94:	0f 90       	pop	r0
    1b96:	0f 90       	pop	r0
    1b98:	0f 90       	pop	r0
    1b9a:	df 91       	pop	r29
    1b9c:	cf 91       	pop	r28
    1b9e:	08 95       	ret

00001ba0 <sendchar>:

/*******************************************************************************
 * sendchar
 ******************************************************************************/
int8_t sendchar(uint8_t c)
{
    1ba0:	cf 93       	push	r28
    1ba2:	c8 2f       	mov	r28, r24
    if (!console_is_ready())
    1ba4:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <console_is_ready>
    1ba8:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <sendbuf+0x2>
    1bac:	88 23       	and	r24, r24
    1bae:	f9 f0       	breq	.+62     	; 0x1bee <sendchar+0x4e>
    if (!(SREG & (1<<SREG_I)))
    1bb0:	0f b6       	in	r0, 0x3f	; 63
    1bb2:	07 fe       	sbrs	r0, 7
    1bb4:	1c c0       	rjmp	.+56     	; 0x1bee <sendchar+0x4e>
    if (USB_DeviceState != DEVICE_STATE_Configured)
    1bb6:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <USB_DeviceState>
    1bba:	84 30       	cpi	r24, 0x04	; 4
    1bbc:	c1 f4       	brne	.+48     	; 0x1bee <sendchar+0x4e>
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1bbe:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <actionmaps+0x7f98e9>
    1bc2:	8f 70       	andi	r24, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1bc4:	20 91 ec 00 	lds	r18, 0x00EC	; 0x8000ec <actionmaps+0x7f98ec>
    1bc8:	92 2f       	mov	r25, r18
    1bca:	91 70       	andi	r25, 0x01	; 1
    1bcc:	20 fd       	sbrc	r18, 0
    1bce:	90 e8       	ldi	r25, 0x80	; 128
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1bd0:	98 2b       	or	r25, r24
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1bd2:	84 e0       	ldi	r24, 0x04	; 4
    1bd4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <actionmaps+0x7f98e9>
				return ((UECONX & (1 << EPEN)) ? true : false);
    1bd8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <actionmaps+0x7f98eb>
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    1bdc:	80 ff       	sbrs	r24, 0
    1bde:	04 c0       	rjmp	.+8      	; 0x1be8 <sendchar+0x48>
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1be0:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <actionmaps+0x7f98ee>
    1be4:	87 fd       	sbrc	r24, 7
    1be6:	3e c0       	rjmp	.+124    	; 0x1c64 <sendchar+0xc4>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1be8:	9f 70       	andi	r25, 0x0F	; 15
    1bea:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <actionmaps+0x7f98e9>
{
    return (buf->head == buf->tail);
}
static inline bool ringbuf_is_full(ringbuf_t *buf)
{
    return (((buf->head + 1) & buf->size_mask) == buf->tail);
    1bee:	23 2f       	mov	r18, r19
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	c9 01       	movw	r24, r18
    1bf4:	01 96       	adiw	r24, 0x01	; 1
    1bf6:	40 91 18 01 	lds	r20, 0x0118	; 0x800118 <sendbuf+0x4>
    1bfa:	50 e0       	ldi	r21, 0x00	; 0
    1bfc:	84 23       	and	r24, r20
    1bfe:	95 23       	and	r25, r21
    1c00:	40 91 17 01 	lds	r20, 0x0117	; 0x800117 <sendbuf+0x3>
    if (ringbuf_is_full(buf)) {
    1c04:	48 17       	cp	r20, r24
    1c06:	19 06       	cpc	r1, r25
    1c08:	e9 f1       	breq	.+122    	; 0x1c84 <sendchar+0xe4>
    buf->buffer[buf->head] = data;
    1c0a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <sendbuf>
    1c0e:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <sendbuf+0x1>
    1c12:	28 0f       	add	r18, r24
    1c14:	39 1f       	adc	r19, r25
    1c16:	f9 01       	movw	r30, r18
    1c18:	c0 83       	st	Z, r28
    buf->head++;
    1c1a:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <sendbuf+0x2>
    1c1e:	8f 5f       	subi	r24, 0xFF	; 255
    buf->head &= buf->size_mask;
    1c20:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <sendbuf+0x4>
    1c24:	89 23       	and	r24, r25
    1c26:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <sendbuf+0x2>

    #ifdef CONSOLE_ENABLE
    console_putc(c);
    #endif

    return 0;
    1c2a:	2c c0       	rjmp	.+88     	; 0x1c84 <sendchar+0xe4>
    uint8_t data = buf->buffer[buf->tail];
    1c2c:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <sendbuf>
    1c30:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <sendbuf+0x1>
    1c34:	e2 0f       	add	r30, r18
    1c36:	f1 1d       	adc	r31, r1
    1c38:	80 81       	ld	r24, Z
    buf->tail++;
    1c3a:	2f 5f       	subi	r18, 0xFF	; 255
    buf->tail &= buf->size_mask;
    1c3c:	40 91 18 01 	lds	r20, 0x0118	; 0x800118 <sendbuf+0x4>
    1c40:	24 23       	and	r18, r20
    1c42:	20 93 17 01 	sts	0x0117, r18	; 0x800117 <sendbuf+0x3>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1c46:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <actionmaps+0x7f98f1>
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1c4a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
        if (!Endpoint_IsReadWriteAllowed() && Endpoint_IsINReady()) {
    1c4e:	85 fd       	sbrc	r24, 5
    1c50:	09 c0       	rjmp	.+18     	; 0x1c64 <sendchar+0xc4>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1c52:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    1c56:	80 ff       	sbrs	r24, 0
    1c58:	05 c0       	rjmp	.+10     	; 0x1c64 <sendchar+0xc4>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1c5a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    1c5e:	8e 77       	andi	r24, 0x7E	; 126
    1c60:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <actionmaps+0x7f98e8>
    return (buf->head == buf->tail);
    1c64:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <sendbuf+0x3>
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1c68:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    while (!ringbuf_is_empty(&sendbuf) && Endpoint_IsReadWriteAllowed()) {
    1c6c:	32 17       	cp	r19, r18
    1c6e:	19 f0       	breq	.+6      	; 0x1c76 <sendchar+0xd6>
    1c70:	85 fd       	sbrc	r24, 5
    1c72:	dc cf       	rjmp	.-72     	; 0x1c2c <sendchar+0x8c>
    1c74:	b9 cf       	rjmp	.-142    	; 0x1be8 <sendchar+0x48>
    if (ringbuf_is_empty(&sendbuf) && Endpoint_IsReadWriteAllowed()) {
    1c76:	85 ff       	sbrs	r24, 5
    1c78:	b7 cf       	rjmp	.-146    	; 0x1be8 <sendchar+0x48>
				UEDATX = Data;
    1c7a:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <actionmaps+0x7f98f1>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1c7e:	9f 70       	andi	r25, 0x0F	; 15
    1c80:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <actionmaps+0x7f98e9>
}
    1c84:	80 e0       	ldi	r24, 0x00	; 0
    1c86:	cf 91       	pop	r28
    1c88:	08 95       	ret

00001c8a <EVENT_USB_Device_Reset>:
}
    1c8a:	08 95       	ret

00001c8c <EVENT_USB_Device_StartOfFrame>:
    1c8c:	08 95       	ret

00001c8e <EVENT_USB_Device_ConfigurationChanged>:
				return Endpoint_ConfigureEndpoint_Prv(Number,
    1c8e:	42 e0       	ldi	r20, 0x02	; 2
    1c90:	61 ec       	ldi	r22, 0xC1	; 193
    1c92:	81 e0       	ldi	r24, 0x01	; 1
    1c94:	0e 94 54 11 	call	0x22a8	; 0x22a8 <Endpoint_ConfigureEndpoint_Prv>
    1c98:	42 e0       	ldi	r20, 0x02	; 2
    1c9a:	61 ec       	ldi	r22, 0xC1	; 193
    1c9c:	82 e0       	ldi	r24, 0x02	; 2
    1c9e:	0e 94 54 11 	call	0x22a8	; 0x22a8 <Endpoint_ConfigureEndpoint_Prv>
    1ca2:	42 e0       	ldi	r20, 0x02	; 2
    1ca4:	61 ec       	ldi	r22, 0xC1	; 193
    1ca6:	83 e0       	ldi	r24, 0x03	; 3
    1ca8:	0e 94 54 11 	call	0x22a8	; 0x22a8 <Endpoint_ConfigureEndpoint_Prv>
    1cac:	42 e2       	ldi	r20, 0x22	; 34
    1cae:	61 ec       	ldi	r22, 0xC1	; 193
    1cb0:	84 e0       	ldi	r24, 0x04	; 4
    1cb2:	0c 94 54 11 	jmp	0x22a8	; 0x22a8 <Endpoint_ConfigureEndpoint_Prv>

00001cb6 <EVENT_USB_Device_ControlRequest>:
    switch (USB_ControlRequest.bRequest)
    1cb6:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <USB_ControlRequest+0x1>
    1cba:	89 30       	cpi	r24, 0x09	; 9
    1cbc:	81 f1       	breq	.+96     	; 0x1d1e <EVENT_USB_Device_ControlRequest+0x68>
    1cbe:	48 f4       	brcc	.+18     	; 0x1cd2 <EVENT_USB_Device_ControlRequest+0x1c>
    1cc0:	82 30       	cpi	r24, 0x02	; 2
    1cc2:	09 f4       	brne	.+2      	; 0x1cc6 <EVENT_USB_Device_ControlRequest+0x10>
    1cc4:	91 c0       	rjmp	.+290    	; 0x1de8 <EVENT_USB_Device_ControlRequest+0x132>
    1cc6:	83 30       	cpi	r24, 0x03	; 3
    1cc8:	09 f4       	brne	.+2      	; 0x1ccc <EVENT_USB_Device_ControlRequest+0x16>
    1cca:	4c c0       	rjmp	.+152    	; 0x1d64 <EVENT_USB_Device_ControlRequest+0xae>
    1ccc:	81 30       	cpi	r24, 0x01	; 1
    1cce:	41 f0       	breq	.+16     	; 0x1ce0 <EVENT_USB_Device_ControlRequest+0x2a>
    1cd0:	08 95       	ret
    1cd2:	8a 30       	cpi	r24, 0x0A	; 10
    1cd4:	09 f4       	brne	.+2      	; 0x1cd8 <EVENT_USB_Device_ControlRequest+0x22>
    1cd6:	78 c0       	rjmp	.+240    	; 0x1dc8 <EVENT_USB_Device_ControlRequest+0x112>
    1cd8:	8b 30       	cpi	r24, 0x0B	; 11
    1cda:	09 f4       	brne	.+2      	; 0x1cde <EVENT_USB_Device_ControlRequest+0x28>
    1cdc:	5e c0       	rjmp	.+188    	; 0x1d9a <EVENT_USB_Device_ControlRequest+0xe4>
    1cde:	08 95       	ret
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1ce0:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <USB_ControlRequest>
    1ce4:	81 3a       	cpi	r24, 0xA1	; 161
    1ce6:	e9 f5       	brne	.+122    	; 0x1d62 <EVENT_USB_Device_ControlRequest+0xac>
				UEINTX &= ~(1 << RXSTPI);
    1ce8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    1cec:	87 7f       	andi	r24, 0xF7	; 247
    1cee:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <actionmaps+0x7f98e8>
                switch (USB_ControlRequest.wIndex) {
    1cf2:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <USB_ControlRequest+0x4>
    1cf6:	90 91 7d 03 	lds	r25, 0x037D	; 0x80037d <USB_ControlRequest+0x5>
    1cfa:	89 2b       	or	r24, r25
    1cfc:	61 f4       	brne	.+24     	; 0x1d16 <EVENT_USB_Device_ControlRequest+0x60>
                    ReportSize = sizeof(keyboard_report_sent);
    1cfe:	68 e0       	ldi	r22, 0x08	; 8
                    ReportData = (uint8_t*)&keyboard_report_sent;
    1d00:	86 e7       	ldi	r24, 0x76	; 118
    1d02:	92 e0       	ldi	r25, 0x02	; 2
                Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    1d04:	70 e0       	ldi	r23, 0x00	; 0
    1d06:	0e 94 a1 10 	call	0x2142	; 0x2142 <Endpoint_Write_Control_Stream_LE>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1d0a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    1d0e:	8b 77       	andi	r24, 0x7B	; 123
    1d10:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <actionmaps+0x7f98e8>
			}
    1d14:	08 95       	ret
    uint8_t  ReportSize = 0;
    1d16:	60 e0       	ldi	r22, 0x00	; 0
    uint8_t* ReportData = NULL;
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	80 e0       	ldi	r24, 0x00	; 0
    1d1c:	f3 cf       	rjmp	.-26     	; 0x1d04 <EVENT_USB_Device_ControlRequest+0x4e>
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1d1e:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <USB_ControlRequest>
    1d22:	81 32       	cpi	r24, 0x21	; 33
    1d24:	f1 f4       	brne	.+60     	; 0x1d62 <EVENT_USB_Device_ControlRequest+0xac>
                switch (USB_ControlRequest.wIndex) {
    1d26:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <USB_ControlRequest+0x4>
    1d2a:	90 91 7d 03 	lds	r25, 0x037D	; 0x80037d <USB_ControlRequest+0x5>
    1d2e:	89 2b       	or	r24, r25
    1d30:	c1 f4       	brne	.+48     	; 0x1d62 <EVENT_USB_Device_ControlRequest+0xac>
				UEINTX &= ~(1 << RXSTPI);
    1d32:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    1d36:	87 7f       	andi	r24, 0xF7	; 247
    1d38:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <actionmaps+0x7f98e8>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1d3c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
                    while (!(Endpoint_IsOUTReceived())) {
    1d40:	82 ff       	sbrs	r24, 2
    1d42:	0b c0       	rjmp	.+22     	; 0x1d5a <EVENT_USB_Device_ControlRequest+0xa4>
				return UEDATX;
    1d44:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <actionmaps+0x7f98f1>
                    keyboard_led_stats = Endpoint_Read_8();
    1d48:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <keyboard_led_stats>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1d4c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    1d50:	8b 77       	andi	r24, 0x7B	; 123
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1d52:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <actionmaps+0x7f98e8>
                Endpoint_ClearStatusStage();
    1d56:	0c 94 88 11 	jmp	0x2310	; 0x2310 <Endpoint_ClearStatusStage>
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
    1d5a:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <USB_DeviceState>
    1d5e:	81 11       	cpse	r24, r1
    1d60:	ed cf       	rjmp	.-38     	; 0x1d3c <EVENT_USB_Device_ControlRequest+0x86>
}
    1d62:	08 95       	ret
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1d64:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <USB_ControlRequest>
    1d68:	81 3a       	cpi	r24, 0xA1	; 161
    1d6a:	d9 f7       	brne	.-10     	; 0x1d62 <EVENT_USB_Device_ControlRequest+0xac>
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    1d6c:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <USB_ControlRequest+0x4>
    1d70:	90 91 7d 03 	lds	r25, 0x037D	; 0x80037d <USB_ControlRequest+0x5>
    1d74:	89 2b       	or	r24, r25
    1d76:	a9 f7       	brne	.-22     	; 0x1d62 <EVENT_USB_Device_ControlRequest+0xac>
				UEINTX &= ~(1 << RXSTPI);
    1d78:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    1d7c:	87 7f       	andi	r24, 0xF7	; 247
    1d7e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <actionmaps+0x7f98e8>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1d82:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
                    while (!(Endpoint_IsINReady()));
    1d86:	80 ff       	sbrs	r24, 0
    1d88:	fc cf       	rjmp	.-8      	; 0x1d82 <EVENT_USB_Device_ControlRequest+0xcc>
                    Endpoint_Write_8(keyboard_protocol);
    1d8a:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <keyboard_protocol>
				UEDATX = Data;
    1d8e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <actionmaps+0x7f98f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1d92:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    1d96:	8e 77       	andi	r24, 0x7E	; 126
    1d98:	dc cf       	rjmp	.-72     	; 0x1d52 <EVENT_USB_Device_ControlRequest+0x9c>
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1d9a:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <USB_ControlRequest>
    1d9e:	81 32       	cpi	r24, 0x21	; 33
    1da0:	01 f7       	brne	.-64     	; 0x1d62 <EVENT_USB_Device_ControlRequest+0xac>
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    1da2:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <USB_ControlRequest+0x4>
    1da6:	90 91 7d 03 	lds	r25, 0x037D	; 0x80037d <USB_ControlRequest+0x5>
    1daa:	89 2b       	or	r24, r25
    1dac:	d1 f6       	brne	.-76     	; 0x1d62 <EVENT_USB_Device_ControlRequest+0xac>
				UEINTX &= ~(1 << RXSTPI);
    1dae:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    1db2:	87 7f       	andi	r24, 0xF7	; 247
    1db4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <actionmaps+0x7f98e8>
                    Endpoint_ClearStatusStage();
    1db8:	0e 94 88 11 	call	0x2310	; 0x2310 <Endpoint_ClearStatusStage>
                    keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
    1dbc:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <USB_ControlRequest+0x2>
    1dc0:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <keyboard_protocol>
                    clear_keyboard();
    1dc4:	0c 94 10 1b 	jmp	0x3620	; 0x3620 <clear_keyboard>
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1dc8:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <USB_ControlRequest>
    1dcc:	81 32       	cpi	r24, 0x21	; 33
    1dce:	49 f6       	brne	.-110    	; 0x1d62 <EVENT_USB_Device_ControlRequest+0xac>
    1dd0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    1dd4:	87 7f       	andi	r24, 0xF7	; 247
    1dd6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <actionmaps+0x7f98e8>
                Endpoint_ClearStatusStage();
    1dda:	0e 94 88 11 	call	0x2310	; 0x2310 <Endpoint_ClearStatusStage>
                keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
    1dde:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <USB_ControlRequest+0x3>
    1de2:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <keyboard_idle>
    1de6:	08 95       	ret
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1de8:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <USB_ControlRequest>
    1dec:	81 3a       	cpi	r24, 0xA1	; 161
    1dee:	09 f0       	breq	.+2      	; 0x1df2 <EVENT_USB_Device_ControlRequest+0x13c>
    1df0:	b8 cf       	rjmp	.-144    	; 0x1d62 <EVENT_USB_Device_ControlRequest+0xac>
    1df2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    1df6:	87 7f       	andi	r24, 0xF7	; 247
    1df8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <actionmaps+0x7f98e8>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1dfc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
                while (!(Endpoint_IsINReady()));
    1e00:	80 ff       	sbrs	r24, 0
    1e02:	fc cf       	rjmp	.-8      	; 0x1dfc <EVENT_USB_Device_ControlRequest+0x146>
                Endpoint_Write_8(keyboard_idle);
    1e04:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <keyboard_idle>
    1e08:	c2 cf       	rjmp	.-124    	; 0x1d8e <EVENT_USB_Device_ControlRequest+0xd8>

00001e0a <hook_early_init>:
}


/* hooks */
__attribute__((weak))
void hook_early_init(void) {}
    1e0a:	08 95       	ret

00001e0c <hook_late_init>:
    1e0c:	08 95       	ret

00001e0e <hook_usb_suspend_entry>:
 __attribute__((weak))
void hook_usb_suspend_entry(void)
{
    // Turn off LED to save power and keep its status to resotre it later.
    // LED status will be updated by keyboard_task() in main loop hopefully.
    _led_stats = keyboard_led_stats;
    1e0e:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <keyboard_led_stats>
    1e12:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <_led_stats>
    keyboard_led_stats = 0;
    1e16:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <keyboard_led_stats>

    // Calling long task here can prevent USB state transition

    matrix_clear();
    1e1a:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <matrix_clear>
    clear_keyboard();
    1e1e:	0c 94 10 1b 	jmp	0x3620	; 0x3620 <clear_keyboard>

00001e22 <EVENT_USB_Device_Suspend>:
    hook_usb_suspend_entry();
    1e22:	0c 94 07 0f 	jmp	0x1e0e	; 0x1e0e <hook_usb_suspend_entry>

00001e26 <hook_usb_suspend_loop>:
__attribute__((weak))
void hook_usb_suspend_loop(void)
{
#ifndef LUFA_DEBUG_UART
    // This corrupts debug print when suspend
    suspend_power_down();
    1e26:	0e 94 64 22 	call	0x44c8	; 0x44c8 <suspend_power_down>
#endif
    if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
    1e2a:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <USB_Device_RemoteWakeupEnabled>
    1e2e:	88 23       	and	r24, r24
    1e30:	29 f0       	breq	.+10     	; 0x1e3c <hook_usb_suspend_loop+0x16>
    1e32:	0e 94 8d 22 	call	0x451a	; 0x451a <suspend_wakeup_condition>
    1e36:	81 11       	cpse	r24, r1
        USB_Device_SendRemoteWakeup();
    1e38:	0c 94 3c 10 	jmp	0x2078	; 0x2078 <USB_Device_SendRemoteWakeup>
    }
}
    1e3c:	08 95       	ret

00001e3e <hook_usb_wakeup>:

__attribute__((weak))
void hook_usb_wakeup(void)
{
    suspend_wakeup_init();
    1e3e:	0e 94 a1 22 	call	0x4542	; 0x4542 <suspend_wakeup_init>
#ifdef SLEEP_LED_ENABLE
    sleep_led_disable();
#endif

    // Restore LED status and update at keyboard_task() in main loop
    keyboard_led_stats = _led_stats;
    1e42:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <_led_stats>
    1e46:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <keyboard_led_stats>

    // Calling long task here can prevent USB state transition
}
    1e4a:	08 95       	ret

00001e4c <EVENT_USB_Device_WakeUp>:
    hook_usb_wakeup();
    1e4c:	0c 94 1f 0f 	jmp	0x1e3e	; 0x1e3e <hook_usb_wakeup>

00001e50 <hook_usb_startup_wait_loop>:
    1e50:	08 95       	ret

00001e52 <main>:
    MCUSR &= ~(1 << WDRF);
    1e52:	84 b7       	in	r24, 0x34	; 52
    1e54:	87 7f       	andi	r24, 0xF7	; 247
    1e56:	84 bf       	out	0x34, r24	; 52
    1e58:	0f b6       	in	r0, 0x3f	; 63
    1e5a:	f8 94       	cli
    1e5c:	a8 95       	wdr
    1e5e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <actionmaps+0x7f9860>
    1e62:	88 61       	ori	r24, 0x18	; 24
    1e64:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <actionmaps+0x7f9860>
    1e68:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <actionmaps+0x7f9860>
    1e6c:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    1e6e:	80 e8       	ldi	r24, 0x80	; 128
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	0f b6       	in	r0, 0x3f	; 63
    1e74:	f8 94       	cli
    1e76:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <actionmaps+0x7f9861>
    1e7a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <actionmaps+0x7f9861>
    1e7e:	0f be       	out	0x3f, r0	; 63
    print_set_sendchar(sendchar);
    1e80:	80 ed       	ldi	r24, 0xD0	; 208
    1e82:	9d e0       	ldi	r25, 0x0D	; 13
    1e84:	0e 94 31 22 	call	0x4462	; 0x4462 <print_set_sendchar>
    host_set_driver(&lufa_driver);
    1e88:	89 e1       	ldi	r24, 0x19	; 25
    1e8a:	91 e0       	ldi	r25, 0x01	; 1
    1e8c:	0e 94 79 14 	call	0x28f2	; 0x28f2 <host_set_driver>
    print("\n\nTMK:" STR(TMK_VERSION) "/LUFA\n\n");
    1e90:	81 e8       	ldi	r24, 0x81	; 129
    1e92:	92 e0       	ldi	r25, 0x02	; 2
    1e94:	0e 94 01 06 	call	0xc02	; 0xc02 <xputs>
    hook_early_init();
    1e98:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <hook_early_init>
    keyboard_setup();
    1e9c:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <keyboard_setup>
    USB_Disable();
    1ea0:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <USB_Disable>
    USB_Init();
    1ea4:	0e 94 2b 12 	call	0x2456	; 0x2456 <USB_Init>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
    1ea8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <actionmaps+0x7f98e2>
    1eac:	84 60       	ori	r24, 0x04	; 4
    1eae:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <actionmaps+0x7f98e2>
    sei();
    1eb2:	78 94       	sei
    keyboard_init();
    1eb4:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <keyboard_init>
    while (USB_DeviceState != DEVICE_STATE_Configured) {
    1eb8:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <USB_DeviceState>
    1ebc:	84 30       	cpi	r24, 0x04	; 4
    1ebe:	09 f0       	breq	.+2      	; 0x1ec2 <main+0x70>
    1ec0:	44 c0       	rjmp	.+136    	; 0x1f4a <main+0xf8>
    print("\nUSB configured.\n");
    1ec2:	8f e6       	ldi	r24, 0x6F	; 111
    1ec4:	92 e0       	ldi	r25, 0x02	; 2
    1ec6:	0e 94 01 06 	call	0xc02	; 0xc02 <xputs>
    hook_late_init();
    1eca:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <hook_late_init>
    print("\nKeyboard start.\n");
    1ece:	8d e5       	ldi	r24, 0x5D	; 93
    1ed0:	92 e0       	ldi	r25, 0x02	; 2
    1ed2:	0e 94 01 06 	call	0xc02	; 0xc02 <xputs>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1ed6:	c4 e0       	ldi	r28, 0x04	; 4
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
    1ed8:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <USB_DeviceState>
    1edc:	85 30       	cpi	r24, 0x05	; 5
    1ede:	c1 f1       	breq	.+112    	; 0x1f50 <main+0xfe>
        keyboard_task();
    1ee0:	0e 94 43 15 	call	0x2a86	; 0x2a86 <keyboard_task>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1ee4:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <actionmaps+0x7f98e4>
    1ee8:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <actionmaps+0x7f98e5>
    if (fn == USB_Device_GetFrameNumber()) {
    1eec:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <fn.4902>
    1ef0:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <fn.4902+0x1>
    1ef4:	28 17       	cp	r18, r24
    1ef6:	39 07       	cpc	r19, r25
    1ef8:	79 f3       	breq	.-34     	; 0x1ed8 <main+0x86>
    1efa:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <actionmaps+0x7f98e4>
    1efe:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <actionmaps+0x7f98e5>
    fn = USB_Device_GetFrameNumber();
    1f02:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <fn.4902+0x1>
    1f06:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <fn.4902>
    if (!console_is_ready())
    1f0a:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <console_is_ready>
    1f0e:	88 23       	and	r24, r24
    1f10:	19 f3       	breq	.-58     	; 0x1ed8 <main+0x86>
    if (USB_DeviceState != DEVICE_STATE_Configured)
    1f12:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <USB_DeviceState>
    1f16:	84 30       	cpi	r24, 0x04	; 4
    1f18:	f9 f6       	brne	.-66     	; 0x1ed8 <main+0x86>
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1f1a:	90 91 e9 00 	lds	r25, 0x00E9	; 0x8000e9 <actionmaps+0x7f98e9>
    1f1e:	9f 70       	andi	r25, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1f20:	20 91 ec 00 	lds	r18, 0x00EC	; 0x8000ec <actionmaps+0x7f98ec>
    1f24:	82 2f       	mov	r24, r18
    1f26:	81 70       	andi	r24, 0x01	; 1
    1f28:	20 fd       	sbrc	r18, 0
    1f2a:	80 e8       	ldi	r24, 0x80	; 128
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1f2c:	89 2b       	or	r24, r25
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f2e:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <actionmaps+0x7f98e9>
				return ((UECONX & (1 << EPEN)) ? true : false);
    1f32:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <actionmaps+0x7f98eb>
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    1f36:	90 ff       	sbrs	r25, 0
    1f38:	04 c0       	rjmp	.+8      	; 0x1f42 <main+0xf0>
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1f3a:	90 91 ee 00 	lds	r25, 0x00EE	; 0x8000ee <actionmaps+0x7f98ee>
    1f3e:	97 fd       	sbrc	r25, 7
    1f40:	26 c0       	rjmp	.+76     	; 0x1f8e <main+0x13c>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f42:	8f 70       	andi	r24, 0x0F	; 15
    1f44:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <actionmaps+0x7f98e9>
			}
    1f48:	c7 cf       	rjmp	.-114    	; 0x1ed8 <main+0x86>
        hook_usb_startup_wait_loop();
    1f4a:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <hook_usb_startup_wait_loop>
    1f4e:	b4 cf       	rjmp	.-152    	; 0x1eb8 <main+0x66>
            hook_usb_suspend_loop();
    1f50:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <hook_usb_suspend_loop>
    1f54:	c1 cf       	rjmp	.-126    	; 0x1ed8 <main+0x86>
    uint8_t data = buf->buffer[buf->tail];
    1f56:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <sendbuf>
    1f5a:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <sendbuf+0x1>
    1f5e:	e9 0f       	add	r30, r25
    1f60:	f1 1d       	adc	r31, r1
    1f62:	20 81       	ld	r18, Z
    buf->tail++;
    1f64:	9f 5f       	subi	r25, 0xFF	; 255
    buf->tail &= buf->size_mask;
    1f66:	30 91 18 01 	lds	r19, 0x0118	; 0x800118 <sendbuf+0x4>
    1f6a:	93 23       	and	r25, r19
    1f6c:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <sendbuf+0x3>
				UEDATX = Data;
    1f70:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <actionmaps+0x7f98f1>
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1f74:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
        if (!Endpoint_IsReadWriteAllowed() && Endpoint_IsINReady()) {
    1f78:	95 fd       	sbrc	r25, 5
    1f7a:	09 c0       	rjmp	.+18     	; 0x1f8e <main+0x13c>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1f7c:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    1f80:	90 ff       	sbrs	r25, 0
    1f82:	05 c0       	rjmp	.+10     	; 0x1f8e <main+0x13c>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1f84:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    1f88:	9e 77       	andi	r25, 0x7E	; 126
    1f8a:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <actionmaps+0x7f98e8>
    return (buf->head == buf->tail);
    1f8e:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <sendbuf+0x3>
    while (!ringbuf_is_empty(&sendbuf) && Endpoint_IsReadWriteAllowed()) {
    1f92:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <sendbuf+0x2>
    1f96:	29 17       	cp	r18, r25
    1f98:	21 f0       	breq	.+8      	; 0x1fa2 <main+0x150>
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1f9a:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    1f9e:	25 fd       	sbrc	r18, 5
    1fa0:	da cf       	rjmp	.-76     	; 0x1f56 <main+0x104>
					return UEBCLX;
    1fa2:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <actionmaps+0x7f98f2>
    if (Endpoint_BytesInEndpoint() && Endpoint_IsINReady()) {
    1fa6:	99 23       	and	r25, r25
    1fa8:	61 f2       	breq	.-104    	; 0x1f42 <main+0xf0>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1faa:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    1fae:	90 ff       	sbrs	r25, 0
    1fb0:	c8 cf       	rjmp	.-112    	; 0x1f42 <main+0xf0>
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1fb2:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
        while (Endpoint_IsReadWriteAllowed()) {
    1fb6:	95 fd       	sbrc	r25, 5
    1fb8:	06 c0       	rjmp	.+12     	; 0x1fc6 <main+0x174>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1fba:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    1fbe:	9e 77       	andi	r25, 0x7E	; 126
    1fc0:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <actionmaps+0x7f98e8>
			}
    1fc4:	be cf       	rjmp	.-132    	; 0x1f42 <main+0xf0>
				UEDATX = Data;
    1fc6:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <actionmaps+0x7f98f1>
			}
    1fca:	f3 cf       	rjmp	.-26     	; 0x1fb2 <main+0x160>

00001fcc <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
    1fcc:	9c 01       	movw	r18, r24
    1fce:	da 01       	movw	r26, r20
    const uint8_t  DescriptorType   = (wValue >> 8);
    1fd0:	89 2f       	mov	r24, r25
    1fd2:	99 27       	eor	r25, r25
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    1fd4:	83 30       	cpi	r24, 0x03	; 3
    1fd6:	91 05       	cpc	r25, r1
    1fd8:	c1 f0       	breq	.+48     	; 0x200a <CALLBACK_USB_GetDescriptor+0x3e>
    1fda:	68 f4       	brcc	.+26     	; 0x1ff6 <CALLBACK_USB_GetDescriptor+0x2a>
    1fdc:	81 30       	cpi	r24, 0x01	; 1
    1fde:	91 05       	cpc	r25, r1
    1fe0:	09 f4       	brne	.+2      	; 0x1fe4 <CALLBACK_USB_GetDescriptor+0x18>
    1fe2:	45 c0       	rjmp	.+138    	; 0x206e <CALLBACK_USB_GetDescriptor+0xa2>
    1fe4:	02 97       	sbiw	r24, 0x02	; 2
    1fe6:	61 f4       	brne	.+24     	; 0x2000 <CALLBACK_USB_GetDescriptor+0x34>
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
    1fe8:	84 e7       	ldi	r24, 0x74	; 116
    1fea:	90 e0       	ldi	r25, 0x00	; 0
            Address = &ConfigurationDescriptor;
    1fec:	2b ed       	ldi	r18, 0xDB	; 219
    1fee:	32 e0       	ldi	r19, 0x02	; 2
#endif
            }
            break;
    }

    *DescriptorAddress = Address;
    1ff0:	2d 93       	st	X+, r18
    1ff2:	3c 93       	st	X, r19
    return Size;
}
    1ff4:	08 95       	ret
    switch (DescriptorType)
    1ff6:	81 32       	cpi	r24, 0x21	; 33
    1ff8:	91 05       	cpc	r25, r1
    1ffa:	e1 f0       	breq	.+56     	; 0x2034 <CALLBACK_USB_GetDescriptor+0x68>
    1ffc:	82 97       	sbiw	r24, 0x22	; 34
    1ffe:	39 f1       	breq	.+78     	; 0x204e <CALLBACK_USB_GetDescriptor+0x82>
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	80 e0       	ldi	r24, 0x00	; 0
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	f3 cf       	rjmp	.-26     	; 0x1ff0 <CALLBACK_USB_GetDescriptor+0x24>
            switch (DescriptorIndex )
    200a:	c9 01       	movw	r24, r18
    200c:	99 27       	eor	r25, r25
    200e:	21 30       	cpi	r18, 0x01	; 1
    2010:	59 f0       	breq	.+22     	; 0x2028 <CALLBACK_USB_GetDescriptor+0x5c>
    2012:	82 30       	cpi	r24, 0x02	; 2
    2014:	91 05       	cpc	r25, r1
    2016:	59 f0       	breq	.+22     	; 0x202e <CALLBACK_USB_GetDescriptor+0x62>
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
    2018:	e7 ed       	ldi	r30, 0xD7	; 215
    201a:	f2 e0       	ldi	r31, 0x02	; 2
    201c:	89 2b       	or	r24, r25
    201e:	81 f7       	brne	.-32     	; 0x2000 <CALLBACK_USB_GetDescriptor+0x34>
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    2020:	84 91       	lpm	r24, Z
    2022:	90 e0       	ldi	r25, 0x00	; 0
                    Address = &ProductString;
    2024:	9f 01       	movw	r18, r30
                    break;
    2026:	e4 cf       	rjmp	.-56     	; 0x1ff0 <CALLBACK_USB_GetDescriptor+0x24>
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    2028:	e7 ec       	ldi	r30, 0xC7	; 199
    202a:	f2 e0       	ldi	r31, 0x02	; 2
    202c:	f9 cf       	rjmp	.-14     	; 0x2020 <CALLBACK_USB_GetDescriptor+0x54>
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    202e:	e7 e9       	ldi	r30, 0x97	; 151
    2030:	f2 e0       	ldi	r31, 0x02	; 2
    2032:	f6 cf       	rjmp	.-20     	; 0x2020 <CALLBACK_USB_GetDescriptor+0x54>
            switch (wIndex) {
    2034:	64 30       	cpi	r22, 0x04	; 4
    2036:	20 f7       	brcc	.-56     	; 0x2000 <CALLBACK_USB_GetDescriptor+0x34>
    2038:	e6 2f       	mov	r30, r22
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	ee 0f       	add	r30, r30
    203e:	ff 1f       	adc	r31, r31
    2040:	e1 5c       	subi	r30, 0xC1	; 193
    2042:	fe 4f       	sbci	r31, 0xFE	; 254
    2044:	20 81       	ld	r18, Z
    2046:	31 81       	ldd	r19, Z+1	; 0x01
    switch (DescriptorType)
    2048:	89 e0       	ldi	r24, 0x09	; 9
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	d1 cf       	rjmp	.-94     	; 0x1ff0 <CALLBACK_USB_GetDescriptor+0x24>
            switch (wIndex) {
    204e:	64 30       	cpi	r22, 0x04	; 4
    2050:	b8 f6       	brcc	.-82     	; 0x2000 <CALLBACK_USB_GetDescriptor+0x34>
    2052:	70 e0       	ldi	r23, 0x00	; 0
    2054:	fb 01       	movw	r30, r22
    2056:	ee 0f       	add	r30, r30
    2058:	ff 1f       	adc	r31, r31
    205a:	e9 5c       	subi	r30, 0xC9	; 201
    205c:	fe 4f       	sbci	r31, 0xFE	; 254
    205e:	20 81       	ld	r18, Z
    2060:	31 81       	ldd	r19, Z+1	; 0x01
    2062:	6d 5c       	subi	r22, 0xCD	; 205
    2064:	7e 4f       	sbci	r23, 0xFE	; 254
    2066:	fb 01       	movw	r30, r22
    2068:	80 81       	ld	r24, Z
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	c1 cf       	rjmp	.-126    	; 0x1ff0 <CALLBACK_USB_GetDescriptor+0x24>
    switch (DescriptorType)
    206e:	82 e1       	ldi	r24, 0x12	; 18
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	2f e4       	ldi	r18, 0x4F	; 79
    2074:	33 e0       	ldi	r19, 0x03	; 3
    2076:	bc cf       	rjmp	.-136    	; 0x1ff0 <CALLBACK_USB_GetDescriptor+0x24>

00002078 <USB_Device_SendRemoteWakeup>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    2078:	84 e0       	ldi	r24, 0x04	; 4
    207a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    207c:	86 e0       	ldi	r24, 0x06	; 6
    207e:	89 bd       	out	0x29, r24	; 41
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    2080:	09 b4       	in	r0, 0x29	; 41
    2082:	00 fe       	sbrs	r0, 0
    2084:	fd cf       	rjmp	.-6      	; 0x2080 <USB_Device_SendRemoteWakeup+0x8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    2086:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <actionmaps+0x7f98d8>
    208a:	8f 7d       	andi	r24, 0xDF	; 223
    208c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <actionmaps+0x7f98d8>
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
    2090:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <actionmaps+0x7f98e0>
    2094:	82 60       	ori	r24, 0x02	; 2
    2096:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <actionmaps+0x7f98e0>
	while (UDCON & (1 << RMWKUP));
    209a:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <actionmaps+0x7f98e0>
    209e:	81 fd       	sbrc	r24, 1
    20a0:	fc cf       	rjmp	.-8      	; 0x209a <USB_Device_SendRemoteWakeup+0x22>
}
    20a2:	08 95       	ret

000020a4 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    20a4:	af 92       	push	r10
    20a6:	bf 92       	push	r11
    20a8:	cf 92       	push	r12
    20aa:	df 92       	push	r13
    20ac:	ff 92       	push	r15
    20ae:	0f 93       	push	r16
    20b0:	1f 93       	push	r17
    20b2:	cf 93       	push	r28
    20b4:	df 93       	push	r29
    20b6:	6c 01       	movw	r12, r24
    20b8:	eb 01       	movw	r28, r22
    20ba:	8a 01       	movw	r16, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    20bc:	0e 94 a7 11 	call	0x234e	; 0x234e <Endpoint_WaitUntilReady>
    20c0:	f8 2e       	mov	r15, r24
    20c2:	81 11       	cpse	r24, r1
    20c4:	23 c0       	rjmp	.+70     	; 0x210c <Endpoint_Write_Stream_LE+0x68>
	  return ErrorCode;

	if (BytesProcessed != NULL)
    20c6:	01 15       	cp	r16, r1
    20c8:	11 05       	cpc	r17, r1
    20ca:	39 f0       	breq	.+14     	; 0x20da <Endpoint_Write_Stream_LE+0x36>
	{
		Length -= *BytesProcessed;
    20cc:	f8 01       	movw	r30, r16
    20ce:	80 81       	ld	r24, Z
    20d0:	91 81       	ldd	r25, Z+1	; 0x01
    20d2:	c8 1b       	sub	r28, r24
    20d4:	d9 0b       	sbc	r29, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    20d6:	c8 0e       	add	r12, r24
    20d8:	d9 1e       	adc	r13, r25
{
    20da:	b1 2c       	mov	r11, r1
    20dc:	a1 2c       	mov	r10, r1
	}

	while (Length)
    20de:	20 97       	sbiw	r28, 0x00	; 0
    20e0:	a9 f0       	breq	.+42     	; 0x210c <Endpoint_Write_Stream_LE+0x68>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    20e2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    20e6:	85 fd       	sbrc	r24, 5
    20e8:	22 c0       	rjmp	.+68     	; 0x212e <Endpoint_Write_Stream_LE+0x8a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    20ea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    20ee:	8e 77       	andi	r24, 0x7E	; 126
    20f0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <actionmaps+0x7f98e8>

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    20f4:	01 15       	cp	r16, r1
    20f6:	11 05       	cpc	r17, r1
    20f8:	a1 f0       	breq	.+40     	; 0x2122 <Endpoint_Write_Stream_LE+0x7e>
			{
				*BytesProcessed += BytesInTransfer;
    20fa:	f8 01       	movw	r30, r16
    20fc:	80 81       	ld	r24, Z
    20fe:	91 81       	ldd	r25, Z+1	; 0x01
    2100:	a8 0e       	add	r10, r24
    2102:	b9 1e       	adc	r11, r25
    2104:	b1 82       	std	Z+1, r11	; 0x01
    2106:	a0 82       	st	Z, r10
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    2108:	85 e0       	ldi	r24, 0x05	; 5
    210a:	f8 2e       	mov	r15, r24
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    210c:	8f 2d       	mov	r24, r15
    210e:	df 91       	pop	r29
    2110:	cf 91       	pop	r28
    2112:	1f 91       	pop	r17
    2114:	0f 91       	pop	r16
    2116:	ff 90       	pop	r15
    2118:	df 90       	pop	r13
    211a:	cf 90       	pop	r12
    211c:	bf 90       	pop	r11
    211e:	af 90       	pop	r10
    2120:	08 95       	ret
			if ((ErrorCode = Endpoint_WaitUntilReady()))
    2122:	0e 94 a7 11 	call	0x234e	; 0x234e <Endpoint_WaitUntilReady>
    2126:	88 23       	and	r24, r24
    2128:	d1 f2       	breq	.-76     	; 0x20de <Endpoint_Write_Stream_LE+0x3a>
    212a:	f8 2e       	mov	r15, r24
    212c:	ef cf       	rjmp	.-34     	; 0x210c <Endpoint_Write_Stream_LE+0x68>
			TEMPLATE_TRANSFER_BYTE(DataStream);
    212e:	f6 01       	movw	r30, r12
    2130:	81 91       	ld	r24, Z+
    2132:	6f 01       	movw	r12, r30
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2134:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <actionmaps+0x7f98f1>
			Length--;
    2138:	21 97       	sbiw	r28, 0x01	; 1
			BytesInTransfer++;
    213a:	ff ef       	ldi	r31, 0xFF	; 255
    213c:	af 1a       	sub	r10, r31
    213e:	bf 0a       	sbc	r11, r31
    2140:	ce cf       	rjmp	.-100    	; 0x20de <Endpoint_Write_Stream_LE+0x3a>

00002142 <Endpoint_Write_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    2142:	fc 01       	movw	r30, r24
    2144:	cb 01       	movw	r24, r22
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    2146:	20 91 7e 03 	lds	r18, 0x037E	; 0x80037e <USB_ControlRequest+0x6>
    214a:	30 91 7f 03 	lds	r19, 0x037F	; 0x80037f <USB_ControlRequest+0x7>
    214e:	26 17       	cp	r18, r22
    2150:	37 07       	cpc	r19, r23
    2152:	90 f0       	brcs	.+36     	; 0x2178 <Endpoint_Write_Control_Stream_LE+0x36>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    2154:	00 97       	sbiw	r24, 0x00	; 0
    2156:	29 f4       	brne	.+10     	; 0x2162 <Endpoint_Write_Control_Stream_LE+0x20>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2158:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    215c:	2e 77       	andi	r18, 0x7E	; 126
    215e:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <actionmaps+0x7f98e8>
    2162:	40 e0       	ldi	r20, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    2164:	00 97       	sbiw	r24, 0x00	; 0
    2166:	51 f4       	brne	.+20     	; 0x217c <Endpoint_Write_Control_Stream_LE+0x3a>
    2168:	41 11       	cpse	r20, r1
    216a:	08 c0       	rjmp	.+16     	; 0x217c <Endpoint_Write_Control_Stream_LE+0x3a>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    216c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    2170:	82 ff       	sbrs	r24, 2
    2172:	30 c0       	rjmp	.+96     	; 0x21d4 <Endpoint_Write_Control_Stream_LE+0x92>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    2174:	80 e0       	ldi	r24, 0x00	; 0
    2176:	08 95       	ret
    2178:	c9 01       	movw	r24, r18
    217a:	f3 cf       	rjmp	.-26     	; 0x2162 <Endpoint_Write_Control_Stream_LE+0x20>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    217c:	20 91 77 03 	lds	r18, 0x0377	; 0x800377 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2180:	22 23       	and	r18, r18
    2182:	a1 f1       	breq	.+104    	; 0x21ec <Endpoint_Write_Control_Stream_LE+0xaa>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2184:	25 30       	cpi	r18, 0x05	; 5
    2186:	a1 f1       	breq	.+104    	; 0x21f0 <Endpoint_Write_Control_Stream_LE+0xae>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2188:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
		else if (Endpoint_IsSETUPReceived())
    218c:	23 fd       	sbrc	r18, 3
    218e:	2c c0       	rjmp	.+88     	; 0x21e8 <Endpoint_Write_Control_Stream_LE+0xa6>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2190:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
		else if (Endpoint_IsOUTReceived())
    2194:	22 fd       	sbrc	r18, 2
    2196:	ea cf       	rjmp	.-44     	; 0x216c <Endpoint_Write_Control_Stream_LE+0x2a>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2198:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
		if (Endpoint_IsINReady())
    219c:	20 ff       	sbrs	r18, 0
    219e:	e2 cf       	rjmp	.-60     	; 0x2164 <Endpoint_Write_Control_Stream_LE+0x22>
					return UEBCLX;
    21a0:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <actionmaps+0x7f98f2>
    21a4:	30 e0       	ldi	r19, 0x00	; 0
			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    21a6:	00 97       	sbiw	r24, 0x00	; 0
    21a8:	19 f0       	breq	.+6      	; 0x21b0 <Endpoint_Write_Control_Stream_LE+0x6e>
    21aa:	28 30       	cpi	r18, 0x08	; 8
    21ac:	31 05       	cpc	r19, r1
    21ae:	58 f0       	brcs	.+22     	; 0x21c6 <Endpoint_Write_Control_Stream_LE+0x84>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    21b0:	41 e0       	ldi	r20, 0x01	; 1
    21b2:	28 30       	cpi	r18, 0x08	; 8
    21b4:	31 05       	cpc	r19, r1
    21b6:	09 f0       	breq	.+2      	; 0x21ba <Endpoint_Write_Control_Stream_LE+0x78>
    21b8:	40 e0       	ldi	r20, 0x00	; 0
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    21ba:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    21be:	2e 77       	andi	r18, 0x7E	; 126
    21c0:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <actionmaps+0x7f98e8>
			}
    21c4:	cf cf       	rjmp	.-98     	; 0x2164 <Endpoint_Write_Control_Stream_LE+0x22>
				TEMPLATE_TRANSFER_BYTE(DataStream);
    21c6:	41 91       	ld	r20, Z+
				UEDATX = Data;
    21c8:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <actionmaps+0x7f98f1>
				Length--;
    21cc:	01 97       	sbiw	r24, 0x01	; 1
				BytesInEndpoint++;
    21ce:	2f 5f       	subi	r18, 0xFF	; 255
    21d0:	3f 4f       	sbci	r19, 0xFF	; 255
    21d2:	e9 cf       	rjmp	.-46     	; 0x21a6 <Endpoint_Write_Control_Stream_LE+0x64>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    21d4:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    21d8:	88 23       	and	r24, r24
    21da:	41 f0       	breq	.+16     	; 0x21ec <Endpoint_Write_Control_Stream_LE+0xaa>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    21dc:	85 30       	cpi	r24, 0x05	; 5
    21de:	41 f0       	breq	.+16     	; 0x21f0 <Endpoint_Write_Control_Stream_LE+0xae>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    21e0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
		else if (Endpoint_IsSETUPReceived())
    21e4:	83 ff       	sbrs	r24, 3
    21e6:	c2 cf       	rjmp	.-124    	; 0x216c <Endpoint_Write_Control_Stream_LE+0x2a>
		  return ENDPOINT_RWCSTREAM_HostAborted;
    21e8:	81 e0       	ldi	r24, 0x01	; 1
}
    21ea:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    21ec:	82 e0       	ldi	r24, 0x02	; 2
    21ee:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    21f0:	83 e0       	ldi	r24, 0x03	; 3
    21f2:	08 95       	ret

000021f4 <Endpoint_Write_Control_PStream_LE>:
{
    21f4:	fc 01       	movw	r30, r24
    21f6:	cb 01       	movw	r24, r22
	if (Length > USB_ControlRequest.wLength)
    21f8:	20 91 7e 03 	lds	r18, 0x037E	; 0x80037e <USB_ControlRequest+0x6>
    21fc:	30 91 7f 03 	lds	r19, 0x037F	; 0x80037f <USB_ControlRequest+0x7>
    2200:	26 17       	cp	r18, r22
    2202:	37 07       	cpc	r19, r23
    2204:	90 f0       	brcs	.+36     	; 0x222a <Endpoint_Write_Control_PStream_LE+0x36>
	else if (!(Length))
    2206:	00 97       	sbiw	r24, 0x00	; 0
    2208:	29 f4       	brne	.+10     	; 0x2214 <Endpoint_Write_Control_PStream_LE+0x20>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    220a:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    220e:	2e 77       	andi	r18, 0x7E	; 126
    2210:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <actionmaps+0x7f98e8>
    2214:	40 e0       	ldi	r20, 0x00	; 0
	while (Length || LastPacketFull)
    2216:	00 97       	sbiw	r24, 0x00	; 0
    2218:	51 f4       	brne	.+20     	; 0x222e <Endpoint_Write_Control_PStream_LE+0x3a>
    221a:	41 11       	cpse	r20, r1
    221c:	08 c0       	rjmp	.+16     	; 0x222e <Endpoint_Write_Control_PStream_LE+0x3a>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    221e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
	while (!(Endpoint_IsOUTReceived()))
    2222:	82 ff       	sbrs	r24, 2
    2224:	31 c0       	rjmp	.+98     	; 0x2288 <Endpoint_Write_Control_PStream_LE+0x94>
	return ENDPOINT_RWCSTREAM_NoError;
    2226:	80 e0       	ldi	r24, 0x00	; 0
    2228:	08 95       	ret
    222a:	c9 01       	movw	r24, r18
    222c:	f3 cf       	rjmp	.-26     	; 0x2214 <Endpoint_Write_Control_PStream_LE+0x20>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    222e:	20 91 77 03 	lds	r18, 0x0377	; 0x800377 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2232:	22 23       	and	r18, r18
    2234:	a9 f1       	breq	.+106    	; 0x22a0 <Endpoint_Write_Control_PStream_LE+0xac>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2236:	25 30       	cpi	r18, 0x05	; 5
    2238:	a9 f1       	breq	.+106    	; 0x22a4 <Endpoint_Write_Control_PStream_LE+0xb0>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    223a:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
		else if (Endpoint_IsSETUPReceived())
    223e:	23 fd       	sbrc	r18, 3
    2240:	2d c0       	rjmp	.+90     	; 0x229c <Endpoint_Write_Control_PStream_LE+0xa8>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2242:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
		else if (Endpoint_IsOUTReceived())
    2246:	22 fd       	sbrc	r18, 2
    2248:	ea cf       	rjmp	.-44     	; 0x221e <Endpoint_Write_Control_PStream_LE+0x2a>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    224a:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
		if (Endpoint_IsINReady())
    224e:	20 ff       	sbrs	r18, 0
    2250:	e2 cf       	rjmp	.-60     	; 0x2216 <Endpoint_Write_Control_PStream_LE+0x22>
					return UEBCLX;
    2252:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <actionmaps+0x7f98f2>
    2256:	30 e0       	ldi	r19, 0x00	; 0
			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    2258:	00 97       	sbiw	r24, 0x00	; 0
    225a:	19 f0       	breq	.+6      	; 0x2262 <Endpoint_Write_Control_PStream_LE+0x6e>
    225c:	28 30       	cpi	r18, 0x08	; 8
    225e:	31 05       	cpc	r19, r1
    2260:	58 f0       	brcs	.+22     	; 0x2278 <Endpoint_Write_Control_PStream_LE+0x84>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    2262:	41 e0       	ldi	r20, 0x01	; 1
    2264:	28 30       	cpi	r18, 0x08	; 8
    2266:	31 05       	cpc	r19, r1
    2268:	09 f0       	breq	.+2      	; 0x226c <Endpoint_Write_Control_PStream_LE+0x78>
    226a:	40 e0       	ldi	r20, 0x00	; 0
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    226c:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    2270:	2e 77       	andi	r18, 0x7E	; 126
    2272:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <actionmaps+0x7f98e8>
			}
    2276:	cf cf       	rjmp	.-98     	; 0x2216 <Endpoint_Write_Control_PStream_LE+0x22>
				TEMPLATE_TRANSFER_BYTE(DataStream);
    2278:	44 91       	lpm	r20, Z
				UEDATX = Data;
    227a:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <actionmaps+0x7f98f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    227e:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    2280:	01 97       	sbiw	r24, 0x01	; 1
				BytesInEndpoint++;
    2282:	2f 5f       	subi	r18, 0xFF	; 255
    2284:	3f 4f       	sbci	r19, 0xFF	; 255
    2286:	e8 cf       	rjmp	.-48     	; 0x2258 <Endpoint_Write_Control_PStream_LE+0x64>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2288:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    228c:	88 23       	and	r24, r24
    228e:	41 f0       	breq	.+16     	; 0x22a0 <Endpoint_Write_Control_PStream_LE+0xac>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2290:	85 30       	cpi	r24, 0x05	; 5
    2292:	41 f0       	breq	.+16     	; 0x22a4 <Endpoint_Write_Control_PStream_LE+0xb0>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2294:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
		else if (Endpoint_IsSETUPReceived())
    2298:	83 ff       	sbrs	r24, 3
    229a:	c1 cf       	rjmp	.-126    	; 0x221e <Endpoint_Write_Control_PStream_LE+0x2a>
		  return ENDPOINT_RWCSTREAM_HostAborted;
    229c:	81 e0       	ldi	r24, 0x01	; 1
}
    229e:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    22a0:	82 e0       	ldi	r24, 0x02	; 2
    22a2:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    22a4:	83 e0       	ldi	r24, 0x03	; 3
    22a6:	08 95       	ret

000022a8 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    22a8:	98 2f       	mov	r25, r24
    22aa:	95 30       	cpi	r25, 0x05	; 5
    22ac:	28 f0       	brcs	.+10     	; 0x22b8 <Endpoint_ConfigureEndpoint_Prv+0x10>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    22ae:	8f 70       	andi	r24, 0x0F	; 15
    22b0:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <actionmaps+0x7f98e9>
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    22b4:	81 e0       	ldi	r24, 0x01	; 1
    22b6:	08 95       	ret
    22b8:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <actionmaps+0x7f98e9>
			UECFG1XTemp = UECFG1XData;
    22bc:	24 2f       	mov	r18, r20
			UECFG0XTemp = UECFG0XData;
    22be:	76 2f       	mov	r23, r22
			UEIENXTemp  = 0;
    22c0:	50 e0       	ldi	r21, 0x00	; 0
		if (EPNum == Number)
    22c2:	98 17       	cp	r25, r24
    22c4:	31 f0       	breq	.+12     	; 0x22d2 <Endpoint_ConfigureEndpoint_Prv+0x2a>
			UECFG0XTemp = UECFG0X;
    22c6:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <actionmaps+0x7f98ec>
			UECFG1XTemp = UECFG1X;
    22ca:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <actionmaps+0x7f98ed>
			UEIENXTemp  = UEIENX;
    22ce:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <actionmaps+0x7f98f0>
		if (!(UECFG1XTemp & (1 << ALLOC)))
    22d2:	21 fd       	sbrc	r18, 1
    22d4:	02 c0       	rjmp	.+4      	; 0x22da <Endpoint_ConfigureEndpoint_Prv+0x32>
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    22d6:	9f 5f       	subi	r25, 0xFF	; 255
    22d8:	e8 cf       	rjmp	.-48     	; 0x22aa <Endpoint_ConfigureEndpoint_Prv+0x2>
				UECONX &= ~(1 << EPEN);
    22da:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <actionmaps+0x7f98eb>
    22de:	3e 7f       	andi	r19, 0xFE	; 254
    22e0:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <actionmaps+0x7f98eb>
		UECFG1X &= ~(1 << ALLOC);
    22e4:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <actionmaps+0x7f98ed>
    22e8:	3d 7f       	andi	r19, 0xFD	; 253
    22ea:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <actionmaps+0x7f98ed>
				UECONX |= (1 << EPEN);
    22ee:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <actionmaps+0x7f98eb>
    22f2:	31 60       	ori	r19, 0x01	; 1
    22f4:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <actionmaps+0x7f98eb>
		UECFG0X = UECFG0XTemp;
    22f8:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <actionmaps+0x7f98ec>
		UECFG1X = UECFG1XTemp;
    22fc:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <actionmaps+0x7f98ed>
		UEIENX  = UEIENXTemp;
    2300:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <actionmaps+0x7f98f0>
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    2304:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <actionmaps+0x7f98ee>
		if (!(Endpoint_IsConfigured()))
    2308:	27 fd       	sbrc	r18, 7
    230a:	e5 cf       	rjmp	.-54     	; 0x22d6 <Endpoint_ConfigureEndpoint_Prv+0x2e>
		  return false;
    230c:	80 e0       	ldi	r24, 0x00	; 0
#endif
}
    230e:	08 95       	ret

00002310 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    2310:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <USB_ControlRequest>
    2314:	87 ff       	sbrs	r24, 7
    2316:	13 c0       	rjmp	.+38     	; 0x233e <Endpoint_ClearStatusStage+0x2e>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2318:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
	{
		while (!(Endpoint_IsOUTReceived()))
    231c:	82 ff       	sbrs	r24, 2
    231e:	06 c0       	rjmp	.+12     	; 0x232c <Endpoint_ClearStatusStage+0x1c>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2320:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    2324:	8b 77       	andi	r24, 0x7B	; 123
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2326:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <actionmaps+0x7f98e8>
			}
    232a:	04 c0       	rjmp	.+8      	; 0x2334 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    232c:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <USB_DeviceState>
    2330:	81 11       	cpse	r24, r1
    2332:	f2 cf       	rjmp	.-28     	; 0x2318 <Endpoint_ClearStatusStage+0x8>
			  return;
		}

		Endpoint_ClearIN();
	}
}
    2334:	08 95       	ret
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    2336:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <USB_DeviceState>
    233a:	88 23       	and	r24, r24
    233c:	d9 f3       	breq	.-10     	; 0x2334 <Endpoint_ClearStatusStage+0x24>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    233e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
		while (!(Endpoint_IsINReady()))
    2342:	80 ff       	sbrs	r24, 0
    2344:	f8 cf       	rjmp	.-16     	; 0x2336 <Endpoint_ClearStatusStage+0x26>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2346:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    234a:	8e 77       	andi	r24, 0x7E	; 126
    234c:	ec cf       	rjmp	.-40     	; 0x2326 <Endpoint_ClearStatusStage+0x16>

0000234e <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    234e:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <actionmaps+0x7f98e4>
    2352:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <actionmaps+0x7f98e5>
    2356:	95 e6       	ldi	r25, 0x65	; 101
    2358:	a9 01       	movw	r20, r18
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    235a:	20 91 ec 00 	lds	r18, 0x00EC	; 0x8000ec <actionmaps+0x7f98ec>
    235e:	82 2f       	mov	r24, r18
    2360:	81 70       	andi	r24, 0x01	; 1
    2362:	20 ff       	sbrs	r18, 0
    2364:	06 c0       	rjmp	.+12     	; 0x2372 <Endpoint_WaitUntilReady+0x24>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2366:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    236a:	80 ff       	sbrs	r24, 0
    236c:	06 c0       	rjmp	.+12     	; 0x237a <Endpoint_WaitUntilReady+0x2c>
			  return ENDPOINT_READYWAIT_NoError;
    236e:	80 e0       	ldi	r24, 0x00	; 0
    2370:	08 95       	ret
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2372:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    2376:	22 fd       	sbrc	r18, 2
    2378:	1a c0       	rjmp	.+52     	; 0x23ae <Endpoint_WaitUntilReady+0x60>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    237a:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    237e:	88 23       	and	r24, r24
    2380:	89 f0       	breq	.+34     	; 0x23a4 <Endpoint_WaitUntilReady+0x56>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2382:	85 30       	cpi	r24, 0x05	; 5
    2384:	89 f0       	breq	.+34     	; 0x23a8 <Endpoint_WaitUntilReady+0x5a>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    2386:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <actionmaps+0x7f98eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    238a:	85 fd       	sbrc	r24, 5
    238c:	0f c0       	rjmp	.+30     	; 0x23ac <Endpoint_WaitUntilReady+0x5e>
    238e:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <actionmaps+0x7f98e4>
    2392:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <actionmaps+0x7f98e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    2396:	42 17       	cp	r20, r18
    2398:	53 07       	cpc	r21, r19
    239a:	f9 f2       	breq	.-66     	; 0x235a <Endpoint_WaitUntilReady+0xc>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    239c:	91 50       	subi	r25, 0x01	; 1
    239e:	e1 f6       	brne	.-72     	; 0x2358 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    23a0:	84 e0       	ldi	r24, 0x04	; 4
    23a2:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    23a4:	82 e0       	ldi	r24, 0x02	; 2
    23a6:	08 95       	ret
		  return ENDPOINT_READYWAIT_BusSuspended;
    23a8:	83 e0       	ldi	r24, 0x03	; 3
    23aa:	08 95       	ret
		  return ENDPOINT_READYWAIT_EndpointStalled;
    23ac:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
}
    23ae:	08 95       	ret

000023b0 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    23b0:	0e 94 35 12 	call	0x246a	; 0x246a <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    23b4:	0e 94 38 12 	call	0x2470	; 0x2470 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    23b8:	e0 ee       	ldi	r30, 0xE0	; 224
    23ba:	f0 e0       	ldi	r31, 0x00	; 0
    23bc:	80 81       	ld	r24, Z
    23be:	81 60       	ori	r24, 0x01	; 1
    23c0:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    23c2:	e8 ed       	ldi	r30, 0xD8	; 216
    23c4:	f0 e0       	ldi	r31, 0x00	; 0
    23c6:	80 81       	ld	r24, Z
    23c8:	8f 77       	andi	r24, 0x7F	; 127
    23ca:	80 83       	st	Z, r24
				PLLCSR = 0;
    23cc:	19 bc       	out	0x29, r1	; 41
				REGCR  |=  (1 << REGDIS);
    23ce:	e3 e6       	ldi	r30, 0x63	; 99
    23d0:	f0 e0       	ldi	r31, 0x00	; 0
    23d2:	80 81       	ld	r24, Z
    23d4:	81 60       	ori	r24, 0x01	; 1
    23d6:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    23d8:	10 92 76 03 	sts	0x0376, r1	; 0x800376 <USB_IsInitialized>
}
    23dc:	08 95       	ret

000023de <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    23de:	0e 94 35 12 	call	0x246a	; 0x246a <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    23e2:	0e 94 38 12 	call	0x2470	; 0x2470 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    23e6:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <actionmaps+0x7f98d8>
    23ea:	8f 77       	andi	r24, 0x7F	; 127
    23ec:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <actionmaps+0x7f98d8>
				USBCON |=  (1 << USBE);
    23f0:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <actionmaps+0x7f98d8>
    23f4:	80 68       	ori	r24, 0x80	; 128
    23f6:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <actionmaps+0x7f98d8>
				USBCON &= ~(1 << FRZCLK);
    23fa:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <actionmaps+0x7f98d8>
    23fe:	8f 7d       	andi	r24, 0xDF	; 223
    2400:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <actionmaps+0x7f98d8>
				PLLCSR = USB_PLL_PSC;
    2404:	84 e0       	ldi	r24, 0x04	; 4
    2406:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    2408:	86 e0       	ldi	r24, 0x06	; 6
    240a:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    240c:	09 b4       	in	r0, 0x29	; 41
    240e:	00 fe       	sbrs	r0, 0
    2410:	fd cf       	rjmp	.-6      	; 0x240c <USB_ResetInterface+0x2e>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    2412:	10 92 77 03 	sts	0x0377, r1	; 0x800377 <USB_DeviceState>
	USB_Device_ConfigurationNumber  = 0;
    2416:	10 92 73 03 	sts	0x0373, r1	; 0x800373 <USB_Device_ConfigurationNumber>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    241a:	10 92 75 03 	sts	0x0375, r1	; 0x800375 <USB_Device_RemoteWakeupEnabled>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    241e:	10 92 74 03 	sts	0x0374, r1	; 0x800374 <USB_Device_CurrentlySelfPowered>
				return Endpoint_ConfigureEndpoint_Prv(Number,
    2422:	42 e0       	ldi	r20, 0x02	; 2
    2424:	60 e0       	ldi	r22, 0x00	; 0
    2426:	80 e0       	ldi	r24, 0x00	; 0
    2428:	0e 94 54 11 	call	0x22a8	; 0x22a8 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    242c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <actionmaps+0x7f98e1>
    2430:	8e 7f       	andi	r24, 0xFE	; 254
    2432:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <actionmaps+0x7f98e1>
						UDIEN  |= (1 << SUSPE);
    2436:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <actionmaps+0x7f98e2>
    243a:	81 60       	ori	r24, 0x01	; 1
    243c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <actionmaps+0x7f98e2>
						UDIEN  |= (1 << EORSTE);
    2440:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <actionmaps+0x7f98e2>
    2444:	88 60       	ori	r24, 0x08	; 8
    2446:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <actionmaps+0x7f98e2>
				UDCON  &= ~(1 << DETACH);
    244a:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <actionmaps+0x7f98e0>
    244e:	8e 7f       	andi	r24, 0xFE	; 254
    2450:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <actionmaps+0x7f98e0>
}
    2454:	08 95       	ret

00002456 <USB_Init>:
				REGCR  &= ~(1 << REGDIS);
    2456:	e3 e6       	ldi	r30, 0x63	; 99
    2458:	f0 e0       	ldi	r31, 0x00	; 0
    245a:	80 81       	ld	r24, Z
    245c:	8e 7f       	andi	r24, 0xFE	; 254
    245e:	80 83       	st	Z, r24
	USB_IsInitialized = true;
    2460:	81 e0       	ldi	r24, 0x01	; 1
    2462:	80 93 76 03 	sts	0x0376, r24	; 0x800376 <USB_IsInitialized>
	USB_ResetInterface();
    2466:	0c 94 ef 11 	jmp	0x23de	; 0x23de <USB_ResetInterface>

0000246a <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    246a:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <actionmaps+0x7f98e2>
	#endif
}
    246e:	08 95       	ret

00002470 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    2470:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <actionmaps+0x7f98e1>
	#endif
}
    2474:	08 95       	ret

00002476 <__vector_11>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    2476:	1f 92       	push	r1
    2478:	0f 92       	push	r0
    247a:	0f b6       	in	r0, 0x3f	; 63
    247c:	0f 92       	push	r0
    247e:	11 24       	eor	r1, r1
    2480:	2f 93       	push	r18
    2482:	3f 93       	push	r19
    2484:	4f 93       	push	r20
    2486:	5f 93       	push	r21
    2488:	6f 93       	push	r22
    248a:	7f 93       	push	r23
    248c:	8f 93       	push	r24
    248e:	9f 93       	push	r25
    2490:	af 93       	push	r26
    2492:	bf 93       	push	r27
    2494:	ef 93       	push	r30
    2496:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    2498:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <actionmaps+0x7f98e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    249c:	82 ff       	sbrs	r24, 2
    249e:	0b c0       	rjmp	.+22     	; 0x24b6 <__vector_11+0x40>
						return (UDIEN  & (1 << SOFE));
    24a0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <actionmaps+0x7f98e2>
    24a4:	82 ff       	sbrs	r24, 2
    24a6:	07 c0       	rjmp	.+14     	; 0x24b6 <__vector_11+0x40>
						UDINT  &= ~(1 << SOFI);
    24a8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <actionmaps+0x7f98e1>
    24ac:	8b 7f       	andi	r24, 0xFB	; 251
    24ae:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <actionmaps+0x7f98e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    24b2:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <EVENT_USB_Device_StartOfFrame>
						return (UDINT  & (1 << SUSPI));
    24b6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <actionmaps+0x7f98e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    24ba:	80 ff       	sbrs	r24, 0
    24bc:	19 c0       	rjmp	.+50     	; 0x24f0 <__vector_11+0x7a>
						return (UDIEN  & (1 << SUSPE));
    24be:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <actionmaps+0x7f98e2>
    24c2:	80 ff       	sbrs	r24, 0
    24c4:	15 c0       	rjmp	.+42     	; 0x24f0 <__vector_11+0x7a>
						UDIEN  &= ~(1 << SUSPE);
    24c6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <actionmaps+0x7f98e2>
    24ca:	8e 7f       	andi	r24, 0xFE	; 254
    24cc:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <actionmaps+0x7f98e2>
						UDIEN  |= (1 << WAKEUPE);
    24d0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <actionmaps+0x7f98e2>
    24d4:	80 61       	ori	r24, 0x10	; 16
    24d6:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <actionmaps+0x7f98e2>
				USBCON |=  (1 << FRZCLK);
    24da:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <actionmaps+0x7f98d8>
    24de:	80 62       	ori	r24, 0x20	; 32
    24e0:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <actionmaps+0x7f98d8>
				PLLCSR = 0;
    24e4:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    24e6:	85 e0       	ldi	r24, 0x05	; 5
    24e8:	80 93 77 03 	sts	0x0377, r24	; 0x800377 <USB_DeviceState>
		EVENT_USB_Device_Suspend();
    24ec:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <EVENT_USB_Device_Suspend>
						return (UDINT  & (1 << WAKEUPI));
    24f0:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <actionmaps+0x7f98e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    24f4:	84 ff       	sbrs	r24, 4
    24f6:	29 c0       	rjmp	.+82     	; 0x254a <__vector_11+0xd4>
						return (UDIEN  & (1 << WAKEUPE));
    24f8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <actionmaps+0x7f98e2>
    24fc:	84 ff       	sbrs	r24, 4
    24fe:	25 c0       	rjmp	.+74     	; 0x254a <__vector_11+0xd4>
				PLLCSR = USB_PLL_PSC;
    2500:	84 e0       	ldi	r24, 0x04	; 4
    2502:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    2504:	86 e0       	ldi	r24, 0x06	; 6
    2506:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    2508:	09 b4       	in	r0, 0x29	; 41
    250a:	00 fe       	sbrs	r0, 0
    250c:	fd cf       	rjmp	.-6      	; 0x2508 <__vector_11+0x92>
				USBCON &= ~(1 << FRZCLK);
    250e:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <actionmaps+0x7f98d8>
    2512:	8f 7d       	andi	r24, 0xDF	; 223
    2514:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <actionmaps+0x7f98d8>
						UDINT  &= ~(1 << WAKEUPI);
    2518:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <actionmaps+0x7f98e1>
    251c:	8f 7e       	andi	r24, 0xEF	; 239
    251e:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <actionmaps+0x7f98e1>
						UDIEN  &= ~(1 << WAKEUPE);
    2522:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <actionmaps+0x7f98e2>
    2526:	8f 7e       	andi	r24, 0xEF	; 239
    2528:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <actionmaps+0x7f98e2>
						UDIEN  |= (1 << SUSPE);
    252c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <actionmaps+0x7f98e2>
    2530:	81 60       	ori	r24, 0x01	; 1
    2532:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <actionmaps+0x7f98e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    2536:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <USB_Device_ConfigurationNumber>
    253a:	88 23       	and	r24, r24
    253c:	09 f4       	brne	.+2      	; 0x2540 <__vector_11+0xca>
    253e:	43 c0       	rjmp	.+134    	; 0x25c6 <__vector_11+0x150>
		  USB_DeviceState = DEVICE_STATE_Configured;
    2540:	84 e0       	ldi	r24, 0x04	; 4
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    2542:	80 93 77 03 	sts	0x0377, r24	; 0x800377 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    2546:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <EVENT_USB_Device_WakeUp>
						return (UDINT  & (1 << EORSTI));
    254a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <actionmaps+0x7f98e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    254e:	83 ff       	sbrs	r24, 3
    2550:	29 c0       	rjmp	.+82     	; 0x25a4 <__vector_11+0x12e>
						return (UDIEN  & (1 << EORSTE));
    2552:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <actionmaps+0x7f98e2>
    2556:	83 ff       	sbrs	r24, 3
    2558:	25 c0       	rjmp	.+74     	; 0x25a4 <__vector_11+0x12e>
						UDINT  &= ~(1 << EORSTI);
    255a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <actionmaps+0x7f98e1>
    255e:	87 7f       	andi	r24, 0xF7	; 247
    2560:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <actionmaps+0x7f98e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    2564:	82 e0       	ldi	r24, 0x02	; 2
    2566:	80 93 77 03 	sts	0x0377, r24	; 0x800377 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
    256a:	10 92 73 03 	sts	0x0373, r1	; 0x800373 <USB_Device_ConfigurationNumber>
						UDINT  &= ~(1 << SUSPI);
    256e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <actionmaps+0x7f98e1>
    2572:	8e 7f       	andi	r24, 0xFE	; 254
    2574:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <actionmaps+0x7f98e1>
						UDIEN  &= ~(1 << SUSPE);
    2578:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <actionmaps+0x7f98e2>
    257c:	8e 7f       	andi	r24, 0xFE	; 254
    257e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <actionmaps+0x7f98e2>
						UDIEN  |= (1 << WAKEUPE);
    2582:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <actionmaps+0x7f98e2>
    2586:	80 61       	ori	r24, 0x10	; 16
    2588:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <actionmaps+0x7f98e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    258c:	42 e0       	ldi	r20, 0x02	; 2
    258e:	60 e0       	ldi	r22, 0x00	; 0
    2590:	80 e0       	ldi	r24, 0x00	; 0
    2592:	0e 94 54 11 	call	0x22a8	; 0x22a8 <Endpoint_ConfigureEndpoint_Prv>
						UEIENX |= (1 << RXSTPE);
    2596:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <actionmaps+0x7f98f0>
    259a:	88 60       	ori	r24, 0x08	; 8
    259c:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <actionmaps+0x7f98f0>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    25a0:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <EVENT_USB_Device_Reset>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    25a4:	ff 91       	pop	r31
    25a6:	ef 91       	pop	r30
    25a8:	bf 91       	pop	r27
    25aa:	af 91       	pop	r26
    25ac:	9f 91       	pop	r25
    25ae:	8f 91       	pop	r24
    25b0:	7f 91       	pop	r23
    25b2:	6f 91       	pop	r22
    25b4:	5f 91       	pop	r21
    25b6:	4f 91       	pop	r20
    25b8:	3f 91       	pop	r19
    25ba:	2f 91       	pop	r18
    25bc:	0f 90       	pop	r0
    25be:	0f be       	out	0x3f, r0	; 63
    25c0:	0f 90       	pop	r0
    25c2:	1f 90       	pop	r1
    25c4:	18 95       	reti
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    25c6:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <actionmaps+0x7f98e3>
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    25ca:	87 fd       	sbrc	r24, 7
    25cc:	02 c0       	rjmp	.+4      	; 0x25d2 <__vector_11+0x15c>
    25ce:	81 e0       	ldi	r24, 0x01	; 1
    25d0:	b8 cf       	rjmp	.-144    	; 0x2542 <__vector_11+0xcc>
    25d2:	83 e0       	ldi	r24, 0x03	; 3
    25d4:	b6 cf       	rjmp	.-148    	; 0x2542 <__vector_11+0xcc>

000025d6 <__vector_12>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    25d6:	1f 92       	push	r1
    25d8:	0f 92       	push	r0
    25da:	0f b6       	in	r0, 0x3f	; 63
    25dc:	0f 92       	push	r0
    25de:	11 24       	eor	r1, r1
    25e0:	2f 93       	push	r18
    25e2:	3f 93       	push	r19
    25e4:	4f 93       	push	r20
    25e6:	5f 93       	push	r21
    25e8:	6f 93       	push	r22
    25ea:	7f 93       	push	r23
    25ec:	8f 93       	push	r24
    25ee:	9f 93       	push	r25
    25f0:	af 93       	push	r26
    25f2:	bf 93       	push	r27
    25f4:	cf 93       	push	r28
    25f6:	df 93       	push	r29
    25f8:	ef 93       	push	r30
    25fa:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    25fc:	d0 91 e9 00 	lds	r29, 0x00E9	; 0x8000e9 <actionmaps+0x7f98e9>
    2600:	df 70       	andi	r29, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    2602:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <actionmaps+0x7f98ec>
    2606:	c8 2f       	mov	r28, r24
    2608:	c1 70       	andi	r28, 0x01	; 1
    260a:	80 fd       	sbrc	r24, 0
    260c:	c0 e8       	ldi	r28, 0x80	; 128
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    260e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <actionmaps+0x7f98e9>
						UEIENX &= ~(1 << RXSTPE);
    2612:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <actionmaps+0x7f98f0>
    2616:	87 7f       	andi	r24, 0xF7	; 247
    2618:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <actionmaps+0x7f98f0>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    261c:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    261e:	0e 94 2f 13 	call	0x265e	; 0x265e <USB_Device_ProcessControlRequest>
    2622:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <actionmaps+0x7f98e9>
						UEIENX |= (1 << RXSTPE);
    2626:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <actionmaps+0x7f98f0>
    262a:	88 60       	ori	r24, 0x08	; 8
    262c:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <actionmaps+0x7f98f0>
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    2630:	cd 2b       	or	r28, r29
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2632:	cf 70       	andi	r28, 0x0F	; 15
    2634:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <actionmaps+0x7f98e9>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    2638:	ff 91       	pop	r31
    263a:	ef 91       	pop	r30
    263c:	df 91       	pop	r29
    263e:	cf 91       	pop	r28
    2640:	bf 91       	pop	r27
    2642:	af 91       	pop	r26
    2644:	9f 91       	pop	r25
    2646:	8f 91       	pop	r24
    2648:	7f 91       	pop	r23
    264a:	6f 91       	pop	r22
    264c:	5f 91       	pop	r21
    264e:	4f 91       	pop	r20
    2650:	3f 91       	pop	r19
    2652:	2f 91       	pop	r18
    2654:	0f 90       	pop	r0
    2656:	0f be       	out	0x3f, r0	; 63
    2658:	0f 90       	pop	r0
    265a:	1f 90       	pop	r1
    265c:	18 95       	reti

0000265e <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    265e:	1f 93       	push	r17
    2660:	cf 93       	push	r28
    2662:	df 93       	push	r29
    2664:	cd b7       	in	r28, 0x3d	; 61
    2666:	de b7       	in	r29, 0x3e	; 62
    2668:	aa 97       	sbiw	r28, 0x2a	; 42
    266a:	0f b6       	in	r0, 0x3f	; 63
    266c:	f8 94       	cli
    266e:	de bf       	out	0x3e, r29	; 62
    2670:	0f be       	out	0x3f, r0	; 63
    2672:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    2674:	88 e7       	ldi	r24, 0x78	; 120
    2676:	93 e0       	ldi	r25, 0x03	; 3

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    2678:	fc 01       	movw	r30, r24
    267a:	01 96       	adiw	r24, 0x01	; 1
				return UEDATX;
    267c:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <actionmaps+0x7f98f1>
    2680:	20 83       	st	Z, r18
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    2682:	23 e0       	ldi	r18, 0x03	; 3
    2684:	80 38       	cpi	r24, 0x80	; 128
    2686:	92 07       	cpc	r25, r18
    2688:	b9 f7       	brne	.-18     	; 0x2678 <USB_Device_ProcessControlRequest+0x1a>
	#endif

	EVENT_USB_Device_ControlRequest();
    268a:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <EVENT_USB_Device_ControlRequest>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    268e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>

	if (Endpoint_IsSETUPReceived())
    2692:	83 ff       	sbrs	r24, 3
    2694:	16 c1       	rjmp	.+556    	; 0x28c2 <USB_Device_ProcessControlRequest+0x264>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    2696:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
    269a:	90 91 79 03 	lds	r25, 0x0379	; 0x800379 <USB_ControlRequest+0x1>
    269e:	9a 30       	cpi	r25, 0x0A	; 10
    26a0:	08 f0       	brcs	.+2      	; 0x26a4 <USB_Device_ProcessControlRequest+0x46>
    26a2:	0f c1       	rjmp	.+542    	; 0x28c2 <USB_Device_ProcessControlRequest+0x264>
    26a4:	e9 2f       	mov	r30, r25
    26a6:	f0 e0       	ldi	r31, 0x00	; 0
    26a8:	e2 59       	subi	r30, 0x92	; 146
    26aa:	fa 4f       	sbci	r31, 0xFA	; 250
    26ac:	0c 94 a3 2b 	jmp	0x5746	; 0x5746 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    26b0:	80 38       	cpi	r24, 0x80	; 128
    26b2:	81 f0       	breq	.+32     	; 0x26d4 <USB_Device_ProcessControlRequest+0x76>
    26b4:	82 38       	cpi	r24, 0x82	; 130
    26b6:	09 f0       	breq	.+2      	; 0x26ba <USB_Device_ProcessControlRequest+0x5c>
    26b8:	04 c1       	rjmp	.+520    	; 0x28c2 <USB_Device_ProcessControlRequest+0x264>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    26ba:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <USB_ControlRequest+0x4>
    26be:	8f 70       	andi	r24, 0x0F	; 15
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    26c0:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <actionmaps+0x7f98e9>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    26c4:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <actionmaps+0x7f98eb>
    26c8:	85 fb       	bst	r24, 5
    26ca:	88 27       	eor	r24, r24
    26cc:	80 f9       	bld	r24, 0
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    26ce:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <actionmaps+0x7f98e9>
			}
    26d2:	06 c0       	rjmp	.+12     	; 0x26e0 <USB_Device_ProcessControlRequest+0x82>
	uint8_t CurrentStatus = 0;
    26d4:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_RemoteWakeupEnabled)
    26d8:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <USB_Device_RemoteWakeupEnabled>
    26dc:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    26de:	82 60       	ori	r24, 0x02	; 2
				UEINTX &= ~(1 << RXSTPI);
    26e0:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    26e4:	97 7f       	andi	r25, 0xF7	; 247
    26e6:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <actionmaps+0x7f98e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    26ea:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <actionmaps+0x7f98f1>
				UEDATX = (Data >> 8);
    26ee:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <actionmaps+0x7f98f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    26f2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    26f6:	8e 77       	andi	r24, 0x7E	; 126
    26f8:	e0 c0       	rjmp	.+448    	; 0x28ba <USB_Device_ProcessControlRequest+0x25c>
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    26fa:	88 23       	and	r24, r24
    26fc:	09 f4       	brne	.+2      	; 0x2700 <USB_Device_ProcessControlRequest+0xa2>
    26fe:	ce c0       	rjmp	.+412    	; 0x289c <USB_Device_ProcessControlRequest+0x23e>
    2700:	82 30       	cpi	r24, 0x02	; 2
    2702:	09 f0       	breq	.+2      	; 0x2706 <USB_Device_ProcessControlRequest+0xa8>
    2704:	de c0       	rjmp	.+444    	; 0x28c2 <USB_Device_ProcessControlRequest+0x264>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    2706:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <USB_ControlRequest+0x2>
    270a:	81 11       	cpse	r24, r1
    270c:	d1 c0       	rjmp	.+418    	; 0x28b0 <USB_Device_ProcessControlRequest+0x252>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    270e:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <USB_ControlRequest+0x4>
    2712:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    2714:	09 f4       	brne	.+2      	; 0x2718 <USB_Device_ProcessControlRequest+0xba>
    2716:	d5 c0       	rjmp	.+426    	; 0x28c2 <USB_Device_ProcessControlRequest+0x264>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2718:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <actionmaps+0x7f98e9>
				return ((UECONX & (1 << EPEN)) ? true : false);
    271c:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <actionmaps+0x7f98eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    2720:	20 ff       	sbrs	r18, 0
    2722:	c6 c0       	rjmp	.+396    	; 0x28b0 <USB_Device_ProcessControlRequest+0x252>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    2724:	93 30       	cpi	r25, 0x03	; 3
    2726:	31 f4       	brne	.+12     	; 0x2734 <USB_Device_ProcessControlRequest+0xd6>
				UECONX |= (1 << STALLRQ);
    2728:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <actionmaps+0x7f98eb>
    272c:	80 62       	ori	r24, 0x20	; 32
				UECONX |= (1 << RSTDT);
    272e:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <actionmaps+0x7f98eb>
			}
    2732:	be c0       	rjmp	.+380    	; 0x28b0 <USB_Device_ProcessControlRequest+0x252>
				UECONX |= (1 << STALLRQC);
    2734:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <actionmaps+0x7f98eb>
    2738:	90 61       	ori	r25, 0x10	; 16
    273a:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <actionmaps+0x7f98eb>
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    273e:	21 e0       	ldi	r18, 0x01	; 1
    2740:	30 e0       	ldi	r19, 0x00	; 0
    2742:	01 c0       	rjmp	.+2      	; 0x2746 <USB_Device_ProcessControlRequest+0xe8>
    2744:	22 0f       	add	r18, r18
    2746:	8a 95       	dec	r24
    2748:	ea f7       	brpl	.-6      	; 0x2744 <USB_Device_ProcessControlRequest+0xe6>
    274a:	20 93 ea 00 	sts	0x00EA, r18	; 0x8000ea <actionmaps+0x7f98ea>
				UERST = 0;
    274e:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <actionmaps+0x7f98ea>
				UECONX |= (1 << RSTDT);
    2752:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <actionmaps+0x7f98eb>
    2756:	88 60       	ori	r24, 0x08	; 8
    2758:	ea cf       	rjmp	.-44     	; 0x272e <USB_Device_ProcessControlRequest+0xd0>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    275a:	81 11       	cpse	r24, r1
    275c:	b2 c0       	rjmp	.+356    	; 0x28c2 <USB_Device_ProcessControlRequest+0x264>
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    275e:	10 91 7a 03 	lds	r17, 0x037A	; 0x80037a <USB_ControlRequest+0x2>
    2762:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    2764:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <actionmaps+0x7f98e3>
    2768:	80 78       	andi	r24, 0x80	; 128
    276a:	81 2b       	or	r24, r17
    276c:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <actionmaps+0x7f98e3>
				UEINTX &= ~(1 << RXSTPI);
    2770:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    2774:	87 7f       	andi	r24, 0xF7	; 247
    2776:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <actionmaps+0x7f98e8>
	Endpoint_ClearStatusStage();
    277a:	0e 94 88 11 	call	0x2310	; 0x2310 <Endpoint_ClearStatusStage>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    277e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
	while (!(Endpoint_IsINReady()));
    2782:	80 ff       	sbrs	r24, 0
    2784:	fc cf       	rjmp	.-8      	; 0x277e <USB_Device_ProcessControlRequest+0x120>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    2786:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <actionmaps+0x7f98e3>
    278a:	80 68       	ori	r24, 0x80	; 128
    278c:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <actionmaps+0x7f98e3>
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    2790:	82 e0       	ldi	r24, 0x02	; 2
    2792:	11 11       	cpse	r17, r1
    2794:	83 e0       	ldi	r24, 0x03	; 3
    2796:	80 93 77 03 	sts	0x0377, r24	; 0x800377 <USB_DeviceState>
}
    279a:	93 c0       	rjmp	.+294    	; 0x28c2 <USB_Device_ProcessControlRequest+0x264>
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    279c:	80 58       	subi	r24, 0x80	; 128
    279e:	82 30       	cpi	r24, 0x02	; 2
    27a0:	08 f0       	brcs	.+2      	; 0x27a4 <USB_Device_ProcessControlRequest+0x146>
    27a2:	8f c0       	rjmp	.+286    	; 0x28c2 <USB_Device_ProcessControlRequest+0x264>
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    27a4:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <USB_ControlRequest+0x2>
    27a8:	90 91 7b 03 	lds	r25, 0x037B	; 0x80037b <USB_ControlRequest+0x3>
    27ac:	8c 3d       	cpi	r24, 0xDC	; 220
    27ae:	23 e0       	ldi	r18, 0x03	; 3
    27b0:	92 07       	cpc	r25, r18
    27b2:	a1 f5       	brne	.+104    	; 0x281c <USB_Device_ProcessControlRequest+0x1be>
	SignatureDescriptor.Header.Type = DTYPE_String;
    27b4:	83 e0       	ldi	r24, 0x03	; 3
    27b6:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    27b8:	8a e2       	ldi	r24, 0x2A	; 42
    27ba:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    27bc:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    27be:	f8 94       	cli
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    27c0:	de 01       	movw	r26, r28
    27c2:	13 96       	adiw	r26, 0x03	; 3
    27c4:	20 e0       	ldi	r18, 0x00	; 0
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    27c6:	3e e0       	ldi	r19, 0x0E	; 14
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    27c8:	51 e2       	ldi	r21, 0x21	; 33
    27ca:	e3 2f       	mov	r30, r19
    27cc:	f0 e0       	ldi	r31, 0x00	; 0
    27ce:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <actionmaps+0x7f9857>
    27d2:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    27d4:	20 ff       	sbrs	r18, 0
    27d6:	03 c0       	rjmp	.+6      	; 0x27de <USB_Device_ProcessControlRequest+0x180>
					{
						SerialByte >>= 4;
    27d8:	e2 95       	swap	r30
    27da:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    27dc:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    27de:	ef 70       	andi	r30, 0x0F	; 15

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    27e0:	8e 2f       	mov	r24, r30
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	ea 30       	cpi	r30, 0x0A	; 10
    27e6:	c0 f0       	brcs	.+48     	; 0x2818 <USB_Device_ProcessControlRequest+0x1ba>
    27e8:	c7 96       	adiw	r24, 0x37	; 55
    27ea:	8d 93       	st	X+, r24
    27ec:	9d 93       	st	X+, r25
				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    27ee:	2f 5f       	subi	r18, 0xFF	; 255
    27f0:	24 31       	cpi	r18, 0x14	; 20
    27f2:	59 f7       	brne	.-42     	; 0x27ca <USB_Device_ProcessControlRequest+0x16c>
				SREG = GlobalIntState;
    27f4:	4f bf       	out	0x3f, r20	; 63
				UEINTX &= ~(1 << RXSTPI);
    27f6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    27fa:	87 7f       	andi	r24, 0xF7	; 247
    27fc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <actionmaps+0x7f98e8>
	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    2800:	6a e2       	ldi	r22, 0x2A	; 42
    2802:	70 e0       	ldi	r23, 0x00	; 0
    2804:	ce 01       	movw	r24, r28
    2806:	01 96       	adiw	r24, 0x01	; 1
    2808:	0e 94 a1 10 	call	0x2142	; 0x2142 <Endpoint_Write_Control_Stream_LE>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    280c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    2810:	8b 77       	andi	r24, 0x7B	; 123
    2812:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <actionmaps+0x7f98e8>
    2816:	55 c0       	rjmp	.+170    	; 0x28c2 <USB_Device_ProcessControlRequest+0x264>
					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    2818:	c0 96       	adiw	r24, 0x30	; 48
    281a:	e7 cf       	rjmp	.-50     	; 0x27ea <USB_Device_ProcessControlRequest+0x18c>
	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    281c:	ae 01       	movw	r20, r28
    281e:	4f 5f       	subi	r20, 0xFF	; 255
    2820:	5f 4f       	sbci	r21, 0xFF	; 255
    2822:	60 91 7c 03 	lds	r22, 0x037C	; 0x80037c <USB_ControlRequest+0x4>
    2826:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <CALLBACK_USB_GetDescriptor>
    282a:	bc 01       	movw	r22, r24
    282c:	89 2b       	or	r24, r25
    282e:	09 f4       	brne	.+2      	; 0x2832 <USB_Device_ProcessControlRequest+0x1d4>
    2830:	48 c0       	rjmp	.+144    	; 0x28c2 <USB_Device_ProcessControlRequest+0x264>
				UEINTX &= ~(1 << RXSTPI);
    2832:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    2836:	87 7f       	andi	r24, 0xF7	; 247
    2838:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <actionmaps+0x7f98e8>
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    283c:	89 81       	ldd	r24, Y+1	; 0x01
    283e:	9a 81       	ldd	r25, Y+2	; 0x02
    2840:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <Endpoint_Write_Control_PStream_LE>
    2844:	e3 cf       	rjmp	.-58     	; 0x280c <USB_Device_ProcessControlRequest+0x1ae>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    2846:	80 38       	cpi	r24, 0x80	; 128
    2848:	e1 f5       	brne	.+120    	; 0x28c2 <USB_Device_ProcessControlRequest+0x264>
    284a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    284e:	87 7f       	andi	r24, 0xF7	; 247
    2850:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <actionmaps+0x7f98e8>
	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    2854:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <USB_Device_ConfigurationNumber>
				UEDATX = Data;
    2858:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <actionmaps+0x7f98f1>
    285c:	4a cf       	rjmp	.-364    	; 0x26f2 <USB_Device_ProcessControlRequest+0x94>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    285e:	81 11       	cpse	r24, r1
    2860:	30 c0       	rjmp	.+96     	; 0x28c2 <USB_Device_ProcessControlRequest+0x264>
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    2862:	90 91 7a 03 	lds	r25, 0x037A	; 0x80037a <USB_ControlRequest+0x2>
    2866:	92 30       	cpi	r25, 0x02	; 2
    2868:	60 f5       	brcc	.+88     	; 0x28c2 <USB_Device_ProcessControlRequest+0x264>
				UEINTX &= ~(1 << RXSTPI);
    286a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    286e:	87 7f       	andi	r24, 0xF7	; 247
    2870:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <actionmaps+0x7f98e8>
	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    2874:	90 93 73 03 	sts	0x0373, r25	; 0x800373 <USB_Device_ConfigurationNumber>
	Endpoint_ClearStatusStage();
    2878:	0e 94 88 11 	call	0x2310	; 0x2310 <Endpoint_ClearStatusStage>
	if (USB_Device_ConfigurationNumber)
    287c:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <USB_Device_ConfigurationNumber>
    2880:	88 23       	and	r24, r24
    2882:	11 f0       	breq	.+4      	; 0x2888 <USB_Device_ProcessControlRequest+0x22a>
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    2884:	84 e0       	ldi	r24, 0x04	; 4
    2886:	05 c0       	rjmp	.+10     	; 0x2892 <USB_Device_ProcessControlRequest+0x234>
				return (UDADDR & (1 << ADDEN));
    2888:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <actionmaps+0x7f98e3>
    288c:	87 fd       	sbrc	r24, 7
    288e:	fa cf       	rjmp	.-12     	; 0x2884 <USB_Device_ProcessControlRequest+0x226>
    2890:	81 e0       	ldi	r24, 0x01	; 1
    2892:	80 93 77 03 	sts	0x0377, r24	; 0x800377 <USB_DeviceState>
	EVENT_USB_Device_ConfigurationChanged();
    2896:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <EVENT_USB_Device_ConfigurationChanged>
    289a:	13 c0       	rjmp	.+38     	; 0x28c2 <USB_Device_ProcessControlRequest+0x264>
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    289c:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <USB_ControlRequest+0x2>
    28a0:	81 30       	cpi	r24, 0x01	; 1
    28a2:	79 f4       	brne	.+30     	; 0x28c2 <USB_Device_ProcessControlRequest+0x264>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    28a4:	81 e0       	ldi	r24, 0x01	; 1
    28a6:	93 30       	cpi	r25, 0x03	; 3
    28a8:	09 f0       	breq	.+2      	; 0x28ac <USB_Device_ProcessControlRequest+0x24e>
    28aa:	80 e0       	ldi	r24, 0x00	; 0
    28ac:	80 93 75 03 	sts	0x0375, r24	; 0x800375 <USB_Device_RemoteWakeupEnabled>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    28b0:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <actionmaps+0x7f98e9>
				UEINTX &= ~(1 << RXSTPI);
    28b4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    28b8:	87 7f       	andi	r24, 0xF7	; 247
    28ba:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <actionmaps+0x7f98e8>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    28be:	0e 94 88 11 	call	0x2310	; 0x2310 <Endpoint_ClearStatusStage>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    28c2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
	if (Endpoint_IsSETUPReceived())
    28c6:	83 ff       	sbrs	r24, 3
    28c8:	0a c0       	rjmp	.+20     	; 0x28de <USB_Device_ProcessControlRequest+0x280>
				UEINTX &= ~(1 << RXSTPI);
    28ca:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <actionmaps+0x7f98e8>
    28ce:	87 7f       	andi	r24, 0xF7	; 247
    28d0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <actionmaps+0x7f98e8>
				UECONX |= (1 << STALLRQ);
    28d4:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <actionmaps+0x7f98eb>
    28d8:	80 62       	ori	r24, 0x20	; 32
    28da:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <actionmaps+0x7f98eb>
}
    28de:	aa 96       	adiw	r28, 0x2a	; 42
    28e0:	0f b6       	in	r0, 0x3f	; 63
    28e2:	f8 94       	cli
    28e4:	de bf       	out	0x3e, r29	; 62
    28e6:	0f be       	out	0x3f, r0	; 63
    28e8:	cd bf       	out	0x3d, r28	; 61
    28ea:	df 91       	pop	r29
    28ec:	cf 91       	pop	r28
    28ee:	1f 91       	pop	r17
    28f0:	08 95       	ret

000028f2 <host_set_driver>:
static uint16_t last_consumer_report = 0;


void host_set_driver(host_driver_t *d)
{
    driver = d;
    28f2:	90 93 85 02 	sts	0x0285, r25	; 0x800285 <driver+0x1>
    28f6:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <driver>
}
    28fa:	08 95       	ret

000028fc <host_keyboard_leds>:
    return driver;
}

uint8_t host_keyboard_leds(void)
{
    if (!driver) return 0;
    28fc:	e0 91 84 02 	lds	r30, 0x0284	; 0x800284 <driver>
    2900:	f0 91 85 02 	lds	r31, 0x0285	; 0x800285 <driver+0x1>
    2904:	30 97       	sbiw	r30, 0x00	; 0
    2906:	21 f0       	breq	.+8      	; 0x2910 <host_keyboard_leds+0x14>
    return (*driver->keyboard_leds)();
    2908:	01 90       	ld	r0, Z+
    290a:	f0 81       	ld	r31, Z
    290c:	e0 2d       	mov	r30, r0
    290e:	09 94       	ijmp
}
    2910:	80 e0       	ldi	r24, 0x00	; 0
    2912:	08 95       	ret

00002914 <host_keyboard_send>:
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    2914:	ef 92       	push	r14
    2916:	ff 92       	push	r15
    2918:	0f 93       	push	r16
    291a:	1f 93       	push	r17
    291c:	cf 93       	push	r28
    291e:	df 93       	push	r29
    2920:	8c 01       	movw	r16, r24
    if (!driver) return;
    2922:	e0 91 84 02 	lds	r30, 0x0284	; 0x800284 <driver>
    2926:	f0 91 85 02 	lds	r31, 0x0285	; 0x800285 <driver+0x1>
    292a:	30 97       	sbiw	r30, 0x00	; 0
    292c:	c1 f1       	breq	.+112    	; 0x299e <host_keyboard_send+0x8a>
    (*driver->send_keyboard)(report);
    292e:	02 80       	ldd	r0, Z+2	; 0x02
    2930:	f3 81       	ldd	r31, Z+3	; 0x03
    2932:	e0 2d       	mov	r30, r0
    2934:	09 95       	icall

    if (debug_keyboard) {
    2936:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <debug_config>
    293a:	82 ff       	sbrs	r24, 2
    293c:	30 c0       	rjmp	.+96     	; 0x299e <host_keyboard_send+0x8a>
        dprint("keyboard: ");
    293e:	80 ff       	sbrs	r24, 0
    2940:	04 c0       	rjmp	.+8      	; 0x294a <host_keyboard_send+0x36>
    2942:	8c e6       	ldi	r24, 0x6C	; 108
    2944:	94 e0       	ldi	r25, 0x04	; 4
    2946:	0e 94 01 06 	call	0xc02	; 0xc02 <xputs>
{
    294a:	d0 e0       	ldi	r29, 0x00	; 0
    294c:	c0 e0       	ldi	r28, 0x00	; 0
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
    294e:	86 e6       	ldi	r24, 0x66	; 102
    2950:	e8 2e       	mov	r14, r24
    2952:	84 e0       	ldi	r24, 0x04	; 4
    2954:	f8 2e       	mov	r15, r24
    2956:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <debug_config>
    295a:	80 ff       	sbrs	r24, 0
    295c:	0e c0       	rjmp	.+28     	; 0x297a <host_keyboard_send+0x66>
    295e:	f8 01       	movw	r30, r16
    2960:	ec 0f       	add	r30, r28
    2962:	fd 1f       	adc	r31, r29
    2964:	80 81       	ld	r24, Z
    2966:	1f 92       	push	r1
    2968:	8f 93       	push	r24
    296a:	ff 92       	push	r15
    296c:	ef 92       	push	r14
    296e:	0e 94 9a 06 	call	0xd34	; 0xd34 <__xprintf>
    2972:	0f 90       	pop	r0
    2974:	0f 90       	pop	r0
    2976:	0f 90       	pop	r0
    2978:	0f 90       	pop	r0
    297a:	21 96       	adiw	r28, 0x01	; 1
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
    297c:	c8 30       	cpi	r28, 0x08	; 8
    297e:	d1 05       	cpc	r29, r1
    2980:	51 f7       	brne	.-44     	; 0x2956 <host_keyboard_send+0x42>
        }
        dprint("\n");
    2982:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <debug_config>
    2986:	80 ff       	sbrs	r24, 0
    2988:	0a c0       	rjmp	.+20     	; 0x299e <host_keyboard_send+0x8a>
    298a:	84 e6       	ldi	r24, 0x64	; 100
    298c:	94 e0       	ldi	r25, 0x04	; 4
    }
}
    298e:	df 91       	pop	r29
    2990:	cf 91       	pop	r28
    2992:	1f 91       	pop	r17
    2994:	0f 91       	pop	r16
    2996:	ff 90       	pop	r15
    2998:	ef 90       	pop	r14
        dprint("\n");
    299a:	0c 94 01 06 	jmp	0xc02	; 0xc02 <xputs>
}
    299e:	df 91       	pop	r29
    29a0:	cf 91       	pop	r28
    29a2:	1f 91       	pop	r17
    29a4:	0f 91       	pop	r16
    29a6:	ff 90       	pop	r15
    29a8:	ef 90       	pop	r14
    29aa:	08 95       	ret

000029ac <host_mouse_send>:

void host_mouse_send(report_mouse_t *report)
{
    if (!driver) return;
    29ac:	e0 91 84 02 	lds	r30, 0x0284	; 0x800284 <driver>
    29b0:	f0 91 85 02 	lds	r31, 0x0285	; 0x800285 <driver+0x1>
    29b4:	30 97       	sbiw	r30, 0x00	; 0
    29b6:	21 f0       	breq	.+8      	; 0x29c0 <host_mouse_send+0x14>
    (*driver->send_mouse)(report);
    29b8:	04 80       	ldd	r0, Z+4	; 0x04
    29ba:	f5 81       	ldd	r31, Z+5	; 0x05
    29bc:	e0 2d       	mov	r30, r0
    29be:	09 94       	ijmp
}
    29c0:	08 95       	ret

000029c2 <host_system_send>:

void host_system_send(uint16_t report)
{
    29c2:	cf 93       	push	r28
    29c4:	df 93       	push	r29
    29c6:	ec 01       	movw	r28, r24
    if (report == last_system_report) return;
    29c8:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <last_system_report>
    29cc:	90 91 83 02 	lds	r25, 0x0283	; 0x800283 <last_system_report+0x1>
    29d0:	8c 17       	cp	r24, r28
    29d2:	9d 07       	cpc	r25, r29
    29d4:	01 f1       	breq	.+64     	; 0x2a16 <host_system_send+0x54>
    last_system_report = report;
    29d6:	d0 93 83 02 	sts	0x0283, r29	; 0x800283 <last_system_report+0x1>
    29da:	c0 93 82 02 	sts	0x0282, r28	; 0x800282 <last_system_report>

    if (!driver) return;
    29de:	e0 91 84 02 	lds	r30, 0x0284	; 0x800284 <driver>
    29e2:	f0 91 85 02 	lds	r31, 0x0285	; 0x800285 <driver+0x1>
    29e6:	30 97       	sbiw	r30, 0x00	; 0
    29e8:	b1 f0       	breq	.+44     	; 0x2a16 <host_system_send+0x54>
    (*driver->send_system)(report);
    29ea:	06 80       	ldd	r0, Z+6	; 0x06
    29ec:	f7 81       	ldd	r31, Z+7	; 0x07
    29ee:	e0 2d       	mov	r30, r0
    29f0:	ce 01       	movw	r24, r28
    29f2:	09 95       	icall

    if (debug_keyboard) {
        dprintf("system: %04X\n", report);
    29f4:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <debug_config>
    29f8:	85 70       	andi	r24, 0x05	; 5
    29fa:	85 30       	cpi	r24, 0x05	; 5
    29fc:	61 f4       	brne	.+24     	; 0x2a16 <host_system_send+0x54>
    29fe:	df 93       	push	r29
    2a00:	cf 93       	push	r28
    2a02:	86 e5       	ldi	r24, 0x56	; 86
    2a04:	94 e0       	ldi	r25, 0x04	; 4
    2a06:	9f 93       	push	r25
    2a08:	8f 93       	push	r24
    2a0a:	0e 94 9a 06 	call	0xd34	; 0xd34 <__xprintf>
    2a0e:	0f 90       	pop	r0
    2a10:	0f 90       	pop	r0
    2a12:	0f 90       	pop	r0
    2a14:	0f 90       	pop	r0
    }
}
    2a16:	df 91       	pop	r29
    2a18:	cf 91       	pop	r28
    2a1a:	08 95       	ret

00002a1c <host_consumer_send>:

void host_consumer_send(uint16_t report)
{
    2a1c:	cf 93       	push	r28
    2a1e:	df 93       	push	r29
    2a20:	ec 01       	movw	r28, r24
    if (report == last_consumer_report) return;
    2a22:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <last_consumer_report>
    2a26:	90 91 81 02 	lds	r25, 0x0281	; 0x800281 <last_consumer_report+0x1>
    2a2a:	8c 17       	cp	r24, r28
    2a2c:	9d 07       	cpc	r25, r29
    2a2e:	01 f1       	breq	.+64     	; 0x2a70 <host_consumer_send+0x54>
    last_consumer_report = report;
    2a30:	d0 93 81 02 	sts	0x0281, r29	; 0x800281 <last_consumer_report+0x1>
    2a34:	c0 93 80 02 	sts	0x0280, r28	; 0x800280 <last_consumer_report>

    if (!driver) return;
    2a38:	e0 91 84 02 	lds	r30, 0x0284	; 0x800284 <driver>
    2a3c:	f0 91 85 02 	lds	r31, 0x0285	; 0x800285 <driver+0x1>
    2a40:	30 97       	sbiw	r30, 0x00	; 0
    2a42:	b1 f0       	breq	.+44     	; 0x2a70 <host_consumer_send+0x54>
    (*driver->send_consumer)(report);
    2a44:	00 84       	ldd	r0, Z+8	; 0x08
    2a46:	f1 85       	ldd	r31, Z+9	; 0x09
    2a48:	e0 2d       	mov	r30, r0
    2a4a:	ce 01       	movw	r24, r28
    2a4c:	09 95       	icall

    if (debug_keyboard) {
        dprintf("consumer: %04X\n", report);
    2a4e:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <debug_config>
    2a52:	85 70       	andi	r24, 0x05	; 5
    2a54:	85 30       	cpi	r24, 0x05	; 5
    2a56:	61 f4       	brne	.+24     	; 0x2a70 <host_consumer_send+0x54>
    2a58:	df 93       	push	r29
    2a5a:	cf 93       	push	r28
    2a5c:	86 e4       	ldi	r24, 0x46	; 70
    2a5e:	94 e0       	ldi	r25, 0x04	; 4
    2a60:	9f 93       	push	r25
    2a62:	8f 93       	push	r24
    2a64:	0e 94 9a 06 	call	0xd34	; 0xd34 <__xprintf>
    2a68:	0f 90       	pop	r0
    2a6a:	0f 90       	pop	r0
    2a6c:	0f 90       	pop	r0
    2a6e:	0f 90       	pop	r0
    }
}
    2a70:	df 91       	pop	r29
    2a72:	cf 91       	pop	r28
    2a74:	08 95       	ret

00002a76 <keyboard_setup>:
#endif


void keyboard_setup(void)
{
    matrix_setup();
    2a76:	0c 94 f3 15 	jmp	0x2be6	; 0x2be6 <matrix_setup>

00002a7a <keyboard_init>:
}

void keyboard_init(void)
{
    timer_init();
    2a7a:	0e 94 cc 22 	call	0x4598	; 0x4598 <timer_init>
    matrix_init();
    2a7e:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <matrix_init>
#endif
#ifdef SERIAL_MOUSE_ENABLE
    serial_mouse_init();
#endif
#ifdef ADB_MOUSE_ENABLE
    adb_mouse_init();
    2a82:	0c 94 d2 0b 	jmp	0x17a4	; 0x17a4 <adb_mouse_init>

00002a86 <keyboard_task>:
/*
 * Do keyboard routine jobs: scan matrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
    2a86:	8f 92       	push	r8
    2a88:	9f 92       	push	r9
    2a8a:	af 92       	push	r10
    2a8c:	bf 92       	push	r11
    2a8e:	df 92       	push	r13
    2a90:	ef 92       	push	r14
    2a92:	ff 92       	push	r15
    2a94:	0f 93       	push	r16
    2a96:	1f 93       	push	r17
    2a98:	cf 93       	push	r28
    2a9a:	df 93       	push	r29
    2a9c:	00 d0       	rcall	.+0      	; 0x2a9e <keyboard_task+0x18>
    2a9e:	00 d0       	rcall	.+0      	; 0x2aa0 <keyboard_task+0x1a>
    2aa0:	0f 92       	push	r0
    2aa2:	cd b7       	in	r28, 0x3d	; 61
    2aa4:	de b7       	in	r29, 0x3e	; 62
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    2aa6:	0e 94 fe 09 	call	0x13fc	; 0x13fc <matrix_scan>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    2aaa:	87 e8       	ldi	r24, 0x87	; 135
    2aac:	a8 2e       	mov	r10, r24
    2aae:	82 e0       	ldi	r24, 0x02	; 2
    2ab0:	b8 2e       	mov	r11, r24
    2ab2:	10 e0       	ldi	r17, 0x00	; 0
        matrix_row = matrix_get_row(r);
    2ab4:	81 2f       	mov	r24, r17
    2ab6:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <matrix_get_row>
    2aba:	f8 2e       	mov	r15, r24
        matrix_change = matrix_row ^ matrix_prev[r];
    2abc:	f5 01       	movw	r30, r10
    2abe:	d1 90       	ld	r13, Z+
    2ac0:	5f 01       	movw	r10, r30
        if (matrix_change) {
    2ac2:	d8 16       	cp	r13, r24
    2ac4:	99 f1       	breq	.+102    	; 0x2b2c <keyboard_task+0xa6>
                matrix_ghost[r] = matrix_row;
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
    2ac6:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <debug_config>
    2aca:	81 fd       	sbrc	r24, 1
    2acc:	0e 94 08 16 	call	0x2c10	; 0x2c10 <matrix_print>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    2ad0:	e1 2c       	mov	r14, r1
    2ad2:	01 e0       	ldi	r16, 0x01	; 1
        matrix_change = matrix_row ^ matrix_prev[r];
    2ad4:	df 24       	eor	r13, r15
    2ad6:	45 01       	movw	r8, r10
    2ad8:	f1 e0       	ldi	r31, 0x01	; 1
    2ada:	8f 1a       	sub	r8, r31
    2adc:	91 08       	sbc	r9, r1
            matrix_row_t col_mask = 1;
            for (uint8_t c = 0; c < MATRIX_COLS; c++, col_mask <<= 1) {
                if (matrix_change & col_mask) {
    2ade:	8d 2d       	mov	r24, r13
    2ae0:	80 23       	and	r24, r16
    2ae2:	f9 f0       	breq	.+62     	; 0x2b22 <keyboard_task+0x9c>
                    keyevent_t e = (keyevent_t){
    2ae4:	e9 82       	std	Y+1, r14	; 0x01
    2ae6:	1a 83       	std	Y+2, r17	; 0x02
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & col_mask),
    2ae8:	91 e0       	ldi	r25, 0x01	; 1
    2aea:	8f 2d       	mov	r24, r15
    2aec:	80 23       	and	r24, r16
    2aee:	09 f4       	brne	.+2      	; 0x2af2 <keyboard_task+0x6c>
    2af0:	90 e0       	ldi	r25, 0x00	; 0
                    keyevent_t e = (keyevent_t){
    2af2:	9b 83       	std	Y+3, r25	; 0x03
                        .time = (timer_read() | 1) /* time should not be 0 */
    2af4:	0e 94 d5 22 	call	0x45aa	; 0x45aa <timer_read>
    2af8:	81 60       	ori	r24, 0x01	; 1
                    keyevent_t e = (keyevent_t){
    2afa:	78 2f       	mov	r23, r24
    2afc:	9d 83       	std	Y+5, r25	; 0x05
    2afe:	8c 83       	std	Y+4, r24	; 0x04
                    };
                    action_exec(e);
    2b00:	49 81       	ldd	r20, Y+1	; 0x01
    2b02:	5a 81       	ldd	r21, Y+2	; 0x02
    2b04:	6b 81       	ldd	r22, Y+3	; 0x03
    2b06:	8d 81       	ldd	r24, Y+5	; 0x05
    2b08:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <action_exec>
                    hook_matrix_change(e);
    2b0c:	49 81       	ldd	r20, Y+1	; 0x01
    2b0e:	5a 81       	ldd	r21, Y+2	; 0x02
    2b10:	6b 81       	ldd	r22, Y+3	; 0x03
    2b12:	7c 81       	ldd	r23, Y+4	; 0x04
    2b14:	8d 81       	ldd	r24, Y+5	; 0x05
    2b16:	0e 94 4f 22 	call	0x449e	; 0x449e <hook_matrix_change>
                    // record a processed key
                    matrix_prev[r] ^= col_mask;
    2b1a:	f4 01       	movw	r30, r8
    2b1c:	80 81       	ld	r24, Z
    2b1e:	80 27       	eor	r24, r16
    2b20:	80 83       	st	Z, r24
            for (uint8_t c = 0; c < MATRIX_COLS; c++, col_mask <<= 1) {
    2b22:	e3 94       	inc	r14
    2b24:	00 0f       	add	r16, r16
    2b26:	f8 e0       	ldi	r31, 0x08	; 8
    2b28:	ef 12       	cpse	r14, r31
    2b2a:	d9 cf       	rjmp	.-78     	; 0x2ade <keyboard_task+0x58>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    2b2c:	1f 5f       	subi	r17, 0xFF	; 255
    2b2e:	10 31       	cpi	r17, 0x10	; 16
    2b30:	09 f0       	breq	.+2      	; 0x2b34 <keyboard_task+0xae>
    2b32:	c0 cf       	rjmp	.-128    	; 0x2ab4 <keyboard_task+0x2e>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
    2b34:	8f ef       	ldi	r24, 0xFF	; 255
    2b36:	89 83       	std	Y+1, r24	; 0x01
    2b38:	8a 83       	std	Y+2, r24	; 0x02
    2b3a:	1b 82       	std	Y+3, r1	; 0x03
    2b3c:	0e 94 d5 22 	call	0x45aa	; 0x45aa <timer_read>
    2b40:	81 60       	ori	r24, 0x01	; 1
    2b42:	78 2f       	mov	r23, r24
    2b44:	9d 83       	std	Y+5, r25	; 0x05
    2b46:	8c 83       	std	Y+4, r24	; 0x04
    2b48:	49 81       	ldd	r20, Y+1	; 0x01
    2b4a:	5a 81       	ldd	r21, Y+2	; 0x02
    2b4c:	6b 81       	ldd	r22, Y+3	; 0x03
    2b4e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b50:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <action_exec>

//MATRIX_LOOP_END:

    hook_keyboard_loop();
    2b54:	0e 94 4e 22 	call	0x449c	; 0x449c <hook_keyboard_loop>

#ifdef MOUSEKEY_ENABLE
    // mousekey repeat & acceleration
    mousekey_task();
    2b58:	0e 94 b0 25 	call	0x4b60	; 0x4b60 <mousekey_task>
#ifdef SERIAL_MOUSE_ENABLE
        serial_mouse_task();
#endif

#ifdef ADB_MOUSE_ENABLE
        adb_mouse_task();
    2b5c:	0e 94 7d 08 	call	0x10fa	; 0x10fa <adb_mouse_task>
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
    2b60:	0e 94 7e 14 	call	0x28fc	; 0x28fc <host_keyboard_leds>
    2b64:	90 91 86 02 	lds	r25, 0x0286	; 0x800286 <led_status.2434>
    2b68:	89 17       	cp	r24, r25
    2b6a:	49 f1       	breq	.+82     	; 0x2bbe <keyboard_task+0x138>
        led_status = host_keyboard_leds();
    2b6c:	0e 94 7e 14 	call	0x28fc	; 0x28fc <host_keyboard_leds>
    2b70:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <led_status.2434>
        if (debug_keyboard) dprintf("LED: %02X\n", led_status);
    2b74:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <debug_config>
    2b78:	95 70       	andi	r25, 0x05	; 5
    2b7a:	95 30       	cpi	r25, 0x05	; 5
    2b7c:	61 f4       	brne	.+24     	; 0x2b96 <keyboard_task+0x110>
    2b7e:	1f 92       	push	r1
    2b80:	8f 93       	push	r24
    2b82:	87 e7       	ldi	r24, 0x77	; 119
    2b84:	94 e0       	ldi	r25, 0x04	; 4
    2b86:	9f 93       	push	r25
    2b88:	8f 93       	push	r24
    2b8a:	0e 94 9a 06 	call	0xd34	; 0xd34 <__xprintf>
    2b8e:	0f 90       	pop	r0
    2b90:	0f 90       	pop	r0
    2b92:	0f 90       	pop	r0
    2b94:	0f 90       	pop	r0
        hook_keyboard_leds_change(led_status);
    2b96:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <led_status.2434>
    }
}
    2b9a:	0f 90       	pop	r0
    2b9c:	0f 90       	pop	r0
    2b9e:	0f 90       	pop	r0
    2ba0:	0f 90       	pop	r0
    2ba2:	0f 90       	pop	r0
    2ba4:	df 91       	pop	r29
    2ba6:	cf 91       	pop	r28
    2ba8:	1f 91       	pop	r17
    2baa:	0f 91       	pop	r16
    2bac:	ff 90       	pop	r15
    2bae:	ef 90       	pop	r14
    2bb0:	df 90       	pop	r13
    2bb2:	bf 90       	pop	r11
    2bb4:	af 90       	pop	r10
    2bb6:	9f 90       	pop	r9
    2bb8:	8f 90       	pop	r8
        hook_keyboard_leds_change(led_status);
    2bba:	0c 94 60 22 	jmp	0x44c0	; 0x44c0 <hook_keyboard_leds_change>
}
    2bbe:	0f 90       	pop	r0
    2bc0:	0f 90       	pop	r0
    2bc2:	0f 90       	pop	r0
    2bc4:	0f 90       	pop	r0
    2bc6:	0f 90       	pop	r0
    2bc8:	df 91       	pop	r29
    2bca:	cf 91       	pop	r28
    2bcc:	1f 91       	pop	r17
    2bce:	0f 91       	pop	r16
    2bd0:	ff 90       	pop	r15
    2bd2:	ef 90       	pop	r14
    2bd4:	df 90       	pop	r13
    2bd6:	bf 90       	pop	r11
    2bd8:	af 90       	pop	r10
    2bda:	9f 90       	pop	r9
    2bdc:	8f 90       	pop	r8
    2bde:	08 95       	ret

00002be0 <keyboard_set_leds>:

void keyboard_set_leds(uint8_t leds)
{
    led_set(leds);
    2be0:	0c 94 d8 0a 	jmp	0x15b0	; 0x15b0 <led_set>

00002be4 <matrix_clear>:
    2be4:	08 95       	ret

00002be6 <matrix_setup>:
void matrix_clear(void)
{
}

__attribute__ ((weak))
void matrix_setup(void) {}
    2be6:	08 95       	ret

00002be8 <matrix_is_on>:

__attribute__ ((weak))
bool matrix_is_on(uint8_t row, uint8_t col)
{
    2be8:	cf 93       	push	r28
    2bea:	c6 2f       	mov	r28, r22
    return (matrix_get_row(row) & (1<<col));
    2bec:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <matrix_get_row>
    2bf0:	21 e0       	ldi	r18, 0x01	; 1
    2bf2:	30 e0       	ldi	r19, 0x00	; 0
    2bf4:	02 c0       	rjmp	.+4      	; 0x2bfa <matrix_is_on+0x12>
    2bf6:	22 0f       	add	r18, r18
    2bf8:	33 1f       	adc	r19, r19
    2bfa:	ca 95       	dec	r28
    2bfc:	e2 f7       	brpl	.-8      	; 0x2bf6 <matrix_is_on+0xe>
    2bfe:	90 e0       	ldi	r25, 0x00	; 0
    2c00:	28 23       	and	r18, r24
    2c02:	39 23       	and	r19, r25
    2c04:	81 e0       	ldi	r24, 0x01	; 1
    2c06:	23 2b       	or	r18, r19
    2c08:	09 f4       	brne	.+2      	; 0x2c0c <matrix_is_on+0x24>
    2c0a:	80 e0       	ldi	r24, 0x00	; 0
}
    2c0c:	cf 91       	pop	r28
    2c0e:	08 95       	ret

00002c10 <matrix_print>:

__attribute__ ((weak))
void matrix_print(void)
{
    2c10:	ef 92       	push	r14
    2c12:	ff 92       	push	r15
    2c14:	0f 93       	push	r16
    2c16:	1f 93       	push	r17
    2c18:	cf 93       	push	r28
    2c1a:	df 93       	push	r29
#if (MATRIX_COLS <= 8)
    print("r/c 01234567\n");
    2c1c:	80 e9       	ldi	r24, 0x90	; 144
    2c1e:	94 e0       	ldi	r25, 0x04	; 4
    2c20:	0e 94 01 06 	call	0xc02	; 0xc02 <xputs>
    2c24:	d0 e0       	ldi	r29, 0x00	; 0
    2c26:	c0 e0       	ldi	r28, 0x00	; 0
#endif

    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {

#if (MATRIX_COLS <= 8)
        xprintf("%02X: %08b%s\n", row, bitrev(matrix_get_row(row)),
    2c28:	82 e3       	ldi	r24, 0x32	; 50
    2c2a:	e8 2e       	mov	r14, r24
    2c2c:	81 e0       	ldi	r24, 0x01	; 1
    2c2e:	f8 2e       	mov	r15, r24
    2c30:	02 e8       	ldi	r16, 0x82	; 130
    2c32:	14 e0       	ldi	r17, 0x04	; 4
    2c34:	8c 2f       	mov	r24, r28
    2c36:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <matrix_get_row>
    2c3a:	0e 94 36 22 	call	0x446c	; 0x446c <bitrev>
    2c3e:	ff 92       	push	r15
    2c40:	ef 92       	push	r14
    2c42:	1f 92       	push	r1
    2c44:	8f 93       	push	r24
    2c46:	df 93       	push	r29
    2c48:	cf 93       	push	r28
    2c4a:	1f 93       	push	r17
    2c4c:	0f 93       	push	r16
    2c4e:	0e 94 9a 06 	call	0xd34	; 0xd34 <__xprintf>
    2c52:	21 96       	adiw	r28, 0x01	; 1
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
    2c54:	8d b7       	in	r24, 0x3d	; 61
    2c56:	9e b7       	in	r25, 0x3e	; 62
    2c58:	08 96       	adiw	r24, 0x08	; 8
    2c5a:	0f b6       	in	r0, 0x3f	; 63
    2c5c:	f8 94       	cli
    2c5e:	9e bf       	out	0x3e, r25	; 62
    2c60:	0f be       	out	0x3f, r0	; 63
    2c62:	8d bf       	out	0x3d, r24	; 61
    2c64:	c0 31       	cpi	r28, 0x10	; 16
    2c66:	d1 05       	cpc	r29, r1
    2c68:	29 f7       	brne	.-54     	; 0x2c34 <matrix_print+0x24>
#else
        ""
#endif
        );
    }
}
    2c6a:	df 91       	pop	r29
    2c6c:	cf 91       	pop	r28
    2c6e:	1f 91       	pop	r17
    2c70:	0f 91       	pop	r16
    2c72:	ff 90       	pop	r15
    2c74:	ef 90       	pop	r14
    2c76:	08 95       	ret

00002c78 <matrix_power_up>:
    2c78:	08 95       	ret

00002c7a <matrix_power_down>:
    2c7a:	08 95       	ret

00002c7c <action_exec>:
#include "nodebug.h"
#endif


void action_exec(keyevent_t event)
{
    2c7c:	cf 93       	push	r28
    2c7e:	df 93       	push	r29
    2c80:	cd b7       	in	r28, 0x3d	; 61
    2c82:	de b7       	in	r29, 0x3e	; 62
    2c84:	2b 97       	sbiw	r28, 0x0b	; 11
    2c86:	0f b6       	in	r0, 0x3f	; 63
    2c88:	f8 94       	cli
    2c8a:	de bf       	out	0x3e, r29	; 62
    2c8c:	0f be       	out	0x3f, r0	; 63
    2c8e:	cd bf       	out	0x3d, r28	; 61
    2c90:	4f 83       	std	Y+7, r20	; 0x07
    2c92:	58 87       	std	Y+8, r21	; 0x08
    2c94:	69 87       	std	Y+9, r22	; 0x09
    2c96:	7a 87       	std	Y+10, r23	; 0x0a
    2c98:	8b 87       	std	Y+11, r24	; 0x0b

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    2c9a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c9c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c9e:	89 2b       	or	r24, r25
    2ca0:	21 f0       	breq	.+8      	; 0x2caa <action_exec+0x2e>
    2ca2:	84 2f       	mov	r24, r20
    2ca4:	85 23       	and	r24, r21
    2ca6:	8f 3f       	cpi	r24, 0xFF	; 255
    2ca8:	d1 f4       	brne	.+52     	; 0x2cde <action_exec+0x62>
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
        hook_matrix_change(event);
    }

    keyrecord_t record = { .event = event };
    2caa:	1e 82       	std	Y+6, r1	; 0x06
    2cac:	85 e0       	ldi	r24, 0x05	; 5
    2cae:	fe 01       	movw	r30, r28
    2cb0:	37 96       	adiw	r30, 0x07	; 7
    2cb2:	de 01       	movw	r26, r28
    2cb4:	11 96       	adiw	r26, 0x01	; 1
    2cb6:	01 90       	ld	r0, Z+
    2cb8:	0d 92       	st	X+, r0
    2cba:	8a 95       	dec	r24
    2cbc:	e1 f7       	brne	.-8      	; 0x2cb6 <action_exec+0x3a>

#ifndef NO_ACTION_TAPPING
    action_tapping_process(record);
    2cbe:	49 81       	ldd	r20, Y+1	; 0x01
    2cc0:	5a 81       	ldd	r21, Y+2	; 0x02
    2cc2:	6b 81       	ldd	r22, Y+3	; 0x03
    2cc4:	7c 81       	ldd	r23, Y+4	; 0x04
    2cc6:	8d 81       	ldd	r24, Y+5	; 0x05
    2cc8:	9e 81       	ldd	r25, Y+6	; 0x06
    process_action(&record);
    if (!IS_NOEVENT(record.event)) {
        dprint("processed: "); debug_record(record); dprintln();
    }
#endif
}
    2cca:	2b 96       	adiw	r28, 0x0b	; 11
    2ccc:	0f b6       	in	r0, 0x3f	; 63
    2cce:	f8 94       	cli
    2cd0:	de bf       	out	0x3e, r29	; 62
    2cd2:	0f be       	out	0x3f, r0	; 63
    2cd4:	cd bf       	out	0x3d, r28	; 61
    2cd6:	df 91       	pop	r29
    2cd8:	cf 91       	pop	r28
    action_tapping_process(record);
    2cda:	0c 94 d6 1d 	jmp	0x3bac	; 0x3bac <action_tapping_process>
        hook_matrix_change(event);
    2cde:	69 85       	ldd	r22, Y+9	; 0x09
    2ce0:	7a 85       	ldd	r23, Y+10	; 0x0a
    2ce2:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ce4:	0e 94 4f 22 	call	0x449e	; 0x449e <hook_matrix_change>
    2ce8:	e0 cf       	rjmp	.-64     	; 0x2caa <action_exec+0x2e>

00002cea <register_code>:

/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
    2cea:	cf 93       	push	r28
    2cec:	c8 2f       	mov	r28, r24
    if (code == KC_NO) {
    2cee:	88 23       	and	r24, r24
    2cf0:	09 f4       	brne	.+2      	; 0x2cf4 <register_code+0xa>
    2cf2:	9e c0       	rjmp	.+316    	; 0x2e30 <register_code+0x146>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    2cf4:	82 38       	cpi	r24, 0x82	; 130
    2cf6:	c1 f4       	brne	.+48     	; 0x2d28 <register_code+0x3e>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is on
        if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
    2cf8:	0e 94 7e 14 	call	0x28fc	; 0x28fc <host_keyboard_leds>
    2cfc:	81 fd       	sbrc	r24, 1
    2cfe:	98 c0       	rjmp	.+304    	; 0x2e30 <register_code+0x146>
#endif
        add_key(KC_CAPSLOCK);
    2d00:	89 e3       	ldi	r24, 0x39	; 57
    2d02:	0e 94 90 21 	call	0x4320	; 0x4320 <add_key>
        send_keyboard_report();
    2d06:	0e 94 0b 22 	call	0x4416	; 0x4416 <send_keyboard_report>
	__builtin_avr_delay_cycles(__ticks_dc);
    2d0a:	2f ef       	ldi	r18, 0xFF	; 255
    2d0c:	81 ee       	ldi	r24, 0xE1	; 225
    2d0e:	94 e0       	ldi	r25, 0x04	; 4
    2d10:	21 50       	subi	r18, 0x01	; 1
    2d12:	80 40       	sbci	r24, 0x00	; 0
    2d14:	90 40       	sbci	r25, 0x00	; 0
    2d16:	e1 f7       	brne	.-8      	; 0x2d10 <register_code+0x26>
    2d18:	00 c0       	rjmp	.+0      	; 0x2d1a <register_code+0x30>
    2d1a:	00 00       	nop
        wait_ms(100);
        del_key(KC_CAPSLOCK);
    2d1c:	89 e3       	ldi	r24, 0x39	; 57
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
#endif
        add_key(KC_NUMLOCK);
        send_keyboard_report();
        wait_ms(100);
        del_key(KC_NUMLOCK);
    2d1e:	0e 94 ad 21 	call	0x435a	; 0x435a <del_key>
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    2d22:	cf 91       	pop	r28
        send_keyboard_report();
    2d24:	0c 94 0b 22 	jmp	0x4416	; 0x4416 <send_keyboard_report>
    else if (KC_LOCKING_NUM == code) {
    2d28:	83 38       	cpi	r24, 0x83	; 131
    2d2a:	a1 f4       	brne	.+40     	; 0x2d54 <register_code+0x6a>
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
    2d2c:	0e 94 7e 14 	call	0x28fc	; 0x28fc <host_keyboard_leds>
    2d30:	80 fd       	sbrc	r24, 0
    2d32:	7e c0       	rjmp	.+252    	; 0x2e30 <register_code+0x146>
        add_key(KC_NUMLOCK);
    2d34:	83 e5       	ldi	r24, 0x53	; 83
    2d36:	0e 94 90 21 	call	0x4320	; 0x4320 <add_key>
        send_keyboard_report();
    2d3a:	0e 94 0b 22 	call	0x4416	; 0x4416 <send_keyboard_report>
    2d3e:	2f ef       	ldi	r18, 0xFF	; 255
    2d40:	81 ee       	ldi	r24, 0xE1	; 225
    2d42:	94 e0       	ldi	r25, 0x04	; 4
    2d44:	21 50       	subi	r18, 0x01	; 1
    2d46:	80 40       	sbci	r24, 0x00	; 0
    2d48:	90 40       	sbci	r25, 0x00	; 0
    2d4a:	e1 f7       	brne	.-8      	; 0x2d44 <register_code+0x5a>
    2d4c:	00 c0       	rjmp	.+0      	; 0x2d4e <register_code+0x64>
    2d4e:	00 00       	nop
        del_key(KC_NUMLOCK);
    2d50:	83 e5       	ldi	r24, 0x53	; 83
    2d52:	e5 cf       	rjmp	.-54     	; 0x2d1e <register_code+0x34>
    else if (KC_LOCKING_SCROLL == code) {
    2d54:	84 38       	cpi	r24, 0x84	; 132
    2d56:	a1 f4       	brne	.+40     	; 0x2d80 <register_code+0x96>
        if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
    2d58:	0e 94 7e 14 	call	0x28fc	; 0x28fc <host_keyboard_leds>
    2d5c:	82 fd       	sbrc	r24, 2
    2d5e:	68 c0       	rjmp	.+208    	; 0x2e30 <register_code+0x146>
        add_key(KC_SCROLLLOCK);
    2d60:	87 e4       	ldi	r24, 0x47	; 71
    2d62:	0e 94 90 21 	call	0x4320	; 0x4320 <add_key>
        send_keyboard_report();
    2d66:	0e 94 0b 22 	call	0x4416	; 0x4416 <send_keyboard_report>
    2d6a:	2f ef       	ldi	r18, 0xFF	; 255
    2d6c:	81 ee       	ldi	r24, 0xE1	; 225
    2d6e:	94 e0       	ldi	r25, 0x04	; 4
    2d70:	21 50       	subi	r18, 0x01	; 1
    2d72:	80 40       	sbci	r24, 0x00	; 0
    2d74:	90 40       	sbci	r25, 0x00	; 0
    2d76:	e1 f7       	brne	.-8      	; 0x2d70 <register_code+0x86>
    2d78:	00 c0       	rjmp	.+0      	; 0x2d7a <register_code+0x90>
    2d7a:	00 00       	nop
        del_key(KC_SCROLLLOCK);
    2d7c:	87 e4       	ldi	r24, 0x47	; 71
    2d7e:	cf cf       	rjmp	.-98     	; 0x2d1e <register_code+0x34>
    else if IS_KEY(code) {
    2d80:	8c ef       	ldi	r24, 0xFC	; 252
    2d82:	8c 0f       	add	r24, r28
    2d84:	81 3a       	cpi	r24, 0xA1	; 161
    2d86:	20 f0       	brcs	.+8      	; 0x2d90 <register_code+0xa6>
    2d88:	80 e5       	ldi	r24, 0x50	; 80
    2d8a:	8c 0f       	add	r24, r28
    2d8c:	8e 32       	cpi	r24, 0x2E	; 46
    2d8e:	48 f4       	brcc	.+18     	; 0x2da2 <register_code+0xb8>
        if (command_proc(code)) return;
    2d90:	8c 2f       	mov	r24, r28
    2d92:	0e 94 fc 28 	call	0x51f8	; 0x51f8 <command_proc>
    2d96:	81 11       	cpse	r24, r1
    2d98:	4b c0       	rjmp	.+150    	; 0x2e30 <register_code+0x146>
            add_key(code);
    2d9a:	8c 2f       	mov	r24, r28
    2d9c:	0e 94 90 21 	call	0x4320	; 0x4320 <add_key>
            send_keyboard_report();
    2da0:	c0 cf       	rjmp	.-128    	; 0x2d22 <register_code+0x38>
    else if IS_MOD(code) {
    2da2:	80 e2       	ldi	r24, 0x20	; 32
    2da4:	8c 0f       	add	r24, r28
    2da6:	88 30       	cpi	r24, 0x08	; 8
    2da8:	48 f4       	brcc	.+18     	; 0x2dbc <register_code+0xd2>
        add_mods(MOD_BIT(code));
    2daa:	c7 70       	andi	r28, 0x07	; 7
    2dac:	81 e0       	ldi	r24, 0x01	; 1
    2dae:	01 c0       	rjmp	.+2      	; 0x2db2 <register_code+0xc8>
    2db0:	88 0f       	add	r24, r24
    2db2:	ca 95       	dec	r28
    2db4:	ea f7       	brpl	.-6      	; 0x2db0 <register_code+0xc6>
    2db6:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <add_mods>
        send_keyboard_report();
    2dba:	b3 cf       	rjmp	.-154    	; 0x2d22 <register_code+0x38>
    else if IS_SYSTEM(code) {
    2dbc:	8b e5       	ldi	r24, 0x5B	; 91
    2dbe:	8c 0f       	add	r24, r28
    2dc0:	83 30       	cpi	r24, 0x03	; 3
    2dc2:	68 f4       	brcc	.+26     	; 0x2dde <register_code+0xf4>
        host_system_send(KEYCODE2SYSTEM(code));
    2dc4:	81 e8       	ldi	r24, 0x81	; 129
    2dc6:	90 e0       	ldi	r25, 0x00	; 0
    2dc8:	c5 3a       	cpi	r28, 0xA5	; 165
    2dca:	31 f0       	breq	.+12     	; 0x2dd8 <register_code+0xee>
    2dcc:	83 e8       	ldi	r24, 0x83	; 131
    2dce:	90 e0       	ldi	r25, 0x00	; 0
    2dd0:	c6 3a       	cpi	r28, 0xA6	; 166
    2dd2:	11 f4       	brne	.+4      	; 0x2dd8 <register_code+0xee>
    2dd4:	82 e8       	ldi	r24, 0x82	; 130
    2dd6:	90 e0       	ldi	r25, 0x00	; 0
}
    2dd8:	cf 91       	pop	r28
        host_system_send(KEYCODE2SYSTEM(code));
    2dda:	0c 94 e1 14 	jmp	0x29c2	; 0x29c2 <host_system_send>
    else if IS_CONSUMER(code) {
    2dde:	88 e5       	ldi	r24, 0x58	; 88
    2de0:	8c 0f       	add	r24, r28
    2de2:	85 31       	cpi	r24, 0x15	; 21
    2de4:	28 f5       	brcc	.+74     	; 0x2e30 <register_code+0x146>
        host_consumer_send(KEYCODE2CONSUMER(code));
    2de6:	82 ee       	ldi	r24, 0xE2	; 226
    2de8:	90 e0       	ldi	r25, 0x00	; 0
    2dea:	c8 3a       	cpi	r28, 0xA8	; 168
    2dec:	f1 f0       	breq	.+60     	; 0x2e2a <register_code+0x140>
    2dee:	89 ee       	ldi	r24, 0xE9	; 233
    2df0:	90 e0       	ldi	r25, 0x00	; 0
    2df2:	c9 3a       	cpi	r28, 0xA9	; 169
    2df4:	d1 f0       	breq	.+52     	; 0x2e2a <register_code+0x140>
    2df6:	8a ee       	ldi	r24, 0xEA	; 234
    2df8:	90 e0       	ldi	r25, 0x00	; 0
    2dfa:	ca 3a       	cpi	r28, 0xAA	; 170
    2dfc:	b1 f0       	breq	.+44     	; 0x2e2a <register_code+0x140>
    2dfe:	85 eb       	ldi	r24, 0xB5	; 181
    2e00:	90 e0       	ldi	r25, 0x00	; 0
    2e02:	cb 3a       	cpi	r28, 0xAB	; 171
    2e04:	91 f0       	breq	.+36     	; 0x2e2a <register_code+0x140>
    2e06:	86 eb       	ldi	r24, 0xB6	; 182
    2e08:	90 e0       	ldi	r25, 0x00	; 0
    2e0a:	cc 3a       	cpi	r28, 0xAC	; 172
    2e0c:	71 f0       	breq	.+28     	; 0x2e2a <register_code+0x140>
    2e0e:	83 eb       	ldi	r24, 0xB3	; 179
    2e10:	90 e0       	ldi	r25, 0x00	; 0
    2e12:	cd 3a       	cpi	r28, 0xAD	; 173
    2e14:	51 f0       	breq	.+20     	; 0x2e2a <register_code+0x140>
    2e16:	84 eb       	ldi	r24, 0xB4	; 180
    2e18:	90 e0       	ldi	r25, 0x00	; 0
    2e1a:	ce 3a       	cpi	r28, 0xAE	; 174
    2e1c:	31 f0       	breq	.+12     	; 0x2e2a <register_code+0x140>
    2e1e:	90 e0       	ldi	r25, 0x00	; 0
    2e20:	80 e0       	ldi	r24, 0x00	; 0
    2e22:	cf 3a       	cpi	r28, 0xAF	; 175
    2e24:	11 f4       	brne	.+4      	; 0x2e2a <register_code+0x140>
    2e26:	87 eb       	ldi	r24, 0xB7	; 183
    2e28:	90 e0       	ldi	r25, 0x00	; 0
}
    2e2a:	cf 91       	pop	r28
        host_consumer_send(KEYCODE2CONSUMER(code));
    2e2c:	0c 94 0e 15 	jmp	0x2a1c	; 0x2a1c <host_consumer_send>
}
    2e30:	cf 91       	pop	r28
    2e32:	08 95       	ret

00002e34 <unregister_code>:

void unregister_code(uint8_t code)
{
    if (code == KC_NO) {
    2e34:	88 23       	and	r24, r24
    2e36:	09 f4       	brne	.+2      	; 0x2e3a <unregister_code+0x6>
    2e38:	6a c0       	rjmp	.+212    	; 0x2f0e <unregister_code+0xda>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    2e3a:	82 38       	cpi	r24, 0x82	; 130
    2e3c:	b9 f4       	brne	.+46     	; 0x2e6c <unregister_code+0x38>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is off
        if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
    2e3e:	0e 94 7e 14 	call	0x28fc	; 0x28fc <host_keyboard_leds>
    2e42:	81 ff       	sbrs	r24, 1
    2e44:	64 c0       	rjmp	.+200    	; 0x2f0e <unregister_code+0xda>
#endif
        add_key(KC_CAPSLOCK);
    2e46:	89 e3       	ldi	r24, 0x39	; 57
    2e48:	0e 94 90 21 	call	0x4320	; 0x4320 <add_key>
        send_keyboard_report();
    2e4c:	0e 94 0b 22 	call	0x4416	; 0x4416 <send_keyboard_report>
    2e50:	2f ef       	ldi	r18, 0xFF	; 255
    2e52:	81 ee       	ldi	r24, 0xE1	; 225
    2e54:	94 e0       	ldi	r25, 0x04	; 4
    2e56:	21 50       	subi	r18, 0x01	; 1
    2e58:	80 40       	sbci	r24, 0x00	; 0
    2e5a:	90 40       	sbci	r25, 0x00	; 0
    2e5c:	e1 f7       	brne	.-8      	; 0x2e56 <unregister_code+0x22>
    2e5e:	00 c0       	rjmp	.+0      	; 0x2e60 <unregister_code+0x2c>
    2e60:	00 00       	nop
        wait_ms(100);
        del_key(KC_CAPSLOCK);
    2e62:	89 e3       	ldi	r24, 0x39	; 57
        if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
#endif
        add_key(KC_NUMLOCK);
        send_keyboard_report();
        wait_ms(100);
        del_key(KC_NUMLOCK);
    2e64:	0e 94 ad 21 	call	0x435a	; 0x435a <del_key>
        send_keyboard_report();
    2e68:	0c 94 0b 22 	jmp	0x4416	; 0x4416 <send_keyboard_report>
    else if (KC_LOCKING_NUM == code) {
    2e6c:	83 38       	cpi	r24, 0x83	; 131
    2e6e:	a1 f4       	brne	.+40     	; 0x2e98 <unregister_code+0x64>
        if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
    2e70:	0e 94 7e 14 	call	0x28fc	; 0x28fc <host_keyboard_leds>
    2e74:	80 ff       	sbrs	r24, 0
    2e76:	4b c0       	rjmp	.+150    	; 0x2f0e <unregister_code+0xda>
        add_key(KC_NUMLOCK);
    2e78:	83 e5       	ldi	r24, 0x53	; 83
    2e7a:	0e 94 90 21 	call	0x4320	; 0x4320 <add_key>
        send_keyboard_report();
    2e7e:	0e 94 0b 22 	call	0x4416	; 0x4416 <send_keyboard_report>
    2e82:	2f ef       	ldi	r18, 0xFF	; 255
    2e84:	81 ee       	ldi	r24, 0xE1	; 225
    2e86:	94 e0       	ldi	r25, 0x04	; 4
    2e88:	21 50       	subi	r18, 0x01	; 1
    2e8a:	80 40       	sbci	r24, 0x00	; 0
    2e8c:	90 40       	sbci	r25, 0x00	; 0
    2e8e:	e1 f7       	brne	.-8      	; 0x2e88 <unregister_code+0x54>
    2e90:	00 c0       	rjmp	.+0      	; 0x2e92 <unregister_code+0x5e>
    2e92:	00 00       	nop
        del_key(KC_NUMLOCK);
    2e94:	83 e5       	ldi	r24, 0x53	; 83
    2e96:	e6 cf       	rjmp	.-52     	; 0x2e64 <unregister_code+0x30>
    }

    else if (KC_LOCKING_SCROLL == code) {
    2e98:	84 38       	cpi	r24, 0x84	; 132
    2e9a:	a1 f4       	brne	.+40     	; 0x2ec4 <unregister_code+0x90>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
    2e9c:	0e 94 7e 14 	call	0x28fc	; 0x28fc <host_keyboard_leds>
    2ea0:	82 ff       	sbrs	r24, 2
    2ea2:	35 c0       	rjmp	.+106    	; 0x2f0e <unregister_code+0xda>
#endif
        add_key(KC_SCROLLLOCK);
    2ea4:	87 e4       	ldi	r24, 0x47	; 71
    2ea6:	0e 94 90 21 	call	0x4320	; 0x4320 <add_key>
        send_keyboard_report();
    2eaa:	0e 94 0b 22 	call	0x4416	; 0x4416 <send_keyboard_report>
    2eae:	2f ef       	ldi	r18, 0xFF	; 255
    2eb0:	81 ee       	ldi	r24, 0xE1	; 225
    2eb2:	94 e0       	ldi	r25, 0x04	; 4
    2eb4:	21 50       	subi	r18, 0x01	; 1
    2eb6:	80 40       	sbci	r24, 0x00	; 0
    2eb8:	90 40       	sbci	r25, 0x00	; 0
    2eba:	e1 f7       	brne	.-8      	; 0x2eb4 <unregister_code+0x80>
    2ebc:	00 c0       	rjmp	.+0      	; 0x2ebe <unregister_code+0x8a>
    2ebe:	00 00       	nop
        wait_ms(100);
        del_key(KC_SCROLLLOCK);
    2ec0:	87 e4       	ldi	r24, 0x47	; 71
    2ec2:	d0 cf       	rjmp	.-96     	; 0x2e64 <unregister_code+0x30>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    2ec4:	9c ef       	ldi	r25, 0xFC	; 252
    2ec6:	98 0f       	add	r25, r24
    2ec8:	91 3a       	cpi	r25, 0xA1	; 161
    2eca:	60 f2       	brcs	.-104    	; 0x2e64 <unregister_code+0x30>
    2ecc:	90 e5       	ldi	r25, 0x50	; 80
    2ece:	98 0f       	add	r25, r24
    2ed0:	9e 32       	cpi	r25, 0x2E	; 46
    2ed2:	40 f2       	brcs	.-112    	; 0x2e64 <unregister_code+0x30>
        del_key(code);
        send_keyboard_report();
    }
    else if IS_MOD(code) {
    2ed4:	90 e2       	ldi	r25, 0x20	; 32
    2ed6:	98 0f       	add	r25, r24
    2ed8:	98 30       	cpi	r25, 0x08	; 8
    2eda:	50 f4       	brcc	.+20     	; 0x2ef0 <unregister_code+0xbc>
        del_mods(MOD_BIT(code));
    2edc:	87 70       	andi	r24, 0x07	; 7
    2ede:	91 e0       	ldi	r25, 0x01	; 1
    2ee0:	01 c0       	rjmp	.+2      	; 0x2ee4 <unregister_code+0xb0>
    2ee2:	99 0f       	add	r25, r25
    2ee4:	8a 95       	dec	r24
    2ee6:	ea f7       	brpl	.-6      	; 0x2ee2 <unregister_code+0xae>
    2ee8:	89 2f       	mov	r24, r25
    2eea:	0e 94 d6 21 	call	0x43ac	; 0x43ac <del_mods>
        send_keyboard_report();
    2eee:	bc cf       	rjmp	.-136    	; 0x2e68 <unregister_code+0x34>
    }
    else if IS_SYSTEM(code) {
    2ef0:	9b e5       	ldi	r25, 0x5B	; 91
    2ef2:	98 0f       	add	r25, r24
    2ef4:	93 30       	cpi	r25, 0x03	; 3
    2ef6:	20 f4       	brcc	.+8      	; 0x2f00 <unregister_code+0xcc>
        host_system_send(0);
    2ef8:	90 e0       	ldi	r25, 0x00	; 0
    2efa:	80 e0       	ldi	r24, 0x00	; 0
    2efc:	0c 94 e1 14 	jmp	0x29c2	; 0x29c2 <host_system_send>
    }
    else if IS_CONSUMER(code) {
    2f00:	88 5a       	subi	r24, 0xA8	; 168
    2f02:	85 31       	cpi	r24, 0x15	; 21
    2f04:	20 f4       	brcc	.+8      	; 0x2f0e <unregister_code+0xda>
        host_consumer_send(0);
    2f06:	90 e0       	ldi	r25, 0x00	; 0
    2f08:	80 e0       	ldi	r24, 0x00	; 0
    2f0a:	0c 94 0e 15 	jmp	0x2a1c	; 0x2a1c <host_consumer_send>
    }
}
    2f0e:	08 95       	ret

00002f10 <register_mods>:
    unregister_code(code);
}

void register_mods(uint8_t mods)
{
    if (mods) {
    2f10:	88 23       	and	r24, r24
    2f12:	21 f0       	breq	.+8      	; 0x2f1c <register_mods+0xc>
        add_mods(mods);
    2f14:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <add_mods>
        send_keyboard_report();
    2f18:	0c 94 0b 22 	jmp	0x4416	; 0x4416 <send_keyboard_report>
    }
}
    2f1c:	08 95       	ret

00002f1e <unregister_mods>:

void unregister_mods(uint8_t mods)
{
    if (mods) {
    2f1e:	88 23       	and	r24, r24
    2f20:	21 f0       	breq	.+8      	; 0x2f2a <unregister_mods+0xc>
        del_mods(mods);
    2f22:	0e 94 d6 21 	call	0x43ac	; 0x43ac <del_mods>
        send_keyboard_report();
    2f26:	0c 94 0b 22 	jmp	0x4416	; 0x4416 <send_keyboard_report>
    }
}
    2f2a:	08 95       	ret

00002f2c <process_action>:
{
    2f2c:	af 92       	push	r10
    2f2e:	bf 92       	push	r11
    2f30:	cf 92       	push	r12
    2f32:	df 92       	push	r13
    2f34:	ef 92       	push	r14
    2f36:	ff 92       	push	r15
    2f38:	0f 93       	push	r16
    2f3a:	1f 93       	push	r17
    2f3c:	cf 93       	push	r28
    2f3e:	df 93       	push	r29
    2f40:	cd b7       	in	r28, 0x3d	; 61
    2f42:	de b7       	in	r29, 0x3e	; 62
    2f44:	29 97       	sbiw	r28, 0x09	; 9
    2f46:	0f b6       	in	r0, 0x3f	; 63
    2f48:	f8 94       	cli
    2f4a:	de bf       	out	0x3e, r29	; 62
    2f4c:	0f be       	out	0x3f, r0	; 63
    2f4e:	cd bf       	out	0x3d, r28	; 61
    2f50:	5c 01       	movw	r10, r24
    if (hook_process_action(record)) return;
    2f52:	0e 94 62 22 	call	0x44c4	; 0x44c4 <hook_process_action>
    2f56:	81 11       	cpse	r24, r1
    2f58:	14 c0       	rjmp	.+40     	; 0x2f82 <process_action+0x56>
    keyevent_t event = record->event;
    2f5a:	85 e0       	ldi	r24, 0x05	; 5
    2f5c:	f5 01       	movw	r30, r10
    2f5e:	de 01       	movw	r26, r28
    2f60:	11 96       	adiw	r26, 0x01	; 1
    2f62:	01 90       	ld	r0, Z+
    2f64:	0d 92       	st	X+, r0
    2f66:	8a 95       	dec	r24
    2f68:	e1 f7       	brne	.-8      	; 0x2f62 <process_action+0x36>
    2f6a:	f5 01       	movw	r30, r10
    2f6c:	83 81       	ldd	r24, Z+3	; 0x03
    2f6e:	94 81       	ldd	r25, Z+4	; 0x04
    2f70:	00 97       	sbiw	r24, 0x00	; 0
    2f72:	39 f0       	breq	.+14     	; 0x2f82 <process_action+0x56>
    2f74:	40 81       	ld	r20, Z
    2f76:	51 81       	ldd	r21, Z+1	; 0x01
    2f78:	24 2f       	mov	r18, r20
    2f7a:	25 23       	and	r18, r21
    2f7c:	2f 3f       	cpi	r18, 0xFF	; 255
    2f7e:	09 f0       	breq	.+2      	; 0x2f82 <process_action+0x56>
    2f80:	24 c3       	rjmp	.+1608   	; 0x35ca <process_action+0x69e>
}
    2f82:	29 96       	adiw	r28, 0x09	; 9
    2f84:	0f b6       	in	r0, 0x3f	; 63
    2f86:	f8 94       	cli
    2f88:	de bf       	out	0x3e, r29	; 62
    2f8a:	0f be       	out	0x3f, r0	; 63
    2f8c:	cd bf       	out	0x3d, r28	; 61
    2f8e:	df 91       	pop	r29
    2f90:	cf 91       	pop	r28
    2f92:	1f 91       	pop	r17
    2f94:	0f 91       	pop	r16
    2f96:	ff 90       	pop	r15
    2f98:	ef 90       	pop	r14
    2f9a:	df 90       	pop	r13
    2f9c:	cf 90       	pop	r12
    2f9e:	bf 90       	pop	r11
    2fa0:	af 90       	pop	r10
    2fa2:	08 95       	ret
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
    2fa4:	f1 2f       	mov	r31, r17
    2fa6:	ff 70       	andi	r31, 0x0F	; 15
    2fa8:	ef 2e       	mov	r14, r31
    2faa:	10 7f       	andi	r17, 0xF0	; 240
    2fac:	19 f0       	breq	.+6      	; 0x2fb4 <process_action+0x88>
    2fae:	e2 94       	swap	r14
    2fb0:	40 ef       	ldi	r20, 0xF0	; 240
    2fb2:	e4 22       	and	r14, r20
                if (event.pressed) {
    2fb4:	ff 20       	and	r15, r15
    2fb6:	d1 f0       	breq	.+52     	; 0x2fec <process_action+0xc0>
                    if (mods) {
    2fb8:	ee 20       	and	r14, r14
    2fba:	29 f0       	breq	.+10     	; 0x2fc6 <process_action+0x9a>
                        add_weak_mods(mods);
    2fbc:	8e 2d       	mov	r24, r14
    2fbe:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <add_weak_mods>
                        send_keyboard_report();
    2fc2:	0e 94 0b 22 	call	0x4416	; 0x4416 <send_keyboard_report>
                            register_code(action.layer_tap.code);
    2fc6:	80 2f       	mov	r24, r16
}
    2fc8:	29 96       	adiw	r28, 0x09	; 9
    2fca:	0f b6       	in	r0, 0x3f	; 63
    2fcc:	f8 94       	cli
    2fce:	de bf       	out	0x3e, r29	; 62
    2fd0:	0f be       	out	0x3f, r0	; 63
    2fd2:	cd bf       	out	0x3d, r28	; 61
    2fd4:	df 91       	pop	r29
    2fd6:	cf 91       	pop	r28
    2fd8:	1f 91       	pop	r17
    2fda:	0f 91       	pop	r16
    2fdc:	ff 90       	pop	r15
    2fde:	ef 90       	pop	r14
    2fe0:	df 90       	pop	r13
    2fe2:	cf 90       	pop	r12
    2fe4:	bf 90       	pop	r11
    2fe6:	af 90       	pop	r10
                            register_code(action.layer_tap.code);
    2fe8:	0c 94 75 16 	jmp	0x2cea	; 0x2cea <register_code>
                    unregister_code(action.key.code);
    2fec:	80 2f       	mov	r24, r16
    2fee:	0e 94 1a 17 	call	0x2e34	; 0x2e34 <unregister_code>
                    if (mods) {
    2ff2:	ee 20       	and	r14, r14
    2ff4:	31 f2       	breq	.-116    	; 0x2f82 <process_action+0x56>
                        del_weak_mods(mods);
    2ff6:	8e 2d       	mov	r24, r14
    2ff8:	0e 94 ea 21 	call	0x43d4	; 0x43d4 <del_weak_mods>
}
    2ffc:	29 96       	adiw	r28, 0x09	; 9
    2ffe:	0f b6       	in	r0, 0x3f	; 63
    3000:	f8 94       	cli
    3002:	de bf       	out	0x3e, r29	; 62
    3004:	0f be       	out	0x3f, r0	; 63
    3006:	cd bf       	out	0x3d, r28	; 61
    3008:	df 91       	pop	r29
    300a:	cf 91       	pop	r28
    300c:	1f 91       	pop	r17
    300e:	0f 91       	pop	r16
    3010:	ff 90       	pop	r15
    3012:	ef 90       	pop	r14
    3014:	df 90       	pop	r13
    3016:	cf 90       	pop	r12
    3018:	bf 90       	pop	r11
    301a:	af 90       	pop	r10
                        send_keyboard_report();
    301c:	0c 94 0b 22 	jmp	0x4416	; 0x4416 <send_keyboard_report>
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
    3020:	21 2f       	mov	r18, r17
    3022:	2f 70       	andi	r18, 0x0F	; 15
    3024:	d2 2e       	mov	r13, r18
    3026:	10 7f       	andi	r17, 0xF0	; 240
    3028:	10 32       	cpi	r17, 0x20	; 32
    302a:	19 f0       	breq	.+6      	; 0x3032 <process_action+0x106>
    302c:	d2 94       	swap	r13
    302e:	30 ef       	ldi	r19, 0xF0	; 240
    3030:	d3 22       	and	r13, r19
                switch (action.key.code) {
    3032:	00 23       	and	r16, r16
    3034:	79 f0       	breq	.+30     	; 0x3054 <process_action+0x128>
    3036:	01 30       	cpi	r16, 0x01	; 1
    3038:	09 f4       	brne	.+2      	; 0x303c <process_action+0x110>
    303a:	55 c0       	rjmp	.+170    	; 0x30e6 <process_action+0x1ba>
                        if (event.pressed) {
    303c:	ff 20       	and	r15, r15
    303e:	09 f4       	brne	.+2      	; 0x3042 <process_action+0x116>
    3040:	63 c0       	rjmp	.+198    	; 0x3108 <process_action+0x1dc>
                            if (tap_count > 0) {
    3042:	ee 20       	and	r14, r14
    3044:	59 f0       	breq	.+22     	; 0x305c <process_action+0x130>
                                if (record->tap.interrupted) {
    3046:	f5 01       	movw	r30, r10
    3048:	85 81       	ldd	r24, Z+5	; 0x05
    304a:	80 ff       	sbrs	r24, 0
    304c:	bc cf       	rjmp	.-136    	; 0x2fc6 <process_action+0x9a>
                                    record->tap.count = 0;
    304e:	8f 70       	andi	r24, 0x0F	; 15
    3050:	85 83       	std	Z+5, r24	; 0x05
                                    register_mods(mods);
    3052:	04 c0       	rjmp	.+8      	; 0x305c <process_action+0x130>
                        if (event.pressed) {
    3054:	ff 20       	and	r15, r15
    3056:	59 f1       	breq	.+86     	; 0x30ae <process_action+0x182>
                            if (tap_count == 0) {
    3058:	e1 10       	cpse	r14, r1
    305a:	13 c0       	rjmp	.+38     	; 0x3082 <process_action+0x156>
                                    register_mods(mods);
    305c:	8d 2d       	mov	r24, r13
}
    305e:	29 96       	adiw	r28, 0x09	; 9
    3060:	0f b6       	in	r0, 0x3f	; 63
    3062:	f8 94       	cli
    3064:	de bf       	out	0x3e, r29	; 62
    3066:	0f be       	out	0x3f, r0	; 63
    3068:	cd bf       	out	0x3d, r28	; 61
    306a:	df 91       	pop	r29
    306c:	cf 91       	pop	r28
    306e:	1f 91       	pop	r17
    3070:	0f 91       	pop	r16
    3072:	ff 90       	pop	r15
    3074:	ef 90       	pop	r14
    3076:	df 90       	pop	r13
    3078:	cf 90       	pop	r12
    307a:	bf 90       	pop	r11
    307c:	af 90       	pop	r10
                                    register_mods(mods);
    307e:	0c 94 88 17 	jmp	0x2f10	; 0x2f10 <register_mods>
                            else if (tap_count == 1) {
    3082:	31 e0       	ldi	r19, 0x01	; 1
                                set_oneshot_mods(mods);
    3084:	8d 2d       	mov	r24, r13
                            else if (tap_count == 1) {
    3086:	e3 12       	cpse	r14, r19
    3088:	ea cf       	rjmp	.-44     	; 0x305e <process_action+0x132>
}
    308a:	29 96       	adiw	r28, 0x09	; 9
    308c:	0f b6       	in	r0, 0x3f	; 63
    308e:	f8 94       	cli
    3090:	de bf       	out	0x3e, r29	; 62
    3092:	0f be       	out	0x3f, r0	; 63
    3094:	cd bf       	out	0x3d, r28	; 61
    3096:	df 91       	pop	r29
    3098:	cf 91       	pop	r28
    309a:	1f 91       	pop	r17
    309c:	0f 91       	pop	r16
    309e:	ff 90       	pop	r15
    30a0:	ef 90       	pop	r14
    30a2:	df 90       	pop	r13
    30a4:	cf 90       	pop	r12
    30a6:	bf 90       	pop	r11
    30a8:	af 90       	pop	r10
                                set_oneshot_mods(mods);
    30aa:	0c 94 f5 21 	jmp	0x43ea	; 0x43ea <set_oneshot_mods>
                            if (tap_count == 0) {
    30ae:	e1 10       	cpse	r14, r1
    30b0:	15 c0       	rjmp	.+42     	; 0x30dc <process_action+0x1b0>
                                clear_oneshot_mods();
    30b2:	0e 94 f8 21 	call	0x43f0	; 0x43f0 <clear_oneshot_mods>
                                unregister_mods(mods);
    30b6:	8d 2d       	mov	r24, r13
}
    30b8:	29 96       	adiw	r28, 0x09	; 9
    30ba:	0f b6       	in	r0, 0x3f	; 63
    30bc:	f8 94       	cli
    30be:	de bf       	out	0x3e, r29	; 62
    30c0:	0f be       	out	0x3f, r0	; 63
    30c2:	cd bf       	out	0x3d, r28	; 61
    30c4:	df 91       	pop	r29
    30c6:	cf 91       	pop	r28
    30c8:	1f 91       	pop	r17
    30ca:	0f 91       	pop	r16
    30cc:	ff 90       	pop	r15
    30ce:	ef 90       	pop	r14
    30d0:	df 90       	pop	r13
    30d2:	cf 90       	pop	r12
    30d4:	bf 90       	pop	r11
    30d6:	af 90       	pop	r10
                        unregister_mods((action.layer_tap.code & 0x10) ?
    30d8:	0c 94 8f 17 	jmp	0x2f1e	; 0x2f1e <unregister_mods>
                            else if (tap_count == 1) {
    30dc:	41 e0       	ldi	r20, 0x01	; 1
    30de:	e4 16       	cp	r14, r20
    30e0:	09 f4       	brne	.+2      	; 0x30e4 <process_action+0x1b8>
    30e2:	4f cf       	rjmp	.-354    	; 0x2f82 <process_action+0x56>
    30e4:	e6 cf       	rjmp	.-52     	; 0x30b2 <process_action+0x186>
                        if (event.pressed) {
    30e6:	ff 20       	and	r15, r15
    30e8:	51 f0       	breq	.+20     	; 0x30fe <process_action+0x1d2>
                            if (tap_count <= TAPPING_TOGGLE) {
    30ea:	55 e0       	ldi	r21, 0x05	; 5
    30ec:	5e 15       	cp	r21, r14
    30ee:	08 f4       	brcc	.+2      	; 0x30f2 <process_action+0x1c6>
    30f0:	48 cf       	rjmp	.-368    	; 0x2f82 <process_action+0x56>
                                if (mods & get_mods()) {
    30f2:	0e 94 cd 21 	call	0x439a	; 0x439a <get_mods>
    30f6:	8d 21       	and	r24, r13
    30f8:	09 f4       	brne	.+2      	; 0x30fc <process_action+0x1d0>
    30fa:	b0 cf       	rjmp	.-160    	; 0x305c <process_action+0x130>
    30fc:	dc cf       	rjmp	.-72     	; 0x30b6 <process_action+0x18a>
                            if (tap_count < TAPPING_TOGGLE) {
    30fe:	84 e0       	ldi	r24, 0x04	; 4
    3100:	8e 15       	cp	r24, r14
    3102:	08 f4       	brcc	.+2      	; 0x3106 <process_action+0x1da>
    3104:	3e cf       	rjmp	.-388    	; 0x2f82 <process_action+0x56>
    3106:	d7 cf       	rjmp	.-82     	; 0x30b6 <process_action+0x18a>
                            if (tap_count > 0) {
    3108:	ee 20       	and	r14, r14
    310a:	a9 f2       	breq	.-86     	; 0x30b6 <process_action+0x18a>
                            unregister_code(action.layer_tap.code);
    310c:	80 2f       	mov	r24, r16
}
    310e:	29 96       	adiw	r28, 0x09	; 9
    3110:	0f b6       	in	r0, 0x3f	; 63
    3112:	f8 94       	cli
    3114:	de bf       	out	0x3e, r29	; 62
    3116:	0f be       	out	0x3f, r0	; 63
    3118:	cd bf       	out	0x3d, r28	; 61
    311a:	df 91       	pop	r29
    311c:	cf 91       	pop	r28
    311e:	1f 91       	pop	r17
    3120:	0f 91       	pop	r16
    3122:	ff 90       	pop	r15
    3124:	ef 90       	pop	r14
    3126:	df 90       	pop	r13
    3128:	cf 90       	pop	r12
    312a:	bf 90       	pop	r11
    312c:	af 90       	pop	r10
                            unregister_code(action.layer_tap.code);
    312e:	0c 94 1a 17 	jmp	0x2e34	; 0x2e34 <unregister_code>
            switch (action.usage.page) {
    3132:	81 2f       	mov	r24, r17
    3134:	86 95       	lsr	r24
    3136:	86 95       	lsr	r24
    3138:	83 70       	andi	r24, 0x03	; 3
    313a:	d9 f0       	breq	.+54     	; 0x3172 <process_action+0x246>
    313c:	81 30       	cpi	r24, 0x01	; 1
    313e:	09 f0       	breq	.+2      	; 0x3142 <process_action+0x216>
    3140:	20 cf       	rjmp	.-448    	; 0x2f82 <process_action+0x56>
                        host_consumer_send(action.usage.code);
    3142:	c8 01       	movw	r24, r16
    3144:	93 70       	andi	r25, 0x03	; 3
                    if (event.pressed) {
    3146:	f1 10       	cpse	r15, r1
    3148:	02 c0       	rjmp	.+4      	; 0x314e <process_action+0x222>
                        host_consumer_send(0);
    314a:	90 e0       	ldi	r25, 0x00	; 0
    314c:	80 e0       	ldi	r24, 0x00	; 0
}
    314e:	29 96       	adiw	r28, 0x09	; 9
    3150:	0f b6       	in	r0, 0x3f	; 63
    3152:	f8 94       	cli
    3154:	de bf       	out	0x3e, r29	; 62
    3156:	0f be       	out	0x3f, r0	; 63
    3158:	cd bf       	out	0x3d, r28	; 61
    315a:	df 91       	pop	r29
    315c:	cf 91       	pop	r28
    315e:	1f 91       	pop	r17
    3160:	0f 91       	pop	r16
    3162:	ff 90       	pop	r15
    3164:	ef 90       	pop	r14
    3166:	df 90       	pop	r13
    3168:	cf 90       	pop	r12
    316a:	bf 90       	pop	r11
    316c:	af 90       	pop	r10
                        host_consumer_send(0);
    316e:	0c 94 0e 15 	jmp	0x2a1c	; 0x2a1c <host_consumer_send>
                        host_system_send(action.usage.code);
    3172:	c8 01       	movw	r24, r16
    3174:	93 70       	andi	r25, 0x03	; 3
                    if (event.pressed) {
    3176:	f1 10       	cpse	r15, r1
    3178:	02 c0       	rjmp	.+4      	; 0x317e <process_action+0x252>
                        host_system_send(0);
    317a:	90 e0       	ldi	r25, 0x00	; 0
    317c:	80 e0       	ldi	r24, 0x00	; 0
}
    317e:	29 96       	adiw	r28, 0x09	; 9
    3180:	0f b6       	in	r0, 0x3f	; 63
    3182:	f8 94       	cli
    3184:	de bf       	out	0x3e, r29	; 62
    3186:	0f be       	out	0x3f, r0	; 63
    3188:	cd bf       	out	0x3d, r28	; 61
    318a:	df 91       	pop	r29
    318c:	cf 91       	pop	r28
    318e:	1f 91       	pop	r17
    3190:	0f 91       	pop	r16
    3192:	ff 90       	pop	r15
    3194:	ef 90       	pop	r14
    3196:	df 90       	pop	r13
    3198:	cf 90       	pop	r12
    319a:	bf 90       	pop	r11
    319c:	af 90       	pop	r10
                        host_system_send(0);
    319e:	0c 94 e1 14 	jmp	0x29c2	; 0x29c2 <host_system_send>
                mousekey_on(action.key.code);
    31a2:	80 2f       	mov	r24, r16
            if (event.pressed) {
    31a4:	ff 20       	and	r15, r15
    31a6:	a1 f0       	breq	.+40     	; 0x31d0 <process_action+0x2a4>
                mousekey_on(action.key.code);
    31a8:	0e 94 3c 24 	call	0x4878	; 0x4878 <mousekey_on>
}
    31ac:	29 96       	adiw	r28, 0x09	; 9
    31ae:	0f b6       	in	r0, 0x3f	; 63
    31b0:	f8 94       	cli
    31b2:	de bf       	out	0x3e, r29	; 62
    31b4:	0f be       	out	0x3f, r0	; 63
    31b6:	cd bf       	out	0x3d, r28	; 61
    31b8:	df 91       	pop	r29
    31ba:	cf 91       	pop	r28
    31bc:	1f 91       	pop	r17
    31be:	0f 91       	pop	r16
    31c0:	ff 90       	pop	r15
    31c2:	ef 90       	pop	r14
    31c4:	df 90       	pop	r13
    31c6:	cf 90       	pop	r12
    31c8:	bf 90       	pop	r11
    31ca:	af 90       	pop	r10
                mousekey_send();
    31cc:	0c 94 23 25 	jmp	0x4a46	; 0x4a46 <mousekey_send>
                mousekey_off(action.key.code);
    31d0:	0e 94 a4 24 	call	0x4948	; 0x4948 <mousekey_off>
    31d4:	eb cf       	rjmp	.-42     	; 0x31ac <process_action+0x280>
            if (action.layer_bitop.on == 0) {
    31d6:	81 2f       	mov	r24, r17
    31d8:	83 70       	andi	r24, 0x03	; 3
    31da:	09 f0       	breq	.+2      	; 0x31de <process_action+0x2b2>
    31dc:	8c c0       	rjmp	.+280    	; 0x32f6 <process_action+0x3ca>
                if (!event.pressed) {
    31de:	f1 10       	cpse	r15, r1
    31e0:	d0 ce       	rjmp	.-608    	; 0x2f82 <process_action+0x56>
                    uint8_t shift = action.layer_bitop.part*4;
    31e2:	20 2f       	mov	r18, r16
    31e4:	22 95       	swap	r18
    31e6:	26 95       	lsr	r18
    31e8:	27 70       	andi	r18, 0x07	; 7
    31ea:	22 0f       	add	r18, r18
    31ec:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    31ee:	80 2f       	mov	r24, r16
    31f0:	8f 70       	andi	r24, 0x0F	; 15
    31f2:	90 e0       	ldi	r25, 0x00	; 0
    31f4:	b0 e0       	ldi	r27, 0x00	; 0
    31f6:	a0 e0       	ldi	r26, 0x00	; 0
    31f8:	6c 01       	movw	r12, r24
    31fa:	7d 01       	movw	r14, r26
    31fc:	02 2e       	mov	r0, r18
    31fe:	04 c0       	rjmp	.+8      	; 0x3208 <process_action+0x2dc>
    3200:	cc 0c       	add	r12, r12
    3202:	dd 1c       	adc	r13, r13
    3204:	ee 1c       	adc	r14, r14
    3206:	ff 1c       	adc	r15, r15
    3208:	0a 94       	dec	r0
    320a:	d2 f7       	brpl	.-12     	; 0x3200 <process_action+0x2d4>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    320c:	60 e0       	ldi	r22, 0x00	; 0
    320e:	70 e0       	ldi	r23, 0x00	; 0
    3210:	cb 01       	movw	r24, r22
    3212:	04 ff       	sbrs	r16, 4
    3214:	0f c0       	rjmp	.+30     	; 0x3234 <process_action+0x308>
    3216:	6f e0       	ldi	r22, 0x0F	; 15
    3218:	70 e0       	ldi	r23, 0x00	; 0
    321a:	80 e0       	ldi	r24, 0x00	; 0
    321c:	90 e0       	ldi	r25, 0x00	; 0
    321e:	04 c0       	rjmp	.+8      	; 0x3228 <process_action+0x2fc>
    3220:	66 0f       	add	r22, r22
    3222:	77 1f       	adc	r23, r23
    3224:	88 1f       	adc	r24, r24
    3226:	99 1f       	adc	r25, r25
    3228:	2a 95       	dec	r18
    322a:	d2 f7       	brpl	.-12     	; 0x3220 <process_action+0x2f4>
    322c:	60 95       	com	r22
    322e:	70 95       	com	r23
    3230:	80 95       	com	r24
    3232:	90 95       	com	r25
                    switch (action.layer_bitop.op) {
    3234:	16 95       	lsr	r17
    3236:	16 95       	lsr	r17
    3238:	13 70       	andi	r17, 0x03	; 3
    323a:	12 30       	cpi	r17, 0x02	; 2
    323c:	c9 f1       	breq	.+114    	; 0x32b0 <process_action+0x384>
    323e:	13 30       	cpi	r17, 0x03	; 3
    3240:	09 f4       	brne	.+2      	; 0x3244 <process_action+0x318>
    3242:	54 c0       	rjmp	.+168    	; 0x32ec <process_action+0x3c0>
    3244:	9b 01       	movw	r18, r22
    3246:	ac 01       	movw	r20, r24
    3248:	2c 29       	or	r18, r12
    324a:	3d 29       	or	r19, r13
    324c:	4e 29       	or	r20, r14
    324e:	5f 29       	or	r21, r15
    3250:	2e 83       	std	Y+6, r18	; 0x06
    3252:	3f 83       	std	Y+7, r19	; 0x07
    3254:	48 87       	std	Y+8, r20	; 0x08
    3256:	59 87       	std	Y+9, r21	; 0x09
    3258:	11 30       	cpi	r17, 0x01	; 1
    325a:	a1 f0       	breq	.+40     	; 0x3284 <process_action+0x358>
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    325c:	ca 01       	movw	r24, r20
    325e:	b9 01       	movw	r22, r18
}
    3260:	29 96       	adiw	r28, 0x09	; 9
    3262:	0f b6       	in	r0, 0x3f	; 63
    3264:	f8 94       	cli
    3266:	de bf       	out	0x3e, r29	; 62
    3268:	0f be       	out	0x3f, r0	; 63
    326a:	cd bf       	out	0x3d, r28	; 61
    326c:	df 91       	pop	r29
    326e:	cf 91       	pop	r28
    3270:	1f 91       	pop	r17
    3272:	0f 91       	pop	r16
    3274:	ff 90       	pop	r15
    3276:	ef 90       	pop	r14
    3278:	df 90       	pop	r13
    327a:	cf 90       	pop	r12
    327c:	bf 90       	pop	r11
    327e:	af 90       	pop	r10
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    3280:	0c 94 52 1f 	jmp	0x3ea4	; 0x3ea4 <default_layer_and>
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
    3284:	6e 81       	ldd	r22, Y+6	; 0x06
    3286:	7f 81       	ldd	r23, Y+7	; 0x07
    3288:	88 85       	ldd	r24, Y+8	; 0x08
    328a:	99 85       	ldd	r25, Y+9	; 0x09
}
    328c:	29 96       	adiw	r28, 0x09	; 9
    328e:	0f b6       	in	r0, 0x3f	; 63
    3290:	f8 94       	cli
    3292:	de bf       	out	0x3e, r29	; 62
    3294:	0f be       	out	0x3f, r0	; 63
    3296:	cd bf       	out	0x3d, r28	; 61
    3298:	df 91       	pop	r29
    329a:	cf 91       	pop	r28
    329c:	1f 91       	pop	r17
    329e:	0f 91       	pop	r16
    32a0:	ff 90       	pop	r15
    32a2:	ef 90       	pop	r14
    32a4:	df 90       	pop	r13
    32a6:	cf 90       	pop	r12
    32a8:	bf 90       	pop	r11
    32aa:	af 90       	pop	r10
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    32ac:	0c 94 22 1f 	jmp	0x3e44	; 0x3e44 <default_layer_or>
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    32b0:	9b 01       	movw	r18, r22
    32b2:	ac 01       	movw	r20, r24
    32b4:	2c 29       	or	r18, r12
    32b6:	3d 29       	or	r19, r13
    32b8:	4e 29       	or	r20, r14
    32ba:	5f 29       	or	r21, r15
    32bc:	2e 83       	std	Y+6, r18	; 0x06
    32be:	3f 83       	std	Y+7, r19	; 0x07
    32c0:	48 87       	std	Y+8, r20	; 0x08
    32c2:	59 87       	std	Y+9, r21	; 0x09
    32c4:	ca 01       	movw	r24, r20
    32c6:	b9 01       	movw	r22, r18
}
    32c8:	29 96       	adiw	r28, 0x09	; 9
    32ca:	0f b6       	in	r0, 0x3f	; 63
    32cc:	f8 94       	cli
    32ce:	de bf       	out	0x3e, r29	; 62
    32d0:	0f be       	out	0x3f, r0	; 63
    32d2:	cd bf       	out	0x3d, r28	; 61
    32d4:	df 91       	pop	r29
    32d6:	cf 91       	pop	r28
    32d8:	1f 91       	pop	r17
    32da:	0f 91       	pop	r16
    32dc:	ff 90       	pop	r15
    32de:	ef 90       	pop	r14
    32e0:	df 90       	pop	r13
    32e2:	cf 90       	pop	r12
    32e4:	bf 90       	pop	r11
    32e6:	af 90       	pop	r10
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    32e8:	0c 94 82 1f 	jmp	0x3f04	; 0x3f04 <default_layer_xor>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    32ec:	0e 94 52 1f 	call	0x3ea4	; 0x3ea4 <default_layer_and>
    32f0:	c7 01       	movw	r24, r14
    32f2:	b6 01       	movw	r22, r12
    32f4:	cb cf       	rjmp	.-106    	; 0x328c <process_action+0x360>
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    32f6:	86 95       	lsr	r24
    32f8:	ff 20       	and	r15, r15
    32fa:	11 f0       	breq	.+4      	; 0x3300 <process_action+0x3d4>
    32fc:	81 2f       	mov	r24, r17
    32fe:	81 70       	andi	r24, 0x01	; 1
    3300:	88 23       	and	r24, r24
    3302:	09 f4       	brne	.+2      	; 0x3306 <process_action+0x3da>
    3304:	3e ce       	rjmp	.-900    	; 0x2f82 <process_action+0x56>
                    uint8_t shift = action.layer_bitop.part*4;
    3306:	20 2f       	mov	r18, r16
    3308:	22 95       	swap	r18
    330a:	26 95       	lsr	r18
    330c:	27 70       	andi	r18, 0x07	; 7
    330e:	22 0f       	add	r18, r18
    3310:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    3312:	80 2f       	mov	r24, r16
    3314:	8f 70       	andi	r24, 0x0F	; 15
    3316:	90 e0       	ldi	r25, 0x00	; 0
    3318:	b0 e0       	ldi	r27, 0x00	; 0
    331a:	a0 e0       	ldi	r26, 0x00	; 0
    331c:	6c 01       	movw	r12, r24
    331e:	7d 01       	movw	r14, r26
    3320:	02 2e       	mov	r0, r18
    3322:	04 c0       	rjmp	.+8      	; 0x332c <process_action+0x400>
    3324:	cc 0c       	add	r12, r12
    3326:	dd 1c       	adc	r13, r13
    3328:	ee 1c       	adc	r14, r14
    332a:	ff 1c       	adc	r15, r15
    332c:	0a 94       	dec	r0
    332e:	d2 f7       	brpl	.-12     	; 0x3324 <process_action+0x3f8>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    3330:	60 e0       	ldi	r22, 0x00	; 0
    3332:	70 e0       	ldi	r23, 0x00	; 0
    3334:	cb 01       	movw	r24, r22
    3336:	04 ff       	sbrs	r16, 4
    3338:	0f c0       	rjmp	.+30     	; 0x3358 <process_action+0x42c>
    333a:	6f e0       	ldi	r22, 0x0F	; 15
    333c:	70 e0       	ldi	r23, 0x00	; 0
    333e:	80 e0       	ldi	r24, 0x00	; 0
    3340:	90 e0       	ldi	r25, 0x00	; 0
    3342:	04 c0       	rjmp	.+8      	; 0x334c <process_action+0x420>
    3344:	66 0f       	add	r22, r22
    3346:	77 1f       	adc	r23, r23
    3348:	88 1f       	adc	r24, r24
    334a:	99 1f       	adc	r25, r25
    334c:	2a 95       	dec	r18
    334e:	d2 f7       	brpl	.-12     	; 0x3344 <process_action+0x418>
    3350:	60 95       	com	r22
    3352:	70 95       	com	r23
    3354:	80 95       	com	r24
    3356:	90 95       	com	r25
                    switch (action.layer_bitop.op) {
    3358:	16 95       	lsr	r17
    335a:	16 95       	lsr	r17
    335c:	13 70       	andi	r17, 0x03	; 3
    335e:	12 30       	cpi	r17, 0x02	; 2
    3360:	c9 f1       	breq	.+114    	; 0x33d4 <process_action+0x4a8>
    3362:	13 30       	cpi	r17, 0x03	; 3
    3364:	09 f4       	brne	.+2      	; 0x3368 <process_action+0x43c>
    3366:	54 c0       	rjmp	.+168    	; 0x3410 <process_action+0x4e4>
    3368:	9b 01       	movw	r18, r22
    336a:	ac 01       	movw	r20, r24
    336c:	2c 29       	or	r18, r12
    336e:	3d 29       	or	r19, r13
    3370:	4e 29       	or	r20, r14
    3372:	5f 29       	or	r21, r15
    3374:	2e 83       	std	Y+6, r18	; 0x06
    3376:	3f 83       	std	Y+7, r19	; 0x07
    3378:	48 87       	std	Y+8, r20	; 0x08
    337a:	59 87       	std	Y+9, r21	; 0x09
    337c:	11 30       	cpi	r17, 0x01	; 1
    337e:	a1 f0       	breq	.+40     	; 0x33a8 <process_action+0x47c>
                        case OP_BIT_AND: layer_and(bits | mask); break;
    3380:	ca 01       	movw	r24, r20
    3382:	b9 01       	movw	r22, r18
}
    3384:	29 96       	adiw	r28, 0x09	; 9
    3386:	0f b6       	in	r0, 0x3f	; 63
    3388:	f8 94       	cli
    338a:	de bf       	out	0x3e, r29	; 62
    338c:	0f be       	out	0x3f, r0	; 63
    338e:	cd bf       	out	0x3d, r28	; 61
    3390:	df 91       	pop	r29
    3392:	cf 91       	pop	r28
    3394:	1f 91       	pop	r17
    3396:	0f 91       	pop	r16
    3398:	ff 90       	pop	r15
    339a:	ef 90       	pop	r14
    339c:	df 90       	pop	r13
    339e:	cf 90       	pop	r12
    33a0:	bf 90       	pop	r11
    33a2:	af 90       	pop	r10
                        case OP_BIT_AND: layer_and(bits | mask); break;
    33a4:	0c 94 9b 20 	jmp	0x4136	; 0x4136 <layer_and>
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
    33a8:	6e 81       	ldd	r22, Y+6	; 0x06
    33aa:	7f 81       	ldd	r23, Y+7	; 0x07
    33ac:	88 85       	ldd	r24, Y+8	; 0x08
    33ae:	99 85       	ldd	r25, Y+9	; 0x09
}
    33b0:	29 96       	adiw	r28, 0x09	; 9
    33b2:	0f b6       	in	r0, 0x3f	; 63
    33b4:	f8 94       	cli
    33b6:	de bf       	out	0x3e, r29	; 62
    33b8:	0f be       	out	0x3f, r0	; 63
    33ba:	cd bf       	out	0x3d, r28	; 61
    33bc:	df 91       	pop	r29
    33be:	cf 91       	pop	r28
    33c0:	1f 91       	pop	r17
    33c2:	0f 91       	pop	r16
    33c4:	ff 90       	pop	r15
    33c6:	ef 90       	pop	r14
    33c8:	df 90       	pop	r13
    33ca:	cf 90       	pop	r12
    33cc:	bf 90       	pop	r11
    33ce:	af 90       	pop	r10
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    33d0:	0c 94 73 20 	jmp	0x40e6	; 0x40e6 <layer_or>
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    33d4:	9b 01       	movw	r18, r22
    33d6:	ac 01       	movw	r20, r24
    33d8:	2c 29       	or	r18, r12
    33da:	3d 29       	or	r19, r13
    33dc:	4e 29       	or	r20, r14
    33de:	5f 29       	or	r21, r15
    33e0:	2e 83       	std	Y+6, r18	; 0x06
    33e2:	3f 83       	std	Y+7, r19	; 0x07
    33e4:	48 87       	std	Y+8, r20	; 0x08
    33e6:	59 87       	std	Y+9, r21	; 0x09
    33e8:	ca 01       	movw	r24, r20
    33ea:	b9 01       	movw	r22, r18
}
    33ec:	29 96       	adiw	r28, 0x09	; 9
    33ee:	0f b6       	in	r0, 0x3f	; 63
    33f0:	f8 94       	cli
    33f2:	de bf       	out	0x3e, r29	; 62
    33f4:	0f be       	out	0x3f, r0	; 63
    33f6:	cd bf       	out	0x3d, r28	; 61
    33f8:	df 91       	pop	r29
    33fa:	cf 91       	pop	r28
    33fc:	1f 91       	pop	r17
    33fe:	0f 91       	pop	r16
    3400:	ff 90       	pop	r15
    3402:	ef 90       	pop	r14
    3404:	df 90       	pop	r13
    3406:	cf 90       	pop	r12
    3408:	bf 90       	pop	r11
    340a:	af 90       	pop	r10
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    340c:	0c 94 c3 20 	jmp	0x4186	; 0x4186 <layer_xor>
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    3410:	0e 94 9b 20 	call	0x4136	; 0x4136 <layer_and>
    3414:	c7 01       	movw	r24, r14
    3416:	b6 01       	movw	r22, r12
    3418:	cb cf       	rjmp	.-106    	; 0x33b0 <process_action+0x484>
            switch (action.layer_tap.code) {
    341a:	01 3f       	cpi	r16, 0xF1	; 241
    341c:	09 f4       	brne	.+2      	; 0x3420 <process_action+0x4f4>
    341e:	64 c0       	rjmp	.+200    	; 0x34e8 <process_action+0x5bc>
    3420:	f0 f4       	brcc	.+60     	; 0x345e <process_action+0x532>
    3422:	00 3e       	cpi	r16, 0xE0	; 224
    3424:	90 f4       	brcc	.+36     	; 0x344a <process_action+0x51e>
    3426:	00 3c       	cpi	r16, 0xC0	; 192
    3428:	90 f0       	brcs	.+36     	; 0x344e <process_action+0x522>
                    if (event.pressed) {
    342a:	81 2f       	mov	r24, r17
    342c:	8f 71       	andi	r24, 0x1F	; 31
    342e:	10 2f       	mov	r17, r16
    3430:	10 71       	andi	r17, 0x10	; 16
    3432:	ff 20       	and	r15, r15
    3434:	81 f1       	breq	.+96     	; 0x3496 <process_action+0x56a>
                        layer_on(action.layer_tap.val);
    3436:	0e 94 dc 1f 	call	0x3fb8	; 0x3fb8 <layer_on>
                        register_mods((action.layer_tap.code & 0x10) ?
    343a:	80 2f       	mov	r24, r16
    343c:	82 95       	swap	r24
    343e:	80 7f       	andi	r24, 0xF0	; 240
    3440:	11 11       	cpse	r17, r1
    3442:	0d ce       	rjmp	.-998    	; 0x305e <process_action+0x132>
    3444:	80 2f       	mov	r24, r16
    3446:	8f 70       	andi	r24, 0x0F	; 15
    3448:	0a ce       	rjmp	.-1004   	; 0x305e <process_action+0x132>
    344a:	00 3f       	cpi	r16, 0xF0	; 240
    344c:	71 f1       	breq	.+92     	; 0x34aa <process_action+0x57e>
                    if (event.pressed) {
    344e:	ff 20       	and	r15, r15
    3450:	09 f4       	brne	.+2      	; 0x3454 <process_action+0x528>
    3452:	88 c0       	rjmp	.+272    	; 0x3564 <process_action+0x638>
                        if (tap_count > 0) {
    3454:	e1 10       	cpse	r14, r1
    3456:	b7 cd       	rjmp	.-1170   	; 0x2fc6 <process_action+0x9a>
                            layer_on(action.layer_tap.val);
    3458:	81 2f       	mov	r24, r17
    345a:	8f 71       	andi	r24, 0x1F	; 31
    345c:	49 c0       	rjmp	.+146    	; 0x34f0 <process_action+0x5c4>
    345e:	02 3f       	cpi	r16, 0xF2	; 242
    3460:	09 f4       	brne	.+2      	; 0x3464 <process_action+0x538>
    3462:	58 c0       	rjmp	.+176    	; 0x3514 <process_action+0x5e8>
    3464:	03 3f       	cpi	r16, 0xF3	; 243
    3466:	99 f7       	brne	.-26     	; 0x344e <process_action+0x522>
                    event.pressed ? layer_move(action.layer_tap.val) :
    3468:	ff 20       	and	r15, r15
    346a:	09 f4       	brne	.+2      	; 0x346e <process_action+0x542>
    346c:	69 c0       	rjmp	.+210    	; 0x3540 <process_action+0x614>
    346e:	81 2f       	mov	r24, r17
    3470:	8f 71       	andi	r24, 0x1F	; 31
}
    3472:	29 96       	adiw	r28, 0x09	; 9
    3474:	0f b6       	in	r0, 0x3f	; 63
    3476:	f8 94       	cli
    3478:	de bf       	out	0x3e, r29	; 62
    347a:	0f be       	out	0x3f, r0	; 63
    347c:	cd bf       	out	0x3d, r28	; 61
    347e:	df 91       	pop	r29
    3480:	cf 91       	pop	r28
    3482:	1f 91       	pop	r17
    3484:	0f 91       	pop	r16
    3486:	ff 90       	pop	r15
    3488:	ef 90       	pop	r14
    348a:	df 90       	pop	r13
    348c:	cf 90       	pop	r12
    348e:	bf 90       	pop	r11
    3490:	af 90       	pop	r10
                    event.pressed ? layer_move(action.layer_tap.val) :
    3492:	0c 94 b7 1f 	jmp	0x3f6e	; 0x3f6e <layer_move>
                        layer_off(action.layer_tap.val);
    3496:	0e 94 0d 20 	call	0x401a	; 0x401a <layer_off>
                        unregister_mods((action.layer_tap.code & 0x10) ?
    349a:	80 2f       	mov	r24, r16
    349c:	82 95       	swap	r24
    349e:	80 7f       	andi	r24, 0xF0	; 240
    34a0:	11 11       	cpse	r17, r1
    34a2:	0a ce       	rjmp	.-1004   	; 0x30b8 <process_action+0x18c>
    34a4:	80 2f       	mov	r24, r16
    34a6:	8f 70       	andi	r24, 0x0F	; 15
    34a8:	07 ce       	rjmp	.-1010   	; 0x30b8 <process_action+0x18c>
                    if (event.pressed) {
    34aa:	ff 20       	and	r15, r15
    34ac:	c1 f0       	breq	.+48     	; 0x34de <process_action+0x5b2>
                        if (tap_count < TAPPING_TOGGLE) {
    34ae:	34 e0       	ldi	r19, 0x04	; 4
    34b0:	3e 15       	cp	r19, r14
    34b2:	08 f4       	brcc	.+2      	; 0x34b6 <process_action+0x58a>
    34b4:	66 cd       	rjmp	.-1332   	; 0x2f82 <process_action+0x56>
                            layer_invert(action.layer_tap.val);
    34b6:	81 2f       	mov	r24, r17
    34b8:	8f 71       	andi	r24, 0x1F	; 31
}
    34ba:	29 96       	adiw	r28, 0x09	; 9
    34bc:	0f b6       	in	r0, 0x3f	; 63
    34be:	f8 94       	cli
    34c0:	de bf       	out	0x3e, r29	; 62
    34c2:	0f be       	out	0x3f, r0	; 63
    34c4:	cd bf       	out	0x3d, r28	; 61
    34c6:	df 91       	pop	r29
    34c8:	cf 91       	pop	r28
    34ca:	1f 91       	pop	r17
    34cc:	0f 91       	pop	r16
    34ce:	ff 90       	pop	r15
    34d0:	ef 90       	pop	r14
    34d2:	df 90       	pop	r13
    34d4:	cf 90       	pop	r12
    34d6:	bf 90       	pop	r11
    34d8:	af 90       	pop	r10
                            layer_invert(action.layer_tap.val);
    34da:	0c 94 42 20 	jmp	0x4084	; 0x4084 <layer_invert>
                        if (tap_count <= TAPPING_TOGGLE) {
    34de:	45 e0       	ldi	r20, 0x05	; 5
    34e0:	4e 15       	cp	r20, r14
    34e2:	08 f4       	brcc	.+2      	; 0x34e6 <process_action+0x5ba>
    34e4:	4e cd       	rjmp	.-1380   	; 0x2f82 <process_action+0x56>
    34e6:	e7 cf       	rjmp	.-50     	; 0x34b6 <process_action+0x58a>
                    event.pressed ? layer_on(action.layer_tap.val) :
    34e8:	81 2f       	mov	r24, r17
    34ea:	8f 71       	andi	r24, 0x1F	; 31
    34ec:	ff 20       	and	r15, r15
    34ee:	b1 f0       	breq	.+44     	; 0x351c <process_action+0x5f0>
}
    34f0:	29 96       	adiw	r28, 0x09	; 9
    34f2:	0f b6       	in	r0, 0x3f	; 63
    34f4:	f8 94       	cli
    34f6:	de bf       	out	0x3e, r29	; 62
    34f8:	0f be       	out	0x3f, r0	; 63
    34fa:	cd bf       	out	0x3d, r28	; 61
    34fc:	df 91       	pop	r29
    34fe:	cf 91       	pop	r28
    3500:	1f 91       	pop	r17
    3502:	0f 91       	pop	r16
    3504:	ff 90       	pop	r15
    3506:	ef 90       	pop	r14
    3508:	df 90       	pop	r13
    350a:	cf 90       	pop	r12
    350c:	bf 90       	pop	r11
    350e:	af 90       	pop	r10
                            layer_on(action.layer_tap.val);
    3510:	0c 94 dc 1f 	jmp	0x3fb8	; 0x3fb8 <layer_on>
                    event.pressed ? layer_off(action.layer_tap.val) :
    3514:	81 2f       	mov	r24, r17
    3516:	8f 71       	andi	r24, 0x1F	; 31
    3518:	ff 20       	and	r15, r15
    351a:	51 f3       	breq	.-44     	; 0x34f0 <process_action+0x5c4>
}
    351c:	29 96       	adiw	r28, 0x09	; 9
    351e:	0f b6       	in	r0, 0x3f	; 63
    3520:	f8 94       	cli
    3522:	de bf       	out	0x3e, r29	; 62
    3524:	0f be       	out	0x3f, r0	; 63
    3526:	cd bf       	out	0x3d, r28	; 61
    3528:	df 91       	pop	r29
    352a:	cf 91       	pop	r28
    352c:	1f 91       	pop	r17
    352e:	0f 91       	pop	r16
    3530:	ff 90       	pop	r15
    3532:	ef 90       	pop	r14
    3534:	df 90       	pop	r13
    3536:	cf 90       	pop	r12
    3538:	bf 90       	pop	r11
    353a:	af 90       	pop	r10
                            layer_off(action.layer_tap.val);
    353c:	0c 94 0d 20 	jmp	0x401a	; 0x401a <layer_off>
}
    3540:	29 96       	adiw	r28, 0x09	; 9
    3542:	0f b6       	in	r0, 0x3f	; 63
    3544:	f8 94       	cli
    3546:	de bf       	out	0x3e, r29	; 62
    3548:	0f be       	out	0x3f, r0	; 63
    354a:	cd bf       	out	0x3d, r28	; 61
    354c:	df 91       	pop	r29
    354e:	cf 91       	pop	r28
    3550:	1f 91       	pop	r17
    3552:	0f 91       	pop	r16
    3554:	ff 90       	pop	r15
    3556:	ef 90       	pop	r14
    3558:	df 90       	pop	r13
    355a:	cf 90       	pop	r12
    355c:	bf 90       	pop	r11
    355e:	af 90       	pop	r10
                                    layer_clear();
    3560:	0c 94 b2 1f 	jmp	0x3f64	; 0x3f64 <layer_clear>
                        if (tap_count > 0) {
    3564:	e1 10       	cpse	r14, r1
    3566:	d2 cd       	rjmp	.-1116   	; 0x310c <process_action+0x1e0>
                            layer_off(action.layer_tap.val);
    3568:	81 2f       	mov	r24, r17
    356a:	8f 71       	andi	r24, 0x1F	; 31
    356c:	d7 cf       	rjmp	.-82     	; 0x351c <process_action+0x5f0>
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    356e:	41 2f       	mov	r20, r17
    3570:	4f 70       	andi	r20, 0x0F	; 15
    3572:	60 2f       	mov	r22, r16
    3574:	c5 01       	movw	r24, r10
    3576:	0e 94 ad 23 	call	0x475a	; 0x475a <action_get_macro>
}
    357a:	29 96       	adiw	r28, 0x09	; 9
    357c:	0f b6       	in	r0, 0x3f	; 63
    357e:	f8 94       	cli
    3580:	de bf       	out	0x3e, r29	; 62
    3582:	0f be       	out	0x3f, r0	; 63
    3584:	cd bf       	out	0x3d, r28	; 61
    3586:	df 91       	pop	r29
    3588:	cf 91       	pop	r28
    358a:	1f 91       	pop	r17
    358c:	0f 91       	pop	r16
    358e:	ff 90       	pop	r15
    3590:	ef 90       	pop	r14
    3592:	df 90       	pop	r13
    3594:	cf 90       	pop	r12
    3596:	bf 90       	pop	r11
    3598:	af 90       	pop	r10
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    359a:	0c 94 74 1e 	jmp	0x3ce8	; 0x3ce8 <action_macro_play>
            action_function(record, action.func.id, action.func.opt);
    359e:	41 2f       	mov	r20, r17
    35a0:	4f 70       	andi	r20, 0x0F	; 15
    35a2:	60 2f       	mov	r22, r16
    35a4:	c5 01       	movw	r24, r10
}
    35a6:	29 96       	adiw	r28, 0x09	; 9
    35a8:	0f b6       	in	r0, 0x3f	; 63
    35aa:	f8 94       	cli
    35ac:	de bf       	out	0x3e, r29	; 62
    35ae:	0f be       	out	0x3f, r0	; 63
    35b0:	cd bf       	out	0x3d, r28	; 61
    35b2:	df 91       	pop	r29
    35b4:	cf 91       	pop	r28
    35b6:	1f 91       	pop	r17
    35b8:	0f 91       	pop	r16
    35ba:	ff 90       	pop	r15
    35bc:	ef 90       	pop	r14
    35be:	df 90       	pop	r13
    35c0:	cf 90       	pop	r12
    35c2:	bf 90       	pop	r11
    35c4:	af 90       	pop	r10
            action_function(record, action.func.id, action.func.opt);
    35c6:	0c 94 b0 23 	jmp	0x4760	; 0x4760 <action_function>
    keyevent_t event = record->event;
    35ca:	f2 80       	ldd	r15, Z+2	; 0x02
    uint8_t tap_count = record->tap.count;
    35cc:	e5 80       	ldd	r14, Z+5	; 0x05
    35ce:	e2 94       	swap	r14
    35d0:	2f e0       	ldi	r18, 0x0F	; 15
    35d2:	e2 22       	and	r14, r18
    action_t action = layer_switch_get_action(event);
    35d4:	78 2f       	mov	r23, r24
    35d6:	9d 83       	std	Y+5, r25	; 0x05
    35d8:	8c 83       	std	Y+4, r24	; 0x04
    35da:	6f 2d       	mov	r22, r15
    35dc:	8d 81       	ldd	r24, Y+5	; 0x05
    35de:	0e 94 ec 20 	call	0x41d8	; 0x41d8 <layer_switch_get_action>
    35e2:	8c 01       	movw	r16, r24
    dprint(" layer_state: "); layer_debug();
    35e4:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <layer_debug>
    dprint(" default_layer_state: "); default_layer_debug();
    35e8:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <default_layer_debug>
    switch (action.kind.id) {
    35ec:	e1 2f       	mov	r30, r17
    35ee:	e2 95       	swap	r30
    35f0:	ef 70       	andi	r30, 0x0F	; 15
    35f2:	f0 e0       	ldi	r31, 0x00	; 0
    35f4:	e8 58       	subi	r30, 0x88	; 136
    35f6:	fa 4f       	sbci	r31, 0xFA	; 250
    35f8:	0c 94 a3 2b 	jmp	0x5746	; 0x5746 <__tablejump2__>

000035fc <clear_keyboard_but_mods>:
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    35fc:	0e 94 f2 21 	call	0x43e4	; 0x43e4 <clear_weak_mods>
    clear_keys();
    3600:	0e 94 bf 21 	call	0x437e	; 0x437e <clear_keys>
    send_keyboard_report();
    3604:	0e 94 0b 22 	call	0x4416	; 0x4416 <send_keyboard_report>
#ifdef MOUSEKEY_ENABLE
    mousekey_clear();
    3608:	0e 94 98 26 	call	0x4d30	; 0x4d30 <mousekey_clear>
    mousekey_send();
    360c:	0e 94 23 25 	call	0x4a46	; 0x4a46 <mousekey_send>
#endif
#ifdef EXTRAKEY_ENABLE
    host_system_send(0);
    3610:	90 e0       	ldi	r25, 0x00	; 0
    3612:	80 e0       	ldi	r24, 0x00	; 0
    3614:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <host_system_send>
    host_consumer_send(0);
    3618:	90 e0       	ldi	r25, 0x00	; 0
    361a:	80 e0       	ldi	r24, 0x00	; 0
    361c:	0c 94 0e 15 	jmp	0x2a1c	; 0x2a1c <host_consumer_send>

00003620 <clear_keyboard>:
    clear_mods();
    3620:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <clear_mods>
    clear_keyboard_but_mods();
    3624:	0c 94 fe 1a 	jmp	0x35fc	; 0x35fc <clear_keyboard_but_mods>

00003628 <is_tap_key>:
#endif
}

bool is_tap_key(keyevent_t event)
{
    3628:	cf 93       	push	r28
    362a:	df 93       	push	r29
    362c:	00 d0       	rcall	.+0      	; 0x362e <is_tap_key+0x6>
    362e:	00 d0       	rcall	.+0      	; 0x3630 <is_tap_key+0x8>
    3630:	0f 92       	push	r0
    3632:	cd b7       	in	r28, 0x3d	; 61
    3634:	de b7       	in	r29, 0x3e	; 62
    3636:	6b 83       	std	Y+3, r22	; 0x03
    3638:	7c 83       	std	Y+4, r23	; 0x04
    363a:	8d 83       	std	Y+5, r24	; 0x05
    363c:	8c 81       	ldd	r24, Y+4	; 0x04
    363e:	9d 81       	ldd	r25, Y+5	; 0x05
    3640:	89 2b       	or	r24, r25
    3642:	21 f0       	breq	.+8      	; 0x364c <is_tap_key+0x24>
    3644:	84 2f       	mov	r24, r20
    3646:	85 23       	and	r24, r21
    3648:	8f 3f       	cpi	r24, 0xFF	; 255
    364a:	d1 f4       	brne	.+52     	; 0x3680 <is_tap_key+0x58>
    if (IS_NOEVENT(event)) { return false; }

    action_t action = layer_switch_get_action(event);

    switch (action.kind.id) {
    364c:	80 e0       	ldi	r24, 0x00	; 0
    364e:	0c c0       	rjmp	.+24     	; 0x3668 <is_tap_key+0x40>
    3650:	80 e2       	ldi	r24, 0x20	; 32
    3652:	82 0f       	add	r24, r18
    3654:	88 30       	cpi	r24, 0x08	; 8
    3656:	58 f1       	brcs	.+86     	; 0x36ae <is_tap_key+0x86>
                case KC_LCTRL ... KC_RGUI:              // tap key
                    return true;
            }
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    3658:	28 3e       	cpi	r18, 0xE8	; 232
    365a:	70 f4       	brcc	.+28     	; 0x3678 <is_tap_key+0x50>
    365c:	20 3e       	cpi	r18, 0xE0	; 224
    365e:	38 f5       	brcc	.+78     	; 0x36ae <is_tap_key+0x86>
    3660:	24 50       	subi	r18, 0x04	; 4
    3662:	81 e0       	ldi	r24, 0x01	; 1
    3664:	21 3a       	cpi	r18, 0xA1	; 161
    3666:	90 f7       	brcc	.-28     	; 0x364c <is_tap_key+0x24>
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
            return false;
    }
    return false;
}
    3668:	0f 90       	pop	r0
    366a:	0f 90       	pop	r0
    366c:	0f 90       	pop	r0
    366e:	0f 90       	pop	r0
    3670:	0f 90       	pop	r0
    3672:	df 91       	pop	r29
    3674:	cf 91       	pop	r28
    3676:	08 95       	ret
    3678:	81 e0       	ldi	r24, 0x01	; 1
    367a:	20 3f       	cpi	r18, 0xF0	; 240
    367c:	39 f7       	brne	.-50     	; 0x364c <is_tap_key+0x24>
    367e:	f4 cf       	rjmp	.-24     	; 0x3668 <is_tap_key+0x40>
    action_t action = layer_switch_get_action(event);
    3680:	6b 81       	ldd	r22, Y+3	; 0x03
    3682:	7c 81       	ldd	r23, Y+4	; 0x04
    3684:	8d 81       	ldd	r24, Y+5	; 0x05
    3686:	0e 94 ec 20 	call	0x41d8	; 0x41d8 <layer_switch_get_action>
    368a:	28 2f       	mov	r18, r24
    switch (action.kind.id) {
    368c:	89 2f       	mov	r24, r25
    368e:	82 95       	swap	r24
    3690:	8f 70       	andi	r24, 0x0F	; 15
    3692:	90 3c       	cpi	r25, 0xC0	; 192
    3694:	70 f4       	brcc	.+28     	; 0x36b2 <is_tap_key+0x8a>
    3696:	8a 30       	cpi	r24, 0x0A	; 10
    3698:	f8 f6       	brcc	.-66     	; 0x3658 <is_tap_key+0x30>
    369a:	82 5f       	subi	r24, 0xF2	; 242
    369c:	8f 70       	andi	r24, 0x0F	; 15
    369e:	82 30       	cpi	r24, 0x02	; 2
    36a0:	a8 f6       	brcc	.-86     	; 0x364c <is_tap_key+0x24>
            switch (action.key.code) {
    36a2:	25 3a       	cpi	r18, 0xA5	; 165
    36a4:	a8 f6       	brcc	.-86     	; 0x3650 <is_tap_key+0x28>
    36a6:	8e ef       	ldi	r24, 0xFE	; 254
    36a8:	82 0f       	add	r24, r18
    36aa:	82 30       	cpi	r24, 0x02	; 2
    36ac:	c8 f2       	brcs	.-78     	; 0x3660 <is_tap_key+0x38>
                    return true;
    36ae:	81 e0       	ldi	r24, 0x01	; 1
    36b0:	db cf       	rjmp	.-74     	; 0x3668 <is_tap_key+0x40>
    switch (action.kind.id) {
    36b2:	8c 30       	cpi	r24, 0x0C	; 12
    36b4:	11 f0       	breq	.+4      	; 0x36ba <is_tap_key+0x92>
    36b6:	8f 30       	cpi	r24, 0x0F	; 15
    36b8:	49 f6       	brne	.-110    	; 0x364c <is_tap_key+0x24>
            if (action.func.opt & FUNC_TAP) { return true; }
    36ba:	93 fb       	bst	r25, 3
    36bc:	88 27       	eor	r24, r24
    36be:	80 f9       	bld	r24, 0
    36c0:	d3 cf       	rjmp	.-90     	; 0x3668 <is_tap_key+0x40>

000036c2 <debug_event>:

/*
 * debug print
 */
void debug_event(keyevent_t event)
{
    36c2:	cf 93       	push	r28
    36c4:	df 93       	push	r29
    36c6:	00 d0       	rcall	.+0      	; 0x36c8 <debug_event+0x6>
    36c8:	00 d0       	rcall	.+0      	; 0x36ca <debug_event+0x8>
    36ca:	0f 92       	push	r0
    36cc:	cd b7       	in	r28, 0x3d	; 61
    36ce:	de b7       	in	r29, 0x3e	; 62
    dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.time);
}
    36d0:	0f 90       	pop	r0
    36d2:	0f 90       	pop	r0
    36d4:	0f 90       	pop	r0
    36d6:	0f 90       	pop	r0
    36d8:	0f 90       	pop	r0
    36da:	df 91       	pop	r29
    36dc:	cf 91       	pop	r28
    36de:	08 95       	ret

000036e0 <debug_record>:

void debug_record(keyrecord_t record)
{
    36e0:	cf 93       	push	r28
    36e2:	df 93       	push	r29
    36e4:	00 d0       	rcall	.+0      	; 0x36e6 <debug_record+0x6>
    36e6:	00 d0       	rcall	.+0      	; 0x36e8 <debug_record+0x8>
    36e8:	00 d0       	rcall	.+0      	; 0x36ea <debug_record+0xa>
    36ea:	cd b7       	in	r28, 0x3d	; 61
    36ec:	de b7       	in	r29, 0x3e	; 62
    debug_event(record.event);
#ifndef NO_ACTION_TAPPING
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}
    36ee:	26 96       	adiw	r28, 0x06	; 6
    36f0:	0f b6       	in	r0, 0x3f	; 63
    36f2:	f8 94       	cli
    36f4:	de bf       	out	0x3e, r29	; 62
    36f6:	0f be       	out	0x3f, r0	; 63
    36f8:	cd bf       	out	0x3d, r28	; 61
    36fa:	df 91       	pop	r29
    36fc:	cf 91       	pop	r28
    36fe:	08 95       	ret

00003700 <debug_waiting_buffer>:
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
}

static void debug_waiting_buffer(void)
{
    3700:	cf 93       	push	r28
    3702:	df 93       	push	r29
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3704:	c0 91 97 02 	lds	r28, 0x0297	; 0x800297 <waiting_buffer_tail>
    3708:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <waiting_buffer_head>
    370c:	8c 13       	cpse	r24, r28
    370e:	03 c0       	rjmp	.+6      	; 0x3716 <debug_waiting_buffer+0x16>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    }
    debug("}\n");
}
    3710:	df 91       	pop	r29
    3712:	cf 91       	pop	r28
    3714:	08 95       	ret
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    3716:	d0 e0       	ldi	r29, 0x00	; 0
    3718:	ce 01       	movw	r24, r28
    371a:	66 e0       	ldi	r22, 0x06	; 6
    371c:	70 e0       	ldi	r23, 0x00	; 0
    371e:	0e 94 7e 2b 	call	0x56fc	; 0x56fc <__mulhi3>
    3722:	fc 01       	movw	r30, r24
    3724:	e7 56       	subi	r30, 0x67	; 103
    3726:	fd 4f       	sbci	r31, 0xFD	; 253
    3728:	40 81       	ld	r20, Z
    372a:	51 81       	ldd	r21, Z+1	; 0x01
    372c:	62 81       	ldd	r22, Z+2	; 0x02
    372e:	73 81       	ldd	r23, Z+3	; 0x03
    3730:	84 81       	ldd	r24, Z+4	; 0x04
    3732:	95 81       	ldd	r25, Z+5	; 0x05
    3734:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <debug_record>
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3738:	21 96       	adiw	r28, 0x01	; 1
    373a:	c7 70       	andi	r28, 0x07	; 7
    373c:	e5 cf       	rjmp	.-54     	; 0x3708 <debug_waiting_buffer+0x8>

0000373e <debug_tapping_key>:
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
    373e:	40 91 c9 02 	lds	r20, 0x02C9	; 0x8002c9 <tapping_key>
    3742:	50 91 ca 02 	lds	r21, 0x02CA	; 0x8002ca <tapping_key+0x1>
    3746:	60 91 cb 02 	lds	r22, 0x02CB	; 0x8002cb <tapping_key+0x2>
    374a:	70 91 cc 02 	lds	r23, 0x02CC	; 0x8002cc <tapping_key+0x3>
    374e:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <tapping_key+0x4>
    3752:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <tapping_key+0x5>
    3756:	0c 94 70 1b 	jmp	0x36e0	; 0x36e0 <debug_record>

0000375a <waiting_buffer_scan_tap>:
{
    375a:	ff 92       	push	r15
    375c:	0f 93       	push	r16
    375e:	1f 93       	push	r17
    3760:	cf 93       	push	r28
    3762:	df 93       	push	r29
    if (tapping_key.tap.count > 0) return;
    3764:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <tapping_key+0x5>
    3768:	80 7f       	andi	r24, 0xF0	; 240
    376a:	b9 f4       	brne	.+46     	; 0x379a <waiting_buffer_scan_tap+0x40>
    if (!tapping_key.event.pressed) return;
    376c:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <tapping_key+0x2>
    3770:	88 23       	and	r24, r24
    3772:	99 f0       	breq	.+38     	; 0x379a <waiting_buffer_scan_tap+0x40>
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3774:	20 91 97 02 	lds	r18, 0x0297	; 0x800297 <waiting_buffer_tail>
    3778:	00 91 98 02 	lds	r16, 0x0298	; 0x800298 <waiting_buffer_head>
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    377c:	40 91 c9 02 	lds	r20, 0x02C9	; 0x8002c9 <tapping_key>
    3780:	10 91 ca 02 	lds	r17, 0x02CA	; 0x8002ca <tapping_key+0x1>
    3784:	a0 91 cc 02 	lds	r26, 0x02CC	; 0x8002cc <tapping_key+0x3>
    3788:	b0 91 cd 02 	lds	r27, 0x02CD	; 0x8002cd <tapping_key+0x4>
    378c:	f4 2e       	mov	r15, r20
    378e:	f1 22       	and	r15, r17
    3790:	ed 01       	movw	r28, r26
    3792:	c0 95       	com	r28
    3794:	d0 95       	com	r29
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3796:	02 13       	cpse	r16, r18
    3798:	06 c0       	rjmp	.+12     	; 0x37a6 <waiting_buffer_scan_tap+0x4c>
}
    379a:	df 91       	pop	r29
    379c:	cf 91       	pop	r28
    379e:	1f 91       	pop	r17
    37a0:	0f 91       	pop	r16
    37a2:	ff 90       	pop	r15
    37a4:	08 95       	ret
    37a6:	30 e0       	ldi	r19, 0x00	; 0
    37a8:	10 97       	sbiw	r26, 0x00	; 0
    37aa:	19 f0       	breq	.+6      	; 0x37b2 <waiting_buffer_scan_tap+0x58>
    37ac:	8f ef       	ldi	r24, 0xFF	; 255
    37ae:	f8 12       	cpse	r15, r24
    37b0:	07 c0       	rjmp	.+14     	; 0x37c0 <waiting_buffer_scan_tap+0x66>
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    37b2:	2f 5f       	subi	r18, 0xFF	; 255
    37b4:	3f 4f       	sbci	r19, 0xFF	; 255
    37b6:	27 70       	andi	r18, 0x07	; 7
    37b8:	ee cf       	rjmp	.-36     	; 0x3796 <waiting_buffer_scan_tap+0x3c>
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    37ba:	8c 0f       	add	r24, r28
    37bc:	9d 1f       	adc	r25, r29
    37be:	18 c0       	rjmp	.+48     	; 0x37f0 <waiting_buffer_scan_tap+0x96>
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    37c0:	c9 01       	movw	r24, r18
    37c2:	66 e0       	ldi	r22, 0x06	; 6
    37c4:	70 e0       	ldi	r23, 0x00	; 0
    37c6:	0e 94 7e 2b 	call	0x56fc	; 0x56fc <__mulhi3>
    37ca:	fc 01       	movw	r30, r24
    37cc:	e7 56       	subi	r30, 0x67	; 103
    37ce:	fd 4f       	sbci	r31, 0xFD	; 253
    37d0:	81 81       	ldd	r24, Z+1	; 0x01
    37d2:	81 13       	cpse	r24, r17
    37d4:	ee cf       	rjmp	.-36     	; 0x37b2 <waiting_buffer_scan_tap+0x58>
    37d6:	80 81       	ld	r24, Z
    37d8:	84 13       	cpse	r24, r20
    37da:	eb cf       	rjmp	.-42     	; 0x37b2 <waiting_buffer_scan_tap+0x58>
    37dc:	82 81       	ldd	r24, Z+2	; 0x02
    37de:	81 11       	cpse	r24, r1
    37e0:	e8 cf       	rjmp	.-48     	; 0x37b2 <waiting_buffer_scan_tap+0x58>
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    37e2:	83 81       	ldd	r24, Z+3	; 0x03
    37e4:	94 81       	ldd	r25, Z+4	; 0x04
    37e6:	8a 17       	cp	r24, r26
    37e8:	9b 07       	cpc	r25, r27
    37ea:	38 f3       	brcs	.-50     	; 0x37ba <waiting_buffer_scan_tap+0x60>
    37ec:	8a 1b       	sub	r24, r26
    37ee:	9b 0b       	sbc	r25, r27
    37f0:	88 3c       	cpi	r24, 0xC8	; 200
    37f2:	91 05       	cpc	r25, r1
    37f4:	f0 f6       	brcc	.-68     	; 0x37b2 <waiting_buffer_scan_tap+0x58>
            tapping_key.tap.count = 1;
    37f6:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <tapping_key+0x5>
    37fa:	8f 70       	andi	r24, 0x0F	; 15
    37fc:	80 61       	ori	r24, 0x10	; 16
    37fe:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <tapping_key+0x5>
            waiting_buffer[i].tap.count = 1;
    3802:	c9 01       	movw	r24, r18
    3804:	66 e0       	ldi	r22, 0x06	; 6
    3806:	70 e0       	ldi	r23, 0x00	; 0
    3808:	0e 94 7e 2b 	call	0x56fc	; 0x56fc <__mulhi3>
    380c:	fc 01       	movw	r30, r24
    380e:	e2 56       	subi	r30, 0x62	; 98
    3810:	fd 4f       	sbci	r31, 0xFD	; 253
    3812:	90 81       	ld	r25, Z
    3814:	9f 70       	andi	r25, 0x0F	; 15
    3816:	90 61       	ori	r25, 0x10	; 16
    3818:	90 83       	st	Z, r25
            process_action(&tapping_key);
    381a:	89 ec       	ldi	r24, 0xC9	; 201
    381c:	92 e0       	ldi	r25, 0x02	; 2
    381e:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <process_action>
}
    3822:	df 91       	pop	r29
    3824:	cf 91       	pop	r28
    3826:	1f 91       	pop	r17
    3828:	0f 91       	pop	r16
    382a:	ff 90       	pop	r15
            debug_waiting_buffer();
    382c:	0c 94 80 1b 	jmp	0x3700	; 0x3700 <debug_waiting_buffer>

00003830 <process_tapping>:
{
    3830:	9f 92       	push	r9
    3832:	af 92       	push	r10
    3834:	bf 92       	push	r11
    3836:	cf 92       	push	r12
    3838:	df 92       	push	r13
    383a:	ef 92       	push	r14
    383c:	ff 92       	push	r15
    383e:	0f 93       	push	r16
    3840:	1f 93       	push	r17
    3842:	cf 93       	push	r28
    3844:	df 93       	push	r29
    3846:	cd b7       	in	r28, 0x3d	; 61
    3848:	de b7       	in	r29, 0x3e	; 62
    384a:	2b 97       	sbiw	r28, 0x0b	; 11
    384c:	0f b6       	in	r0, 0x3f	; 63
    384e:	f8 94       	cli
    3850:	de bf       	out	0x3e, r29	; 62
    3852:	0f be       	out	0x3f, r0	; 63
    3854:	cd bf       	out	0x3d, r28	; 61
    3856:	7c 01       	movw	r14, r24
    keyevent_t event = keyp->event;
    3858:	85 e0       	ldi	r24, 0x05	; 5
    385a:	f7 01       	movw	r30, r14
    385c:	de 01       	movw	r26, r28
    385e:	17 96       	adiw	r26, 0x07	; 7
    3860:	01 90       	ld	r0, Z+
    3862:	0d 92       	st	X+, r0
    3864:	8a 95       	dec	r24
    3866:	e1 f7       	brne	.-8      	; 0x3860 <process_tapping+0x30>
    3868:	d7 01       	movw	r26, r14
    386a:	4c 91       	ld	r20, X
    386c:	11 96       	adiw	r26, 0x01	; 1
    386e:	2c 91       	ld	r18, X
    3870:	11 97       	sbiw	r26, 0x01	; 1
    3872:	12 96       	adiw	r26, 0x02	; 2
    3874:	dc 90       	ld	r13, X
    3876:	12 97       	sbiw	r26, 0x02	; 2
    3878:	13 96       	adiw	r26, 0x03	; 3
    387a:	0d 91       	ld	r16, X+
    387c:	1c 91       	ld	r17, X
    if (IS_TAPPING_PRESSED()) {
    387e:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <tapping_key+0x3>
    3882:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <tapping_key+0x4>
    3886:	00 97       	sbiw	r24, 0x00	; 0
    3888:	09 f4       	brne	.+2      	; 0x388c <process_tapping+0x5c>
    388a:	7a c1       	rjmp	.+756    	; 0x3b80 <process_tapping+0x350>
    388c:	30 91 c9 02 	lds	r19, 0x02C9	; 0x8002c9 <tapping_key>
    3890:	50 91 ca 02 	lds	r21, 0x02CA	; 0x8002ca <tapping_key+0x1>
    3894:	65 2f       	mov	r22, r21
    3896:	63 23       	and	r22, r19
    3898:	6f 3f       	cpi	r22, 0xFF	; 255
    389a:	09 f4       	brne	.+2      	; 0x389e <process_tapping+0x6e>
    389c:	71 c1       	rjmp	.+738    	; 0x3b80 <process_tapping+0x350>
    389e:	90 90 cb 02 	lds	r9, 0x02CB	; 0x8002cb <tapping_key+0x2>
    38a2:	99 20       	and	r9, r9
    38a4:	09 f4       	brne	.+2      	; 0x38a8 <process_tapping+0x78>
    38a6:	04 c1       	rjmp	.+520    	; 0x3ab0 <process_tapping+0x280>
        if (WITHIN_TAPPING_TERM(event)) {
    38a8:	08 17       	cp	r16, r24
    38aa:	19 07       	cpc	r17, r25
    38ac:	08 f4       	brcc	.+2      	; 0x38b0 <process_tapping+0x80>
    38ae:	3f c0       	rjmp	.+126    	; 0x392e <process_tapping+0xfe>
    38b0:	f8 01       	movw	r30, r16
    38b2:	e8 1b       	sub	r30, r24
    38b4:	f9 0b       	sbc	r31, r25
    38b6:	cf 01       	movw	r24, r30
    38b8:	cc 24       	eor	r12, r12
    38ba:	c3 94       	inc	r12
    38bc:	88 3c       	cpi	r24, 0xC8	; 200
    38be:	91 05       	cpc	r25, r1
    38c0:	08 f0       	brcs	.+2      	; 0x38c4 <process_tapping+0x94>
    38c2:	c1 2c       	mov	r12, r1
    38c4:	89 ec       	ldi	r24, 0xC9	; 201
    38c6:	a8 2e       	mov	r10, r24
    38c8:	82 e0       	ldi	r24, 0x02	; 2
    38ca:	b8 2e       	mov	r11, r24
    38cc:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <tapping_key+0x5>
    38d0:	98 2f       	mov	r25, r24
    38d2:	90 7f       	andi	r25, 0xF0	; 240
    38d4:	cc 20       	and	r12, r12
    38d6:	09 f4       	brne	.+2      	; 0x38da <process_tapping+0xaa>
    38d8:	c2 c0       	rjmp	.+388    	; 0x3a5e <process_tapping+0x22e>
            if (tapping_key.tap.count == 0) {
    38da:	91 11       	cpse	r25, r1
    38dc:	86 c0       	rjmp	.+268    	; 0x39ea <process_tapping+0x1ba>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    38de:	cd 2c       	mov	r12, r13
    38e0:	52 13       	cpse	r21, r18
    38e2:	2a c0       	rjmp	.+84     	; 0x3938 <process_tapping+0x108>
    38e4:	34 13       	cpse	r19, r20
    38e6:	28 c0       	rjmp	.+80     	; 0x3938 <process_tapping+0x108>
    38e8:	d1 10       	cpse	r13, r1
    38ea:	26 c0       	rjmp	.+76     	; 0x3938 <process_tapping+0x108>
                    tapping_key.tap.count = 1;
    38ec:	8f 70       	andi	r24, 0x0F	; 15
    38ee:	80 61       	ori	r24, 0x10	; 16
    38f0:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <tapping_key+0x5>
                    debug_tapping_key();
    38f4:	0e 94 9f 1b 	call	0x373e	; 0x373e <debug_tapping_key>
                    process_action(&tapping_key);
    38f8:	c5 01       	movw	r24, r10
    38fa:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <process_action>
                    keyp->tap = tapping_key.tap;
    38fe:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <tapping_key+0x5>
    3902:	d7 01       	movw	r26, r14
    3904:	15 96       	adiw	r26, 0x05	; 5
    3906:	8c 93       	st	X, r24
}
    3908:	8c 2d       	mov	r24, r12
    390a:	2b 96       	adiw	r28, 0x0b	; 11
    390c:	0f b6       	in	r0, 0x3f	; 63
    390e:	f8 94       	cli
    3910:	de bf       	out	0x3e, r29	; 62
    3912:	0f be       	out	0x3f, r0	; 63
    3914:	cd bf       	out	0x3d, r28	; 61
    3916:	df 91       	pop	r29
    3918:	cf 91       	pop	r28
    391a:	1f 91       	pop	r17
    391c:	0f 91       	pop	r16
    391e:	ff 90       	pop	r15
    3920:	ef 90       	pop	r14
    3922:	df 90       	pop	r13
    3924:	cf 90       	pop	r12
    3926:	bf 90       	pop	r11
    3928:	af 90       	pop	r10
    392a:	9f 90       	pop	r9
    392c:	08 95       	ret
        if (WITHIN_TAPPING_TERM(event)) {
    392e:	80 95       	com	r24
    3930:	90 95       	com	r25
    3932:	80 0f       	add	r24, r16
    3934:	91 1f       	adc	r25, r17
    3936:	c0 cf       	rjmp	.-128    	; 0x38b8 <process_tapping+0x88>
    3938:	01 15       	cp	r16, r1
    393a:	11 05       	cpc	r17, r1
    393c:	29 f0       	breq	.+10     	; 0x3948 <process_tapping+0x118>
    393e:	84 2f       	mov	r24, r20
    3940:	82 23       	and	r24, r18
    3942:	8f 3f       	cpi	r24, 0xFF	; 255
    3944:	09 f0       	breq	.+2      	; 0x3948 <process_tapping+0x118>
    3946:	2f c1       	rjmp	.+606    	; 0x3ba6 <process_tapping+0x376>
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    3948:	80 e0       	ldi	r24, 0x00	; 0
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
    394a:	b8 2f       	mov	r27, r24
    394c:	b1 70       	andi	r27, 0x01	; 1
    394e:	bb 2e       	mov	r11, r27
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3950:	e0 91 97 02 	lds	r30, 0x0297	; 0x800297 <waiting_buffer_tail>
    3954:	30 91 98 02 	lds	r19, 0x0298	; 0x800298 <waiting_buffer_head>
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
    3958:	80 fd       	sbrc	r24, 0
    395a:	20 c0       	rjmp	.+64     	; 0x399c <process_tapping+0x16c>
                    if (event.pressed) {
    395c:	dd 20       	and	r13, r13
    395e:	a1 f2       	breq	.-88     	; 0x3908 <process_tapping+0xd8>
                        tapping_key.tap.interrupted = true;
    3960:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <tapping_key+0x5>
    3964:	81 60       	ori	r24, 0x01	; 1
    3966:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <tapping_key+0x5>
                    return false;
    396a:	c1 2c       	mov	r12, r1
    396c:	cd cf       	rjmp	.-102    	; 0x3908 <process_tapping+0xd8>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    396e:	f0 e0       	ldi	r31, 0x00	; 0
    3970:	cf 01       	movw	r24, r30
    3972:	66 e0       	ldi	r22, 0x06	; 6
    3974:	70 e0       	ldi	r23, 0x00	; 0
    3976:	0e 94 7e 2b 	call	0x56fc	; 0x56fc <__mulhi3>
    397a:	dc 01       	movw	r26, r24
    397c:	a7 56       	subi	r26, 0x67	; 103
    397e:	bd 4f       	sbci	r27, 0xFD	; 253
    3980:	11 96       	adiw	r26, 0x01	; 1
    3982:	8c 91       	ld	r24, X
    3984:	11 97       	sbiw	r26, 0x01	; 1
    3986:	82 13       	cpse	r24, r18
    3988:	07 c0       	rjmp	.+14     	; 0x3998 <process_tapping+0x168>
    398a:	8c 91       	ld	r24, X
    398c:	84 13       	cpse	r24, r20
    398e:	04 c0       	rjmp	.+8      	; 0x3998 <process_tapping+0x168>
    3990:	12 96       	adiw	r26, 0x02	; 2
    3992:	8c 91       	ld	r24, X
    3994:	8d 11       	cpse	r24, r13
    3996:	e2 cf       	rjmp	.-60     	; 0x395c <process_tapping+0x12c>
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3998:	31 96       	adiw	r30, 0x01	; 1
    399a:	e7 70       	andi	r30, 0x07	; 7
    399c:	e3 13       	cpse	r30, r19
    399e:	e7 cf       	rjmp	.-50     	; 0x396e <process_tapping+0x13e>
                    action_t action = layer_switch_get_action(event);
    39a0:	70 2f       	mov	r23, r16
    39a2:	1b 87       	std	Y+11, r17	; 0x0b
    39a4:	0a 87       	std	Y+10, r16	; 0x0a
    39a6:	52 2f       	mov	r21, r18
    39a8:	6d 2d       	mov	r22, r13
    39aa:	8b 85       	ldd	r24, Y+11	; 0x0b
    39ac:	0e 94 ec 20 	call	0x41d8	; 0x41d8 <layer_switch_get_action>
                    switch (action.kind.id) {
    39b0:	29 2f       	mov	r18, r25
    39b2:	22 95       	swap	r18
    39b4:	2f 70       	andi	r18, 0x0F	; 15
    39b6:	90 32       	cpi	r25, 0x20	; 32
    39b8:	60 f0       	brcs	.+24     	; 0x39d2 <process_tapping+0x1a2>
    39ba:	22 5f       	subi	r18, 0xF2	; 242
    39bc:	2f 70       	andi	r18, 0x0F	; 15
    39be:	22 30       	cpi	r18, 0x02	; 2
    39c0:	78 f4       	brcc	.+30     	; 0x39e0 <process_tapping+0x1b0>
                            if (action.key.mods && keyp->tap.count == 0) return false;
    39c2:	9f 70       	andi	r25, 0x0F	; 15
    39c4:	51 f0       	breq	.+20     	; 0x39da <process_tapping+0x1aa>
    39c6:	f7 01       	movw	r30, r14
    39c8:	95 81       	ldd	r25, Z+5	; 0x05
    39ca:	90 7f       	andi	r25, 0xF0	; 240
    39cc:	31 f4       	brne	.+12     	; 0x39da <process_tapping+0x1aa>
                            if (action.key.mods && !action.key.code) return false;
    39ce:	b1 2c       	mov	r11, r1
    39d0:	0a c0       	rjmp	.+20     	; 0x39e6 <process_tapping+0x1b6>
    39d2:	9f 70       	andi	r25, 0x0F	; 15
    39d4:	11 f0       	breq	.+4      	; 0x39da <process_tapping+0x1aa>
    39d6:	88 23       	and	r24, r24
    39d8:	d1 f3       	breq	.-12     	; 0x39ce <process_tapping+0x19e>
                            if (IS_MOD(action.key.code)) return false;
    39da:	80 5e       	subi	r24, 0xE0	; 224
    39dc:	88 30       	cpi	r24, 0x08	; 8
    39de:	b8 f3       	brcs	.-18     	; 0x39ce <process_tapping+0x19e>
                    process_action(keyp);
    39e0:	c7 01       	movw	r24, r14
    39e2:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <process_action>
                    return true;
    39e6:	cb 2c       	mov	r12, r11
    39e8:	8f cf       	rjmp	.-226    	; 0x3908 <process_tapping+0xd8>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    39ea:	52 13       	cpse	r21, r18
    39ec:	06 c0       	rjmp	.+12     	; 0x39fa <process_tapping+0x1ca>
    39ee:	34 13       	cpse	r19, r20
    39f0:	04 c0       	rjmp	.+8      	; 0x39fa <process_tapping+0x1ca>
                    keyp->tap = tapping_key.tap;
    39f2:	d7 01       	movw	r26, r14
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    39f4:	dd 20       	and	r13, r13
    39f6:	09 f4       	brne	.+2      	; 0x39fa <process_tapping+0x1ca>
    39f8:	81 c0       	rjmp	.+258    	; 0x3afc <process_tapping+0x2cc>
                else if (is_tap_key(event) && event.pressed) {
    39fa:	4f 83       	std	Y+7, r20	; 0x07
    39fc:	28 87       	std	Y+8, r18	; 0x08
    39fe:	d9 86       	std	Y+9, r13	; 0x09
    3a00:	70 2f       	mov	r23, r16
    3a02:	1b 87       	std	Y+11, r17	; 0x0b
    3a04:	0a 87       	std	Y+10, r16	; 0x0a
    3a06:	52 2f       	mov	r21, r18
    3a08:	6d 2d       	mov	r22, r13
    3a0a:	8b 85       	ldd	r24, Y+11	; 0x0b
    3a0c:	0e 94 14 1b 	call	0x3628	; 0x3628 <is_tap_key>
    3a10:	88 23       	and	r24, r24
    3a12:	09 f4       	brne	.+2      	; 0x3a16 <process_tapping+0x1e6>
    3a14:	c4 c0       	rjmp	.+392    	; 0x3b9e <process_tapping+0x36e>
    3a16:	dd 20       	and	r13, r13
    3a18:	09 f4       	brne	.+2      	; 0x3a1c <process_tapping+0x1ec>
    3a1a:	c1 c0       	rjmp	.+386    	; 0x3b9e <process_tapping+0x36e>
                    if (tapping_key.tap.count > 1) {
    3a1c:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <tapping_key+0x5>
    3a20:	80 32       	cpi	r24, 0x20	; 32
    3a22:	70 f0       	brcs	.+28     	; 0x3a40 <process_tapping+0x210>
                        process_action(&(keyrecord_t){
    3a24:	20 91 c9 02 	lds	r18, 0x02C9	; 0x8002c9 <tapping_key>
    3a28:	30 91 ca 02 	lds	r19, 0x02CA	; 0x8002ca <tapping_key+0x1>
    3a2c:	3a 83       	std	Y+2, r19	; 0x02
    3a2e:	29 83       	std	Y+1, r18	; 0x01
    3a30:	1b 82       	std	Y+3, r1	; 0x03
    3a32:	1d 83       	std	Y+5, r17	; 0x05
    3a34:	0c 83       	std	Y+4, r16	; 0x04
    3a36:	8e 83       	std	Y+6, r24	; 0x06
    3a38:	ce 01       	movw	r24, r28
    3a3a:	01 96       	adiw	r24, 0x01	; 1
    3a3c:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <process_action>
                    tapping_key = *keyp;
    3a40:	86 e0       	ldi	r24, 0x06	; 6
    3a42:	f7 01       	movw	r30, r14
    3a44:	a9 ec       	ldi	r26, 0xC9	; 201
    3a46:	b2 e0       	ldi	r27, 0x02	; 2
    3a48:	01 90       	ld	r0, Z+
    3a4a:	0d 92       	st	X+, r0
    3a4c:	8a 95       	dec	r24
    3a4e:	e1 f7       	brne	.-8      	; 0x3a48 <process_tapping+0x218>
                    waiting_buffer_scan_tap();
    3a50:	0e 94 ad 1b 	call	0x375a	; 0x375a <waiting_buffer_scan_tap>
                    debug_tapping_key();
    3a54:	0e 94 9f 1b 	call	0x373e	; 0x373e <debug_tapping_key>
                    return true;
    3a58:	cc 24       	eor	r12, r12
    3a5a:	c3 94       	inc	r12
    3a5c:	55 cf       	rjmp	.-342    	; 0x3908 <process_tapping+0xd8>
            if (tapping_key.tap.count == 0) {
    3a5e:	91 11       	cpse	r25, r1
    3a60:	14 c0       	rjmp	.+40     	; 0x3a8a <process_tapping+0x25a>
                debug_event(event); debug("\n");
    3a62:	70 2f       	mov	r23, r16
    3a64:	1b 87       	std	Y+11, r17	; 0x0b
    3a66:	0a 87       	std	Y+10, r16	; 0x0a
    3a68:	52 2f       	mov	r21, r18
    3a6a:	6d 2d       	mov	r22, r13
    3a6c:	8b 85       	ldd	r24, Y+11	; 0x0b
    3a6e:	0e 94 61 1b 	call	0x36c2	; 0x36c2 <debug_event>
                process_action(&tapping_key);
    3a72:	89 ec       	ldi	r24, 0xC9	; 201
    3a74:	92 e0       	ldi	r25, 0x02	; 2
    3a76:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <process_action>
                tapping_key = (keyrecord_t){};
    3a7a:	86 e0       	ldi	r24, 0x06	; 6
    3a7c:	f5 01       	movw	r30, r10
    3a7e:	11 92       	st	Z+, r1
    3a80:	8a 95       	dec	r24
    3a82:	e9 f7       	brne	.-6      	; 0x3a7e <process_tapping+0x24e>
                debug_tapping_key();
    3a84:	0e 94 9f 1b 	call	0x373e	; 0x373e <debug_tapping_key>
                return false;
    3a88:	3f cf       	rjmp	.-386    	; 0x3908 <process_tapping+0xd8>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    3a8a:	52 13       	cpse	r21, r18
    3a8c:	b6 cf       	rjmp	.-148    	; 0x39fa <process_tapping+0x1ca>
    3a8e:	34 13       	cpse	r19, r20
    3a90:	b4 cf       	rjmp	.-152    	; 0x39fa <process_tapping+0x1ca>
    3a92:	d1 10       	cpse	r13, r1
    3a94:	b2 cf       	rjmp	.-156    	; 0x39fa <process_tapping+0x1ca>
                    keyp->tap = tapping_key.tap;
    3a96:	d7 01       	movw	r26, r14
    3a98:	15 96       	adiw	r26, 0x05	; 5
    3a9a:	8c 93       	st	X, r24
                    process_action(keyp);
    3a9c:	c7 01       	movw	r24, r14
    3a9e:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <process_action>
                    tapping_key = (keyrecord_t){};
    3aa2:	86 e0       	ldi	r24, 0x06	; 6
    3aa4:	f5 01       	movw	r30, r10
    3aa6:	11 92       	st	Z+, r1
    3aa8:	8a 95       	dec	r24
    3aaa:	e9 f7       	brne	.-6      	; 0x3aa6 <process_tapping+0x276>
                    return true;
    3aac:	c9 2c       	mov	r12, r9
    3aae:	2c cf       	rjmp	.-424    	; 0x3908 <process_tapping+0xd8>
        if (WITHIN_TAPPING_TERM(event)) {
    3ab0:	08 17       	cp	r16, r24
    3ab2:	19 07       	cpc	r17, r25
    3ab4:	88 f1       	brcs	.+98     	; 0x3b18 <process_tapping+0x2e8>
    3ab6:	b8 01       	movw	r22, r16
    3ab8:	68 1b       	sub	r22, r24
    3aba:	79 0b       	sbc	r23, r25
    3abc:	cb 01       	movw	r24, r22
    3abe:	c1 2c       	mov	r12, r1
    3ac0:	88 3c       	cpi	r24, 0xC8	; 200
    3ac2:	91 05       	cpc	r25, r1
    3ac4:	08 f0       	brcs	.+2      	; 0x3ac8 <process_tapping+0x298>
    3ac6:	4c c0       	rjmp	.+152    	; 0x3b60 <process_tapping+0x330>
            if (event.pressed) {
    3ac8:	cd 2c       	mov	r12, r13
    3aca:	dd 20       	and	r13, r13
    3acc:	09 f4       	brne	.+2      	; 0x3ad0 <process_tapping+0x2a0>
    3ace:	67 c0       	rjmp	.+206    	; 0x3b9e <process_tapping+0x36e>
                if (IS_TAPPING_KEY(event.key)) {
    3ad0:	52 13       	cpse	r21, r18
    3ad2:	30 c0       	rjmp	.+96     	; 0x3b34 <process_tapping+0x304>
    3ad4:	34 13       	cpse	r19, r20
    3ad6:	2e c0       	rjmp	.+92     	; 0x3b34 <process_tapping+0x304>
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
    3ad8:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <tapping_key+0x5>
    3adc:	80 fd       	sbrc	r24, 0
    3ade:	21 c0       	rjmp	.+66     	; 0x3b22 <process_tapping+0x2f2>
    3ae0:	98 2f       	mov	r25, r24
    3ae2:	90 7f       	andi	r25, 0xF0	; 240
    3ae4:	f1 f0       	breq	.+60     	; 0x3b22 <process_tapping+0x2f2>
                        keyp->tap = tapping_key.tap;
    3ae6:	d7 01       	movw	r26, r14
    3ae8:	15 96       	adiw	r26, 0x05	; 5
    3aea:	8c 93       	st	X, r24
    3aec:	15 97       	sbiw	r26, 0x05	; 5
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
    3aee:	90 3f       	cpi	r25, 0xF0	; 240
    3af0:	39 f0       	breq	.+14     	; 0x3b00 <process_tapping+0x2d0>
    3af2:	98 2f       	mov	r25, r24
    3af4:	90 7f       	andi	r25, 0xF0	; 240
    3af6:	90 5f       	subi	r25, 0xF0	; 240
    3af8:	8f 70       	andi	r24, 0x0F	; 15
    3afa:	89 2b       	or	r24, r25
    3afc:	15 96       	adiw	r26, 0x05	; 5
    3afe:	8c 93       	st	X, r24
                        process_action(keyp);
    3b00:	c7 01       	movw	r24, r14
    3b02:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <process_action>
                        tapping_key = *keyp;
    3b06:	86 e0       	ldi	r24, 0x06	; 6
    3b08:	f7 01       	movw	r30, r14
    3b0a:	a9 ec       	ldi	r26, 0xC9	; 201
    3b0c:	b2 e0       	ldi	r27, 0x02	; 2
    3b0e:	01 90       	ld	r0, Z+
    3b10:	0d 92       	st	X+, r0
    3b12:	8a 95       	dec	r24
    3b14:	e1 f7       	brne	.-8      	; 0x3b0e <process_tapping+0x2de>
                        debug_tapping_key();
    3b16:	b6 cf       	rjmp	.-148    	; 0x3a84 <process_tapping+0x254>
        if (WITHIN_TAPPING_TERM(event)) {
    3b18:	80 95       	com	r24
    3b1a:	90 95       	com	r25
    3b1c:	80 0f       	add	r24, r16
    3b1e:	91 1f       	adc	r25, r17
    3b20:	ce cf       	rjmp	.-100    	; 0x3abe <process_tapping+0x28e>
                        tapping_key = *keyp;
    3b22:	86 e0       	ldi	r24, 0x06	; 6
    3b24:	f7 01       	movw	r30, r14
    3b26:	a9 ec       	ldi	r26, 0xC9	; 201
    3b28:	b2 e0       	ldi	r27, 0x02	; 2
    3b2a:	01 90       	ld	r0, Z+
    3b2c:	0d 92       	st	X+, r0
    3b2e:	8a 95       	dec	r24
    3b30:	e1 f7       	brne	.-8      	; 0x3b2a <process_tapping+0x2fa>
                        return true;
    3b32:	ea ce       	rjmp	.-556    	; 0x3908 <process_tapping+0xd8>
                } else if (is_tap_key(event)) {
    3b34:	4f 83       	std	Y+7, r20	; 0x07
    3b36:	28 87       	std	Y+8, r18	; 0x08
    3b38:	d9 86       	std	Y+9, r13	; 0x09
    3b3a:	70 2f       	mov	r23, r16
    3b3c:	1b 87       	std	Y+11, r17	; 0x0b
    3b3e:	0a 87       	std	Y+10, r16	; 0x0a
    3b40:	52 2f       	mov	r21, r18
    3b42:	6d 2d       	mov	r22, r13
    3b44:	8b 85       	ldd	r24, Y+11	; 0x0b
    3b46:	0e 94 14 1b 	call	0x3628	; 0x3628 <is_tap_key>
    3b4a:	81 11       	cpse	r24, r1
    3b4c:	79 cf       	rjmp	.-270    	; 0x3a40 <process_tapping+0x210>
                    tapping_key.tap.interrupted = true;
    3b4e:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <tapping_key+0x5>
    3b52:	81 60       	ori	r24, 0x01	; 1
    3b54:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <tapping_key+0x5>
                    process_action(keyp);
    3b58:	c7 01       	movw	r24, r14
    3b5a:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <process_action>
                    return true;
    3b5e:	d4 ce       	rjmp	.-600    	; 0x3908 <process_tapping+0xd8>
            debug_event(event); debug("\n");
    3b60:	70 2f       	mov	r23, r16
    3b62:	1b 87       	std	Y+11, r17	; 0x0b
    3b64:	0a 87       	std	Y+10, r16	; 0x0a
    3b66:	52 2f       	mov	r21, r18
    3b68:	6d 2d       	mov	r22, r13
    3b6a:	8b 85       	ldd	r24, Y+11	; 0x0b
    3b6c:	0e 94 61 1b 	call	0x36c2	; 0x36c2 <debug_event>
            tapping_key = (keyrecord_t){};
    3b70:	86 e0       	ldi	r24, 0x06	; 6
    3b72:	e9 ec       	ldi	r30, 0xC9	; 201
    3b74:	f2 e0       	ldi	r31, 0x02	; 2
    3b76:	df 01       	movw	r26, r30
    3b78:	1d 92       	st	X+, r1
    3b7a:	8a 95       	dec	r24
    3b7c:	e9 f7       	brne	.-6      	; 0x3b78 <process_tapping+0x348>
            debug_tapping_key();
    3b7e:	82 cf       	rjmp	.-252    	; 0x3a84 <process_tapping+0x254>
        if (event.pressed && is_tap_key(event)) {
    3b80:	dd 20       	and	r13, r13
    3b82:	69 f0       	breq	.+26     	; 0x3b9e <process_tapping+0x36e>
    3b84:	4f 83       	std	Y+7, r20	; 0x07
    3b86:	28 87       	std	Y+8, r18	; 0x08
    3b88:	d9 86       	std	Y+9, r13	; 0x09
    3b8a:	70 2f       	mov	r23, r16
    3b8c:	1b 87       	std	Y+11, r17	; 0x0b
    3b8e:	0a 87       	std	Y+10, r16	; 0x0a
    3b90:	52 2f       	mov	r21, r18
    3b92:	6d 2d       	mov	r22, r13
    3b94:	8b 85       	ldd	r24, Y+11	; 0x0b
    3b96:	0e 94 14 1b 	call	0x3628	; 0x3628 <is_tap_key>
    3b9a:	81 11       	cpse	r24, r1
    3b9c:	51 cf       	rjmp	.-350    	; 0x3a40 <process_tapping+0x210>
                    process_action(keyp);
    3b9e:	c7 01       	movw	r24, r14
    3ba0:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <process_action>
    3ba4:	59 cf       	rjmp	.-334    	; 0x3a58 <process_tapping+0x228>
    3ba6:	81 e0       	ldi	r24, 0x01	; 1
    3ba8:	8d 25       	eor	r24, r13
    3baa:	cf ce       	rjmp	.-610    	; 0x394a <process_tapping+0x11a>

00003bac <action_tapping_process>:
{
    3bac:	cf 93       	push	r28
    3bae:	df 93       	push	r29
    3bb0:	cd b7       	in	r28, 0x3d	; 61
    3bb2:	de b7       	in	r29, 0x3e	; 62
    3bb4:	2c 97       	sbiw	r28, 0x0c	; 12
    3bb6:	0f b6       	in	r0, 0x3f	; 63
    3bb8:	f8 94       	cli
    3bba:	de bf       	out	0x3e, r29	; 62
    3bbc:	0f be       	out	0x3f, r0	; 63
    3bbe:	cd bf       	out	0x3d, r28	; 61
    3bc0:	4f 83       	std	Y+7, r20	; 0x07
    3bc2:	58 87       	std	Y+8, r21	; 0x08
    3bc4:	69 87       	std	Y+9, r22	; 0x09
    3bc6:	7a 87       	std	Y+10, r23	; 0x0a
    3bc8:	8b 87       	std	Y+11, r24	; 0x0b
    3bca:	9c 87       	std	Y+12, r25	; 0x0c
    if (process_tapping(&record)) {
    3bcc:	ce 01       	movw	r24, r28
    3bce:	07 96       	adiw	r24, 0x07	; 7
    3bd0:	0e 94 18 1c 	call	0x3830	; 0x3830 <process_tapping>
    3bd4:	88 23       	and	r24, r24
    3bd6:	d1 f0       	breq	.+52     	; 0x3c0c <action_tapping_process+0x60>
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    3bd8:	8a 85       	ldd	r24, Y+10	; 0x0a
    3bda:	9b 85       	ldd	r25, Y+11	; 0x0b
    3bdc:	89 2b       	or	r24, r25
    3bde:	39 f0       	breq	.+14     	; 0x3bee <action_tapping_process+0x42>
    3be0:	4f 81       	ldd	r20, Y+7	; 0x07
    3be2:	58 85       	ldd	r21, Y+8	; 0x08
    3be4:	84 2f       	mov	r24, r20
    3be6:	85 23       	and	r24, r21
    3be8:	8f 3f       	cpi	r24, 0xFF	; 255
    3bea:	09 f0       	breq	.+2      	; 0x3bee <action_tapping_process+0x42>
    3bec:	76 c0       	rjmp	.+236    	; 0x3cda <action_tapping_process+0x12e>
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    3bee:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <waiting_buffer_tail>
    3bf2:	90 91 98 02 	lds	r25, 0x0298	; 0x800298 <waiting_buffer_head>
    3bf6:	89 13       	cpse	r24, r25
    3bf8:	49 c0       	rjmp	.+146    	; 0x3c8c <action_tapping_process+0xe0>
}
    3bfa:	2c 96       	adiw	r28, 0x0c	; 12
    3bfc:	0f b6       	in	r0, 0x3f	; 63
    3bfe:	f8 94       	cli
    3c00:	de bf       	out	0x3e, r29	; 62
    3c02:	0f be       	out	0x3f, r0	; 63
    3c04:	cd bf       	out	0x3d, r28	; 61
    3c06:	df 91       	pop	r29
    3c08:	cf 91       	pop	r28
    3c0a:	08 95       	ret
        if (!waiting_buffer_enq(record)) {
    3c0c:	86 e0       	ldi	r24, 0x06	; 6
    3c0e:	fe 01       	movw	r30, r28
    3c10:	37 96       	adiw	r30, 0x07	; 7
    3c12:	de 01       	movw	r26, r28
    3c14:	11 96       	adiw	r26, 0x01	; 1
    3c16:	01 90       	ld	r0, Z+
    3c18:	0d 92       	st	X+, r0
    3c1a:	8a 95       	dec	r24
    3c1c:	e1 f7       	brne	.-8      	; 0x3c16 <action_tapping_process+0x6a>
    3c1e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3c20:	9b 85       	ldd	r25, Y+11	; 0x0b
    3c22:	89 2b       	or	r24, r25
    3c24:	21 f3       	breq	.-56     	; 0x3bee <action_tapping_process+0x42>
    3c26:	88 85       	ldd	r24, Y+8	; 0x08
    3c28:	9f 81       	ldd	r25, Y+7	; 0x07
    3c2a:	89 23       	and	r24, r25
    3c2c:	8f 3f       	cpi	r24, 0xFF	; 255
    3c2e:	f9 f2       	breq	.-66     	; 0x3bee <action_tapping_process+0x42>
    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
    3c30:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <waiting_buffer_head>
    3c34:	90 e0       	ldi	r25, 0x00	; 0
    3c36:	9c 01       	movw	r18, r24
    3c38:	2f 5f       	subi	r18, 0xFF	; 255
    3c3a:	3f 4f       	sbci	r19, 0xFF	; 255
    3c3c:	27 70       	andi	r18, 0x07	; 7
    3c3e:	33 27       	eor	r19, r19
    3c40:	40 91 97 02 	lds	r20, 0x0297	; 0x800297 <waiting_buffer_tail>
    3c44:	42 17       	cp	r20, r18
    3c46:	13 06       	cpc	r1, r19
    3c48:	71 f4       	brne	.+28     	; 0x3c66 <action_tapping_process+0xba>
            clear_keyboard();
    3c4a:	0e 94 10 1b 	call	0x3620	; 0x3620 <clear_keyboard>
    waiting_buffer_head = 0;
    3c4e:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <waiting_buffer_head>
    waiting_buffer_tail = 0;
    3c52:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <waiting_buffer_tail>
            tapping_key = (keyrecord_t){};
    3c56:	86 e0       	ldi	r24, 0x06	; 6
    3c58:	e9 ec       	ldi	r30, 0xC9	; 201
    3c5a:	f2 e0       	ldi	r31, 0x02	; 2
    3c5c:	df 01       	movw	r26, r30
    3c5e:	1d 92       	st	X+, r1
    3c60:	8a 95       	dec	r24
    3c62:	e9 f7       	brne	.-6      	; 0x3c5e <action_tapping_process+0xb2>
    3c64:	c4 cf       	rjmp	.-120    	; 0x3bee <action_tapping_process+0x42>
    waiting_buffer[waiting_buffer_head] = record;
    3c66:	66 e0       	ldi	r22, 0x06	; 6
    3c68:	70 e0       	ldi	r23, 0x00	; 0
    3c6a:	0e 94 7e 2b 	call	0x56fc	; 0x56fc <__mulhi3>
    3c6e:	dc 01       	movw	r26, r24
    3c70:	a7 56       	subi	r26, 0x67	; 103
    3c72:	bd 4f       	sbci	r27, 0xFD	; 253
    3c74:	86 e0       	ldi	r24, 0x06	; 6
    3c76:	fe 01       	movw	r30, r28
    3c78:	31 96       	adiw	r30, 0x01	; 1
    3c7a:	01 90       	ld	r0, Z+
    3c7c:	0d 92       	st	X+, r0
    3c7e:	8a 95       	dec	r24
    3c80:	e1 f7       	brne	.-8      	; 0x3c7a <action_tapping_process+0xce>
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
    3c82:	20 93 98 02 	sts	0x0298, r18	; 0x800298 <waiting_buffer_head>
    debug("waiting_buffer_enq: "); debug_waiting_buffer();
    3c86:	0e 94 80 1b 	call	0x3700	; 0x3700 <debug_waiting_buffer>
    return true;
    3c8a:	b1 cf       	rjmp	.-158    	; 0x3bee <action_tapping_process+0x42>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    3c8c:	90 e0       	ldi	r25, 0x00	; 0
    3c8e:	66 e0       	ldi	r22, 0x06	; 6
    3c90:	70 e0       	ldi	r23, 0x00	; 0
    3c92:	0e 94 7e 2b 	call	0x56fc	; 0x56fc <__mulhi3>
    3c96:	87 56       	subi	r24, 0x67	; 103
    3c98:	9d 4f       	sbci	r25, 0xFD	; 253
    3c9a:	0e 94 18 1c 	call	0x3830	; 0x3830 <process_tapping>
    3c9e:	88 23       	and	r24, r24
    3ca0:	09 f4       	brne	.+2      	; 0x3ca4 <action_tapping_process+0xf8>
    3ca2:	ab cf       	rjmp	.-170    	; 0x3bfa <action_tapping_process+0x4e>
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
    3ca4:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <waiting_buffer_tail>
    3ca8:	90 e0       	ldi	r25, 0x00	; 0
    3caa:	66 e0       	ldi	r22, 0x06	; 6
    3cac:	70 e0       	ldi	r23, 0x00	; 0
    3cae:	0e 94 7e 2b 	call	0x56fc	; 0x56fc <__mulhi3>
    3cb2:	fc 01       	movw	r30, r24
    3cb4:	e7 56       	subi	r30, 0x67	; 103
    3cb6:	fd 4f       	sbci	r31, 0xFD	; 253
    3cb8:	40 81       	ld	r20, Z
    3cba:	51 81       	ldd	r21, Z+1	; 0x01
    3cbc:	62 81       	ldd	r22, Z+2	; 0x02
    3cbe:	73 81       	ldd	r23, Z+3	; 0x03
    3cc0:	84 81       	ldd	r24, Z+4	; 0x04
    3cc2:	95 81       	ldd	r25, Z+5	; 0x05
    3cc4:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <debug_record>
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    3cc8:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <waiting_buffer_tail>
    3ccc:	90 e0       	ldi	r25, 0x00	; 0
    3cce:	01 96       	adiw	r24, 0x01	; 1
    3cd0:	87 70       	andi	r24, 0x07	; 7
    3cd2:	99 27       	eor	r25, r25
    3cd4:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <waiting_buffer_tail>
    3cd8:	8a cf       	rjmp	.-236    	; 0x3bee <action_tapping_process+0x42>
            debug("processed: "); debug_record(record); debug("\n");
    3cda:	69 85       	ldd	r22, Y+9	; 0x09
    3cdc:	7a 85       	ldd	r23, Y+10	; 0x0a
    3cde:	8b 85       	ldd	r24, Y+11	; 0x0b
    3ce0:	9c 85       	ldd	r25, Y+12	; 0x0c
    3ce2:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <debug_record>
    3ce6:	83 cf       	rjmp	.-250    	; 0x3bee <action_tapping_process+0x42>

00003ce8 <action_macro_play>:

#ifndef NO_ACTION_MACRO

#define MACRO_READ()  (macro = MACRO_GET(macro_p++))
void action_macro_play(const macro_t *macro_p)
{
    3ce8:	df 92       	push	r13
    3cea:	ef 92       	push	r14
    3cec:	ff 92       	push	r15
    3cee:	0f 93       	push	r16
    3cf0:	1f 93       	push	r17
    3cf2:	cf 93       	push	r28
    3cf4:	df 93       	push	r29
    3cf6:	9c 01       	movw	r18, r24
    macro_t macro = END;
    uint8_t interval = 0;

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    3cf8:	89 2b       	or	r24, r25
    3cfa:	b9 f0       	breq	.+46     	; 0x3d2a <action_macro_play+0x42>
    uint8_t mod_storage = 0;
    3cfc:	f1 2c       	mov	r15, r1
    uint8_t interval = 0;
    3cfe:	e1 2c       	mov	r14, r1
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    add_weak_mods(MOD_BIT(macro));
    3d00:	dd 24       	eor	r13, r13
    3d02:	d3 94       	inc	r13
        switch (MACRO_READ()) {
    3d04:	e9 01       	movw	r28, r18
    3d06:	21 96       	adiw	r28, 0x01	; 1
    3d08:	f9 01       	movw	r30, r18
    3d0a:	84 91       	lpm	r24, Z
    3d0c:	85 37       	cpi	r24, 0x75	; 117
    3d0e:	09 f4       	brne	.+2      	; 0x3d12 <action_macro_play+0x2a>
    3d10:	6e c0       	rjmp	.+220    	; 0x3dee <action_macro_play+0x106>
    3d12:	98 f4       	brcc	.+38     	; 0x3d3a <action_macro_play+0x52>
    3d14:	84 37       	cpi	r24, 0x74	; 116
    3d16:	09 f4       	brne	.+2      	; 0x3d1a <action_macro_play+0x32>
    3d18:	5b c0       	rjmp	.+182    	; 0x3dd0 <action_macro_play+0xe8>
    3d1a:	84 30       	cpi	r24, 0x04	; 4
    3d1c:	08 f0       	brcs	.+2      	; 0x3d20 <action_macro_play+0x38>
    3d1e:	73 c0       	rjmp	.+230    	; 0x3e06 <action_macro_play+0x11e>
    3d20:	81 30       	cpi	r24, 0x01	; 1
    3d22:	11 f1       	breq	.+68     	; 0x3d68 <action_macro_play+0x80>
    3d24:	82 30       	cpi	r24, 0x02	; 2
    3d26:	09 f4       	brne	.+2      	; 0x3d2a <action_macro_play+0x42>
    3d28:	3d c0       	rjmp	.+122    	; 0x3da4 <action_macro_play+0xbc>
                return;
        }
        // interval
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    }
}
    3d2a:	df 91       	pop	r29
    3d2c:	cf 91       	pop	r28
    3d2e:	1f 91       	pop	r17
    3d30:	0f 91       	pop	r16
    3d32:	ff 90       	pop	r15
    3d34:	ef 90       	pop	r14
    3d36:	df 90       	pop	r13
    3d38:	08 95       	ret
        switch (MACRO_READ()) {
    3d3a:	88 37       	cpi	r24, 0x78	; 120
    3d3c:	09 f4       	brne	.+2      	; 0x3d40 <action_macro_play+0x58>
    3d3e:	60 c0       	rjmp	.+192    	; 0x3e00 <action_macro_play+0x118>
    3d40:	58 f4       	brcc	.+22     	; 0x3d58 <action_macro_play+0x70>
    3d42:	86 37       	cpi	r24, 0x76	; 118
    3d44:	09 f4       	brne	.+2      	; 0x3d48 <action_macro_play+0x60>
    3d46:	58 c0       	rjmp	.+176    	; 0x3df8 <action_macro_play+0x110>
    3d48:	87 37       	cpi	r24, 0x77	; 119
    3d4a:	79 f7       	brne	.-34     	; 0x3d2a <action_macro_play+0x42>
                set_mods(mod_storage);
    3d4c:	8f 2d       	mov	r24, r15
    3d4e:	0e 94 de 21 	call	0x43bc	; 0x43bc <set_mods>
                send_keyboard_report();
    3d52:	0e 94 0b 22 	call	0x4416	; 0x4416 <send_keyboard_report>
                break;
    3d56:	20 c0       	rjmp	.+64     	; 0x3d98 <action_macro_play+0xb0>
        switch (MACRO_READ()) {
    3d58:	9c e7       	ldi	r25, 0x7C	; 124
    3d5a:	98 0f       	add	r25, r24
    3d5c:	90 37       	cpi	r25, 0x70	; 112
    3d5e:	28 f7       	brcc	.-54     	; 0x3d2a <action_macro_play+0x42>
                unregister_code(macro&0x7F);
    3d60:	8f 77       	andi	r24, 0x7F	; 127
    3d62:	0e 94 1a 17 	call	0x2e34	; 0x2e34 <unregister_code>
                break;
    3d66:	18 c0       	rjmp	.+48     	; 0x3d98 <action_macro_play+0xb0>
                MACRO_READ();
    3d68:	89 01       	movw	r16, r18
    3d6a:	0e 5f       	subi	r16, 0xFE	; 254
    3d6c:	1f 4f       	sbci	r17, 0xFF	; 255
    3d6e:	fe 01       	movw	r30, r28
    3d70:	84 91       	lpm	r24, Z
                if (IS_MOD(macro)) {
    3d72:	90 e2       	ldi	r25, 0x20	; 32
    3d74:	98 0f       	add	r25, r24
    3d76:	98 30       	cpi	r25, 0x08	; 8
    3d78:	60 f4       	brcc	.+24     	; 0x3d92 <action_macro_play+0xaa>
                    add_weak_mods(MOD_BIT(macro));
    3d7a:	87 70       	andi	r24, 0x07	; 7
    3d7c:	fd 2d       	mov	r31, r13
    3d7e:	01 c0       	rjmp	.+2      	; 0x3d82 <action_macro_play+0x9a>
    3d80:	ff 0f       	add	r31, r31
    3d82:	8a 95       	dec	r24
    3d84:	ea f7       	brpl	.-6      	; 0x3d80 <action_macro_play+0x98>
    3d86:	8f 2f       	mov	r24, r31
    3d88:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <add_weak_mods>
                    send_keyboard_report();
    3d8c:	0e 94 0b 22 	call	0x4416	; 0x4416 <send_keyboard_report>
    3d90:	02 c0       	rjmp	.+4      	; 0x3d96 <action_macro_play+0xae>
                    register_code(macro);
    3d92:	0e 94 75 16 	call	0x2cea	; 0x2cea <register_code>
                MACRO_READ();
    3d96:	e8 01       	movw	r28, r16
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    3d98:	8e 2d       	mov	r24, r14
    3d9a:	81 50       	subi	r24, 0x01	; 1
    3d9c:	08 f0       	brcs	.+2      	; 0x3da0 <action_macro_play+0xb8>
    3d9e:	36 c0       	rjmp	.+108    	; 0x3e0c <action_macro_play+0x124>
    3da0:	9e 01       	movw	r18, r28
    3da2:	b0 cf       	rjmp	.-160    	; 0x3d04 <action_macro_play+0x1c>
                MACRO_READ();
    3da4:	89 01       	movw	r16, r18
    3da6:	0e 5f       	subi	r16, 0xFE	; 254
    3da8:	1f 4f       	sbci	r17, 0xFF	; 255
    3daa:	fe 01       	movw	r30, r28
    3dac:	84 91       	lpm	r24, Z
                if (IS_MOD(macro)) {
    3dae:	90 e2       	ldi	r25, 0x20	; 32
    3db0:	98 0f       	add	r25, r24
    3db2:	98 30       	cpi	r25, 0x08	; 8
    3db4:	50 f4       	brcc	.+20     	; 0x3dca <action_macro_play+0xe2>
                    del_weak_mods(MOD_BIT(macro));
    3db6:	87 70       	andi	r24, 0x07	; 7
    3db8:	fd 2d       	mov	r31, r13
    3dba:	01 c0       	rjmp	.+2      	; 0x3dbe <action_macro_play+0xd6>
    3dbc:	ff 0f       	add	r31, r31
    3dbe:	8a 95       	dec	r24
    3dc0:	ea f7       	brpl	.-6      	; 0x3dbc <action_macro_play+0xd4>
    3dc2:	8f 2f       	mov	r24, r31
    3dc4:	0e 94 ea 21 	call	0x43d4	; 0x43d4 <del_weak_mods>
    3dc8:	e1 cf       	rjmp	.-62     	; 0x3d8c <action_macro_play+0xa4>
                    unregister_code(macro);
    3dca:	0e 94 1a 17 	call	0x2e34	; 0x2e34 <unregister_code>
    3dce:	e3 cf       	rjmp	.-58     	; 0x3d96 <action_macro_play+0xae>
                MACRO_READ();
    3dd0:	2e 5f       	subi	r18, 0xFE	; 254
    3dd2:	3f 4f       	sbci	r19, 0xFF	; 255
    3dd4:	fe 01       	movw	r30, r28
    3dd6:	c4 91       	lpm	r28, Z
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
    3dd8:	c1 50       	subi	r28, 0x01	; 1
    3dda:	10 f4       	brcc	.+4      	; 0x3de0 <action_macro_play+0xf8>
                interval = MACRO_READ();
    3ddc:	e9 01       	movw	r28, r18
                break;
    3dde:	dc cf       	rjmp	.-72     	; 0x3d98 <action_macro_play+0xb0>
    3de0:	8f e9       	ldi	r24, 0x9F	; 159
    3de2:	9f e0       	ldi	r25, 0x0F	; 15
    3de4:	01 97       	sbiw	r24, 0x01	; 1
    3de6:	f1 f7       	brne	.-4      	; 0x3de4 <action_macro_play+0xfc>
    3de8:	00 c0       	rjmp	.+0      	; 0x3dea <action_macro_play+0x102>
    3dea:	00 00       	nop
}
    3dec:	f5 cf       	rjmp	.-22     	; 0x3dd8 <action_macro_play+0xf0>
                interval = MACRO_READ();
    3dee:	2e 5f       	subi	r18, 0xFE	; 254
    3df0:	3f 4f       	sbci	r19, 0xFF	; 255
    3df2:	fe 01       	movw	r30, r28
    3df4:	e4 90       	lpm	r14, Z
    3df6:	f2 cf       	rjmp	.-28     	; 0x3ddc <action_macro_play+0xf4>
                mod_storage = get_mods();
    3df8:	0e 94 cd 21 	call	0x439a	; 0x439a <get_mods>
    3dfc:	f8 2e       	mov	r15, r24
                break;
    3dfe:	cc cf       	rjmp	.-104    	; 0x3d98 <action_macro_play+0xb0>
                clear_mods();
    3e00:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <clear_mods>
    3e04:	a6 cf       	rjmp	.-180    	; 0x3d52 <action_macro_play+0x6a>
                register_code(macro);
    3e06:	0e 94 75 16 	call	0x2cea	; 0x2cea <register_code>
                break;
    3e0a:	c6 cf       	rjmp	.-116    	; 0x3d98 <action_macro_play+0xb0>
	__builtin_avr_delay_cycles(__ticks_dc);
    3e0c:	ef e9       	ldi	r30, 0x9F	; 159
    3e0e:	ff e0       	ldi	r31, 0x0F	; 15
    3e10:	31 97       	sbiw	r30, 0x01	; 1
    3e12:	f1 f7       	brne	.-4      	; 0x3e10 <action_macro_play+0x128>
    3e14:	00 c0       	rjmp	.+0      	; 0x3e16 <action_macro_play+0x12e>
    3e16:	00 00       	nop
}
    3e18:	c0 cf       	rjmp	.-128    	; 0x3d9a <action_macro_play+0xb2>

00003e1a <layer_state_set>:

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3e1a:	60 93 4f 03 	sts	0x034F, r22	; 0x80034f <layer_state>
    3e1e:	70 93 50 03 	sts	0x0350, r23	; 0x800350 <layer_state+0x1>
    3e22:	80 93 51 03 	sts	0x0351, r24	; 0x800351 <layer_state+0x2>
    3e26:	90 93 52 03 	sts	0x0352, r25	; 0x800352 <layer_state+0x3>
    hook_layer_change(layer_state);
    3e2a:	0c 94 5f 22 	jmp	0x44be	; 0x44be <hook_layer_change>

00003e2e <default_layer_debug>:
}
    3e2e:	08 95       	ret

00003e30 <default_layer_set>:
    default_layer_state = state;
    3e30:	60 93 53 03 	sts	0x0353, r22	; 0x800353 <default_layer_state>
    3e34:	70 93 54 03 	sts	0x0354, r23	; 0x800354 <default_layer_state+0x1>
    3e38:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <default_layer_state+0x2>
    3e3c:	90 93 56 03 	sts	0x0356, r25	; 0x800356 <default_layer_state+0x3>
    hook_default_layer_change(default_layer_state);
    3e40:	0c 94 5e 22 	jmp	0x44bc	; 0x44bc <hook_default_layer_change>

00003e44 <default_layer_or>:
{
    3e44:	cf 93       	push	r28
    3e46:	df 93       	push	r29
    3e48:	00 d0       	rcall	.+0      	; 0x3e4a <default_layer_or+0x6>
    3e4a:	00 d0       	rcall	.+0      	; 0x3e4c <default_layer_or+0x8>
    3e4c:	cd b7       	in	r28, 0x3d	; 61
    3e4e:	de b7       	in	r29, 0x3e	; 62
    3e50:	69 83       	std	Y+1, r22	; 0x01
    3e52:	7a 83       	std	Y+2, r23	; 0x02
    3e54:	8b 83       	std	Y+3, r24	; 0x03
    3e56:	9c 83       	std	Y+4, r25	; 0x04
    default_layer_state_set(default_layer_state | state);
    3e58:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <default_layer_state>
    3e5c:	90 91 54 03 	lds	r25, 0x0354	; 0x800354 <default_layer_state+0x1>
    3e60:	a0 91 55 03 	lds	r26, 0x0355	; 0x800355 <default_layer_state+0x2>
    3e64:	b0 91 56 03 	lds	r27, 0x0356	; 0x800356 <default_layer_state+0x3>
    3e68:	29 81       	ldd	r18, Y+1	; 0x01
    3e6a:	3a 81       	ldd	r19, Y+2	; 0x02
    3e6c:	4b 81       	ldd	r20, Y+3	; 0x03
    3e6e:	5c 81       	ldd	r21, Y+4	; 0x04
    3e70:	28 2b       	or	r18, r24
    3e72:	39 2b       	or	r19, r25
    3e74:	4a 2b       	or	r20, r26
    3e76:	5b 2b       	or	r21, r27
    3e78:	29 83       	std	Y+1, r18	; 0x01
    3e7a:	3a 83       	std	Y+2, r19	; 0x02
    3e7c:	4b 83       	std	Y+3, r20	; 0x03
    3e7e:	5c 83       	std	Y+4, r21	; 0x04
    default_layer_state = state;
    3e80:	20 93 53 03 	sts	0x0353, r18	; 0x800353 <default_layer_state>
    3e84:	30 93 54 03 	sts	0x0354, r19	; 0x800354 <default_layer_state+0x1>
    3e88:	40 93 55 03 	sts	0x0355, r20	; 0x800355 <default_layer_state+0x2>
    3e8c:	50 93 56 03 	sts	0x0356, r21	; 0x800356 <default_layer_state+0x3>
    hook_default_layer_change(default_layer_state);
    3e90:	ca 01       	movw	r24, r20
    3e92:	b9 01       	movw	r22, r18
}
    3e94:	0f 90       	pop	r0
    3e96:	0f 90       	pop	r0
    3e98:	0f 90       	pop	r0
    3e9a:	0f 90       	pop	r0
    3e9c:	df 91       	pop	r29
    3e9e:	cf 91       	pop	r28
    hook_default_layer_change(default_layer_state);
    3ea0:	0c 94 5e 22 	jmp	0x44bc	; 0x44bc <hook_default_layer_change>

00003ea4 <default_layer_and>:
{
    3ea4:	cf 93       	push	r28
    3ea6:	df 93       	push	r29
    3ea8:	00 d0       	rcall	.+0      	; 0x3eaa <default_layer_and+0x6>
    3eaa:	00 d0       	rcall	.+0      	; 0x3eac <default_layer_and+0x8>
    3eac:	cd b7       	in	r28, 0x3d	; 61
    3eae:	de b7       	in	r29, 0x3e	; 62
    3eb0:	69 83       	std	Y+1, r22	; 0x01
    3eb2:	7a 83       	std	Y+2, r23	; 0x02
    3eb4:	8b 83       	std	Y+3, r24	; 0x03
    3eb6:	9c 83       	std	Y+4, r25	; 0x04
    default_layer_state_set(default_layer_state & state);
    3eb8:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <default_layer_state>
    3ebc:	90 91 54 03 	lds	r25, 0x0354	; 0x800354 <default_layer_state+0x1>
    3ec0:	a0 91 55 03 	lds	r26, 0x0355	; 0x800355 <default_layer_state+0x2>
    3ec4:	b0 91 56 03 	lds	r27, 0x0356	; 0x800356 <default_layer_state+0x3>
    3ec8:	29 81       	ldd	r18, Y+1	; 0x01
    3eca:	3a 81       	ldd	r19, Y+2	; 0x02
    3ecc:	4b 81       	ldd	r20, Y+3	; 0x03
    3ece:	5c 81       	ldd	r21, Y+4	; 0x04
    3ed0:	28 23       	and	r18, r24
    3ed2:	39 23       	and	r19, r25
    3ed4:	4a 23       	and	r20, r26
    3ed6:	5b 23       	and	r21, r27
    3ed8:	29 83       	std	Y+1, r18	; 0x01
    3eda:	3a 83       	std	Y+2, r19	; 0x02
    3edc:	4b 83       	std	Y+3, r20	; 0x03
    3ede:	5c 83       	std	Y+4, r21	; 0x04
    default_layer_state = state;
    3ee0:	20 93 53 03 	sts	0x0353, r18	; 0x800353 <default_layer_state>
    3ee4:	30 93 54 03 	sts	0x0354, r19	; 0x800354 <default_layer_state+0x1>
    3ee8:	40 93 55 03 	sts	0x0355, r20	; 0x800355 <default_layer_state+0x2>
    3eec:	50 93 56 03 	sts	0x0356, r21	; 0x800356 <default_layer_state+0x3>
    hook_default_layer_change(default_layer_state);
    3ef0:	ca 01       	movw	r24, r20
    3ef2:	b9 01       	movw	r22, r18
}
    3ef4:	0f 90       	pop	r0
    3ef6:	0f 90       	pop	r0
    3ef8:	0f 90       	pop	r0
    3efa:	0f 90       	pop	r0
    3efc:	df 91       	pop	r29
    3efe:	cf 91       	pop	r28
    hook_default_layer_change(default_layer_state);
    3f00:	0c 94 5e 22 	jmp	0x44bc	; 0x44bc <hook_default_layer_change>

00003f04 <default_layer_xor>:
{
    3f04:	cf 93       	push	r28
    3f06:	df 93       	push	r29
    3f08:	00 d0       	rcall	.+0      	; 0x3f0a <default_layer_xor+0x6>
    3f0a:	00 d0       	rcall	.+0      	; 0x3f0c <default_layer_xor+0x8>
    3f0c:	cd b7       	in	r28, 0x3d	; 61
    3f0e:	de b7       	in	r29, 0x3e	; 62
    3f10:	69 83       	std	Y+1, r22	; 0x01
    3f12:	7a 83       	std	Y+2, r23	; 0x02
    3f14:	8b 83       	std	Y+3, r24	; 0x03
    3f16:	9c 83       	std	Y+4, r25	; 0x04
    default_layer_state_set(default_layer_state ^ state);
    3f18:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <default_layer_state>
    3f1c:	90 91 54 03 	lds	r25, 0x0354	; 0x800354 <default_layer_state+0x1>
    3f20:	a0 91 55 03 	lds	r26, 0x0355	; 0x800355 <default_layer_state+0x2>
    3f24:	b0 91 56 03 	lds	r27, 0x0356	; 0x800356 <default_layer_state+0x3>
    3f28:	29 81       	ldd	r18, Y+1	; 0x01
    3f2a:	3a 81       	ldd	r19, Y+2	; 0x02
    3f2c:	4b 81       	ldd	r20, Y+3	; 0x03
    3f2e:	5c 81       	ldd	r21, Y+4	; 0x04
    3f30:	28 27       	eor	r18, r24
    3f32:	39 27       	eor	r19, r25
    3f34:	4a 27       	eor	r20, r26
    3f36:	5b 27       	eor	r21, r27
    3f38:	29 83       	std	Y+1, r18	; 0x01
    3f3a:	3a 83       	std	Y+2, r19	; 0x02
    3f3c:	4b 83       	std	Y+3, r20	; 0x03
    3f3e:	5c 83       	std	Y+4, r21	; 0x04
    default_layer_state = state;
    3f40:	20 93 53 03 	sts	0x0353, r18	; 0x800353 <default_layer_state>
    3f44:	30 93 54 03 	sts	0x0354, r19	; 0x800354 <default_layer_state+0x1>
    3f48:	40 93 55 03 	sts	0x0355, r20	; 0x800355 <default_layer_state+0x2>
    3f4c:	50 93 56 03 	sts	0x0356, r21	; 0x800356 <default_layer_state+0x3>
    hook_default_layer_change(default_layer_state);
    3f50:	ca 01       	movw	r24, r20
    3f52:	b9 01       	movw	r22, r18
}
    3f54:	0f 90       	pop	r0
    3f56:	0f 90       	pop	r0
    3f58:	0f 90       	pop	r0
    3f5a:	0f 90       	pop	r0
    3f5c:	df 91       	pop	r29
    3f5e:	cf 91       	pop	r28
    hook_default_layer_change(default_layer_state);
    3f60:	0c 94 5e 22 	jmp	0x44bc	; 0x44bc <hook_default_layer_change>

00003f64 <layer_clear>:
#endif
}

void layer_clear(void)
{
    layer_state_set(0);
    3f64:	60 e0       	ldi	r22, 0x00	; 0
    3f66:	70 e0       	ldi	r23, 0x00	; 0
    3f68:	cb 01       	movw	r24, r22
    3f6a:	0c 94 0d 1f 	jmp	0x3e1a	; 0x3e1a <layer_state_set>

00003f6e <layer_move>:
}

void layer_move(uint8_t layer)
{
    3f6e:	0f 93       	push	r16
    3f70:	1f 93       	push	r17
    3f72:	cf 93       	push	r28
    3f74:	df 93       	push	r29
    3f76:	00 d0       	rcall	.+0      	; 0x3f78 <layer_move+0xa>
    3f78:	00 d0       	rcall	.+0      	; 0x3f7a <layer_move+0xc>
    3f7a:	cd b7       	in	r28, 0x3d	; 61
    3f7c:	de b7       	in	r29, 0x3e	; 62
    layer_state_set(1UL<<layer);
    3f7e:	41 e0       	ldi	r20, 0x01	; 1
    3f80:	50 e0       	ldi	r21, 0x00	; 0
    3f82:	60 e0       	ldi	r22, 0x00	; 0
    3f84:	70 e0       	ldi	r23, 0x00	; 0
    3f86:	8a 01       	movw	r16, r20
    3f88:	9b 01       	movw	r18, r22
    3f8a:	04 c0       	rjmp	.+8      	; 0x3f94 <layer_move+0x26>
    3f8c:	00 0f       	add	r16, r16
    3f8e:	11 1f       	adc	r17, r17
    3f90:	22 1f       	adc	r18, r18
    3f92:	33 1f       	adc	r19, r19
    3f94:	8a 95       	dec	r24
    3f96:	d2 f7       	brpl	.-12     	; 0x3f8c <layer_move+0x1e>
    3f98:	09 83       	std	Y+1, r16	; 0x01
    3f9a:	1a 83       	std	Y+2, r17	; 0x02
    3f9c:	2b 83       	std	Y+3, r18	; 0x03
    3f9e:	3c 83       	std	Y+4, r19	; 0x04
    3fa0:	c9 01       	movw	r24, r18
    3fa2:	b8 01       	movw	r22, r16
}
    3fa4:	0f 90       	pop	r0
    3fa6:	0f 90       	pop	r0
    3fa8:	0f 90       	pop	r0
    3faa:	0f 90       	pop	r0
    3fac:	df 91       	pop	r29
    3fae:	cf 91       	pop	r28
    3fb0:	1f 91       	pop	r17
    3fb2:	0f 91       	pop	r16
    layer_state_set(1UL<<layer);
    3fb4:	0c 94 0d 1f 	jmp	0x3e1a	; 0x3e1a <layer_state_set>

00003fb8 <layer_on>:

void layer_on(uint8_t layer)
{
    3fb8:	0f 93       	push	r16
    3fba:	1f 93       	push	r17
    3fbc:	cf 93       	push	r28
    3fbe:	df 93       	push	r29
    3fc0:	00 d0       	rcall	.+0      	; 0x3fc2 <layer_on+0xa>
    3fc2:	00 d0       	rcall	.+0      	; 0x3fc4 <layer_on+0xc>
    3fc4:	cd b7       	in	r28, 0x3d	; 61
    3fc6:	de b7       	in	r29, 0x3e	; 62
    layer_state_set(layer_state | (1UL<<layer));
    3fc8:	41 e0       	ldi	r20, 0x01	; 1
    3fca:	50 e0       	ldi	r21, 0x00	; 0
    3fcc:	60 e0       	ldi	r22, 0x00	; 0
    3fce:	70 e0       	ldi	r23, 0x00	; 0
    3fd0:	04 c0       	rjmp	.+8      	; 0x3fda <layer_on+0x22>
    3fd2:	44 0f       	add	r20, r20
    3fd4:	55 1f       	adc	r21, r21
    3fd6:	66 1f       	adc	r22, r22
    3fd8:	77 1f       	adc	r23, r23
    3fda:	8a 95       	dec	r24
    3fdc:	d2 f7       	brpl	.-12     	; 0x3fd2 <layer_on+0x1a>
    3fde:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <layer_state>
    3fe2:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <layer_state+0x1>
    3fe6:	a0 91 51 03 	lds	r26, 0x0351	; 0x800351 <layer_state+0x2>
    3fea:	b0 91 52 03 	lds	r27, 0x0352	; 0x800352 <layer_state+0x3>
    3fee:	8a 01       	movw	r16, r20
    3ff0:	9b 01       	movw	r18, r22
    3ff2:	08 2b       	or	r16, r24
    3ff4:	19 2b       	or	r17, r25
    3ff6:	2a 2b       	or	r18, r26
    3ff8:	3b 2b       	or	r19, r27
    3ffa:	09 83       	std	Y+1, r16	; 0x01
    3ffc:	1a 83       	std	Y+2, r17	; 0x02
    3ffe:	2b 83       	std	Y+3, r18	; 0x03
    4000:	3c 83       	std	Y+4, r19	; 0x04
    4002:	c9 01       	movw	r24, r18
    4004:	b8 01       	movw	r22, r16
}
    4006:	0f 90       	pop	r0
    4008:	0f 90       	pop	r0
    400a:	0f 90       	pop	r0
    400c:	0f 90       	pop	r0
    400e:	df 91       	pop	r29
    4010:	cf 91       	pop	r28
    4012:	1f 91       	pop	r17
    4014:	0f 91       	pop	r16
    layer_state_set(layer_state | (1UL<<layer));
    4016:	0c 94 0d 1f 	jmp	0x3e1a	; 0x3e1a <layer_state_set>

0000401a <layer_off>:

void layer_off(uint8_t layer)
{
    401a:	0f 93       	push	r16
    401c:	1f 93       	push	r17
    401e:	cf 93       	push	r28
    4020:	df 93       	push	r29
    4022:	00 d0       	rcall	.+0      	; 0x4024 <layer_off+0xa>
    4024:	00 d0       	rcall	.+0      	; 0x4026 <layer_off+0xc>
    4026:	cd b7       	in	r28, 0x3d	; 61
    4028:	de b7       	in	r29, 0x3e	; 62
    layer_state_set(layer_state & ~(1UL<<layer));
    402a:	41 e0       	ldi	r20, 0x01	; 1
    402c:	50 e0       	ldi	r21, 0x00	; 0
    402e:	60 e0       	ldi	r22, 0x00	; 0
    4030:	70 e0       	ldi	r23, 0x00	; 0
    4032:	04 c0       	rjmp	.+8      	; 0x403c <layer_off+0x22>
    4034:	44 0f       	add	r20, r20
    4036:	55 1f       	adc	r21, r21
    4038:	66 1f       	adc	r22, r22
    403a:	77 1f       	adc	r23, r23
    403c:	8a 95       	dec	r24
    403e:	d2 f7       	brpl	.-12     	; 0x4034 <layer_off+0x1a>
    4040:	40 95       	com	r20
    4042:	50 95       	com	r21
    4044:	60 95       	com	r22
    4046:	70 95       	com	r23
    4048:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <layer_state>
    404c:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <layer_state+0x1>
    4050:	a0 91 51 03 	lds	r26, 0x0351	; 0x800351 <layer_state+0x2>
    4054:	b0 91 52 03 	lds	r27, 0x0352	; 0x800352 <layer_state+0x3>
    4058:	8a 01       	movw	r16, r20
    405a:	9b 01       	movw	r18, r22
    405c:	08 23       	and	r16, r24
    405e:	19 23       	and	r17, r25
    4060:	2a 23       	and	r18, r26
    4062:	3b 23       	and	r19, r27
    4064:	09 83       	std	Y+1, r16	; 0x01
    4066:	1a 83       	std	Y+2, r17	; 0x02
    4068:	2b 83       	std	Y+3, r18	; 0x03
    406a:	3c 83       	std	Y+4, r19	; 0x04
    406c:	c9 01       	movw	r24, r18
    406e:	b8 01       	movw	r22, r16
}
    4070:	0f 90       	pop	r0
    4072:	0f 90       	pop	r0
    4074:	0f 90       	pop	r0
    4076:	0f 90       	pop	r0
    4078:	df 91       	pop	r29
    407a:	cf 91       	pop	r28
    407c:	1f 91       	pop	r17
    407e:	0f 91       	pop	r16
    layer_state_set(layer_state & ~(1UL<<layer));
    4080:	0c 94 0d 1f 	jmp	0x3e1a	; 0x3e1a <layer_state_set>

00004084 <layer_invert>:

void layer_invert(uint8_t layer)
{
    4084:	0f 93       	push	r16
    4086:	1f 93       	push	r17
    4088:	cf 93       	push	r28
    408a:	df 93       	push	r29
    408c:	00 d0       	rcall	.+0      	; 0x408e <layer_invert+0xa>
    408e:	00 d0       	rcall	.+0      	; 0x4090 <layer_invert+0xc>
    4090:	cd b7       	in	r28, 0x3d	; 61
    4092:	de b7       	in	r29, 0x3e	; 62
    layer_state_set(layer_state ^ (1UL<<layer));
    4094:	41 e0       	ldi	r20, 0x01	; 1
    4096:	50 e0       	ldi	r21, 0x00	; 0
    4098:	60 e0       	ldi	r22, 0x00	; 0
    409a:	70 e0       	ldi	r23, 0x00	; 0
    409c:	04 c0       	rjmp	.+8      	; 0x40a6 <layer_invert+0x22>
    409e:	44 0f       	add	r20, r20
    40a0:	55 1f       	adc	r21, r21
    40a2:	66 1f       	adc	r22, r22
    40a4:	77 1f       	adc	r23, r23
    40a6:	8a 95       	dec	r24
    40a8:	d2 f7       	brpl	.-12     	; 0x409e <layer_invert+0x1a>
    40aa:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <layer_state>
    40ae:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <layer_state+0x1>
    40b2:	a0 91 51 03 	lds	r26, 0x0351	; 0x800351 <layer_state+0x2>
    40b6:	b0 91 52 03 	lds	r27, 0x0352	; 0x800352 <layer_state+0x3>
    40ba:	8a 01       	movw	r16, r20
    40bc:	9b 01       	movw	r18, r22
    40be:	08 27       	eor	r16, r24
    40c0:	19 27       	eor	r17, r25
    40c2:	2a 27       	eor	r18, r26
    40c4:	3b 27       	eor	r19, r27
    40c6:	09 83       	std	Y+1, r16	; 0x01
    40c8:	1a 83       	std	Y+2, r17	; 0x02
    40ca:	2b 83       	std	Y+3, r18	; 0x03
    40cc:	3c 83       	std	Y+4, r19	; 0x04
    40ce:	c9 01       	movw	r24, r18
    40d0:	b8 01       	movw	r22, r16
}
    40d2:	0f 90       	pop	r0
    40d4:	0f 90       	pop	r0
    40d6:	0f 90       	pop	r0
    40d8:	0f 90       	pop	r0
    40da:	df 91       	pop	r29
    40dc:	cf 91       	pop	r28
    40de:	1f 91       	pop	r17
    40e0:	0f 91       	pop	r16
    layer_state_set(layer_state ^ (1UL<<layer));
    40e2:	0c 94 0d 1f 	jmp	0x3e1a	; 0x3e1a <layer_state_set>

000040e6 <layer_or>:

void layer_or(uint32_t state)
{
    40e6:	cf 93       	push	r28
    40e8:	df 93       	push	r29
    40ea:	00 d0       	rcall	.+0      	; 0x40ec <layer_or+0x6>
    40ec:	00 d0       	rcall	.+0      	; 0x40ee <layer_or+0x8>
    40ee:	cd b7       	in	r28, 0x3d	; 61
    40f0:	de b7       	in	r29, 0x3e	; 62
    40f2:	69 83       	std	Y+1, r22	; 0x01
    40f4:	7a 83       	std	Y+2, r23	; 0x02
    40f6:	8b 83       	std	Y+3, r24	; 0x03
    40f8:	9c 83       	std	Y+4, r25	; 0x04
    layer_state_set(layer_state | state);
    40fa:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <layer_state>
    40fe:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <layer_state+0x1>
    4102:	a0 91 51 03 	lds	r26, 0x0351	; 0x800351 <layer_state+0x2>
    4106:	b0 91 52 03 	lds	r27, 0x0352	; 0x800352 <layer_state+0x3>
    410a:	29 81       	ldd	r18, Y+1	; 0x01
    410c:	3a 81       	ldd	r19, Y+2	; 0x02
    410e:	4b 81       	ldd	r20, Y+3	; 0x03
    4110:	5c 81       	ldd	r21, Y+4	; 0x04
    4112:	28 2b       	or	r18, r24
    4114:	39 2b       	or	r19, r25
    4116:	4a 2b       	or	r20, r26
    4118:	5b 2b       	or	r21, r27
    411a:	29 83       	std	Y+1, r18	; 0x01
    411c:	3a 83       	std	Y+2, r19	; 0x02
    411e:	4b 83       	std	Y+3, r20	; 0x03
    4120:	5c 83       	std	Y+4, r21	; 0x04
    4122:	ca 01       	movw	r24, r20
    4124:	b9 01       	movw	r22, r18
}
    4126:	0f 90       	pop	r0
    4128:	0f 90       	pop	r0
    412a:	0f 90       	pop	r0
    412c:	0f 90       	pop	r0
    412e:	df 91       	pop	r29
    4130:	cf 91       	pop	r28
    layer_state_set(layer_state | state);
    4132:	0c 94 0d 1f 	jmp	0x3e1a	; 0x3e1a <layer_state_set>

00004136 <layer_and>:
void layer_and(uint32_t state)
{
    4136:	cf 93       	push	r28
    4138:	df 93       	push	r29
    413a:	00 d0       	rcall	.+0      	; 0x413c <layer_and+0x6>
    413c:	00 d0       	rcall	.+0      	; 0x413e <layer_and+0x8>
    413e:	cd b7       	in	r28, 0x3d	; 61
    4140:	de b7       	in	r29, 0x3e	; 62
    4142:	69 83       	std	Y+1, r22	; 0x01
    4144:	7a 83       	std	Y+2, r23	; 0x02
    4146:	8b 83       	std	Y+3, r24	; 0x03
    4148:	9c 83       	std	Y+4, r25	; 0x04
    layer_state_set(layer_state & state);
    414a:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <layer_state>
    414e:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <layer_state+0x1>
    4152:	a0 91 51 03 	lds	r26, 0x0351	; 0x800351 <layer_state+0x2>
    4156:	b0 91 52 03 	lds	r27, 0x0352	; 0x800352 <layer_state+0x3>
    415a:	29 81       	ldd	r18, Y+1	; 0x01
    415c:	3a 81       	ldd	r19, Y+2	; 0x02
    415e:	4b 81       	ldd	r20, Y+3	; 0x03
    4160:	5c 81       	ldd	r21, Y+4	; 0x04
    4162:	28 23       	and	r18, r24
    4164:	39 23       	and	r19, r25
    4166:	4a 23       	and	r20, r26
    4168:	5b 23       	and	r21, r27
    416a:	29 83       	std	Y+1, r18	; 0x01
    416c:	3a 83       	std	Y+2, r19	; 0x02
    416e:	4b 83       	std	Y+3, r20	; 0x03
    4170:	5c 83       	std	Y+4, r21	; 0x04
    4172:	ca 01       	movw	r24, r20
    4174:	b9 01       	movw	r22, r18
}
    4176:	0f 90       	pop	r0
    4178:	0f 90       	pop	r0
    417a:	0f 90       	pop	r0
    417c:	0f 90       	pop	r0
    417e:	df 91       	pop	r29
    4180:	cf 91       	pop	r28
    layer_state_set(layer_state & state);
    4182:	0c 94 0d 1f 	jmp	0x3e1a	; 0x3e1a <layer_state_set>

00004186 <layer_xor>:
void layer_xor(uint32_t state)
{
    4186:	cf 93       	push	r28
    4188:	df 93       	push	r29
    418a:	00 d0       	rcall	.+0      	; 0x418c <layer_xor+0x6>
    418c:	00 d0       	rcall	.+0      	; 0x418e <layer_xor+0x8>
    418e:	cd b7       	in	r28, 0x3d	; 61
    4190:	de b7       	in	r29, 0x3e	; 62
    4192:	69 83       	std	Y+1, r22	; 0x01
    4194:	7a 83       	std	Y+2, r23	; 0x02
    4196:	8b 83       	std	Y+3, r24	; 0x03
    4198:	9c 83       	std	Y+4, r25	; 0x04
    layer_state_set(layer_state ^ state);
    419a:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <layer_state>
    419e:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <layer_state+0x1>
    41a2:	a0 91 51 03 	lds	r26, 0x0351	; 0x800351 <layer_state+0x2>
    41a6:	b0 91 52 03 	lds	r27, 0x0352	; 0x800352 <layer_state+0x3>
    41aa:	29 81       	ldd	r18, Y+1	; 0x01
    41ac:	3a 81       	ldd	r19, Y+2	; 0x02
    41ae:	4b 81       	ldd	r20, Y+3	; 0x03
    41b0:	5c 81       	ldd	r21, Y+4	; 0x04
    41b2:	28 27       	eor	r18, r24
    41b4:	39 27       	eor	r19, r25
    41b6:	4a 27       	eor	r20, r26
    41b8:	5b 27       	eor	r21, r27
    41ba:	29 83       	std	Y+1, r18	; 0x01
    41bc:	3a 83       	std	Y+2, r19	; 0x02
    41be:	4b 83       	std	Y+3, r20	; 0x03
    41c0:	5c 83       	std	Y+4, r21	; 0x04
    41c2:	ca 01       	movw	r24, r20
    41c4:	b9 01       	movw	r22, r18
}
    41c6:	0f 90       	pop	r0
    41c8:	0f 90       	pop	r0
    41ca:	0f 90       	pop	r0
    41cc:	0f 90       	pop	r0
    41ce:	df 91       	pop	r29
    41d0:	cf 91       	pop	r28
    layer_state_set(layer_state ^ state);
    41d2:	0c 94 0d 1f 	jmp	0x3e1a	; 0x3e1a <layer_state_set>

000041d6 <layer_debug>:
    41d6:	08 95       	ret

000041d8 <layer_switch_get_action>:
#ifndef NO_TRACK_KEY_PRESS
/* record layer on where key is pressed */
static uint8_t layer_pressed[MATRIX_ROWS][MATRIX_COLS] = {};
#endif
action_t layer_switch_get_action(keyevent_t event)
{
    41d8:	4f 92       	push	r4
    41da:	5f 92       	push	r5
    41dc:	6f 92       	push	r6
    41de:	7f 92       	push	r7
    41e0:	9f 92       	push	r9
    41e2:	af 92       	push	r10
    41e4:	bf 92       	push	r11
    41e6:	cf 92       	push	r12
    41e8:	df 92       	push	r13
    41ea:	ef 92       	push	r14
    41ec:	ff 92       	push	r15
    41ee:	0f 93       	push	r16
    41f0:	1f 93       	push	r17
    41f2:	cf 93       	push	r28
    41f4:	df 93       	push	r29
    41f6:	00 d0       	rcall	.+0      	; 0x41f8 <layer_switch_get_action+0x20>
    41f8:	00 d0       	rcall	.+0      	; 0x41fa <layer_switch_get_action+0x22>
    41fa:	0f 92       	push	r0
    41fc:	cd b7       	in	r28, 0x3d	; 61
    41fe:	de b7       	in	r29, 0x3e	; 62
    4200:	49 83       	std	Y+1, r20	; 0x01
    4202:	5a 83       	std	Y+2, r21	; 0x02
    4204:	6b 83       	std	Y+3, r22	; 0x03
    4206:	7c 83       	std	Y+4, r23	; 0x04
    4208:	8d 83       	std	Y+5, r24	; 0x05
    420a:	8c 81       	ldd	r24, Y+4	; 0x04
    420c:	9d 81       	ldd	r25, Y+5	; 0x05
    420e:	89 2b       	or	r24, r25
    4210:	31 f0       	breq	.+12     	; 0x421e <layer_switch_get_action+0x46>
    4212:	f4 2e       	mov	r15, r20
    4214:	e5 2e       	mov	r14, r21
    4216:	84 2f       	mov	r24, r20
    4218:	85 23       	and	r24, r21
    421a:	8f 3f       	cpi	r24, 0xFF	; 255
    421c:	59 f5       	brne	.+86     	; 0x4274 <layer_switch_get_action+0x9c>
    }
#else
    layer = current_layer_for_key(event.key);
#endif
    return action_for_key(layer, event.key);
}
    421e:	90 e0       	ldi	r25, 0x00	; 0
    4220:	80 e0       	ldi	r24, 0x00	; 0
    4222:	0f 90       	pop	r0
    4224:	0f 90       	pop	r0
    4226:	0f 90       	pop	r0
    4228:	0f 90       	pop	r0
    422a:	0f 90       	pop	r0
    422c:	df 91       	pop	r29
    422e:	cf 91       	pop	r28
    4230:	1f 91       	pop	r17
    4232:	0f 91       	pop	r16
    4234:	ff 90       	pop	r15
    4236:	ef 90       	pop	r14
    4238:	df 90       	pop	r13
    423a:	cf 90       	pop	r12
    423c:	bf 90       	pop	r11
    423e:	af 90       	pop	r10
    4240:	9f 90       	pop	r9
    4242:	7f 90       	pop	r7
    4244:	6f 90       	pop	r6
    4246:	5f 90       	pop	r5
    4248:	4f 90       	pop	r4
    424a:	08 95       	ret
            action = action_for_key(i, key);
    424c:	6f 2d       	mov	r22, r15
    424e:	7e 2d       	mov	r23, r14
    4250:	8a 2d       	mov	r24, r10
    4252:	0e 94 7c 23 	call	0x46f8	; 0x46f8 <action_for_key>
            if (action.code != (action_t)ACTION_TRANSPARENT.code) {
    4256:	01 97       	sbiw	r24, 0x01	; 1
    4258:	c1 f1       	breq	.+112    	; 0x42ca <layer_switch_get_action+0xf2>
    425a:	3c c0       	rjmp	.+120    	; 0x42d4 <layer_switch_get_action+0xfc>
        layer = layer_pressed[event.key.row][event.key.col];
    425c:	f8 01       	movw	r30, r16
    425e:	83 e0       	ldi	r24, 0x03	; 3
    4260:	ee 0f       	add	r30, r30
    4262:	ff 1f       	adc	r31, r31
    4264:	8a 95       	dec	r24
    4266:	e1 f7       	brne	.-8      	; 0x4260 <layer_switch_get_action+0x88>
    4268:	e1 53       	subi	r30, 0x31	; 49
    426a:	fd 4f       	sbci	r31, 0xFD	; 253
    426c:	ec 0d       	add	r30, r12
    426e:	fd 1d       	adc	r31, r13
    4270:	90 80       	ld	r9, Z
    4272:	3b c0       	rjmp	.+118    	; 0x42ea <layer_switch_get_action+0x112>
    if (event.pressed) {
    4274:	05 2f       	mov	r16, r21
    4276:	10 e0       	ldi	r17, 0x00	; 0
    4278:	c4 2e       	mov	r12, r20
    427a:	d1 2c       	mov	r13, r1
    427c:	8b 81       	ldd	r24, Y+3	; 0x03
    427e:	88 23       	and	r24, r24
    4280:	69 f3       	breq	.-38     	; 0x425c <layer_switch_get_action+0x84>
    uint32_t layers = layer_state | default_layer_state;
    4282:	40 90 4f 03 	lds	r4, 0x034F	; 0x80034f <layer_state>
    4286:	50 90 50 03 	lds	r5, 0x0350	; 0x800350 <layer_state+0x1>
    428a:	60 90 51 03 	lds	r6, 0x0351	; 0x800351 <layer_state+0x2>
    428e:	70 90 52 03 	lds	r7, 0x0352	; 0x800352 <layer_state+0x3>
    4292:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <default_layer_state>
    4296:	90 91 54 03 	lds	r25, 0x0354	; 0x800354 <default_layer_state+0x1>
    429a:	a0 91 55 03 	lds	r26, 0x0355	; 0x800355 <default_layer_state+0x2>
    429e:	b0 91 56 03 	lds	r27, 0x0356	; 0x800356 <default_layer_state+0x3>
    42a2:	48 2a       	or	r4, r24
    42a4:	59 2a       	or	r5, r25
    42a6:	6a 2a       	or	r6, r26
    42a8:	7b 2a       	or	r7, r27
    42aa:	2f e1       	ldi	r18, 0x1F	; 31
    42ac:	a2 2e       	mov	r10, r18
    42ae:	b1 2c       	mov	r11, r1
        if (layers & (1UL<<i)) {
    42b0:	9a 2c       	mov	r9, r10
    42b2:	d3 01       	movw	r26, r6
    42b4:	c2 01       	movw	r24, r4
    42b6:	0a 2c       	mov	r0, r10
    42b8:	04 c0       	rjmp	.+8      	; 0x42c2 <layer_switch_get_action+0xea>
    42ba:	b6 95       	lsr	r27
    42bc:	a7 95       	ror	r26
    42be:	97 95       	ror	r25
    42c0:	87 95       	ror	r24
    42c2:	0a 94       	dec	r0
    42c4:	d2 f7       	brpl	.-12     	; 0x42ba <layer_switch_get_action+0xe2>
    42c6:	80 fd       	sbrc	r24, 0
    42c8:	c1 cf       	rjmp	.-126    	; 0x424c <layer_switch_get_action+0x74>
    42ca:	81 e0       	ldi	r24, 0x01	; 1
    42cc:	a8 1a       	sub	r10, r24
    42ce:	b1 08       	sbc	r11, r1
    42d0:	78 f7       	brcc	.-34     	; 0x42b0 <layer_switch_get_action+0xd8>
    return 0;
    42d2:	91 2c       	mov	r9, r1
        layer_pressed[event.key.row][event.key.col] = layer;
    42d4:	f8 01       	movw	r30, r16
    42d6:	93 e0       	ldi	r25, 0x03	; 3
    42d8:	ee 0f       	add	r30, r30
    42da:	ff 1f       	adc	r31, r31
    42dc:	9a 95       	dec	r25
    42de:	e1 f7       	brne	.-8      	; 0x42d8 <layer_switch_get_action+0x100>
    42e0:	e1 53       	subi	r30, 0x31	; 49
    42e2:	fd 4f       	sbci	r31, 0xFD	; 253
    42e4:	ec 0d       	add	r30, r12
    42e6:	fd 1d       	adc	r31, r13
    42e8:	90 82       	st	Z, r9
    return action_for_key(layer, event.key);
    42ea:	f9 82       	std	Y+1, r15	; 0x01
    42ec:	ea 82       	std	Y+2, r14	; 0x02
    42ee:	69 81       	ldd	r22, Y+1	; 0x01
    42f0:	7a 81       	ldd	r23, Y+2	; 0x02
    42f2:	89 2d       	mov	r24, r9
}
    42f4:	0f 90       	pop	r0
    42f6:	0f 90       	pop	r0
    42f8:	0f 90       	pop	r0
    42fa:	0f 90       	pop	r0
    42fc:	0f 90       	pop	r0
    42fe:	df 91       	pop	r29
    4300:	cf 91       	pop	r28
    4302:	1f 91       	pop	r17
    4304:	0f 91       	pop	r16
    4306:	ff 90       	pop	r15
    4308:	ef 90       	pop	r14
    430a:	df 90       	pop	r13
    430c:	cf 90       	pop	r12
    430e:	bf 90       	pop	r11
    4310:	af 90       	pop	r10
    4312:	9f 90       	pop	r9
    4314:	7f 90       	pop	r7
    4316:	6f 90       	pop	r6
    4318:	5f 90       	pop	r5
    431a:	4f 90       	pop	r4
    return action_for_key(layer, event.key);
    431c:	0c 94 7c 23 	jmp	0x46f8	; 0x46f8 <action_for_key>

00004320 <add_key>:
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    4320:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <keyboard_report>
    4324:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <keyboard_report+0x1>
    4328:	f9 01       	movw	r30, r18
    432a:	32 96       	adiw	r30, 0x02	; 2
    int8_t empty = -1;
    432c:	9f ef       	ldi	r25, 0xFF	; 255
    int8_t i = 0;
    432e:	40 e0       	ldi	r20, 0x00	; 0
        if (keyboard_report->keys[i] == code) {
    4330:	51 91       	ld	r21, Z+
    4332:	85 17       	cp	r24, r21
    4334:	51 f0       	breq	.+20     	; 0x434a <add_key+0x2a>
            break;
        }
        if (empty == -1 && keyboard_report->keys[i] == 0) {
    4336:	9f 3f       	cpi	r25, 0xFF	; 255
    4338:	19 f4       	brne	.+6      	; 0x4340 <add_key+0x20>
    433a:	51 11       	cpse	r21, r1
    433c:	01 c0       	rjmp	.+2      	; 0x4340 <add_key+0x20>
    433e:	94 2f       	mov	r25, r20
    4340:	4f 5f       	subi	r20, 0xFF	; 255
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
    4342:	46 30       	cpi	r20, 0x06	; 6
    4344:	a9 f7       	brne	.-22     	; 0x4330 <add_key+0x10>
            empty = i;
        }
    }
    if (i == KEYBOARD_REPORT_KEYS) {
        if (empty != -1) {
    4346:	9f 3f       	cpi	r25, 0xFF	; 255
    4348:	09 f4       	brne	.+2      	; 0x434c <add_key+0x2c>
}
    434a:	08 95       	ret
            keyboard_report->keys[empty] = code;
    434c:	29 0f       	add	r18, r25
    434e:	31 1d       	adc	r19, r1
    4350:	97 fd       	sbrc	r25, 7
    4352:	3a 95       	dec	r19
    4354:	f9 01       	movw	r30, r18
    4356:	82 83       	std	Z+2, r24	; 0x02
}
    4358:	08 95       	ret

0000435a <del_key>:
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    435a:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <keyboard_report>
    435e:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <keyboard_report+0x1>
    4362:	f9 01       	movw	r30, r18
    4364:	32 96       	adiw	r30, 0x02	; 2
    4366:	28 5f       	subi	r18, 0xF8	; 248
    4368:	3f 4f       	sbci	r19, 0xFF	; 255
    436a:	91 91       	ld	r25, Z+
    436c:	89 13       	cpse	r24, r25
    436e:	03 c0       	rjmp	.+6      	; 0x4376 <del_key+0x1c>
            keyboard_report->keys[i] = 0;
    4370:	df 01       	movw	r26, r30
    4372:	11 97       	sbiw	r26, 0x01	; 1
    4374:	1c 92       	st	X, r1
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
    4376:	e2 17       	cp	r30, r18
    4378:	f3 07       	cpc	r31, r19
    437a:	b9 f7       	brne	.-18     	; 0x436a <del_key+0x10>
}
    437c:	08 95       	ret

0000437e <clear_keys>:
{
    437e:	81 e0       	ldi	r24, 0x01	; 1
    4380:	90 e0       	ldi	r25, 0x00	; 0
        keyboard_report->raw[i] = 0;
    4382:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <keyboard_report>
    4386:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <keyboard_report+0x1>
    438a:	e8 0f       	add	r30, r24
    438c:	f9 1f       	adc	r31, r25
    438e:	10 82       	st	Z, r1
    4390:	01 96       	adiw	r24, 0x01	; 1
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    4392:	88 30       	cpi	r24, 0x08	; 8
    4394:	91 05       	cpc	r25, r1
    4396:	a9 f7       	brne	.-22     	; 0x4382 <clear_keys+0x4>
}
    4398:	08 95       	ret

0000439a <get_mods>:
uint8_t get_mods(void) { return real_mods; }
    439a:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <real_mods>
    439e:	08 95       	ret

000043a0 <add_mods>:
void add_mods(uint8_t mods) { real_mods |= mods; }
    43a0:	90 91 61 03 	lds	r25, 0x0361	; 0x800361 <real_mods>
    43a4:	98 2b       	or	r25, r24
    43a6:	90 93 61 03 	sts	0x0361, r25	; 0x800361 <real_mods>
    43aa:	08 95       	ret

000043ac <del_mods>:
void del_mods(uint8_t mods) { real_mods &= ~mods; }
    43ac:	98 2f       	mov	r25, r24
    43ae:	90 95       	com	r25
    43b0:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <real_mods>
    43b4:	89 23       	and	r24, r25
    43b6:	80 93 61 03 	sts	0x0361, r24	; 0x800361 <real_mods>
    43ba:	08 95       	ret

000043bc <set_mods>:
void set_mods(uint8_t mods) { real_mods = mods; }
    43bc:	80 93 61 03 	sts	0x0361, r24	; 0x800361 <real_mods>
    43c0:	08 95       	ret

000043c2 <clear_mods>:
void clear_mods(void) { real_mods = 0; }
    43c2:	10 92 61 03 	sts	0x0361, r1	; 0x800361 <real_mods>
    43c6:	08 95       	ret

000043c8 <add_weak_mods>:
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
    43c8:	90 91 60 03 	lds	r25, 0x0360	; 0x800360 <weak_mods>
    43cc:	98 2b       	or	r25, r24
    43ce:	90 93 60 03 	sts	0x0360, r25	; 0x800360 <weak_mods>
    43d2:	08 95       	ret

000043d4 <del_weak_mods>:
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
    43d4:	98 2f       	mov	r25, r24
    43d6:	90 95       	com	r25
    43d8:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <weak_mods>
    43dc:	89 23       	and	r24, r25
    43de:	80 93 60 03 	sts	0x0360, r24	; 0x800360 <weak_mods>
    43e2:	08 95       	ret

000043e4 <clear_weak_mods>:
void clear_weak_mods(void) { weak_mods = 0; }
    43e4:	10 92 60 03 	sts	0x0360, r1	; 0x800360 <weak_mods>
    43e8:	08 95       	ret

000043ea <set_oneshot_mods>:
    oneshot_mods = mods;
    43ea:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <oneshot_mods>
}
    43ee:	08 95       	ret

000043f0 <clear_oneshot_mods>:
    oneshot_mods = 0;
    43f0:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <oneshot_mods>
}
    43f4:	08 95       	ret

000043f6 <has_anykey>:
        if (keyboard_report->raw[i])
    43f6:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <keyboard_report>
    43fa:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <keyboard_report+0x1>
    43fe:	f9 01       	movw	r30, r18
    4400:	31 96       	adiw	r30, 0x01	; 1
    4402:	28 5f       	subi	r18, 0xF8	; 248
    4404:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t cnt = 0;
    4406:	80 e0       	ldi	r24, 0x00	; 0
        if (keyboard_report->raw[i])
    4408:	91 91       	ld	r25, Z+
    440a:	91 11       	cpse	r25, r1
            cnt++;
    440c:	8f 5f       	subi	r24, 0xFF	; 255
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    440e:	e2 17       	cp	r30, r18
    4410:	f3 07       	cpc	r31, r19
    4412:	d1 f7       	brne	.-12     	; 0x4408 <has_anykey+0x12>
}
    4414:	08 95       	ret

00004416 <send_keyboard_report>:
    keyboard_report->mods  = real_mods;
    4416:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <keyboard_report>
    441a:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <keyboard_report+0x1>
    441e:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <real_mods>
    4422:	80 83       	st	Z, r24
    keyboard_report->mods |= weak_mods;
    4424:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <keyboard_report>
    4428:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <keyboard_report+0x1>
    442c:	80 81       	ld	r24, Z
    442e:	90 91 60 03 	lds	r25, 0x0360	; 0x800360 <weak_mods>
    4432:	89 2b       	or	r24, r25
    4434:	80 83       	st	Z, r24
    if (oneshot_mods) {
    4436:	90 91 57 03 	lds	r25, 0x0357	; 0x800357 <oneshot_mods>
    443a:	99 23       	and	r25, r25
    443c:	61 f0       	breq	.+24     	; 0x4456 <send_keyboard_report+0x40>
        keyboard_report->mods |= oneshot_mods;
    443e:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <keyboard_report>
    4442:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <keyboard_report+0x1>
    4446:	80 81       	ld	r24, Z
    4448:	89 2b       	or	r24, r25
    444a:	80 83       	st	Z, r24
        if (has_anykey()) {
    444c:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <has_anykey>
    4450:	81 11       	cpse	r24, r1
    oneshot_mods = 0;
    4452:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <oneshot_mods>
    host_keyboard_send(keyboard_report);
    4456:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <keyboard_report>
    445a:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <keyboard_report+0x1>
    445e:	0c 94 8a 14 	jmp	0x2914	; 0x2914 <host_keyboard_send>

00004462 <print_set_sendchar>:
#define sendchar(c)    xputc(c)


void print_set_sendchar(int8_t (*sendchar_func)(uint8_t))
{
    xdev_out(sendchar_func);
    4462:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <__data_end+0x1>
    4466:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__data_end>
}
    446a:	08 95       	ret

0000446c <bitrev>:



uint8_t bitrev(uint8_t bits)
{
    bits = (bits & 0x0f)<<4 | (bits & 0xf0)>>4;
    446c:	82 95       	swap	r24
    bits = (bits & 0b00110011)<<2 | (bits & 0b11001100)>>2;
    446e:	90 e0       	ldi	r25, 0x00	; 0
    4470:	9c 01       	movw	r18, r24
    4472:	22 0f       	add	r18, r18
    4474:	33 1f       	adc	r19, r19
    4476:	22 0f       	add	r18, r18
    4478:	33 1f       	adc	r19, r19
    447a:	2c 7c       	andi	r18, 0xCC	; 204
    447c:	95 95       	asr	r25
    447e:	87 95       	ror	r24
    4480:	95 95       	asr	r25
    4482:	87 95       	ror	r24
    4484:	83 73       	andi	r24, 0x33	; 51
    4486:	28 2b       	or	r18, r24
    bits = (bits & 0b01010101)<<1 | (bits & 0b10101010)>>1;
    4488:	30 e0       	ldi	r19, 0x00	; 0
    448a:	c9 01       	movw	r24, r18
    448c:	88 0f       	add	r24, r24
    448e:	99 1f       	adc	r25, r25
    4490:	8a 7a       	andi	r24, 0xAA	; 170
    4492:	35 95       	asr	r19
    4494:	27 95       	ror	r18
    4496:	25 75       	andi	r18, 0x55	; 85
    return bits;
}
    4498:	82 2b       	or	r24, r18
    449a:	08 95       	ret

0000449c <hook_keyboard_loop>:
/* -------------------------------------------------
 * Definitions of default hooks
 * ------------------------------------------------- */

__attribute__((weak))
void hook_keyboard_loop(void) {}
    449c:	08 95       	ret

0000449e <hook_matrix_change>:

__attribute__((weak))
void hook_matrix_change(keyevent_t event) {
    449e:	cf 93       	push	r28
    44a0:	df 93       	push	r29
    44a2:	00 d0       	rcall	.+0      	; 0x44a4 <hook_matrix_change+0x6>
    44a4:	00 d0       	rcall	.+0      	; 0x44a6 <hook_matrix_change+0x8>
    44a6:	0f 92       	push	r0
    44a8:	cd b7       	in	r28, 0x3d	; 61
    44aa:	de b7       	in	r29, 0x3e	; 62
    (void)event;
}
    44ac:	0f 90       	pop	r0
    44ae:	0f 90       	pop	r0
    44b0:	0f 90       	pop	r0
    44b2:	0f 90       	pop	r0
    44b4:	0f 90       	pop	r0
    44b6:	df 91       	pop	r29
    44b8:	cf 91       	pop	r28
    44ba:	08 95       	ret

000044bc <hook_default_layer_change>:

__attribute__((weak))
void hook_default_layer_change(uint32_t default_layer_state) {
    (void)default_layer_state;
}
    44bc:	08 95       	ret

000044be <hook_layer_change>:
    44be:	08 95       	ret

000044c0 <hook_keyboard_leds_change>:
    (void)layer_state;
}

__attribute__((weak))
void hook_keyboard_leds_change(uint8_t led_status) {
    keyboard_set_leds(led_status);
    44c0:	0c 94 f0 15 	jmp	0x2be0	; 0x2be0 <keyboard_set_leds>

000044c4 <hook_process_action>:
void hook_bootmagic(void) {}

__attribute__((weak))
bool hook_process_action(keyrecord_t *record) {
    return false;
}
    44c4:	80 e0       	ldi	r24, 0x00	; 0
    44c6:	08 95       	ret

000044c8 <suspend_power_down>:
 */
static uint8_t wdt_timeout = 0;
static void power_down(uint8_t wdto)
{
#ifdef PROTOCOL_LUFA
    if (USB_DeviceState == DEVICE_STATE_Configured) return;
    44c8:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <USB_DeviceState>
    44cc:	84 30       	cpi	r24, 0x04	; 4
    44ce:	21 f1       	breq	.+72     	; 0x4518 <suspend_power_down+0x50>
#endif
    wdt_timeout = wdto;
    44d0:	10 92 63 03 	sts	0x0363, r1	; 0x800363 <wdt_timeout>

    // Watchdog Interrupt Mode
    wdt_intr_enable(wdto);
    44d4:	88 e1       	ldi	r24, 0x18	; 24
    44d6:	90 e0       	ldi	r25, 0x00	; 0
    44d8:	20 e4       	ldi	r18, 0x40	; 64
    44da:	0f b6       	in	r0, 0x3f	; 63
    44dc:	f8 94       	cli
    44de:	a8 95       	wdr
    44e0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <actionmaps+0x7f9860>
    44e4:	0f be       	out	0x3f, r0	; 63
    44e6:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <actionmaps+0x7f9860>
    // See PicoPower application note
    // - I/O port input with pullup
    // - prescale clock
    // - BOD disable
    // - Power Reduction Register PRR
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    44ea:	83 b7       	in	r24, 0x33	; 51
    44ec:	81 7f       	andi	r24, 0xF1	; 241
    44ee:	84 60       	ori	r24, 0x04	; 4
    44f0:	83 bf       	out	0x33, r24	; 51
    sleep_enable();
    44f2:	83 b7       	in	r24, 0x33	; 51
    44f4:	81 60       	ori	r24, 0x01	; 1
    44f6:	83 bf       	out	0x33, r24	; 51
    sei();
    44f8:	78 94       	sei
    sleep_cpu();
    44fa:	88 95       	sleep
    sleep_disable();
    44fc:	83 b7       	in	r24, 0x33	; 51
    44fe:	8e 7f       	andi	r24, 0xFE	; 254
    4500:	83 bf       	out	0x33, r24	; 51
    4502:	0f b6       	in	r0, 0x3f	; 63
    4504:	f8 94       	cli
    4506:	a8 95       	wdr
    4508:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <actionmaps+0x7f9860>
    450c:	88 61       	ori	r24, 0x18	; 24
    450e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <actionmaps+0x7f9860>
    4512:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <actionmaps+0x7f9860>
    4516:	0f be       	out	0x3f, r0	; 63
#elif defined(SUSPEND_MODE_IDLE)
    idle();
#else
    power_down(WDTO_15MS);
#endif
}
    4518:	08 95       	ret

0000451a <suspend_wakeup_condition>:

bool suspend_wakeup_condition(void)
{
    451a:	cf 93       	push	r28
    matrix_power_up();
    451c:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <matrix_power_up>
    matrix_scan();
    4520:	0e 94 fe 09 	call	0x13fc	; 0x13fc <matrix_scan>
    matrix_power_down();
    4524:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <matrix_power_down>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    4528:	c0 e0       	ldi	r28, 0x00	; 0
        if (matrix_get_row(r)) return true;
    452a:	8c 2f       	mov	r24, r28
    452c:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <matrix_get_row>
    4530:	81 11       	cpse	r24, r1
    4532:	05 c0       	rjmp	.+10     	; 0x453e <suspend_wakeup_condition+0x24>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    4534:	cf 5f       	subi	r28, 0xFF	; 255
    4536:	c0 31       	cpi	r28, 0x10	; 16
    4538:	c1 f7       	brne	.-16     	; 0x452a <suspend_wakeup_condition+0x10>
    }
    return false;
}
    453a:	cf 91       	pop	r28
    453c:	08 95       	ret
        if (matrix_get_row(r)) return true;
    453e:	81 e0       	ldi	r24, 0x01	; 1
    4540:	fc cf       	rjmp	.-8      	; 0x453a <suspend_wakeup_condition+0x20>

00004542 <suspend_wakeup_init>:

// run immediately after wakeup
void suspend_wakeup_init(void)
{
    // clear keyboard state
    matrix_clear();
    4542:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <matrix_clear>
    clear_keyboard();
    4546:	0c 94 10 1b 	jmp	0x3620	; 0x3620 <clear_keyboard>

0000454a <__vector_13>:
}

#ifndef NO_SUSPEND_POWER_DOWN
/* watchdog timeout */
ISR(WDT_vect)
{
    454a:	1f 92       	push	r1
    454c:	1f b6       	in	r1, 0x3f	; 63
    454e:	1f 92       	push	r1
    4550:	11 24       	eor	r1, r1
    4552:	8f 93       	push	r24
    4554:	9f 93       	push	r25
    4556:	af 93       	push	r26
    4558:	bf 93       	push	r27
    // compensate timer for sleep
    switch (wdt_timeout) {
    455a:	80 91 63 03 	lds	r24, 0x0363	; 0x800363 <wdt_timeout>
    455e:	81 11       	cpse	r24, r1
    4560:	13 c0       	rjmp	.+38     	; 0x4588 <__vector_13+0x3e>
        case WDTO_15MS:
            timer_count += 15 + 2;  // WDTO_15MS + 2(from observation)
    4562:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <timer_count>
    4566:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <timer_count+0x1>
    456a:	a0 91 66 03 	lds	r26, 0x0366	; 0x800366 <timer_count+0x2>
    456e:	b0 91 67 03 	lds	r27, 0x0367	; 0x800367 <timer_count+0x3>
    4572:	41 96       	adiw	r24, 0x11	; 17
    4574:	a1 1d       	adc	r26, r1
    4576:	b1 1d       	adc	r27, r1
    4578:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <timer_count>
    457c:	90 93 65 03 	sts	0x0365, r25	; 0x800365 <timer_count+0x1>
    4580:	a0 93 66 03 	sts	0x0366, r26	; 0x800366 <timer_count+0x2>
    4584:	b0 93 67 03 	sts	0x0367, r27	; 0x800367 <timer_count+0x3>
            break;
        default:
            ;
    }
}
    4588:	bf 91       	pop	r27
    458a:	af 91       	pop	r26
    458c:	9f 91       	pop	r25
    458e:	8f 91       	pop	r24
    4590:	1f 90       	pop	r1
    4592:	1f be       	out	0x3f, r1	; 63
    4594:	1f 90       	pop	r1
    4596:	18 95       	reti

00004598 <timer_init>:
volatile uint32_t timer_count = 0;

void timer_init(void)
{
    // Timer0 CTC mode
    TCCR0A = 0x02;
    4598:	82 e0       	ldi	r24, 0x02	; 2
    459a:	84 bd       	out	0x24, r24	; 36
#if TIMER_PRESCALER == 1
    TCCR0B = 0x01;
#elif TIMER_PRESCALER == 8
    TCCR0B = 0x02;
#elif TIMER_PRESCALER == 64
    TCCR0B = 0x03;
    459c:	93 e0       	ldi	r25, 0x03	; 3
    459e:	95 bd       	out	0x25, r25	; 37
    TCCR0B = 0x05;
#else
#   error "Timer prescaler value is NOT vaild."
#endif

    OCR0A = TIMER_RAW_TOP;
    45a0:	9a ef       	ldi	r25, 0xFA	; 250
    45a2:	97 bd       	out	0x27, r25	; 39
#ifdef TIMSK0
    TIMSK0 = (1<<OCIE0A);
    45a4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <actionmaps+0x7f986e>
#else
    TIMSK = (1<<OCIE0A);
#endif
}
    45a8:	08 95       	ret

000045aa <timer_read>:
inline
uint16_t timer_read(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    45aa:	2f b7       	in	r18, 0x3f	; 63
    cli();
    45ac:	f8 94       	cli
    t = timer_count;
    45ae:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <timer_count>
    45b2:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <timer_count+0x1>
    45b6:	a0 91 66 03 	lds	r26, 0x0366	; 0x800366 <timer_count+0x2>
    45ba:	b0 91 67 03 	lds	r27, 0x0367	; 0x800367 <timer_count+0x3>
    SREG = sreg;
    45be:	2f bf       	out	0x3f, r18	; 63

    return (t & 0xFFFF);
}
    45c0:	08 95       	ret

000045c2 <timer_read32>:

inline
uint32_t timer_read32(void)
{
    45c2:	cf 93       	push	r28
    45c4:	df 93       	push	r29
    45c6:	00 d0       	rcall	.+0      	; 0x45c8 <timer_read32+0x6>
    45c8:	00 d0       	rcall	.+0      	; 0x45ca <timer_read32+0x8>
    45ca:	cd b7       	in	r28, 0x3d	; 61
    45cc:	de b7       	in	r29, 0x3e	; 62
    uint32_t t;

    uint8_t sreg = SREG;
    45ce:	8f b7       	in	r24, 0x3f	; 63
    cli();
    45d0:	f8 94       	cli
    t = timer_count;
    45d2:	20 91 64 03 	lds	r18, 0x0364	; 0x800364 <timer_count>
    45d6:	30 91 65 03 	lds	r19, 0x0365	; 0x800365 <timer_count+0x1>
    45da:	40 91 66 03 	lds	r20, 0x0366	; 0x800366 <timer_count+0x2>
    45de:	50 91 67 03 	lds	r21, 0x0367	; 0x800367 <timer_count+0x3>
    45e2:	29 83       	std	Y+1, r18	; 0x01
    45e4:	3a 83       	std	Y+2, r19	; 0x02
    45e6:	4b 83       	std	Y+3, r20	; 0x03
    45e8:	5c 83       	std	Y+4, r21	; 0x04
    SREG = sreg;
    45ea:	8f bf       	out	0x3f, r24	; 63

    return t;
}
    45ec:	69 81       	ldd	r22, Y+1	; 0x01
    45ee:	7a 81       	ldd	r23, Y+2	; 0x02
    45f0:	8b 81       	ldd	r24, Y+3	; 0x03
    45f2:	9c 81       	ldd	r25, Y+4	; 0x04
    45f4:	0f 90       	pop	r0
    45f6:	0f 90       	pop	r0
    45f8:	0f 90       	pop	r0
    45fa:	0f 90       	pop	r0
    45fc:	df 91       	pop	r29
    45fe:	cf 91       	pop	r28
    4600:	08 95       	ret

00004602 <timer_elapsed>:

inline
uint16_t timer_elapsed(uint16_t last)
{
    4602:	cf 92       	push	r12
    4604:	df 92       	push	r13
    4606:	ef 92       	push	r14
    4608:	ff 92       	push	r15
    460a:	9c 01       	movw	r18, r24
    uint32_t t;

    uint8_t sreg = SREG;
    460c:	4f b7       	in	r20, 0x3f	; 63
    cli();
    460e:	f8 94       	cli
    t = timer_count;
    4610:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <timer_count>
    4614:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <timer_count+0x1>
    4618:	a0 91 66 03 	lds	r26, 0x0366	; 0x800366 <timer_count+0x2>
    461c:	b0 91 67 03 	lds	r27, 0x0367	; 0x800367 <timer_count+0x3>
    SREG = sreg;
    4620:	4f bf       	out	0x3f, r20	; 63

    return TIMER_DIFF_16((t & 0xFFFF), last);
    4622:	6c 01       	movw	r12, r24
    4624:	7d 01       	movw	r14, r26
    4626:	ee 24       	eor	r14, r14
    4628:	ff 24       	eor	r15, r15
    462a:	a9 01       	movw	r20, r18
    462c:	70 e0       	ldi	r23, 0x00	; 0
    462e:	60 e0       	ldi	r22, 0x00	; 0
    4630:	c4 16       	cp	r12, r20
    4632:	d5 06       	cpc	r13, r21
    4634:	e6 06       	cpc	r14, r22
    4636:	f7 06       	cpc	r15, r23
    4638:	38 f0       	brcs	.+14     	; 0x4648 <timer_elapsed+0x46>
    463a:	82 1b       	sub	r24, r18
    463c:	93 0b       	sbc	r25, r19
}
    463e:	ff 90       	pop	r15
    4640:	ef 90       	pop	r14
    4642:	df 90       	pop	r13
    4644:	cf 90       	pop	r12
    4646:	08 95       	ret
    return TIMER_DIFF_16((t & 0xFFFF), last);
    4648:	01 97       	sbiw	r24, 0x01	; 1
    464a:	f7 cf       	rjmp	.-18     	; 0x463a <timer_elapsed+0x38>

0000464c <__vector_19>:
    return TIMER_DIFF_32(t, last);
}

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    464c:	1f 92       	push	r1
    464e:	1f b6       	in	r1, 0x3f	; 63
    4650:	1f 92       	push	r1
    4652:	11 24       	eor	r1, r1
    4654:	8f 93       	push	r24
    4656:	9f 93       	push	r25
    4658:	af 93       	push	r26
    465a:	bf 93       	push	r27
    timer_count++;
    465c:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <timer_count>
    4660:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <timer_count+0x1>
    4664:	a0 91 66 03 	lds	r26, 0x0366	; 0x800366 <timer_count+0x2>
    4668:	b0 91 67 03 	lds	r27, 0x0367	; 0x800367 <timer_count+0x3>
    466c:	01 96       	adiw	r24, 0x01	; 1
    466e:	a1 1d       	adc	r26, r1
    4670:	b1 1d       	adc	r27, r1
    4672:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <timer_count>
    4676:	90 93 65 03 	sts	0x0365, r25	; 0x800365 <timer_count+0x1>
    467a:	a0 93 66 03 	sts	0x0366, r26	; 0x800366 <timer_count+0x2>
    467e:	b0 93 67 03 	sts	0x0367, r27	; 0x800367 <timer_count+0x3>
}
    4682:	bf 91       	pop	r27
    4684:	af 91       	pop	r26
    4686:	9f 91       	pop	r25
    4688:	8f 91       	pop	r24
    468a:	1f 90       	pop	r1
    468c:	1f be       	out	0x3f, r1	; 63
    468e:	1f 90       	pop	r1
    4690:	18 95       	reti

00004692 <bootloader_jump>:
    USB_Disable();
    4692:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <USB_Disable>
    cli();
    4696:	f8 94       	cli
	__builtin_avr_delay_cycles(__ticks_dc);
    4698:	2f ef       	ldi	r18, 0xFF	; 255
    469a:	87 ea       	ldi	r24, 0xA7	; 167
    469c:	91 e6       	ldi	r25, 0x61	; 97
    469e:	21 50       	subi	r18, 0x01	; 1
    46a0:	80 40       	sbci	r24, 0x00	; 0
    46a2:	90 40       	sbci	r25, 0x00	; 0
    46a4:	e1 f7       	brne	.-8      	; 0x469e <bootloader_jump+0xc>
    46a6:	00 c0       	rjmp	.+0      	; 0x46a8 <bootloader_jump+0x16>
    46a8:	00 00       	nop
    reset_key = BOOTLOADER_RESET_KEY;
    46aa:	87 e0       	ldi	r24, 0x07	; 7
    46ac:	90 eb       	ldi	r25, 0xB0	; 176
    46ae:	dc 01       	movw	r26, r24
    46b0:	80 93 80 03 	sts	0x0380, r24	; 0x800380 <__bss_end>
    46b4:	90 93 81 03 	sts	0x0381, r25	; 0x800381 <__bss_end+0x1>
    46b8:	a0 93 82 03 	sts	0x0382, r26	; 0x800382 <__bss_end+0x2>
    46bc:	b0 93 83 03 	sts	0x0383, r27	; 0x800383 <__bss_end+0x3>
		__asm__ __volatile__ (
    46c0:	88 e1       	ldi	r24, 0x18	; 24
    46c2:	9c e0       	ldi	r25, 0x0C	; 12
    46c4:	0f b6       	in	r0, 0x3f	; 63
    46c6:	f8 94       	cli
    46c8:	a8 95       	wdr
    46ca:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <actionmaps+0x7f9860>
    46ce:	0f be       	out	0x3f, r0	; 63
    46d0:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <actionmaps+0x7f9860>
    for (;;);
    46d4:	ff cf       	rjmp	.-2      	; 0x46d4 <bootloader_jump+0x42>

000046d6 <unimap_translate>:
// translates raw matrix to universal map
keypos_t unimap_translate(keypos_t key)
{
    uint8_t unimap_pos = 
#if defined(__AVR__)
        pgm_read_byte(&unimap_trans[key.row][key.col]);
    46d6:	e9 2f       	mov	r30, r25
    46d8:	f0 e0       	ldi	r31, 0x00	; 0
    46da:	93 e0       	ldi	r25, 0x03	; 3
    46dc:	ee 0f       	add	r30, r30
    46de:	ff 1f       	adc	r31, r31
    46e0:	9a 95       	dec	r25
    46e2:	e1 f7       	brne	.-8      	; 0x46dc <unimap_translate+0x6>
    46e4:	e8 0f       	add	r30, r24
    46e6:	f1 1d       	adc	r31, r1
    46e8:	ec 58       	subi	r30, 0x8C	; 140
    46ea:	ff 4f       	sbci	r31, 0xFF	; 255
    46ec:	94 91       	lpm	r25, Z
#endif
    return (keypos_t) {
        .row = ((unimap_pos & 0xf0) >> 4),
        .col = (unimap_pos & 0x0f)
    };
}
    46ee:	89 2f       	mov	r24, r25
    46f0:	8f 70       	andi	r24, 0x0F	; 15
    46f2:	92 95       	swap	r25
    46f4:	9f 70       	andi	r25, 0x0F	; 15
    46f6:	08 95       	ret

000046f8 <action_for_key>:

/* Converts key to action */
__attribute__ ((weak))
action_t action_for_key(uint8_t layer, keypos_t key)
{
    46f8:	cf 93       	push	r28
    46fa:	c8 2f       	mov	r28, r24
    46fc:	cb 01       	movw	r24, r22
    keypos_t uni = unimap_translate(key);
    46fe:	0e 94 6b 23 	call	0x46d6	; 0x46d6 <unimap_translate>
    if ((uni.row << 4 | uni.col) == UNIMAP_NO) {
    4702:	29 2f       	mov	r18, r25
    4704:	30 e0       	ldi	r19, 0x00	; 0
    4706:	44 e0       	ldi	r20, 0x04	; 4
    4708:	22 0f       	add	r18, r18
    470a:	33 1f       	adc	r19, r19
    470c:	4a 95       	dec	r20
    470e:	e1 f7       	brne	.-8      	; 0x4708 <action_for_key+0x10>
    4710:	48 2f       	mov	r20, r24
    4712:	50 e0       	ldi	r21, 0x00	; 0
    4714:	28 2b       	or	r18, r24
    4716:	35 2b       	or	r19, r21
    4718:	20 38       	cpi	r18, 0x80	; 128
    471a:	31 05       	cpc	r19, r1
    471c:	21 f4       	brne	.+8      	; 0x4726 <action_for_key+0x2e>
        return (action_t)ACTION_NO;
    471e:	80 e0       	ldi	r24, 0x00	; 0
    4720:	90 e0       	ldi	r25, 0x00	; 0
#if defined(__AVR__)
    return (action_t)pgm_read_word(&actionmaps[(layer)][(uni.row & 0x7)][(uni.col)]);
#else
    return actionmaps[(layer)][(uni.row & 0x7)][(uni.col)];
#endif
}
    4722:	cf 91       	pop	r28
    4724:	08 95       	ret
    return (action_t)pgm_read_word(&actionmaps[(layer)][(uni.row & 0x7)][(uni.col)]);
    4726:	2c 2f       	mov	r18, r28
    4728:	30 e0       	ldi	r19, 0x00	; 0
    472a:	83 e0       	ldi	r24, 0x03	; 3
    472c:	22 0f       	add	r18, r18
    472e:	33 1f       	adc	r19, r19
    4730:	8a 95       	dec	r24
    4732:	e1 f7       	brne	.-8      	; 0x472c <action_for_key+0x34>
    4734:	e9 2f       	mov	r30, r25
    4736:	e7 70       	andi	r30, 0x07	; 7
    4738:	e2 0f       	add	r30, r18
    473a:	f3 2f       	mov	r31, r19
    473c:	f1 1d       	adc	r31, r1
    473e:	94 e0       	ldi	r25, 0x04	; 4
    4740:	ee 0f       	add	r30, r30
    4742:	ff 1f       	adc	r31, r31
    4744:	9a 95       	dec	r25
    4746:	e1 f7       	brne	.-8      	; 0x4740 <action_for_key+0x48>
    4748:	e4 0f       	add	r30, r20
    474a:	f5 1f       	adc	r31, r21
    474c:	ee 0f       	add	r30, r30
    474e:	ff 1f       	adc	r31, r31
    4750:	e0 50       	subi	r30, 0x00	; 0
    4752:	f8 49       	sbci	r31, 0x98	; 152
    4754:	85 91       	lpm	r24, Z+
    4756:	94 91       	lpm	r25, Z
    4758:	e4 cf       	rjmp	.-56     	; 0x4722 <action_for_key+0x2a>

0000475a <action_get_macro>:
/* Macro */
__attribute__ ((weak))
const macro_t *action_get_macro(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    return MACRO_NONE;
}
    475a:	90 e0       	ldi	r25, 0x00	; 0
    475c:	80 e0       	ldi	r24, 0x00	; 0
    475e:	08 95       	ret

00004760 <action_function>:

/* Function */
__attribute__ ((weak))
void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)
{
}
    4760:	08 95       	ret

00004762 <move_unit>:


static uint8_t move_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    4762:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <mousekey_accel>
    4766:	80 ff       	sbrs	r24, 0
    4768:	14 c0       	rjmp	.+40     	; 0x4792 <move_unit+0x30>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/4;
    476a:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <mk_max_speed>
    476e:	90 e0       	ldi	r25, 0x00	; 0
    4770:	65 e0       	ldi	r22, 0x05	; 5
    4772:	70 e0       	ldi	r23, 0x00	; 0
    4774:	0e 94 7e 2b 	call	0x56fc	; 0x56fc <__mulhi3>
    4778:	bc 01       	movw	r22, r24
    477a:	75 95       	asr	r23
    477c:	67 95       	ror	r22
    477e:	75 95       	asr	r23
    4780:	67 95       	ror	r22
    } else if (mousekey_repeat >= mk_time_to_max) {
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    4782:	60 38       	cpi	r22, 0x80	; 128
    4784:	71 05       	cpc	r23, r1
    4786:	c8 f5       	brcc	.+114    	; 0x47fa <move_unit+0x98>
    4788:	61 15       	cp	r22, r1
    478a:	71 05       	cpc	r23, r1
    478c:	c1 f1       	breq	.+112    	; 0x47fe <move_unit+0x9c>
    478e:	86 2f       	mov	r24, r22
    4790:	08 95       	ret
    } else if (mousekey_accel & (1<<1)) {
    4792:	81 ff       	sbrs	r24, 1
    4794:	0b c0       	rjmp	.+22     	; 0x47ac <move_unit+0x4a>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    4796:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <mk_max_speed>
    479a:	90 e0       	ldi	r25, 0x00	; 0
    479c:	65 e0       	ldi	r22, 0x05	; 5
    479e:	70 e0       	ldi	r23, 0x00	; 0
    47a0:	0e 94 7e 2b 	call	0x56fc	; 0x56fc <__mulhi3>
    47a4:	bc 01       	movw	r22, r24
    47a6:	75 95       	asr	r23
    47a8:	67 95       	ror	r22
    47aa:	eb cf       	rjmp	.-42     	; 0x4782 <move_unit+0x20>
    } else if (mousekey_accel & (1<<2)) {
    47ac:	82 ff       	sbrs	r24, 2
    47ae:	09 c0       	rjmp	.+18     	; 0x47c2 <move_unit+0x60>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    47b0:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <mk_max_speed>
    47b4:	90 e0       	ldi	r25, 0x00	; 0
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    47b6:	65 e0       	ldi	r22, 0x05	; 5
    47b8:	70 e0       	ldi	r23, 0x00	; 0
    47ba:	0e 94 7e 2b 	call	0x56fc	; 0x56fc <__mulhi3>
    47be:	bc 01       	movw	r22, r24
    47c0:	e0 cf       	rjmp	.-64     	; 0x4782 <move_unit+0x20>
    } else if (mousekey_repeat == 0) {
    47c2:	80 91 6b 03 	lds	r24, 0x036B	; 0x80036b <mousekey_repeat>
    47c6:	88 23       	and	r24, r24
    47c8:	a9 f0       	breq	.+42     	; 0x47f4 <move_unit+0x92>
    } else if (mousekey_repeat >= mk_time_to_max) {
    47ca:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <mk_time_to_max>
    47ce:	60 91 29 01 	lds	r22, 0x0129	; 0x800129 <mk_max_speed>
    47d2:	70 e0       	ldi	r23, 0x00	; 0
    47d4:	82 17       	cp	r24, r18
    47d6:	10 f0       	brcs	.+4      	; 0x47dc <move_unit+0x7a>
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    47d8:	cb 01       	movw	r24, r22
    47da:	ed cf       	rjmp	.-38     	; 0x47b6 <move_unit+0x54>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    47dc:	90 e0       	ldi	r25, 0x00	; 0
    47de:	0e 94 7e 2b 	call	0x56fc	; 0x56fc <__mulhi3>
    47e2:	65 e0       	ldi	r22, 0x05	; 5
    47e4:	70 e0       	ldi	r23, 0x00	; 0
    47e6:	0e 94 7e 2b 	call	0x56fc	; 0x56fc <__mulhi3>
    47ea:	62 2f       	mov	r22, r18
    47ec:	70 e0       	ldi	r23, 0x00	; 0
    47ee:	0e 94 8f 2b 	call	0x571e	; 0x571e <__divmodhi4>
    47f2:	c7 cf       	rjmp	.-114    	; 0x4782 <move_unit+0x20>
        unit = MOUSEKEY_MOVE_DELTA;
    47f4:	65 e0       	ldi	r22, 0x05	; 5
    47f6:	70 e0       	ldi	r23, 0x00	; 0
    47f8:	ca cf       	rjmp	.-108    	; 0x478e <move_unit+0x2c>
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    47fa:	8f e7       	ldi	r24, 0x7F	; 127
    47fc:	08 95       	ret
    47fe:	81 e0       	ldi	r24, 0x01	; 1
}
    4800:	08 95       	ret

00004802 <wheel_unit>:

static uint8_t wheel_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    4802:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <mousekey_accel>
    4806:	80 ff       	sbrs	r24, 0
    4808:	0c c0       	rjmp	.+24     	; 0x4822 <wheel_unit+0x20>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/4;
    480a:	60 91 27 01 	lds	r22, 0x0127	; 0x800127 <mk_wheel_max_speed>
    480e:	70 e0       	ldi	r23, 0x00	; 0
    4810:	75 95       	asr	r23
    4812:	67 95       	ror	r22
    4814:	75 95       	asr	r23
    4816:	67 95       	ror	r22
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    } else {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    4818:	61 15       	cp	r22, r1
    481a:	71 05       	cpc	r23, r1
    481c:	59 f1       	breq	.+86     	; 0x4874 <wheel_unit+0x72>
    481e:	86 2f       	mov	r24, r22
    4820:	08 95       	ret
    } else if (mousekey_accel & (1<<1)) {
    4822:	81 ff       	sbrs	r24, 1
    4824:	06 c0       	rjmp	.+12     	; 0x4832 <wheel_unit+0x30>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    4826:	60 91 27 01 	lds	r22, 0x0127	; 0x800127 <mk_wheel_max_speed>
    482a:	70 e0       	ldi	r23, 0x00	; 0
    482c:	75 95       	asr	r23
    482e:	67 95       	ror	r22
    4830:	f3 cf       	rjmp	.-26     	; 0x4818 <wheel_unit+0x16>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    4832:	60 91 27 01 	lds	r22, 0x0127	; 0x800127 <mk_wheel_max_speed>
    4836:	70 e0       	ldi	r23, 0x00	; 0
    } else if (mousekey_accel & (1<<2)) {
    4838:	82 fd       	sbrc	r24, 2
    483a:	0c c0       	rjmp	.+24     	; 0x4854 <wheel_unit+0x52>
    } else if (mousekey_repeat == 0) {
    483c:	60 91 6b 03 	lds	r22, 0x036B	; 0x80036b <mousekey_repeat>
    4840:	66 23       	and	r22, r22
    4842:	a9 f0       	breq	.+42     	; 0x486e <wheel_unit+0x6c>
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
    4844:	20 91 26 01 	lds	r18, 0x0126	; 0x800126 <mk_wheel_time_to_max>
    4848:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <mk_wheel_max_speed>
    484c:	90 e0       	ldi	r25, 0x00	; 0
    484e:	62 17       	cp	r22, r18
    4850:	30 f0       	brcs	.+12     	; 0x485e <wheel_unit+0x5c>
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    4852:	bc 01       	movw	r22, r24
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    4854:	60 38       	cpi	r22, 0x80	; 128
    4856:	71 05       	cpc	r23, r1
    4858:	f8 f2       	brcs	.-66     	; 0x4818 <wheel_unit+0x16>
    485a:	8f e7       	ldi	r24, 0x7F	; 127
    485c:	08 95       	ret
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    485e:	70 e0       	ldi	r23, 0x00	; 0
    4860:	0e 94 7e 2b 	call	0x56fc	; 0x56fc <__mulhi3>
    4864:	62 2f       	mov	r22, r18
    4866:	70 e0       	ldi	r23, 0x00	; 0
    4868:	0e 94 8f 2b 	call	0x571e	; 0x571e <__divmodhi4>
    486c:	f3 cf       	rjmp	.-26     	; 0x4854 <wheel_unit+0x52>
        unit = MOUSEKEY_WHEEL_DELTA;
    486e:	61 e0       	ldi	r22, 0x01	; 1
    4870:	70 e0       	ldi	r23, 0x00	; 0
    4872:	d5 cf       	rjmp	.-86     	; 0x481e <wheel_unit+0x1c>
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    4874:	81 e0       	ldi	r24, 0x01	; 1
}
    4876:	08 95       	ret

00004878 <mousekey_on>:
    mousekey_send();
}

void mousekey_on(uint8_t code)
{
    if      (code == KC_MS_UP)       mouse_report.y = move_unit() * -1;
    4878:	80 3f       	cpi	r24, 0xF0	; 240
    487a:	31 f4       	brne	.+12     	; 0x4888 <mousekey_on+0x10>
    487c:	0e 94 b1 23 	call	0x4762	; 0x4762 <move_unit>
    4880:	81 95       	neg	r24
    else if (code == KC_MS_DOWN)     mouse_report.y = move_unit();
    4882:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <mouse_report+0x2>
    4886:	08 95       	ret
    4888:	81 3f       	cpi	r24, 0xF1	; 241
    488a:	19 f4       	brne	.+6      	; 0x4892 <mousekey_on+0x1a>
    488c:	0e 94 b1 23 	call	0x4762	; 0x4762 <move_unit>
    4890:	f8 cf       	rjmp	.-16     	; 0x4882 <mousekey_on+0xa>
    else if (code == KC_MS_LEFT)     mouse_report.x = move_unit() * -1;
    4892:	82 3f       	cpi	r24, 0xF2	; 242
    4894:	31 f4       	brne	.+12     	; 0x48a2 <mousekey_on+0x2a>
    4896:	0e 94 b1 23 	call	0x4762	; 0x4762 <move_unit>
    489a:	81 95       	neg	r24
    else if (code == KC_MS_RIGHT)    mouse_report.x = move_unit();
    489c:	80 93 6d 03 	sts	0x036D, r24	; 0x80036d <mouse_report+0x1>
    48a0:	08 95       	ret
    48a2:	83 3f       	cpi	r24, 0xF3	; 243
    48a4:	19 f4       	brne	.+6      	; 0x48ac <mousekey_on+0x34>
    48a6:	0e 94 b1 23 	call	0x4762	; 0x4762 <move_unit>
    48aa:	f8 cf       	rjmp	.-16     	; 0x489c <mousekey_on+0x24>
    else if (code == KC_MS_WH_UP)    mouse_report.v = wheel_unit();
    48ac:	89 3f       	cpi	r24, 0xF9	; 249
    48ae:	29 f4       	brne	.+10     	; 0x48ba <mousekey_on+0x42>
    48b0:	0e 94 01 24 	call	0x4802	; 0x4802 <wheel_unit>
    else if (code == KC_MS_WH_DOWN)  mouse_report.v = wheel_unit() * -1;
    48b4:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <mouse_report+0x3>
    48b8:	08 95       	ret
    48ba:	8a 3f       	cpi	r24, 0xFA	; 250
    48bc:	21 f4       	brne	.+8      	; 0x48c6 <mousekey_on+0x4e>
    48be:	0e 94 01 24 	call	0x4802	; 0x4802 <wheel_unit>
    48c2:	81 95       	neg	r24
    48c4:	f7 cf       	rjmp	.-18     	; 0x48b4 <mousekey_on+0x3c>
    else if (code == KC_MS_WH_LEFT)  mouse_report.h = wheel_unit() * -1;
    48c6:	8b 3f       	cpi	r24, 0xFB	; 251
    48c8:	31 f4       	brne	.+12     	; 0x48d6 <mousekey_on+0x5e>
    48ca:	0e 94 01 24 	call	0x4802	; 0x4802 <wheel_unit>
    48ce:	81 95       	neg	r24
    else if (code == KC_MS_WH_RIGHT) mouse_report.h = wheel_unit();
    48d0:	80 93 70 03 	sts	0x0370, r24	; 0x800370 <mouse_report+0x4>
    48d4:	08 95       	ret
    48d6:	8c 3f       	cpi	r24, 0xFC	; 252
    48d8:	19 f4       	brne	.+6      	; 0x48e0 <mousekey_on+0x68>
    48da:	0e 94 01 24 	call	0x4802	; 0x4802 <wheel_unit>
    48de:	f8 cf       	rjmp	.-16     	; 0x48d0 <mousekey_on+0x58>
    else if (code == KC_MS_BTN1)     mouse_report.buttons |= MOUSE_BTN1;
    48e0:	84 3f       	cpi	r24, 0xF4	; 244
    48e2:	31 f4       	brne	.+12     	; 0x48f0 <mousekey_on+0x78>
    48e4:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <mouse_report>
    48e8:	81 60       	ori	r24, 0x01	; 1
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
    48ea:	80 93 6c 03 	sts	0x036C, r24	; 0x80036c <mouse_report>
    48ee:	08 95       	ret
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    48f0:	85 3f       	cpi	r24, 0xF5	; 245
    48f2:	21 f4       	brne	.+8      	; 0x48fc <mousekey_on+0x84>
    48f4:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <mouse_report>
    48f8:	82 60       	ori	r24, 0x02	; 2
    48fa:	f7 cf       	rjmp	.-18     	; 0x48ea <mousekey_on+0x72>
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    48fc:	86 3f       	cpi	r24, 0xF6	; 246
    48fe:	21 f4       	brne	.+8      	; 0x4908 <mousekey_on+0x90>
    4900:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <mouse_report>
    4904:	84 60       	ori	r24, 0x04	; 4
    4906:	f1 cf       	rjmp	.-30     	; 0x48ea <mousekey_on+0x72>
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    4908:	87 3f       	cpi	r24, 0xF7	; 247
    490a:	21 f4       	brne	.+8      	; 0x4914 <mousekey_on+0x9c>
    490c:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <mouse_report>
    4910:	88 60       	ori	r24, 0x08	; 8
    4912:	eb cf       	rjmp	.-42     	; 0x48ea <mousekey_on+0x72>
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
    4914:	88 3f       	cpi	r24, 0xF8	; 248
    4916:	21 f4       	brne	.+8      	; 0x4920 <mousekey_on+0xa8>
    4918:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <mouse_report>
    491c:	80 61       	ori	r24, 0x10	; 16
    491e:	e5 cf       	rjmp	.-54     	; 0x48ea <mousekey_on+0x72>
    else if (code == KC_MS_ACCEL0)   mousekey_accel |= (1<<0);
    4920:	8d 3f       	cpi	r24, 0xFD	; 253
    4922:	31 f4       	brne	.+12     	; 0x4930 <mousekey_on+0xb8>
    4924:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <mousekey_accel>
    4928:	81 60       	ori	r24, 0x01	; 1
    else if (code == KC_MS_ACCEL1)   mousekey_accel |= (1<<1);
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
    492a:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <mousekey_accel>
}
    492e:	08 95       	ret
    else if (code == KC_MS_ACCEL1)   mousekey_accel |= (1<<1);
    4930:	8e 3f       	cpi	r24, 0xFE	; 254
    4932:	21 f4       	brne	.+8      	; 0x493c <mousekey_on+0xc4>
    4934:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <mousekey_accel>
    4938:	82 60       	ori	r24, 0x02	; 2
    493a:	f7 cf       	rjmp	.-18     	; 0x492a <mousekey_on+0xb2>
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
    493c:	8f 3f       	cpi	r24, 0xFF	; 255
    493e:	b9 f7       	brne	.-18     	; 0x492e <mousekey_on+0xb6>
    4940:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <mousekey_accel>
    4944:	84 60       	ori	r24, 0x04	; 4
    4946:	f1 cf       	rjmp	.-30     	; 0x492a <mousekey_on+0xb2>

00004948 <mousekey_off>:

void mousekey_off(uint8_t code)
{
    if      (code == KC_MS_UP       && mouse_report.y < 0) mouse_report.y = 0;
    4948:	90 91 6d 03 	lds	r25, 0x036D	; 0x80036d <mouse_report+0x1>
    494c:	80 3f       	cpi	r24, 0xF0	; 240
    494e:	41 f4       	brne	.+16     	; 0x4960 <mousekey_off+0x18>
    4950:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <mouse_report+0x2>
    4954:	87 fd       	sbrc	r24, 7
    4956:	10 92 6e 03 	sts	0x036E, r1	; 0x80036e <mouse_report+0x2>
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    495a:	99 23       	and	r25, r25
    495c:	71 f0       	breq	.+28     	; 0x497a <mousekey_off+0x32>
        mousekey_repeat = 0;
}
    495e:	08 95       	ret
    else if (code == KC_MS_DOWN     && mouse_report.y > 0) mouse_report.y = 0;
    4960:	81 3f       	cpi	r24, 0xF1	; 241
    4962:	29 f4       	brne	.+10     	; 0x496e <mousekey_off+0x26>
    4964:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <mouse_report+0x2>
    4968:	18 16       	cp	r1, r24
    496a:	ac f3       	brlt	.-22     	; 0x4956 <mousekey_off+0xe>
    496c:	f6 cf       	rjmp	.-20     	; 0x495a <mousekey_off+0x12>
    else if (code == KC_MS_LEFT     && mouse_report.x < 0) mouse_report.x = 0;
    496e:	82 3f       	cpi	r24, 0xF2	; 242
    4970:	81 f4       	brne	.+32     	; 0x4992 <mousekey_off+0x4a>
    4972:	97 ff       	sbrs	r25, 7
    4974:	f2 cf       	rjmp	.-28     	; 0x495a <mousekey_off+0x12>
    4976:	10 92 6d 03 	sts	0x036D, r1	; 0x80036d <mouse_report+0x1>
    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    497a:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <mouse_report+0x2>
    497e:	90 91 6f 03 	lds	r25, 0x036F	; 0x80036f <mouse_report+0x3>
    4982:	89 2b       	or	r24, r25
    4984:	90 91 70 03 	lds	r25, 0x0370	; 0x800370 <mouse_report+0x4>
    4988:	89 2b       	or	r24, r25
    498a:	49 f7       	brne	.-46     	; 0x495e <mousekey_off+0x16>
        mousekey_repeat = 0;
    498c:	10 92 6b 03 	sts	0x036B, r1	; 0x80036b <mousekey_repeat>
}
    4990:	08 95       	ret
    else if (code == KC_MS_RIGHT    && mouse_report.x > 0) mouse_report.x = 0;
    4992:	83 3f       	cpi	r24, 0xF3	; 243
    4994:	19 f4       	brne	.+6      	; 0x499c <mousekey_off+0x54>
    4996:	19 16       	cp	r1, r25
    4998:	74 f3       	brlt	.-36     	; 0x4976 <mousekey_off+0x2e>
    499a:	df cf       	rjmp	.-66     	; 0x495a <mousekey_off+0x12>
    else if (code == KC_MS_WH_UP    && mouse_report.v > 0) mouse_report.v = 0;
    499c:	89 3f       	cpi	r24, 0xF9	; 249
    499e:	39 f4       	brne	.+14     	; 0x49ae <mousekey_off+0x66>
    49a0:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <mouse_report+0x3>
    49a4:	18 16       	cp	r1, r24
    49a6:	cc f6       	brge	.-78     	; 0x495a <mousekey_off+0x12>
    49a8:	10 92 6f 03 	sts	0x036F, r1	; 0x80036f <mouse_report+0x3>
    49ac:	d6 cf       	rjmp	.-84     	; 0x495a <mousekey_off+0x12>
    else if (code == KC_MS_WH_DOWN  && mouse_report.v < 0) mouse_report.v = 0;
    49ae:	8a 3f       	cpi	r24, 0xFA	; 250
    49b0:	29 f4       	brne	.+10     	; 0x49bc <mousekey_off+0x74>
    49b2:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <mouse_report+0x3>
    49b6:	87 ff       	sbrs	r24, 7
    49b8:	d0 cf       	rjmp	.-96     	; 0x495a <mousekey_off+0x12>
    49ba:	f6 cf       	rjmp	.-20     	; 0x49a8 <mousekey_off+0x60>
    else if (code == KC_MS_WH_LEFT  && mouse_report.h < 0) mouse_report.h = 0;
    49bc:	8b 3f       	cpi	r24, 0xFB	; 251
    49be:	39 f4       	brne	.+14     	; 0x49ce <mousekey_off+0x86>
    49c0:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <mouse_report+0x4>
    49c4:	87 ff       	sbrs	r24, 7
    49c6:	c9 cf       	rjmp	.-110    	; 0x495a <mousekey_off+0x12>
    49c8:	10 92 70 03 	sts	0x0370, r1	; 0x800370 <mouse_report+0x4>
    49cc:	c6 cf       	rjmp	.-116    	; 0x495a <mousekey_off+0x12>
    else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0) mouse_report.h = 0;
    49ce:	8c 3f       	cpi	r24, 0xFC	; 252
    49d0:	29 f4       	brne	.+10     	; 0x49dc <mousekey_off+0x94>
    49d2:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <mouse_report+0x4>
    49d6:	18 16       	cp	r1, r24
    49d8:	bc f3       	brlt	.-18     	; 0x49c8 <mousekey_off+0x80>
    49da:	bf cf       	rjmp	.-130    	; 0x495a <mousekey_off+0x12>
    else if (code == KC_MS_BTN1) mouse_report.buttons &= ~MOUSE_BTN1;
    49dc:	84 3f       	cpi	r24, 0xF4	; 244
    49de:	31 f4       	brne	.+12     	; 0x49ec <mousekey_off+0xa4>
    49e0:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <mouse_report>
    49e4:	8e 7f       	andi	r24, 0xFE	; 254
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    49e6:	80 93 6c 03 	sts	0x036C, r24	; 0x80036c <mouse_report>
    49ea:	b7 cf       	rjmp	.-146    	; 0x495a <mousekey_off+0x12>
    else if (code == KC_MS_BTN2) mouse_report.buttons &= ~MOUSE_BTN2;
    49ec:	85 3f       	cpi	r24, 0xF5	; 245
    49ee:	21 f4       	brne	.+8      	; 0x49f8 <mousekey_off+0xb0>
    49f0:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <mouse_report>
    49f4:	8d 7f       	andi	r24, 0xFD	; 253
    49f6:	f7 cf       	rjmp	.-18     	; 0x49e6 <mousekey_off+0x9e>
    else if (code == KC_MS_BTN3) mouse_report.buttons &= ~MOUSE_BTN3;
    49f8:	86 3f       	cpi	r24, 0xF6	; 246
    49fa:	21 f4       	brne	.+8      	; 0x4a04 <mousekey_off+0xbc>
    49fc:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <mouse_report>
    4a00:	8b 7f       	andi	r24, 0xFB	; 251
    4a02:	f1 cf       	rjmp	.-30     	; 0x49e6 <mousekey_off+0x9e>
    else if (code == KC_MS_BTN4) mouse_report.buttons &= ~MOUSE_BTN4;
    4a04:	87 3f       	cpi	r24, 0xF7	; 247
    4a06:	21 f4       	brne	.+8      	; 0x4a10 <mousekey_off+0xc8>
    4a08:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <mouse_report>
    4a0c:	87 7f       	andi	r24, 0xF7	; 247
    4a0e:	eb cf       	rjmp	.-42     	; 0x49e6 <mousekey_off+0x9e>
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    4a10:	88 3f       	cpi	r24, 0xF8	; 248
    4a12:	21 f4       	brne	.+8      	; 0x4a1c <mousekey_off+0xd4>
    4a14:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <mouse_report>
    4a18:	8f 7e       	andi	r24, 0xEF	; 239
    4a1a:	e5 cf       	rjmp	.-54     	; 0x49e6 <mousekey_off+0x9e>
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    4a1c:	8d 3f       	cpi	r24, 0xFD	; 253
    4a1e:	31 f4       	brne	.+12     	; 0x4a2c <mousekey_off+0xe4>
    4a20:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <mousekey_accel>
    4a24:	8e 7f       	andi	r24, 0xFE	; 254
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);
    4a26:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <mousekey_accel>
    4a2a:	97 cf       	rjmp	.-210    	; 0x495a <mousekey_off+0x12>
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    4a2c:	8e 3f       	cpi	r24, 0xFE	; 254
    4a2e:	21 f4       	brne	.+8      	; 0x4a38 <mousekey_off+0xf0>
    4a30:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <mousekey_accel>
    4a34:	8d 7f       	andi	r24, 0xFD	; 253
    4a36:	f7 cf       	rjmp	.-18     	; 0x4a26 <mousekey_off+0xde>
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);
    4a38:	8f 3f       	cpi	r24, 0xFF	; 255
    4a3a:	09 f0       	breq	.+2      	; 0x4a3e <mousekey_off+0xf6>
    4a3c:	8e cf       	rjmp	.-228    	; 0x495a <mousekey_off+0x12>
    4a3e:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <mousekey_accel>
    4a42:	8b 7f       	andi	r24, 0xFB	; 251
    4a44:	f0 cf       	rjmp	.-32     	; 0x4a26 <mousekey_off+0xde>

00004a46 <mousekey_send>:
    mousekey_accel = 0;
}

static void mousekey_debug(void)
{
    if (!debug_mouse) return;
    4a46:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <debug_config>
    4a4a:	83 ff       	sbrs	r24, 3
    4a4c:	7e c0       	rjmp	.+252    	; 0x4b4a <mousekey_send+0x104>
    print("mousekey [btn|x y v h](rep/acl): [");
    4a4e:	85 ec       	ldi	r24, 0xC5	; 197
    4a50:	94 e0       	ldi	r25, 0x04	; 4
    4a52:	0e 94 01 06 	call	0xc02	; 0xc02 <xputs>
    phex(mouse_report.buttons); print("|");
    4a56:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <mouse_report>
    4a5a:	1f 92       	push	r1
    4a5c:	8f 93       	push	r24
    4a5e:	80 ec       	ldi	r24, 0xC0	; 192
    4a60:	94 e0       	ldi	r25, 0x04	; 4
    4a62:	9f 93       	push	r25
    4a64:	8f 93       	push	r24
    4a66:	0e 94 9a 06 	call	0xd34	; 0xd34 <__xprintf>
    4a6a:	8e eb       	ldi	r24, 0xBE	; 190
    4a6c:	94 e0       	ldi	r25, 0x04	; 4
    4a6e:	0e 94 01 06 	call	0xc02	; 0xc02 <xputs>
    print_decs(mouse_report.x); print(" ");
    4a72:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <mouse_report+0x1>
    4a76:	28 2f       	mov	r18, r24
    4a78:	08 2e       	mov	r0, r24
    4a7a:	00 0c       	add	r0, r0
    4a7c:	33 0b       	sbc	r19, r19
    4a7e:	3f 93       	push	r19
    4a80:	8f 93       	push	r24
    4a82:	8b eb       	ldi	r24, 0xBB	; 187
    4a84:	94 e0       	ldi	r25, 0x04	; 4
    4a86:	9f 93       	push	r25
    4a88:	8f 93       	push	r24
    4a8a:	0e 94 9a 06 	call	0xd34	; 0xd34 <__xprintf>
    4a8e:	89 eb       	ldi	r24, 0xB9	; 185
    4a90:	94 e0       	ldi	r25, 0x04	; 4
    4a92:	0e 94 01 06 	call	0xc02	; 0xc02 <xputs>
    print_decs(mouse_report.y); print(" ");
    4a96:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <mouse_report+0x2>
    4a9a:	28 2f       	mov	r18, r24
    4a9c:	08 2e       	mov	r0, r24
    4a9e:	00 0c       	add	r0, r0
    4aa0:	33 0b       	sbc	r19, r19
    4aa2:	3f 93       	push	r19
    4aa4:	8f 93       	push	r24
    4aa6:	86 eb       	ldi	r24, 0xB6	; 182
    4aa8:	94 e0       	ldi	r25, 0x04	; 4
    4aaa:	9f 93       	push	r25
    4aac:	8f 93       	push	r24
    4aae:	0e 94 9a 06 	call	0xd34	; 0xd34 <__xprintf>
    4ab2:	84 eb       	ldi	r24, 0xB4	; 180
    4ab4:	94 e0       	ldi	r25, 0x04	; 4
    4ab6:	0e 94 01 06 	call	0xc02	; 0xc02 <xputs>
    print_decs(mouse_report.v); print(" ");
    4aba:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <mouse_report+0x3>
    4abe:	28 2f       	mov	r18, r24
    4ac0:	08 2e       	mov	r0, r24
    4ac2:	00 0c       	add	r0, r0
    4ac4:	33 0b       	sbc	r19, r19
    4ac6:	3f 93       	push	r19
    4ac8:	8f 93       	push	r24
    4aca:	81 eb       	ldi	r24, 0xB1	; 177
    4acc:	94 e0       	ldi	r25, 0x04	; 4
    4ace:	9f 93       	push	r25
    4ad0:	8f 93       	push	r24
    4ad2:	0e 94 9a 06 	call	0xd34	; 0xd34 <__xprintf>
    4ad6:	8f ea       	ldi	r24, 0xAF	; 175
    4ad8:	94 e0       	ldi	r25, 0x04	; 4
    4ada:	0e 94 01 06 	call	0xc02	; 0xc02 <xputs>
    print_decs(mouse_report.h); print("](");
    4ade:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <mouse_report+0x4>
    4ae2:	28 2f       	mov	r18, r24
    4ae4:	08 2e       	mov	r0, r24
    4ae6:	00 0c       	add	r0, r0
    4ae8:	33 0b       	sbc	r19, r19
    4aea:	3f 93       	push	r19
    4aec:	8f 93       	push	r24
    4aee:	8c ea       	ldi	r24, 0xAC	; 172
    4af0:	94 e0       	ldi	r25, 0x04	; 4
    4af2:	9f 93       	push	r25
    4af4:	8f 93       	push	r24
    4af6:	0e 94 9a 06 	call	0xd34	; 0xd34 <__xprintf>
    4afa:	89 ea       	ldi	r24, 0xA9	; 169
    4afc:	94 e0       	ldi	r25, 0x04	; 4
    4afe:	0e 94 01 06 	call	0xc02	; 0xc02 <xputs>
    print_dec(mousekey_repeat); print("/");
    4b02:	80 91 6b 03 	lds	r24, 0x036B	; 0x80036b <mousekey_repeat>
    4b06:	1f 92       	push	r1
    4b08:	8f 93       	push	r24
    4b0a:	86 ea       	ldi	r24, 0xA6	; 166
    4b0c:	94 e0       	ldi	r25, 0x04	; 4
    4b0e:	9f 93       	push	r25
    4b10:	8f 93       	push	r24
    4b12:	0e 94 9a 06 	call	0xd34	; 0xd34 <__xprintf>
    4b16:	84 ea       	ldi	r24, 0xA4	; 164
    4b18:	94 e0       	ldi	r25, 0x04	; 4
    4b1a:	0e 94 01 06 	call	0xc02	; 0xc02 <xputs>
    print_dec(mousekey_accel); print(")\n");
    4b1e:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <mousekey_accel>
    4b22:	1f 92       	push	r1
    4b24:	8f 93       	push	r24
    4b26:	81 ea       	ldi	r24, 0xA1	; 161
    4b28:	94 e0       	ldi	r25, 0x04	; 4
    4b2a:	9f 93       	push	r25
    4b2c:	8f 93       	push	r24
    4b2e:	0e 94 9a 06 	call	0xd34	; 0xd34 <__xprintf>
    4b32:	8e e9       	ldi	r24, 0x9E	; 158
    4b34:	94 e0       	ldi	r25, 0x04	; 4
    4b36:	0e 94 01 06 	call	0xc02	; 0xc02 <xputs>
    4b3a:	8d b7       	in	r24, 0x3d	; 61
    4b3c:	9e b7       	in	r25, 0x3e	; 62
    4b3e:	4c 96       	adiw	r24, 0x1c	; 28
    4b40:	0f b6       	in	r0, 0x3f	; 63
    4b42:	f8 94       	cli
    4b44:	9e bf       	out	0x3e, r25	; 62
    4b46:	0f be       	out	0x3f, r0	; 63
    4b48:	8d bf       	out	0x3d, r24	; 61
    host_mouse_send(&mouse_report);
    4b4a:	8c e6       	ldi	r24, 0x6C	; 108
    4b4c:	93 e0       	ldi	r25, 0x03	; 3
    4b4e:	0e 94 d6 14 	call	0x29ac	; 0x29ac <host_mouse_send>
    last_timer = timer_read();
    4b52:	0e 94 d5 22 	call	0x45aa	; 0x45aa <timer_read>
    4b56:	90 93 69 03 	sts	0x0369, r25	; 0x800369 <last_timer+0x1>
    4b5a:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <last_timer>
}
    4b5e:	08 95       	ret

00004b60 <mousekey_task>:
{
    4b60:	1f 93       	push	r17
    4b62:	cf 93       	push	r28
    4b64:	df 93       	push	r29
    4b66:	00 d0       	rcall	.+0      	; 0x4b68 <mousekey_task+0x8>
    4b68:	00 d0       	rcall	.+0      	; 0x4b6a <mousekey_task+0xa>
    4b6a:	00 d0       	rcall	.+0      	; 0x4b6c <mousekey_task+0xc>
    4b6c:	cd b7       	in	r28, 0x3d	; 61
    4b6e:	de b7       	in	r29, 0x3e	; 62
    if (timer_elapsed(last_timer) < (mousekey_repeat ? mk_interval : mk_delay*10))
    4b70:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <last_timer>
    4b74:	90 91 69 03 	lds	r25, 0x0369	; 0x800369 <last_timer+0x1>
    4b78:	0e 94 01 23 	call	0x4602	; 0x4602 <timer_elapsed>
    4b7c:	fc 01       	movw	r30, r24
    4b7e:	20 91 6b 03 	lds	r18, 0x036B	; 0x80036b <mousekey_repeat>
    4b82:	40 91 2a 01 	lds	r20, 0x012A	; 0x80012a <mk_interval>
    4b86:	50 e0       	ldi	r21, 0x00	; 0
    4b88:	21 11       	cpse	r18, r1
    4b8a:	08 c0       	rjmp	.+16     	; 0x4b9c <mousekey_task+0x3c>
    4b8c:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <mk_delay>
    4b90:	90 e0       	ldi	r25, 0x00	; 0
    4b92:	6a e0       	ldi	r22, 0x0A	; 10
    4b94:	70 e0       	ldi	r23, 0x00	; 0
    4b96:	0e 94 7e 2b 	call	0x56fc	; 0x56fc <__mulhi3>
    4b9a:	ac 01       	movw	r20, r24
    4b9c:	e4 17       	cp	r30, r20
    4b9e:	f5 07       	cpc	r31, r21
    4ba0:	88 f0       	brcs	.+34     	; 0x4bc4 <mousekey_task+0x64>
    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    4ba2:	90 91 6d 03 	lds	r25, 0x036D	; 0x80036d <mouse_report+0x1>
    4ba6:	30 91 6e 03 	lds	r19, 0x036E	; 0x80036e <mouse_report+0x2>
    4baa:	39 83       	std	Y+1, r19	; 0x01
    4bac:	10 91 6f 03 	lds	r17, 0x036F	; 0x80036f <mouse_report+0x3>
    4bb0:	40 91 70 03 	lds	r20, 0x0370	; 0x800370 <mouse_report+0x4>
    4bb4:	4e 83       	std	Y+6, r20	; 0x06
    4bb6:	91 11       	cpse	r25, r1
    4bb8:	0f c0       	rjmp	.+30     	; 0x4bd8 <mousekey_task+0x78>
    4bba:	83 2f       	mov	r24, r19
    4bbc:	81 2b       	or	r24, r17
    4bbe:	84 2b       	or	r24, r20
    4bc0:	09 f0       	breq	.+2      	; 0x4bc4 <mousekey_task+0x64>
    4bc2:	b2 c0       	rjmp	.+356    	; 0x4d28 <mousekey_task+0x1c8>
}
    4bc4:	26 96       	adiw	r28, 0x06	; 6
    4bc6:	0f b6       	in	r0, 0x3f	; 63
    4bc8:	f8 94       	cli
    4bca:	de bf       	out	0x3e, r29	; 62
    4bcc:	0f be       	out	0x3f, r0	; 63
    4bce:	cd bf       	out	0x3d, r28	; 61
    4bd0:	df 91       	pop	r29
    4bd2:	cf 91       	pop	r28
    4bd4:	1f 91       	pop	r17
    4bd6:	08 95       	ret
    if (mousekey_repeat != UINT8_MAX)
    4bd8:	2f 3f       	cpi	r18, 0xFF	; 255
    4bda:	19 f0       	breq	.+6      	; 0x4be2 <mousekey_task+0x82>
        mousekey_repeat++;
    4bdc:	2f 5f       	subi	r18, 0xFF	; 255
    4bde:	20 93 6b 03 	sts	0x036B, r18	; 0x80036b <mousekey_repeat>
    if (mouse_report.x > 0) mouse_report.x = move_unit();
    4be2:	19 16       	cp	r1, r25
    4be4:	24 f4       	brge	.+8      	; 0x4bee <mousekey_task+0x8e>
    4be6:	0e 94 b1 23 	call	0x4762	; 0x4762 <move_unit>
    4bea:	80 93 6d 03 	sts	0x036D, r24	; 0x80036d <mouse_report+0x1>
    if (mouse_report.x < 0) mouse_report.x = move_unit() * -1;
    4bee:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <mouse_report+0x1>
    4bf2:	87 ff       	sbrs	r24, 7
    4bf4:	05 c0       	rjmp	.+10     	; 0x4c00 <mousekey_task+0xa0>
    4bf6:	0e 94 b1 23 	call	0x4762	; 0x4762 <move_unit>
    4bfa:	81 95       	neg	r24
    4bfc:	80 93 6d 03 	sts	0x036D, r24	; 0x80036d <mouse_report+0x1>
    if (mouse_report.y > 0) mouse_report.y = move_unit();
    4c00:	59 81       	ldd	r21, Y+1	; 0x01
    4c02:	15 16       	cp	r1, r21
    4c04:	24 f4       	brge	.+8      	; 0x4c0e <mousekey_task+0xae>
    4c06:	0e 94 b1 23 	call	0x4762	; 0x4762 <move_unit>
    4c0a:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <mouse_report+0x2>
    if (mouse_report.y < 0) mouse_report.y = move_unit() * -1;
    4c0e:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <mouse_report+0x2>
    4c12:	87 ff       	sbrs	r24, 7
    4c14:	05 c0       	rjmp	.+10     	; 0x4c20 <mousekey_task+0xc0>
    4c16:	0e 94 b1 23 	call	0x4762	; 0x4762 <move_unit>
    4c1a:	81 95       	neg	r24
    4c1c:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <mouse_report+0x2>
    if (mouse_report.x && mouse_report.y) {
    4c20:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <mouse_report+0x1>
    4c24:	88 23       	and	r24, r24
    4c26:	09 f4       	brne	.+2      	; 0x4c2a <mousekey_task+0xca>
    4c28:	55 c0       	rjmp	.+170    	; 0x4cd4 <mousekey_task+0x174>
    4c2a:	90 91 6e 03 	lds	r25, 0x036E	; 0x80036e <mouse_report+0x2>
    4c2e:	9d 83       	std	Y+5, r25	; 0x05
    4c30:	99 23       	and	r25, r25
    4c32:	09 f4       	brne	.+2      	; 0x4c36 <mousekey_task+0xd6>
    4c34:	4f c0       	rjmp	.+158    	; 0x4cd4 <mousekey_task+0x174>
        mouse_report.x *= 0.7;
    4c36:	28 2f       	mov	r18, r24
    4c38:	88 0f       	add	r24, r24
    4c3a:	33 0b       	sbc	r19, r19
    4c3c:	44 0b       	sbc	r20, r20
    4c3e:	55 0b       	sbc	r21, r21
    4c40:	29 83       	std	Y+1, r18	; 0x01
    4c42:	3a 83       	std	Y+2, r19	; 0x02
    4c44:	4b 83       	std	Y+3, r20	; 0x03
    4c46:	5c 83       	std	Y+4, r21	; 0x04
    4c48:	ca 01       	movw	r24, r20
    4c4a:	b9 01       	movw	r22, r18
    4c4c:	0e 94 7d 2a 	call	0x54fa	; 0x54fa <__floatsisf>
    4c50:	23 e3       	ldi	r18, 0x33	; 51
    4c52:	33 e3       	ldi	r19, 0x33	; 51
    4c54:	43 e3       	ldi	r20, 0x33	; 51
    4c56:	5f e3       	ldi	r21, 0x3F	; 63
    4c58:	69 83       	std	Y+1, r22	; 0x01
    4c5a:	7a 83       	std	Y+2, r23	; 0x02
    4c5c:	8b 83       	std	Y+3, r24	; 0x03
    4c5e:	9c 83       	std	Y+4, r25	; 0x04
    4c60:	69 81       	ldd	r22, Y+1	; 0x01
    4c62:	7a 81       	ldd	r23, Y+2	; 0x02
    4c64:	8b 81       	ldd	r24, Y+3	; 0x03
    4c66:	9c 81       	ldd	r25, Y+4	; 0x04
    4c68:	0e 94 e1 2a 	call	0x55c2	; 0x55c2 <__mulsf3>
    4c6c:	69 83       	std	Y+1, r22	; 0x01
    4c6e:	7a 83       	std	Y+2, r23	; 0x02
    4c70:	8b 83       	std	Y+3, r24	; 0x03
    4c72:	9c 83       	std	Y+4, r25	; 0x04
    4c74:	69 81       	ldd	r22, Y+1	; 0x01
    4c76:	7a 81       	ldd	r23, Y+2	; 0x02
    4c78:	8b 81       	ldd	r24, Y+3	; 0x03
    4c7a:	9c 81       	ldd	r25, Y+4	; 0x04
    4c7c:	0e 94 45 2a 	call	0x548a	; 0x548a <__fixsfsi>
    4c80:	60 93 6d 03 	sts	0x036D, r22	; 0x80036d <mouse_report+0x1>
        mouse_report.y *= 0.7;
    4c84:	8d 81       	ldd	r24, Y+5	; 0x05
    4c86:	08 2e       	mov	r0, r24
    4c88:	00 0c       	add	r0, r0
    4c8a:	99 0b       	sbc	r25, r25
    4c8c:	aa 0b       	sbc	r26, r26
    4c8e:	bb 0b       	sbc	r27, r27
    4c90:	89 83       	std	Y+1, r24	; 0x01
    4c92:	9a 83       	std	Y+2, r25	; 0x02
    4c94:	ab 83       	std	Y+3, r26	; 0x03
    4c96:	bc 83       	std	Y+4, r27	; 0x04
    4c98:	bc 01       	movw	r22, r24
    4c9a:	cd 01       	movw	r24, r26
    4c9c:	0e 94 7d 2a 	call	0x54fa	; 0x54fa <__floatsisf>
    4ca0:	23 e3       	ldi	r18, 0x33	; 51
    4ca2:	33 e3       	ldi	r19, 0x33	; 51
    4ca4:	43 e3       	ldi	r20, 0x33	; 51
    4ca6:	5f e3       	ldi	r21, 0x3F	; 63
    4ca8:	69 83       	std	Y+1, r22	; 0x01
    4caa:	7a 83       	std	Y+2, r23	; 0x02
    4cac:	8b 83       	std	Y+3, r24	; 0x03
    4cae:	9c 83       	std	Y+4, r25	; 0x04
    4cb0:	69 81       	ldd	r22, Y+1	; 0x01
    4cb2:	7a 81       	ldd	r23, Y+2	; 0x02
    4cb4:	8b 81       	ldd	r24, Y+3	; 0x03
    4cb6:	9c 81       	ldd	r25, Y+4	; 0x04
    4cb8:	0e 94 e1 2a 	call	0x55c2	; 0x55c2 <__mulsf3>
    4cbc:	69 83       	std	Y+1, r22	; 0x01
    4cbe:	7a 83       	std	Y+2, r23	; 0x02
    4cc0:	8b 83       	std	Y+3, r24	; 0x03
    4cc2:	9c 83       	std	Y+4, r25	; 0x04
    4cc4:	69 81       	ldd	r22, Y+1	; 0x01
    4cc6:	7a 81       	ldd	r23, Y+2	; 0x02
    4cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    4cca:	9c 81       	ldd	r25, Y+4	; 0x04
    4ccc:	0e 94 45 2a 	call	0x548a	; 0x548a <__fixsfsi>
    4cd0:	60 93 6e 03 	sts	0x036E, r22	; 0x80036e <mouse_report+0x2>
    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    4cd4:	11 16       	cp	r1, r17
    4cd6:	24 f4       	brge	.+8      	; 0x4ce0 <mousekey_task+0x180>
    4cd8:	0e 94 01 24 	call	0x4802	; 0x4802 <wheel_unit>
    4cdc:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <mouse_report+0x3>
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    4ce0:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <mouse_report+0x3>
    4ce4:	87 ff       	sbrs	r24, 7
    4ce6:	05 c0       	rjmp	.+10     	; 0x4cf2 <mousekey_task+0x192>
    4ce8:	0e 94 01 24 	call	0x4802	; 0x4802 <wheel_unit>
    4cec:	81 95       	neg	r24
    4cee:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <mouse_report+0x3>
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    4cf2:	9e 81       	ldd	r25, Y+6	; 0x06
    4cf4:	19 16       	cp	r1, r25
    4cf6:	24 f4       	brge	.+8      	; 0x4d00 <mousekey_task+0x1a0>
    4cf8:	0e 94 01 24 	call	0x4802	; 0x4802 <wheel_unit>
    4cfc:	80 93 70 03 	sts	0x0370, r24	; 0x800370 <mouse_report+0x4>
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;
    4d00:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <mouse_report+0x4>
    4d04:	87 ff       	sbrs	r24, 7
    4d06:	05 c0       	rjmp	.+10     	; 0x4d12 <mousekey_task+0x1b2>
    4d08:	0e 94 01 24 	call	0x4802	; 0x4802 <wheel_unit>
    4d0c:	81 95       	neg	r24
    4d0e:	80 93 70 03 	sts	0x0370, r24	; 0x800370 <mouse_report+0x4>
}
    4d12:	26 96       	adiw	r28, 0x06	; 6
    4d14:	0f b6       	in	r0, 0x3f	; 63
    4d16:	f8 94       	cli
    4d18:	de bf       	out	0x3e, r29	; 62
    4d1a:	0f be       	out	0x3f, r0	; 63
    4d1c:	cd bf       	out	0x3d, r28	; 61
    4d1e:	df 91       	pop	r29
    4d20:	cf 91       	pop	r28
    4d22:	1f 91       	pop	r17
    mousekey_send();
    4d24:	0c 94 23 25 	jmp	0x4a46	; 0x4a46 <mousekey_send>
    if (mousekey_repeat != UINT8_MAX)
    4d28:	2f 3f       	cpi	r18, 0xFF	; 255
    4d2a:	09 f0       	breq	.+2      	; 0x4d2e <mousekey_task+0x1ce>
    4d2c:	57 cf       	rjmp	.-338    	; 0x4bdc <mousekey_task+0x7c>
    4d2e:	68 cf       	rjmp	.-304    	; 0x4c00 <mousekey_task+0xa0>

00004d30 <mousekey_clear>:
    mouse_report = (report_mouse_t){};
    4d30:	85 e0       	ldi	r24, 0x05	; 5
    4d32:	ec e6       	ldi	r30, 0x6C	; 108
    4d34:	f3 e0       	ldi	r31, 0x03	; 3
    4d36:	df 01       	movw	r26, r30
    4d38:	1d 92       	st	X+, r1
    4d3a:	8a 95       	dec	r24
    4d3c:	e9 f7       	brne	.-6      	; 0x4d38 <mousekey_clear+0x8>
    mousekey_repeat = 0;
    4d3e:	10 92 6b 03 	sts	0x036B, r1	; 0x80036b <mousekey_repeat>
    mousekey_accel = 0;
    4d42:	10 92 6a 03 	sts	0x036A, r1	; 0x80036a <mousekey_accel>
}
    4d46:	08 95       	ret

00004d48 <mousekey_console_help>:
    }
}

static void mousekey_console_help(void)
{
    print("\n\t- Mousekey -\n"
    4d48:	88 ee       	ldi	r24, 0xE8	; 232
    4d4a:	96 e0       	ldi	r25, 0x06	; 6
    4d4c:	0e 94 01 06 	call	0xc02	; 0xc02 <xputs>
          "down:	-1\n"
          "pgup:	+10\n"
          "pgdown:	-10\n"
          "\n"
          "speed = delta * max_speed * (repeat / time_to_max)\n");
    xprintf("where delta: cursor=%d, wheel=%d\n" 
    4d50:	1f 92       	push	r1
    4d52:	81 e0       	ldi	r24, 0x01	; 1
    4d54:	8f 93       	push	r24
    4d56:	1f 92       	push	r1
    4d58:	85 e0       	ldi	r24, 0x05	; 5
    4d5a:	8f 93       	push	r24
    4d5c:	8a e9       	ldi	r24, 0x9A	; 154
    4d5e:	96 e0       	ldi	r25, 0x06	; 6
    4d60:	9f 93       	push	r25
    4d62:	8f 93       	push	r24
    4d64:	0e 94 9a 06 	call	0xd34	; 0xd34 <__xprintf>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}
    4d68:	0f 90       	pop	r0
    4d6a:	0f 90       	pop	r0
    4d6c:	0f 90       	pop	r0
    4d6e:	0f 90       	pop	r0
    4d70:	0f 90       	pop	r0
    4d72:	0f 90       	pop	r0
    4d74:	08 95       	ret

00004d76 <mousekey_param_inc>:
    switch (param) {
    4d76:	84 30       	cpi	r24, 0x04	; 4
    4d78:	09 f4       	brne	.+2      	; 0x4d7c <mousekey_param_inc+0x6>
    4d7a:	5d c0       	rjmp	.+186    	; 0x4e36 <mousekey_param_inc+0xc0>
    4d7c:	40 f4       	brcc	.+16     	; 0x4d8e <mousekey_param_inc+0x18>
    4d7e:	82 30       	cpi	r24, 0x02	; 2
    4d80:	61 f1       	breq	.+88     	; 0x4dda <mousekey_param_inc+0x64>
    4d82:	83 30       	cpi	r24, 0x03	; 3
    4d84:	09 f4       	brne	.+2      	; 0x4d88 <mousekey_param_inc+0x12>
    4d86:	40 c0       	rjmp	.+128    	; 0x4e08 <mousekey_param_inc+0x92>
    4d88:	81 30       	cpi	r24, 0x01	; 1
    4d8a:	41 f0       	breq	.+16     	; 0x4d9c <mousekey_param_inc+0x26>
    4d8c:	08 95       	ret
    4d8e:	85 30       	cpi	r24, 0x05	; 5
    4d90:	09 f4       	brne	.+2      	; 0x4d94 <mousekey_param_inc+0x1e>
    4d92:	68 c0       	rjmp	.+208    	; 0x4e64 <mousekey_param_inc+0xee>
    4d94:	86 30       	cpi	r24, 0x06	; 6
    4d96:	09 f4       	brne	.+2      	; 0x4d9a <mousekey_param_inc+0x24>
    4d98:	7c c0       	rjmp	.+248    	; 0x4e92 <mousekey_param_inc+0x11c>
    4d9a:	08 95       	ret
            if (mk_delay + inc < UINT8_MAX)
    4d9c:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <mk_delay>
    4da0:	48 2f       	mov	r20, r24
    4da2:	46 0f       	add	r20, r22
    4da4:	55 27       	eor	r21, r21
    4da6:	55 1f       	adc	r21, r21
    4da8:	4f 3f       	cpi	r20, 0xFF	; 255
    4daa:	51 05       	cpc	r21, r1
    4dac:	94 f4       	brge	.+36     	; 0x4dd2 <mousekey_param_inc+0x5c>
                mk_delay += inc;
    4dae:	68 0f       	add	r22, r24
    4db0:	60 93 2b 01 	sts	0x012B, r22	; 0x80012b <mk_delay>
            PRINT_SET_VAL(mk_delay);
    4db4:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <mk_delay>
    4db8:	1f 92       	push	r1
    4dba:	8f 93       	push	r24
    4dbc:	83 ed       	ldi	r24, 0xD3	; 211
    4dbe:	95 e0       	ldi	r25, 0x05	; 5
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4dc0:	9f 93       	push	r25
    4dc2:	8f 93       	push	r24
    4dc4:	0e 94 9a 06 	call	0xd34	; 0xd34 <__xprintf>
            break;
    4dc8:	0f 90       	pop	r0
    4dca:	0f 90       	pop	r0
    4dcc:	0f 90       	pop	r0
    4dce:	0f 90       	pop	r0
}
    4dd0:	08 95       	ret
                mk_delay = UINT8_MAX;
    4dd2:	8f ef       	ldi	r24, 0xFF	; 255
    4dd4:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <mk_delay>
    4dd8:	ed cf       	rjmp	.-38     	; 0x4db4 <mousekey_param_inc+0x3e>
            if (mk_interval + inc < UINT8_MAX)
    4dda:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <mk_interval>
    4dde:	48 2f       	mov	r20, r24
    4de0:	46 0f       	add	r20, r22
    4de2:	55 27       	eor	r21, r21
    4de4:	55 1f       	adc	r21, r21
    4de6:	4f 3f       	cpi	r20, 0xFF	; 255
    4de8:	51 05       	cpc	r21, r1
    4dea:	54 f4       	brge	.+20     	; 0x4e00 <mousekey_param_inc+0x8a>
                mk_interval += inc;
    4dec:	68 0f       	add	r22, r24
    4dee:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <mk_interval>
            PRINT_SET_VAL(mk_interval);
    4df2:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <mk_interval>
    4df6:	1f 92       	push	r1
    4df8:	8f 93       	push	r24
    4dfa:	81 ec       	ldi	r24, 0xC1	; 193
    4dfc:	95 e0       	ldi	r25, 0x05	; 5
    4dfe:	e0 cf       	rjmp	.-64     	; 0x4dc0 <mousekey_param_inc+0x4a>
                mk_interval = UINT8_MAX;
    4e00:	8f ef       	ldi	r24, 0xFF	; 255
    4e02:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <mk_interval>
    4e06:	f5 cf       	rjmp	.-22     	; 0x4df2 <mousekey_param_inc+0x7c>
            if (mk_max_speed + inc < UINT8_MAX)
    4e08:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <mk_max_speed>
    4e0c:	48 2f       	mov	r20, r24
    4e0e:	46 0f       	add	r20, r22
    4e10:	55 27       	eor	r21, r21
    4e12:	55 1f       	adc	r21, r21
    4e14:	4f 3f       	cpi	r20, 0xFF	; 255
    4e16:	51 05       	cpc	r21, r1
    4e18:	54 f4       	brge	.+20     	; 0x4e2e <mousekey_param_inc+0xb8>
                mk_max_speed += inc;
    4e1a:	68 0f       	add	r22, r24
    4e1c:	60 93 29 01 	sts	0x0129, r22	; 0x800129 <mk_max_speed>
            PRINT_SET_VAL(mk_max_speed);
    4e20:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <mk_max_speed>
    4e24:	1f 92       	push	r1
    4e26:	8f 93       	push	r24
    4e28:	8e ea       	ldi	r24, 0xAE	; 174
    4e2a:	95 e0       	ldi	r25, 0x05	; 5
    4e2c:	c9 cf       	rjmp	.-110    	; 0x4dc0 <mousekey_param_inc+0x4a>
                mk_max_speed = UINT8_MAX;
    4e2e:	8f ef       	ldi	r24, 0xFF	; 255
    4e30:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <mk_max_speed>
    4e34:	f5 cf       	rjmp	.-22     	; 0x4e20 <mousekey_param_inc+0xaa>
            if (mk_time_to_max + inc < UINT8_MAX)
    4e36:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <mk_time_to_max>
    4e3a:	48 2f       	mov	r20, r24
    4e3c:	46 0f       	add	r20, r22
    4e3e:	55 27       	eor	r21, r21
    4e40:	55 1f       	adc	r21, r21
    4e42:	4f 3f       	cpi	r20, 0xFF	; 255
    4e44:	51 05       	cpc	r21, r1
    4e46:	54 f4       	brge	.+20     	; 0x4e5c <mousekey_param_inc+0xe6>
                mk_time_to_max += inc;
    4e48:	68 0f       	add	r22, r24
    4e4a:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <mk_time_to_max>
            PRINT_SET_VAL(mk_time_to_max);
    4e4e:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <mk_time_to_max>
    4e52:	1f 92       	push	r1
    4e54:	8f 93       	push	r24
    4e56:	89 e9       	ldi	r24, 0x99	; 153
    4e58:	95 e0       	ldi	r25, 0x05	; 5
    4e5a:	b2 cf       	rjmp	.-156    	; 0x4dc0 <mousekey_param_inc+0x4a>
                mk_time_to_max = UINT8_MAX;
    4e5c:	8f ef       	ldi	r24, 0xFF	; 255
    4e5e:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <mk_time_to_max>
    4e62:	f5 cf       	rjmp	.-22     	; 0x4e4e <mousekey_param_inc+0xd8>
            if (mk_wheel_max_speed + inc < UINT8_MAX)
    4e64:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <mk_wheel_max_speed>
    4e68:	48 2f       	mov	r20, r24
    4e6a:	46 0f       	add	r20, r22
    4e6c:	55 27       	eor	r21, r21
    4e6e:	55 1f       	adc	r21, r21
    4e70:	4f 3f       	cpi	r20, 0xFF	; 255
    4e72:	51 05       	cpc	r21, r1
    4e74:	54 f4       	brge	.+20     	; 0x4e8a <mousekey_param_inc+0x114>
                mk_wheel_max_speed += inc;
    4e76:	68 0f       	add	r22, r24
    4e78:	60 93 27 01 	sts	0x0127, r22	; 0x800127 <mk_wheel_max_speed>
            PRINT_SET_VAL(mk_wheel_max_speed);
    4e7c:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <mk_wheel_max_speed>
    4e80:	1f 92       	push	r1
    4e82:	8f 93       	push	r24
    4e84:	80 e8       	ldi	r24, 0x80	; 128
    4e86:	95 e0       	ldi	r25, 0x05	; 5
    4e88:	9b cf       	rjmp	.-202    	; 0x4dc0 <mousekey_param_inc+0x4a>
                mk_wheel_max_speed = UINT8_MAX;
    4e8a:	8f ef       	ldi	r24, 0xFF	; 255
    4e8c:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <mk_wheel_max_speed>
    4e90:	f5 cf       	rjmp	.-22     	; 0x4e7c <mousekey_param_inc+0x106>
            if (mk_wheel_time_to_max + inc < UINT8_MAX)
    4e92:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <mk_wheel_time_to_max>
    4e96:	48 2f       	mov	r20, r24
    4e98:	46 0f       	add	r20, r22
    4e9a:	55 27       	eor	r21, r21
    4e9c:	55 1f       	adc	r21, r21
    4e9e:	4f 3f       	cpi	r20, 0xFF	; 255
    4ea0:	51 05       	cpc	r21, r1
    4ea2:	54 f4       	brge	.+20     	; 0x4eb8 <mousekey_param_inc+0x142>
                mk_wheel_time_to_max += inc;
    4ea4:	68 0f       	add	r22, r24
    4ea6:	60 93 26 01 	sts	0x0126, r22	; 0x800126 <mk_wheel_time_to_max>
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4eaa:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <mk_wheel_time_to_max>
    4eae:	1f 92       	push	r1
    4eb0:	8f 93       	push	r24
    4eb2:	85 e6       	ldi	r24, 0x65	; 101
    4eb4:	95 e0       	ldi	r25, 0x05	; 5
    4eb6:	84 cf       	rjmp	.-248    	; 0x4dc0 <mousekey_param_inc+0x4a>
                mk_wheel_time_to_max = UINT8_MAX;
    4eb8:	8f ef       	ldi	r24, 0xFF	; 255
    4eba:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <mk_wheel_time_to_max>
    4ebe:	f5 cf       	rjmp	.-22     	; 0x4eaa <mousekey_param_inc+0x134>

00004ec0 <mousekey_param_dec>:
    switch (param) {
    4ec0:	84 30       	cpi	r24, 0x04	; 4
    4ec2:	09 f4       	brne	.+2      	; 0x4ec6 <mousekey_param_dec+0x6>
    4ec4:	4a c0       	rjmp	.+148    	; 0x4f5a <mousekey_param_dec+0x9a>
    4ec6:	38 f4       	brcc	.+14     	; 0x4ed6 <mousekey_param_dec+0x16>
    4ec8:	82 30       	cpi	r24, 0x02	; 2
    4eca:	29 f1       	breq	.+74     	; 0x4f16 <mousekey_param_dec+0x56>
    4ecc:	83 30       	cpi	r24, 0x03	; 3
    4ece:	a1 f1       	breq	.+104    	; 0x4f38 <mousekey_param_dec+0x78>
    4ed0:	81 30       	cpi	r24, 0x01	; 1
    4ed2:	41 f0       	breq	.+16     	; 0x4ee4 <mousekey_param_dec+0x24>
    4ed4:	08 95       	ret
    4ed6:	85 30       	cpi	r24, 0x05	; 5
    4ed8:	09 f4       	brne	.+2      	; 0x4edc <mousekey_param_dec+0x1c>
    4eda:	50 c0       	rjmp	.+160    	; 0x4f7c <mousekey_param_dec+0xbc>
    4edc:	86 30       	cpi	r24, 0x06	; 6
    4ede:	09 f4       	brne	.+2      	; 0x4ee2 <mousekey_param_dec+0x22>
    4ee0:	5e c0       	rjmp	.+188    	; 0x4f9e <mousekey_param_dec+0xde>
    4ee2:	08 95       	ret
            if (mk_delay > dec)
    4ee4:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <mk_delay>
    4ee8:	68 17       	cp	r22, r24
    4eea:	90 f4       	brcc	.+36     	; 0x4f10 <mousekey_param_dec+0x50>
                mk_delay -= dec;
    4eec:	86 1b       	sub	r24, r22
    4eee:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <mk_delay>
            PRINT_SET_VAL(mk_delay);
    4ef2:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <mk_delay>
    4ef6:	1f 92       	push	r1
    4ef8:	8f 93       	push	r24
    4efa:	86 e5       	ldi	r24, 0x56	; 86
    4efc:	95 e0       	ldi	r25, 0x05	; 5
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4efe:	9f 93       	push	r25
    4f00:	8f 93       	push	r24
    4f02:	0e 94 9a 06 	call	0xd34	; 0xd34 <__xprintf>
            break;
    4f06:	0f 90       	pop	r0
    4f08:	0f 90       	pop	r0
    4f0a:	0f 90       	pop	r0
    4f0c:	0f 90       	pop	r0
}
    4f0e:	08 95       	ret
                mk_delay = 0;
    4f10:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <mk_delay>
    4f14:	ee cf       	rjmp	.-36     	; 0x4ef2 <mousekey_param_dec+0x32>
            if (mk_interval > dec)
    4f16:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <mk_interval>
    4f1a:	68 17       	cp	r22, r24
    4f1c:	50 f4       	brcc	.+20     	; 0x4f32 <mousekey_param_dec+0x72>
                mk_interval -= dec;
    4f1e:	86 1b       	sub	r24, r22
    4f20:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <mk_interval>
            PRINT_SET_VAL(mk_interval);
    4f24:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <mk_interval>
    4f28:	1f 92       	push	r1
    4f2a:	8f 93       	push	r24
    4f2c:	84 e4       	ldi	r24, 0x44	; 68
    4f2e:	95 e0       	ldi	r25, 0x05	; 5
    4f30:	e6 cf       	rjmp	.-52     	; 0x4efe <mousekey_param_dec+0x3e>
                mk_interval = 0;
    4f32:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <mk_interval>
    4f36:	f6 cf       	rjmp	.-20     	; 0x4f24 <mousekey_param_dec+0x64>
            if (mk_max_speed > dec)
    4f38:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <mk_max_speed>
    4f3c:	68 17       	cp	r22, r24
    4f3e:	50 f4       	brcc	.+20     	; 0x4f54 <mousekey_param_dec+0x94>
                mk_max_speed -= dec;
    4f40:	86 1b       	sub	r24, r22
    4f42:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <mk_max_speed>
            PRINT_SET_VAL(mk_max_speed);
    4f46:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <mk_max_speed>
    4f4a:	1f 92       	push	r1
    4f4c:	8f 93       	push	r24
    4f4e:	81 e3       	ldi	r24, 0x31	; 49
    4f50:	95 e0       	ldi	r25, 0x05	; 5
    4f52:	d5 cf       	rjmp	.-86     	; 0x4efe <mousekey_param_dec+0x3e>
                mk_max_speed = 0;
    4f54:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <mk_max_speed>
    4f58:	f6 cf       	rjmp	.-20     	; 0x4f46 <mousekey_param_dec+0x86>
            if (mk_time_to_max > dec)
    4f5a:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <mk_time_to_max>
    4f5e:	68 17       	cp	r22, r24
    4f60:	50 f4       	brcc	.+20     	; 0x4f76 <mousekey_param_dec+0xb6>
                mk_time_to_max -= dec;
    4f62:	86 1b       	sub	r24, r22
    4f64:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <mk_time_to_max>
            PRINT_SET_VAL(mk_time_to_max);
    4f68:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <mk_time_to_max>
    4f6c:	1f 92       	push	r1
    4f6e:	8f 93       	push	r24
    4f70:	8c e1       	ldi	r24, 0x1C	; 28
    4f72:	95 e0       	ldi	r25, 0x05	; 5
    4f74:	c4 cf       	rjmp	.-120    	; 0x4efe <mousekey_param_dec+0x3e>
                mk_time_to_max = 0;
    4f76:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <mk_time_to_max>
    4f7a:	f6 cf       	rjmp	.-20     	; 0x4f68 <mousekey_param_dec+0xa8>
            if (mk_wheel_max_speed > dec)
    4f7c:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <mk_wheel_max_speed>
    4f80:	68 17       	cp	r22, r24
    4f82:	50 f4       	brcc	.+20     	; 0x4f98 <mousekey_param_dec+0xd8>
                mk_wheel_max_speed -= dec;
    4f84:	86 1b       	sub	r24, r22
    4f86:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <mk_wheel_max_speed>
            PRINT_SET_VAL(mk_wheel_max_speed);
    4f8a:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <mk_wheel_max_speed>
    4f8e:	1f 92       	push	r1
    4f90:	8f 93       	push	r24
    4f92:	83 e0       	ldi	r24, 0x03	; 3
    4f94:	95 e0       	ldi	r25, 0x05	; 5
    4f96:	b3 cf       	rjmp	.-154    	; 0x4efe <mousekey_param_dec+0x3e>
                mk_wheel_max_speed = 0;
    4f98:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <mk_wheel_max_speed>
    4f9c:	f6 cf       	rjmp	.-20     	; 0x4f8a <mousekey_param_dec+0xca>
            if (mk_wheel_time_to_max > dec)
    4f9e:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <mk_wheel_time_to_max>
    4fa2:	68 17       	cp	r22, r24
    4fa4:	50 f4       	brcc	.+20     	; 0x4fba <mousekey_param_dec+0xfa>
                mk_wheel_time_to_max -= dec;
    4fa6:	86 1b       	sub	r24, r22
    4fa8:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <mk_wheel_time_to_max>
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4fac:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <mk_wheel_time_to_max>
    4fb0:	1f 92       	push	r1
    4fb2:	8f 93       	push	r24
    4fb4:	88 ee       	ldi	r24, 0xE8	; 232
    4fb6:	94 e0       	ldi	r25, 0x04	; 4
    4fb8:	a2 cf       	rjmp	.-188    	; 0x4efe <mousekey_param_dec+0x3e>
                mk_wheel_time_to_max = 0;
    4fba:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <mk_wheel_time_to_max>
    4fbe:	f6 cf       	rjmp	.-20     	; 0x4fac <mousekey_param_dec+0xec>

00004fc0 <switch_default_layer>:
    return 0;
}
#endif

static void switch_default_layer(uint8_t layer)
{
    4fc0:	cf 93       	push	r28
    4fc2:	df 93       	push	r29
    4fc4:	00 d0       	rcall	.+0      	; 0x4fc6 <switch_default_layer+0x6>
    4fc6:	00 d0       	rcall	.+0      	; 0x4fc8 <switch_default_layer+0x8>
    4fc8:	cd b7       	in	r28, 0x3d	; 61
    4fca:	de b7       	in	r29, 0x3e	; 62
    4fcc:	89 83       	std	Y+1, r24	; 0x01
    xprintf("L%d\n", layer);
    4fce:	1f 92       	push	r1
    4fd0:	8f 93       	push	r24
    4fd2:	8d ee       	ldi	r24, 0xED	; 237
    4fd4:	97 e0       	ldi	r25, 0x07	; 7
    4fd6:	9f 93       	push	r25
    4fd8:	8f 93       	push	r24
    4fda:	0e 94 9a 06 	call	0xd34	; 0xd34 <__xprintf>
    default_layer_set(1UL<<layer);
    4fde:	81 e0       	ldi	r24, 0x01	; 1
    4fe0:	90 e0       	ldi	r25, 0x00	; 0
    4fe2:	a0 e0       	ldi	r26, 0x00	; 0
    4fe4:	b0 e0       	ldi	r27, 0x00	; 0
    4fe6:	9c 01       	movw	r18, r24
    4fe8:	ad 01       	movw	r20, r26
    4fea:	09 80       	ldd	r0, Y+1	; 0x01
    4fec:	04 c0       	rjmp	.+8      	; 0x4ff6 <switch_default_layer+0x36>
    4fee:	22 0f       	add	r18, r18
    4ff0:	33 1f       	adc	r19, r19
    4ff2:	44 1f       	adc	r20, r20
    4ff4:	55 1f       	adc	r21, r21
    4ff6:	0a 94       	dec	r0
    4ff8:	d2 f7       	brpl	.-12     	; 0x4fee <switch_default_layer+0x2e>
    4ffa:	29 83       	std	Y+1, r18	; 0x01
    4ffc:	3a 83       	std	Y+2, r19	; 0x02
    4ffe:	4b 83       	std	Y+3, r20	; 0x03
    5000:	5c 83       	std	Y+4, r21	; 0x04
    5002:	ca 01       	movw	r24, r20
    5004:	b9 01       	movw	r22, r18
    5006:	0e 94 18 1f 	call	0x3e30	; 0x3e30 <default_layer_set>
    clear_keyboard();
    500a:	0f 90       	pop	r0
    500c:	0f 90       	pop	r0
    500e:	0f 90       	pop	r0
    5010:	0f 90       	pop	r0
}
    5012:	0f 90       	pop	r0
    5014:	0f 90       	pop	r0
    5016:	0f 90       	pop	r0
    5018:	0f 90       	pop	r0
    501a:	df 91       	pop	r29
    501c:	cf 91       	pop	r28
    clear_keyboard();
    501e:	0c 94 10 1b 	jmp	0x3620	; 0x3620 <clear_keyboard>

00005022 <command_common>:
    switch (code) {
    5022:	8a 32       	cpi	r24, 0x2A	; 42
    5024:	58 f4       	brcc	.+22     	; 0x503c <command_common+0x1a>
    5026:	86 30       	cpi	r24, 0x06	; 6
    5028:	98 f0       	brcs	.+38     	; 0x5050 <command_common+0x2e>
    502a:	ea ef       	ldi	r30, 0xFA	; 250
    502c:	e8 0f       	add	r30, r24
    502e:	e4 32       	cpi	r30, 0x24	; 36
    5030:	78 f4       	brcc	.+30     	; 0x5050 <command_common+0x2e>
    5032:	f0 e0       	ldi	r31, 0x00	; 0
    5034:	e8 57       	subi	r30, 0x78	; 120
    5036:	fa 4f       	sbci	r31, 0xFA	; 250
    5038:	0c 94 a3 2b 	jmp	0x5746	; 0x5746 <__tablejump2__>
    503c:	83 34       	cpi	r24, 0x43	; 67
    503e:	70 f4       	brcc	.+28     	; 0x505c <command_common+0x3a>
    5040:	8a 33       	cpi	r24, 0x3A	; 58
    5042:	08 f0       	brcs	.+2      	; 0x5046 <command_common+0x24>
    5044:	d3 c0       	rjmp	.+422    	; 0x51ec <command_common+0x1ca>
    5046:	85 33       	cpi	r24, 0x35	; 53
    5048:	09 f4       	brne	.+2      	; 0x504c <command_common+0x2a>
    504a:	ca c0       	rjmp	.+404    	; 0x51e0 <command_common+0x1be>
    504c:	88 33       	cpi	r24, 0x38	; 56
    504e:	f1 f0       	breq	.+60     	; 0x508c <command_common+0x6a>
            print("?");
    5050:	8c ea       	ldi	r24, 0xAC	; 172
    5052:	98 e0       	ldi	r25, 0x08	; 8
    5054:	0e 94 01 06 	call	0xc02	; 0xc02 <xputs>
            return false;
    5058:	80 e0       	ldi	r24, 0x00	; 0
}
    505a:	08 95       	ret
    switch (code) {
    505c:	83 34       	cpi	r24, 0x43	; 67
    505e:	09 f4       	brne	.+2      	; 0x5062 <command_common+0x40>
    5060:	bf c0       	rjmp	.+382    	; 0x51e0 <command_common+0x1be>
    5062:	88 34       	cpi	r24, 0x48	; 72
    5064:	a9 f7       	brne	.-22     	; 0x5050 <command_common+0x2e>
            clear_keyboard();
    5066:	0e 94 10 1b 	call	0x3620	; 0x3620 <clear_keyboard>
            print("\n\nbootloader... ");
    506a:	83 e9       	ldi	r24, 0x93	; 147
    506c:	9a e0       	ldi	r25, 0x0A	; 10
    506e:	0e 94 01 06 	call	0xc02	; 0xc02 <xputs>
    5072:	2f ef       	ldi	r18, 0xFF	; 255
    5074:	83 ed       	ldi	r24, 0xD3	; 211
    5076:	90 e3       	ldi	r25, 0x30	; 48
    5078:	21 50       	subi	r18, 0x01	; 1
    507a:	80 40       	sbci	r24, 0x00	; 0
    507c:	90 40       	sbci	r25, 0x00	; 0
    507e:	e1 f7       	brne	.-8      	; 0x5078 <command_common+0x56>
    5080:	00 c0       	rjmp	.+0      	; 0x5082 <command_common+0x60>
    5082:	00 00       	nop
            bootloader_jump(); // not return
    5084:	0e 94 49 23 	call	0x4692	; 0x4692 <bootloader_jump>
    return true;
    5088:	81 e0       	ldi	r24, 0x01	; 1
            break;
    508a:	08 95       	ret
    print("\n\t- Magic -\n"
    508c:	89 e1       	ldi	r24, 0x19	; 25
    508e:	98 e0       	ldi	r25, 0x08	; 8
            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
    5090:	0e 94 01 06 	call	0xc02	; 0xc02 <xputs>
            break;
    5094:	f9 cf       	rjmp	.-14     	; 0x5088 <command_common+0x66>
            debug_enable   = false;
    5096:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <debug_config>
    509a:	80 7f       	andi	r24, 0xF0	; 240
    509c:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <debug_config>
    print("\n\t- Console -\n"
    50a0:	82 ef       	ldi	r24, 0xF2	; 242
    50a2:	97 e0       	ldi	r25, 0x07	; 7
    50a4:	0e 94 01 06 	call	0xc02	; 0xc02 <xputs>
            print("C> ");
    50a8:	84 ea       	ldi	r24, 0xA4	; 164
    50aa:	9a e0       	ldi	r25, 0x0A	; 10
    50ac:	0e 94 01 06 	call	0xc02	; 0xc02 <xputs>
            command_state = CONSOLE;
    50b0:	81 e0       	ldi	r24, 0x01	; 1
    50b2:	80 93 72 03 	sts	0x0372, r24	; 0x800372 <command_state>
            break;
    50b6:	08 95       	ret
            if (debug_enable) {
    50b8:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <debug_config>
    50bc:	80 ff       	sbrs	r24, 0
    50be:	0a c0       	rjmp	.+20     	; 0x50d4 <command_common+0xb2>
                print("\ndebug: off\n");
    50c0:	86 e8       	ldi	r24, 0x86	; 134
    50c2:	9a e0       	ldi	r25, 0x0A	; 10
    50c4:	0e 94 01 06 	call	0xc02	; 0xc02 <xputs>
                debug_enable   = false;
    50c8:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <debug_config>
    50cc:	80 7f       	andi	r24, 0xF0	; 240
                debug_enable = true;
    50ce:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <debug_config>
    50d2:	da cf       	rjmp	.-76     	; 0x5088 <command_common+0x66>
                print("\ndebug: on\n");
    50d4:	8a e7       	ldi	r24, 0x7A	; 122
    50d6:	9a e0       	ldi	r25, 0x0A	; 10
                print("\nmouse: on\n");
    50d8:	0e 94 01 06 	call	0xc02	; 0xc02 <xputs>
                debug_enable = true;
    50dc:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <debug_config>
    50e0:	81 60       	ori	r24, 0x01	; 1
    50e2:	f5 cf       	rjmp	.-22     	; 0x50ce <command_common+0xac>
            debug_matrix = !debug_matrix;
    50e4:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <debug_config>
    50e8:	89 2f       	mov	r24, r25
    50ea:	8d 7f       	andi	r24, 0xFD	; 253
    50ec:	91 ff       	sbrs	r25, 1
    50ee:	82 60       	ori	r24, 0x02	; 2
    50f0:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <debug_config>
            if (debug_matrix) {
    50f4:	81 ff       	sbrs	r24, 1
    50f6:	03 c0       	rjmp	.+6      	; 0x50fe <command_common+0xdc>
                print("\nmatrix: on\n");
    50f8:	8d e6       	ldi	r24, 0x6D	; 109
    50fa:	9a e0       	ldi	r25, 0x0A	; 10
    50fc:	ed cf       	rjmp	.-38     	; 0x50d8 <command_common+0xb6>
                print("\nmatrix: off\n");
    50fe:	8f e5       	ldi	r24, 0x5F	; 95
    5100:	9a e0       	ldi	r25, 0x0A	; 10
    5102:	c6 cf       	rjmp	.-116    	; 0x5090 <command_common+0x6e>
            debug_keyboard = !debug_keyboard;
    5104:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <debug_config>
    5108:	89 2f       	mov	r24, r25
    510a:	8b 7f       	andi	r24, 0xFB	; 251
    510c:	92 ff       	sbrs	r25, 2
    510e:	84 60       	ori	r24, 0x04	; 4
    5110:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <debug_config>
            if (debug_keyboard) {
    5114:	82 ff       	sbrs	r24, 2
    5116:	03 c0       	rjmp	.+6      	; 0x511e <command_common+0xfc>
                print("\nkeyboard: on\n");
    5118:	80 e5       	ldi	r24, 0x50	; 80
    511a:	9a e0       	ldi	r25, 0x0A	; 10
    511c:	dd cf       	rjmp	.-70     	; 0x50d8 <command_common+0xb6>
                print("\nkeyboard: off\n");
    511e:	80 e4       	ldi	r24, 0x40	; 64
    5120:	9a e0       	ldi	r25, 0x0A	; 10
    5122:	b6 cf       	rjmp	.-148    	; 0x5090 <command_common+0x6e>
            debug_mouse = !debug_mouse;
    5124:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <debug_config>
    5128:	89 2f       	mov	r24, r25
    512a:	87 7f       	andi	r24, 0xF7	; 247
    512c:	93 ff       	sbrs	r25, 3
    512e:	88 60       	ori	r24, 0x08	; 8
    5130:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <debug_config>
            if (debug_mouse) {
    5134:	83 ff       	sbrs	r24, 3
    5136:	03 c0       	rjmp	.+6      	; 0x513e <command_common+0x11c>
                print("\nmouse: on\n");
    5138:	84 e3       	ldi	r24, 0x34	; 52
    513a:	9a e0       	ldi	r25, 0x0A	; 10
    513c:	cd cf       	rjmp	.-102    	; 0x50d8 <command_common+0xb6>
                print("\nmouse: off\n");
    513e:	87 e2       	ldi	r24, 0x27	; 39
    5140:	9a e0       	ldi	r25, 0x0A	; 10
    5142:	a6 cf       	rjmp	.-180    	; 0x5090 <command_common+0x6e>
            print("\n\t- Version -\n");
    5144:	88 e1       	ldi	r24, 0x18	; 24
    5146:	9a e0       	ldi	r25, 0x0A	; 10
    5148:	0e 94 01 06 	call	0xc02	; 0xc02 <xputs>
            print("DESC: " STR(DESCRIPTION) "\n");
    514c:	85 ef       	ldi	r24, 0xF5	; 245
    514e:	99 e0       	ldi	r25, 0x09	; 9
    5150:	0e 94 01 06 	call	0xc02	; 0xc02 <xputs>
            print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
    5154:	80 eb       	ldi	r24, 0xB0	; 176
    5156:	99 e0       	ldi	r25, 0x09	; 9
    5158:	0e 94 01 06 	call	0xc02	; 0xc02 <xputs>
            print("BUILD: " STR(TMK_VERSION) " (" __TIME__ " " __DATE__ ")\n");
    515c:	88 e8       	ldi	r24, 0x88	; 136
    515e:	99 e0       	ldi	r25, 0x09	; 9
    5160:	0e 94 01 06 	call	0xc02	; 0xc02 <xputs>
            print("OPTIONS:"
    5164:	83 e4       	ldi	r24, 0x43	; 67
    5166:	99 e0       	ldi	r25, 0x09	; 9
    5168:	0e 94 01 06 	call	0xc02	; 0xc02 <xputs>
            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
    516c:	87 e1       	ldi	r24, 0x17	; 23
    516e:	99 e0       	ldi	r25, 0x09	; 9
    5170:	8f cf       	rjmp	.-226    	; 0x5090 <command_common+0x6e>
            print("\n\t- Status -\n");
    5172:	89 e0       	ldi	r24, 0x09	; 9
    5174:	99 e0       	ldi	r25, 0x09	; 9
    5176:	0e 94 01 06 	call	0xc02	; 0xc02 <xputs>
            print_val_hex8(host_keyboard_leds());
    517a:	0e 94 7e 14 	call	0x28fc	; 0x28fc <host_keyboard_leds>
    517e:	1f 92       	push	r1
    5180:	8f 93       	push	r24
    5182:	8f ee       	ldi	r24, 0xEF	; 239
    5184:	98 e0       	ldi	r25, 0x08	; 8
    5186:	9f 93       	push	r25
    5188:	8f 93       	push	r24
    518a:	0e 94 9a 06 	call	0xd34	; 0xd34 <__xprintf>
            print_val_hex8(keyboard_protocol);
    518e:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <keyboard_protocol>
    5192:	1f 92       	push	r1
    5194:	8f 93       	push	r24
    5196:	88 ed       	ldi	r24, 0xD8	; 216
    5198:	98 e0       	ldi	r25, 0x08	; 8
    519a:	9f 93       	push	r25
    519c:	8f 93       	push	r24
    519e:	0e 94 9a 06 	call	0xd34	; 0xd34 <__xprintf>
            print_val_hex8(keyboard_idle);
    51a2:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <keyboard_idle>
    51a6:	1f 92       	push	r1
    51a8:	8f 93       	push	r24
    51aa:	85 ec       	ldi	r24, 0xC5	; 197
    51ac:	98 e0       	ldi	r25, 0x08	; 8
    51ae:	9f 93       	push	r25
    51b0:	8f 93       	push	r24
    51b2:	0e 94 9a 06 	call	0xd34	; 0xd34 <__xprintf>
            print_val_hex32(timer_read32());
    51b6:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <timer_read32>
    51ba:	9f 93       	push	r25
    51bc:	8f 93       	push	r24
    51be:	7f 93       	push	r23
    51c0:	6f 93       	push	r22
    51c2:	8e ea       	ldi	r24, 0xAE	; 174
    51c4:	98 e0       	ldi	r25, 0x08	; 8
    51c6:	9f 93       	push	r25
    51c8:	8f 93       	push	r24
    51ca:	0e 94 9a 06 	call	0xd34	; 0xd34 <__xprintf>
            break;
    51ce:	8d b7       	in	r24, 0x3d	; 61
    51d0:	9e b7       	in	r25, 0x3e	; 62
    51d2:	42 96       	adiw	r24, 0x12	; 18
    51d4:	0f b6       	in	r0, 0x3f	; 63
    51d6:	f8 94       	cli
    51d8:	9e bf       	out	0x3e, r25	; 62
    51da:	0f be       	out	0x3f, r0	; 63
    51dc:	8d bf       	out	0x3d, r24	; 61
    51de:	54 cf       	rjmp	.-344    	; 0x5088 <command_common+0x66>
            switch_default_layer(0);
    51e0:	80 e0       	ldi	r24, 0x00	; 0
            switch_default_layer((code - KC_F1) + 1);
    51e2:	0e 94 e0 27 	call	0x4fc0	; 0x4fc0 <switch_default_layer>
            break;
    51e6:	50 cf       	rjmp	.-352    	; 0x5088 <command_common+0x66>
            switch_default_layer((code - KC_1) + 1);
    51e8:	8d 51       	subi	r24, 0x1D	; 29
    51ea:	fb cf       	rjmp	.-10     	; 0x51e2 <command_common+0x1c0>
            switch_default_layer((code - KC_F1) + 1);
    51ec:	89 53       	subi	r24, 0x39	; 57
    51ee:	f9 cf       	rjmp	.-14     	; 0x51e2 <command_common+0x1c0>

000051f0 <command_extra>:
}
    51f0:	80 e0       	ldi	r24, 0x00	; 0
    51f2:	08 95       	ret

000051f4 <command_console_extra>:
    51f4:	0c 94 f8 28 	jmp	0x51f0	; 0x51f0 <command_extra>

000051f8 <command_proc>:
{
    51f8:	cf 93       	push	r28
    51fa:	c8 2f       	mov	r28, r24
    switch (command_state) {
    51fc:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <command_state>
    5200:	81 30       	cpi	r24, 0x01	; 1
    5202:	b1 f0       	breq	.+44     	; 0x5230 <command_proc+0x38>
    5204:	82 30       	cpi	r24, 0x02	; 2
    5206:	09 f4       	brne	.+2      	; 0x520a <command_proc+0x12>
    5208:	49 c0       	rjmp	.+146    	; 0x529c <command_proc+0xa4>
    520a:	81 11       	cpse	r24, r1
    520c:	3a c1       	rjmp	.+628    	; 0x5482 <command_proc+0x28a>
            if (!IS_COMMAND())
    520e:	67 e0       	ldi	r22, 0x07	; 7
    5210:	8f e0       	ldi	r24, 0x0F	; 15
    5212:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <matrix_is_on>
    5216:	88 23       	and	r24, r24
    5218:	49 f0       	breq	.+18     	; 0x522c <command_proc+0x34>
                return (command_extra(code) || command_common(code));
    521a:	8c 2f       	mov	r24, r28
    521c:	0e 94 f8 28 	call	0x51f0	; 0x51f0 <command_extra>
    5220:	81 11       	cpse	r24, r1
    5222:	1d c0       	rjmp	.+58     	; 0x525e <command_proc+0x66>
    5224:	8c 2f       	mov	r24, r28
    5226:	0e 94 11 28 	call	0x5022	; 0x5022 <command_common>
                return (command_console_extra(code) || command_console(code));
    522a:	81 70       	andi	r24, 0x01	; 1
}
    522c:	cf 91       	pop	r28
    522e:	08 95       	ret
            if (IS_COMMAND())
    5230:	67 e0       	ldi	r22, 0x07	; 7
    5232:	8f e0       	ldi	r24, 0x0F	; 15
    5234:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <matrix_is_on>
    5238:	81 11       	cpse	r24, r1
    523a:	ef cf       	rjmp	.-34     	; 0x521a <command_proc+0x22>
                return (command_console_extra(code) || command_console(code));
    523c:	8c 2f       	mov	r24, r28
    523e:	0e 94 fa 28 	call	0x51f4	; 0x51f4 <command_console_extra>
    5242:	81 11       	cpse	r24, r1
    5244:	1b c0       	rjmp	.+54     	; 0x527c <command_proc+0x84>
    switch (code) {
    5246:	c4 31       	cpi	r28, 0x14	; 20
    5248:	d9 f0       	breq	.+54     	; 0x5280 <command_proc+0x88>
    524a:	60 f4       	brcc	.+24     	; 0x5264 <command_proc+0x6c>
    524c:	cb 30       	cpi	r28, 0x0B	; 11
    524e:	71 f0       	breq	.+28     	; 0x526c <command_proc+0x74>
    5250:	c0 31       	cpi	r28, 0x10	; 16
    5252:	d1 f0       	breq	.+52     	; 0x5288 <command_proc+0x90>
            print("?");
    5254:	83 ee       	ldi	r24, 0xE3	; 227
    5256:	97 e0       	ldi	r25, 0x07	; 7
    5258:	0e 94 01 06 	call	0xc02	; 0xc02 <xputs>
    525c:	13 c0       	rjmp	.+38     	; 0x5284 <command_proc+0x8c>
                return (command_extra(code) || command_common(code));
    525e:	81 e0       	ldi	r24, 0x01	; 1
    5260:	90 e0       	ldi	r25, 0x00	; 0
    5262:	e3 cf       	rjmp	.-58     	; 0x522a <command_proc+0x32>
    switch (code) {
    5264:	c9 32       	cpi	r28, 0x29	; 41
    5266:	61 f0       	breq	.+24     	; 0x5280 <command_proc+0x88>
    5268:	c8 33       	cpi	r28, 0x38	; 56
    526a:	a1 f7       	brne	.-24     	; 0x5254 <command_proc+0x5c>
    print("\n\t- Console -\n"
    526c:	82 ef       	ldi	r24, 0xF2	; 242
    526e:	97 e0       	ldi	r25, 0x07	; 7
    5270:	0e 94 01 06 	call	0xc02	; 0xc02 <xputs>
    print("C> ");
    5274:	89 ee       	ldi	r24, 0xE9	; 233
    5276:	97 e0       	ldi	r25, 0x07	; 7
    5278:	0e 94 01 06 	call	0xc02	; 0xc02 <xputs>
                return (command_console_extra(code) || command_console(code));
    527c:	81 e0       	ldi	r24, 0x01	; 1
    527e:	d5 cf       	rjmp	.-86     	; 0x522a <command_proc+0x32>
            command_state = ONESHOT;
    5280:	10 92 72 03 	sts	0x0372, r1	; 0x800372 <command_state>
                return (command_console_extra(code) || command_console(code));
    5284:	80 e0       	ldi	r24, 0x00	; 0
    5286:	d1 cf       	rjmp	.-94     	; 0x522a <command_proc+0x32>
            mousekey_console_help();
    5288:	0e 94 a4 26 	call	0x4d48	; 0x4d48 <mousekey_console_help>
            print("M> ");
    528c:	85 ee       	ldi	r24, 0xE5	; 229
    528e:	97 e0       	ldi	r25, 0x07	; 7
    5290:	0e 94 01 06 	call	0xc02	; 0xc02 <xputs>
            command_state = MOUSEKEY;
    5294:	82 e0       	ldi	r24, 0x02	; 2
    5296:	80 93 72 03 	sts	0x0372, r24	; 0x800372 <command_state>
            return true;
    529a:	f0 cf       	rjmp	.-32     	; 0x527c <command_proc+0x84>
    switch (code) {
    529c:	c9 32       	cpi	r28, 0x29	; 41
    529e:	09 f4       	brne	.+2      	; 0x52a2 <command_proc+0xaa>
    52a0:	46 c0       	rjmp	.+140    	; 0x532e <command_proc+0x136>
    52a2:	68 f5       	brcc	.+90     	; 0x52fe <command_proc+0x106>
    52a4:	c3 31       	cpi	r28, 0x13	; 19
    52a6:	09 f4       	brne	.+2      	; 0x52aa <command_proc+0xb2>
    52a8:	51 c0       	rjmp	.+162    	; 0x534c <command_proc+0x154>
    52aa:	50 f4       	brcc	.+20     	; 0x52c0 <command_proc+0xc8>
    52ac:	c7 30       	cpi	r28, 0x07	; 7
    52ae:	09 f4       	brne	.+2      	; 0x52b2 <command_proc+0xba>
    52b0:	ce c0       	rjmp	.+412    	; 0x544e <command_proc+0x256>
    52b2:	cb 30       	cpi	r28, 0x0B	; 11
    52b4:	c9 f1       	breq	.+114    	; 0x5328 <command_proc+0x130>
            print("?");
    52b6:	87 e8       	ldi	r24, 0x87	; 135
    52b8:	96 e0       	ldi	r25, 0x06	; 6
        print("M>" );
    52ba:	0e 94 01 06 	call	0xc02	; 0xc02 <xputs>
    52be:	1d c0       	rjmp	.+58     	; 0x52fa <command_proc+0x102>
    switch (code) {
    52c0:	c4 31       	cpi	r28, 0x14	; 20
    52c2:	a9 f1       	breq	.+106    	; 0x532e <command_proc+0x136>
    52c4:	ce 51       	subi	r28, 0x1E	; 30
    52c6:	c6 30       	cpi	r28, 0x06	; 6
    52c8:	b0 f7       	brcc	.-20     	; 0x52b6 <command_proc+0xbe>
            mousekey_param = numkey2num(code);
    52ca:	ec 2f       	mov	r30, r28
    52cc:	f0 e0       	ldi	r31, 0x00	; 0
    52ce:	e9 5b       	subi	r30, 0xB9	; 185
    52d0:	fe 4f       	sbci	r31, 0xFE	; 254
    52d2:	80 81       	ld	r24, Z
    52d4:	80 93 71 03 	sts	0x0371, r24	; 0x800371 <mousekey_param>
    if (mousekey_param) {
    52d8:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <mousekey_param>
    52dc:	88 23       	and	r24, r24
    52de:	09 f4       	brne	.+2      	; 0x52e2 <command_proc+0xea>
    52e0:	cd c0       	rjmp	.+410    	; 0x547c <command_proc+0x284>
        xprintf("M%d> ", mousekey_param);
    52e2:	1f 92       	push	r1
    52e4:	8f 93       	push	r24
    52e6:	81 e8       	ldi	r24, 0x81	; 129
    52e8:	96 e0       	ldi	r25, 0x06	; 6
    52ea:	9f 93       	push	r25
    52ec:	8f 93       	push	r24
    52ee:	0e 94 9a 06 	call	0xd34	; 0xd34 <__xprintf>
    52f2:	0f 90       	pop	r0
    52f4:	0f 90       	pop	r0
    52f6:	0f 90       	pop	r0
    52f8:	0f 90       	pop	r0
    return true;
    52fa:	81 e0       	ldi	r24, 0x01	; 1
    52fc:	97 cf       	rjmp	.-210    	; 0x522c <command_proc+0x34>
    switch (code) {
    52fe:	ce 34       	cpi	r28, 0x4E	; 78
    5300:	09 f4       	brne	.+2      	; 0x5304 <command_proc+0x10c>
    5302:	a3 c0       	rjmp	.+326    	; 0x544a <command_proc+0x252>
    5304:	50 f4       	brcc	.+20     	; 0x531a <command_proc+0x122>
    5306:	c8 33       	cpi	r28, 0x38	; 56
    5308:	79 f0       	breq	.+30     	; 0x5328 <command_proc+0x130>
            mousekey_param_inc(mousekey_param, 10);
    530a:	6a e0       	ldi	r22, 0x0A	; 10
    switch (code) {
    530c:	cb 34       	cpi	r28, 0x4B	; 75
    530e:	99 f6       	brne	.-90     	; 0x52b6 <command_proc+0xbe>
            mousekey_param_inc(mousekey_param, 10);
    5310:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <mousekey_param>
    5314:	0e 94 bb 26 	call	0x4d76	; 0x4d76 <mousekey_param_inc>
            break;
    5318:	df cf       	rjmp	.-66     	; 0x52d8 <command_proc+0xe0>
    switch (code) {
    531a:	c1 35       	cpi	r28, 0x51	; 81
    531c:	09 f4       	brne	.+2      	; 0x5320 <command_proc+0x128>
    531e:	8f c0       	rjmp	.+286    	; 0x543e <command_proc+0x246>
            mousekey_param_inc(mousekey_param, 1);
    5320:	61 e0       	ldi	r22, 0x01	; 1
    switch (code) {
    5322:	c2 35       	cpi	r28, 0x52	; 82
    5324:	a9 f3       	breq	.-22     	; 0x5310 <command_proc+0x118>
    5326:	c7 cf       	rjmp	.-114    	; 0x52b6 <command_proc+0xbe>
            mousekey_console_help();
    5328:	0e 94 a4 26 	call	0x4d48	; 0x4d48 <mousekey_console_help>
            break;
    532c:	d5 cf       	rjmp	.-86     	; 0x52d8 <command_proc+0xe0>
            if (mousekey_param) {
    532e:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <mousekey_param>
    5332:	88 23       	and	r24, r24
    5334:	19 f0       	breq	.+6      	; 0x533c <command_proc+0x144>
                mousekey_param = 0;
    5336:	10 92 71 03 	sts	0x0371, r1	; 0x800371 <mousekey_param>
            break;
    533a:	ce cf       	rjmp	.-100    	; 0x52d8 <command_proc+0xe0>
                print("C> ");
    533c:	86 e9       	ldi	r24, 0x96	; 150
    533e:	96 e0       	ldi	r25, 0x06	; 6
    5340:	0e 94 01 06 	call	0xc02	; 0xc02 <xputs>
                command_state = CONSOLE;
    5344:	81 e0       	ldi	r24, 0x01	; 1
    5346:	80 93 72 03 	sts	0x0372, r24	; 0x800372 <command_state>
                return false;
    534a:	70 cf       	rjmp	.-288    	; 0x522c <command_proc+0x34>
    print("\n\t- Values -\n");
    534c:	80 e7       	ldi	r24, 0x70	; 112
    534e:	96 e0       	ldi	r25, 0x06	; 6
    5350:	0e 94 01 06 	call	0xc02	; 0xc02 <xputs>
    print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
    5354:	8e e5       	ldi	r24, 0x5E	; 94
    5356:	96 e0       	ldi	r25, 0x06	; 6
    5358:	0e 94 01 06 	call	0xc02	; 0xc02 <xputs>
    535c:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <mk_delay>
    5360:	1f 92       	push	r1
    5362:	8f 93       	push	r24
    5364:	8b e5       	ldi	r24, 0x5B	; 91
    5366:	96 e0       	ldi	r25, 0x06	; 6
    5368:	9f 93       	push	r25
    536a:	8f 93       	push	r24
    536c:	0e 94 9a 06 	call	0xd34	; 0xd34 <__xprintf>
    5370:	89 e5       	ldi	r24, 0x59	; 89
    5372:	96 e0       	ldi	r25, 0x06	; 6
    5374:	0e 94 01 06 	call	0xc02	; 0xc02 <xputs>
    print("2: interval(ms): "); pdec(mk_interval); print("\n");
    5378:	87 e4       	ldi	r24, 0x47	; 71
    537a:	96 e0       	ldi	r25, 0x06	; 6
    537c:	0e 94 01 06 	call	0xc02	; 0xc02 <xputs>
    5380:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <mk_interval>
    5384:	1f 92       	push	r1
    5386:	8f 93       	push	r24
    5388:	84 e4       	ldi	r24, 0x44	; 68
    538a:	96 e0       	ldi	r25, 0x06	; 6
    538c:	9f 93       	push	r25
    538e:	8f 93       	push	r24
    5390:	0e 94 9a 06 	call	0xd34	; 0xd34 <__xprintf>
    5394:	82 e4       	ldi	r24, 0x42	; 66
    5396:	96 e0       	ldi	r25, 0x06	; 6
    5398:	0e 94 01 06 	call	0xc02	; 0xc02 <xputs>
    print("3: max_speed: "); pdec(mk_max_speed); print("\n");
    539c:	83 e3       	ldi	r24, 0x33	; 51
    539e:	96 e0       	ldi	r25, 0x06	; 6
    53a0:	0e 94 01 06 	call	0xc02	; 0xc02 <xputs>
    53a4:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <mk_max_speed>
    53a8:	1f 92       	push	r1
    53aa:	8f 93       	push	r24
    53ac:	80 e3       	ldi	r24, 0x30	; 48
    53ae:	96 e0       	ldi	r25, 0x06	; 6
    53b0:	9f 93       	push	r25
    53b2:	8f 93       	push	r24
    53b4:	0e 94 9a 06 	call	0xd34	; 0xd34 <__xprintf>
    53b8:	8e e2       	ldi	r24, 0x2E	; 46
    53ba:	96 e0       	ldi	r25, 0x06	; 6
    53bc:	0e 94 01 06 	call	0xc02	; 0xc02 <xputs>
    print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
    53c0:	8d e1       	ldi	r24, 0x1D	; 29
    53c2:	96 e0       	ldi	r25, 0x06	; 6
    53c4:	0e 94 01 06 	call	0xc02	; 0xc02 <xputs>
    53c8:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <mk_time_to_max>
    53cc:	1f 92       	push	r1
    53ce:	8f 93       	push	r24
    53d0:	8a e1       	ldi	r24, 0x1A	; 26
    53d2:	96 e0       	ldi	r25, 0x06	; 6
    53d4:	9f 93       	push	r25
    53d6:	8f 93       	push	r24
    53d8:	0e 94 9a 06 	call	0xd34	; 0xd34 <__xprintf>
    53dc:	88 e1       	ldi	r24, 0x18	; 24
    53de:	96 e0       	ldi	r25, 0x06	; 6
    53e0:	0e 94 01 06 	call	0xc02	; 0xc02 <xputs>
    print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
    53e4:	83 e0       	ldi	r24, 0x03	; 3
    53e6:	96 e0       	ldi	r25, 0x06	; 6
    53e8:	0e 94 01 06 	call	0xc02	; 0xc02 <xputs>
    53ec:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <mk_wheel_max_speed>
    53f0:	1f 92       	push	r1
    53f2:	8f 93       	push	r24
    53f4:	80 e0       	ldi	r24, 0x00	; 0
    53f6:	96 e0       	ldi	r25, 0x06	; 6
    53f8:	9f 93       	push	r25
    53fa:	8f 93       	push	r24
    53fc:	0e 94 9a 06 	call	0xd34	; 0xd34 <__xprintf>
    5400:	8e ef       	ldi	r24, 0xFE	; 254
    5402:	95 e0       	ldi	r25, 0x05	; 5
    5404:	0e 94 01 06 	call	0xc02	; 0xc02 <xputs>
    print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
    5408:	87 ee       	ldi	r24, 0xE7	; 231
    540a:	95 e0       	ldi	r25, 0x05	; 5
    540c:	0e 94 01 06 	call	0xc02	; 0xc02 <xputs>
    5410:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <mk_wheel_time_to_max>
    5414:	1f 92       	push	r1
    5416:	8f 93       	push	r24
    5418:	84 ee       	ldi	r24, 0xE4	; 228
    541a:	95 e0       	ldi	r25, 0x05	; 5
    541c:	9f 93       	push	r25
    541e:	8f 93       	push	r24
    5420:	0e 94 9a 06 	call	0xd34	; 0xd34 <__xprintf>
    5424:	82 ee       	ldi	r24, 0xE2	; 226
    5426:	95 e0       	ldi	r25, 0x05	; 5
    5428:	0e 94 01 06 	call	0xc02	; 0xc02 <xputs>
}
    542c:	8d b7       	in	r24, 0x3d	; 61
    542e:	9e b7       	in	r25, 0x3e	; 62
    5430:	48 96       	adiw	r24, 0x18	; 24
    5432:	0f b6       	in	r0, 0x3f	; 63
    5434:	f8 94       	cli
    5436:	9e bf       	out	0x3e, r25	; 62
    5438:	0f be       	out	0x3f, r0	; 63
    543a:	8d bf       	out	0x3d, r24	; 61
    543c:	4d cf       	rjmp	.-358    	; 0x52d8 <command_proc+0xe0>
            mousekey_param_dec(mousekey_param, 1);
    543e:	61 e0       	ldi	r22, 0x01	; 1
            mousekey_param_dec(mousekey_param, 10);
    5440:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <mousekey_param>
    5444:	0e 94 60 27 	call	0x4ec0	; 0x4ec0 <mousekey_param_dec>
            break;
    5448:	47 cf       	rjmp	.-370    	; 0x52d8 <command_proc+0xe0>
            mousekey_param_dec(mousekey_param, 10);
    544a:	6a e0       	ldi	r22, 0x0A	; 10
    544c:	f9 cf       	rjmp	.-14     	; 0x5440 <command_proc+0x248>
            mk_delay = MOUSEKEY_DELAY/10;
    544e:	8e e1       	ldi	r24, 0x1E	; 30
    5450:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <mk_delay>
            mk_interval = MOUSEKEY_INTERVAL;
    5454:	82 e3       	ldi	r24, 0x32	; 50
    5456:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <mk_interval>
            mk_max_speed = MOUSEKEY_MAX_SPEED;
    545a:	8a e0       	ldi	r24, 0x0A	; 10
    545c:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <mk_max_speed>
            mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
    5460:	84 e1       	ldi	r24, 0x14	; 20
    5462:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <mk_time_to_max>
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
    5466:	88 e0       	ldi	r24, 0x08	; 8
    5468:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <mk_wheel_max_speed>
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
    546c:	88 e2       	ldi	r24, 0x28	; 40
    546e:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <mk_wheel_time_to_max>
            print("set default\n");
    5472:	89 e8       	ldi	r24, 0x89	; 137
    5474:	96 e0       	ldi	r25, 0x06	; 6
    5476:	0e 94 01 06 	call	0xc02	; 0xc02 <xputs>
            break;
    547a:	2e cf       	rjmp	.-420    	; 0x52d8 <command_proc+0xe0>
        print("M>" );
    547c:	8e e7       	ldi	r24, 0x7E	; 126
    547e:	96 e0       	ldi	r25, 0x06	; 6
    5480:	1c cf       	rjmp	.-456    	; 0x52ba <command_proc+0xc2>
            command_state = ONESHOT;
    5482:	10 92 72 03 	sts	0x0372, r1	; 0x800372 <command_state>
            return false;
    5486:	80 e0       	ldi	r24, 0x00	; 0
    5488:	d1 ce       	rjmp	.-606    	; 0x522c <command_proc+0x34>

0000548a <__fixsfsi>:
    548a:	0e 94 4c 2a 	call	0x5498	; 0x5498 <__fixunssfsi>
    548e:	68 94       	set
    5490:	b1 11       	cpse	r27, r1
    5492:	0c 94 db 2a 	jmp	0x55b6	; 0x55b6 <__fp_szero>
    5496:	08 95       	ret

00005498 <__fixunssfsi>:
    5498:	0e 94 c0 2a 	call	0x5580	; 0x5580 <__fp_splitA>
    549c:	88 f0       	brcs	.+34     	; 0x54c0 <__fixunssfsi+0x28>
    549e:	9f 57       	subi	r25, 0x7F	; 127
    54a0:	98 f0       	brcs	.+38     	; 0x54c8 <__fixunssfsi+0x30>
    54a2:	b9 2f       	mov	r27, r25
    54a4:	99 27       	eor	r25, r25
    54a6:	b7 51       	subi	r27, 0x17	; 23
    54a8:	b0 f0       	brcs	.+44     	; 0x54d6 <__fixunssfsi+0x3e>
    54aa:	e1 f0       	breq	.+56     	; 0x54e4 <__fixunssfsi+0x4c>
    54ac:	66 0f       	add	r22, r22
    54ae:	77 1f       	adc	r23, r23
    54b0:	88 1f       	adc	r24, r24
    54b2:	99 1f       	adc	r25, r25
    54b4:	1a f0       	brmi	.+6      	; 0x54bc <__fixunssfsi+0x24>
    54b6:	ba 95       	dec	r27
    54b8:	c9 f7       	brne	.-14     	; 0x54ac <__fixunssfsi+0x14>
    54ba:	14 c0       	rjmp	.+40     	; 0x54e4 <__fixunssfsi+0x4c>
    54bc:	b1 30       	cpi	r27, 0x01	; 1
    54be:	91 f0       	breq	.+36     	; 0x54e4 <__fixunssfsi+0x4c>
    54c0:	0e 94 da 2a 	call	0x55b4	; 0x55b4 <__fp_zero>
    54c4:	b1 e0       	ldi	r27, 0x01	; 1
    54c6:	08 95       	ret
    54c8:	0c 94 da 2a 	jmp	0x55b4	; 0x55b4 <__fp_zero>
    54cc:	67 2f       	mov	r22, r23
    54ce:	78 2f       	mov	r23, r24
    54d0:	88 27       	eor	r24, r24
    54d2:	b8 5f       	subi	r27, 0xF8	; 248
    54d4:	39 f0       	breq	.+14     	; 0x54e4 <__fixunssfsi+0x4c>
    54d6:	b9 3f       	cpi	r27, 0xF9	; 249
    54d8:	cc f3       	brlt	.-14     	; 0x54cc <__fixunssfsi+0x34>
    54da:	86 95       	lsr	r24
    54dc:	77 95       	ror	r23
    54de:	67 95       	ror	r22
    54e0:	b3 95       	inc	r27
    54e2:	d9 f7       	brne	.-10     	; 0x54da <__fixunssfsi+0x42>
    54e4:	3e f4       	brtc	.+14     	; 0x54f4 <__fixunssfsi+0x5c>
    54e6:	90 95       	com	r25
    54e8:	80 95       	com	r24
    54ea:	70 95       	com	r23
    54ec:	61 95       	neg	r22
    54ee:	7f 4f       	sbci	r23, 0xFF	; 255
    54f0:	8f 4f       	sbci	r24, 0xFF	; 255
    54f2:	9f 4f       	sbci	r25, 0xFF	; 255
    54f4:	08 95       	ret

000054f6 <__floatunsisf>:
    54f6:	e8 94       	clt
    54f8:	09 c0       	rjmp	.+18     	; 0x550c <__floatsisf+0x12>

000054fa <__floatsisf>:
    54fa:	97 fb       	bst	r25, 7
    54fc:	3e f4       	brtc	.+14     	; 0x550c <__floatsisf+0x12>
    54fe:	90 95       	com	r25
    5500:	80 95       	com	r24
    5502:	70 95       	com	r23
    5504:	61 95       	neg	r22
    5506:	7f 4f       	sbci	r23, 0xFF	; 255
    5508:	8f 4f       	sbci	r24, 0xFF	; 255
    550a:	9f 4f       	sbci	r25, 0xFF	; 255
    550c:	99 23       	and	r25, r25
    550e:	a9 f0       	breq	.+42     	; 0x553a <__floatsisf+0x40>
    5510:	f9 2f       	mov	r31, r25
    5512:	96 e9       	ldi	r25, 0x96	; 150
    5514:	bb 27       	eor	r27, r27
    5516:	93 95       	inc	r25
    5518:	f6 95       	lsr	r31
    551a:	87 95       	ror	r24
    551c:	77 95       	ror	r23
    551e:	67 95       	ror	r22
    5520:	b7 95       	ror	r27
    5522:	f1 11       	cpse	r31, r1
    5524:	f8 cf       	rjmp	.-16     	; 0x5516 <__floatsisf+0x1c>
    5526:	fa f4       	brpl	.+62     	; 0x5566 <__floatsisf+0x6c>
    5528:	bb 0f       	add	r27, r27
    552a:	11 f4       	brne	.+4      	; 0x5530 <__floatsisf+0x36>
    552c:	60 ff       	sbrs	r22, 0
    552e:	1b c0       	rjmp	.+54     	; 0x5566 <__floatsisf+0x6c>
    5530:	6f 5f       	subi	r22, 0xFF	; 255
    5532:	7f 4f       	sbci	r23, 0xFF	; 255
    5534:	8f 4f       	sbci	r24, 0xFF	; 255
    5536:	9f 4f       	sbci	r25, 0xFF	; 255
    5538:	16 c0       	rjmp	.+44     	; 0x5566 <__floatsisf+0x6c>
    553a:	88 23       	and	r24, r24
    553c:	11 f0       	breq	.+4      	; 0x5542 <__floatsisf+0x48>
    553e:	96 e9       	ldi	r25, 0x96	; 150
    5540:	11 c0       	rjmp	.+34     	; 0x5564 <__floatsisf+0x6a>
    5542:	77 23       	and	r23, r23
    5544:	21 f0       	breq	.+8      	; 0x554e <__floatsisf+0x54>
    5546:	9e e8       	ldi	r25, 0x8E	; 142
    5548:	87 2f       	mov	r24, r23
    554a:	76 2f       	mov	r23, r22
    554c:	05 c0       	rjmp	.+10     	; 0x5558 <__floatsisf+0x5e>
    554e:	66 23       	and	r22, r22
    5550:	71 f0       	breq	.+28     	; 0x556e <__floatsisf+0x74>
    5552:	96 e8       	ldi	r25, 0x86	; 134
    5554:	86 2f       	mov	r24, r22
    5556:	70 e0       	ldi	r23, 0x00	; 0
    5558:	60 e0       	ldi	r22, 0x00	; 0
    555a:	2a f0       	brmi	.+10     	; 0x5566 <__floatsisf+0x6c>
    555c:	9a 95       	dec	r25
    555e:	66 0f       	add	r22, r22
    5560:	77 1f       	adc	r23, r23
    5562:	88 1f       	adc	r24, r24
    5564:	da f7       	brpl	.-10     	; 0x555c <__floatsisf+0x62>
    5566:	88 0f       	add	r24, r24
    5568:	96 95       	lsr	r25
    556a:	87 95       	ror	r24
    556c:	97 f9       	bld	r25, 7
    556e:	08 95       	ret

00005570 <__fp_split3>:
    5570:	57 fd       	sbrc	r21, 7
    5572:	90 58       	subi	r25, 0x80	; 128
    5574:	44 0f       	add	r20, r20
    5576:	55 1f       	adc	r21, r21
    5578:	59 f0       	breq	.+22     	; 0x5590 <__fp_splitA+0x10>
    557a:	5f 3f       	cpi	r21, 0xFF	; 255
    557c:	71 f0       	breq	.+28     	; 0x559a <__fp_splitA+0x1a>
    557e:	47 95       	ror	r20

00005580 <__fp_splitA>:
    5580:	88 0f       	add	r24, r24
    5582:	97 fb       	bst	r25, 7
    5584:	99 1f       	adc	r25, r25
    5586:	61 f0       	breq	.+24     	; 0x55a0 <__fp_splitA+0x20>
    5588:	9f 3f       	cpi	r25, 0xFF	; 255
    558a:	79 f0       	breq	.+30     	; 0x55aa <__fp_splitA+0x2a>
    558c:	87 95       	ror	r24
    558e:	08 95       	ret
    5590:	12 16       	cp	r1, r18
    5592:	13 06       	cpc	r1, r19
    5594:	14 06       	cpc	r1, r20
    5596:	55 1f       	adc	r21, r21
    5598:	f2 cf       	rjmp	.-28     	; 0x557e <__fp_split3+0xe>
    559a:	46 95       	lsr	r20
    559c:	f1 df       	rcall	.-30     	; 0x5580 <__fp_splitA>
    559e:	08 c0       	rjmp	.+16     	; 0x55b0 <__fp_splitA+0x30>
    55a0:	16 16       	cp	r1, r22
    55a2:	17 06       	cpc	r1, r23
    55a4:	18 06       	cpc	r1, r24
    55a6:	99 1f       	adc	r25, r25
    55a8:	f1 cf       	rjmp	.-30     	; 0x558c <__fp_splitA+0xc>
    55aa:	86 95       	lsr	r24
    55ac:	71 05       	cpc	r23, r1
    55ae:	61 05       	cpc	r22, r1
    55b0:	08 94       	sec
    55b2:	08 95       	ret

000055b4 <__fp_zero>:
    55b4:	e8 94       	clt

000055b6 <__fp_szero>:
    55b6:	bb 27       	eor	r27, r27
    55b8:	66 27       	eor	r22, r22
    55ba:	77 27       	eor	r23, r23
    55bc:	cb 01       	movw	r24, r22
    55be:	97 f9       	bld	r25, 7
    55c0:	08 95       	ret

000055c2 <__mulsf3>:
    55c2:	0e 94 f3 2a 	call	0x55e6	; 0x55e6 <__mulsf3x>
    55c6:	0c 94 6d 2b 	jmp	0x56da	; 0x56da <__fp_round>
    55ca:	0e 94 5f 2b 	call	0x56be	; 0x56be <__fp_pscA>
    55ce:	38 f0       	brcs	.+14     	; 0x55de <__mulsf3+0x1c>
    55d0:	0e 94 66 2b 	call	0x56cc	; 0x56cc <__fp_pscB>
    55d4:	20 f0       	brcs	.+8      	; 0x55de <__mulsf3+0x1c>
    55d6:	95 23       	and	r25, r21
    55d8:	11 f0       	breq	.+4      	; 0x55de <__mulsf3+0x1c>
    55da:	0c 94 56 2b 	jmp	0x56ac	; 0x56ac <__fp_inf>
    55de:	0c 94 5c 2b 	jmp	0x56b8	; 0x56b8 <__fp_nan>
    55e2:	0c 94 db 2a 	jmp	0x55b6	; 0x55b6 <__fp_szero>

000055e6 <__mulsf3x>:
    55e6:	0e 94 b8 2a 	call	0x5570	; 0x5570 <__fp_split3>
    55ea:	78 f3       	brcs	.-34     	; 0x55ca <__mulsf3+0x8>

000055ec <__mulsf3_pse>:
    55ec:	99 23       	and	r25, r25
    55ee:	c9 f3       	breq	.-14     	; 0x55e2 <__mulsf3+0x20>
    55f0:	55 23       	and	r21, r21
    55f2:	b9 f3       	breq	.-18     	; 0x55e2 <__mulsf3+0x20>
    55f4:	95 0f       	add	r25, r21
    55f6:	50 e0       	ldi	r21, 0x00	; 0
    55f8:	55 1f       	adc	r21, r21
    55fa:	aa 27       	eor	r26, r26
    55fc:	ee 27       	eor	r30, r30
    55fe:	ff 27       	eor	r31, r31
    5600:	bb 27       	eor	r27, r27
    5602:	00 24       	eor	r0, r0
    5604:	08 94       	sec
    5606:	67 95       	ror	r22
    5608:	20 f4       	brcc	.+8      	; 0x5612 <__mulsf3_pse+0x26>
    560a:	e2 0f       	add	r30, r18
    560c:	f3 1f       	adc	r31, r19
    560e:	b4 1f       	adc	r27, r20
    5610:	0a 1e       	adc	r0, r26
    5612:	22 0f       	add	r18, r18
    5614:	33 1f       	adc	r19, r19
    5616:	44 1f       	adc	r20, r20
    5618:	aa 1f       	adc	r26, r26
    561a:	66 95       	lsr	r22
    561c:	a9 f7       	brne	.-22     	; 0x5608 <__mulsf3_pse+0x1c>
    561e:	77 95       	ror	r23
    5620:	30 f4       	brcc	.+12     	; 0x562e <__mulsf3_pse+0x42>
    5622:	f3 0f       	add	r31, r19
    5624:	b4 1f       	adc	r27, r20
    5626:	0a 1e       	adc	r0, r26
    5628:	12 1e       	adc	r1, r18
    562a:	08 f4       	brcc	.+2      	; 0x562e <__mulsf3_pse+0x42>
    562c:	63 95       	inc	r22
    562e:	33 0f       	add	r19, r19
    5630:	44 1f       	adc	r20, r20
    5632:	aa 1f       	adc	r26, r26
    5634:	22 1f       	adc	r18, r18
    5636:	76 95       	lsr	r23
    5638:	99 f7       	brne	.-26     	; 0x5620 <__mulsf3_pse+0x34>
    563a:	87 95       	ror	r24
    563c:	20 f4       	brcc	.+8      	; 0x5646 <__mulsf3_pse+0x5a>
    563e:	b4 0f       	add	r27, r20
    5640:	0a 1e       	adc	r0, r26
    5642:	12 1e       	adc	r1, r18
    5644:	63 1f       	adc	r22, r19
    5646:	44 0f       	add	r20, r20
    5648:	aa 1f       	adc	r26, r26
    564a:	22 1f       	adc	r18, r18
    564c:	33 1f       	adc	r19, r19
    564e:	86 95       	lsr	r24
    5650:	a9 f7       	brne	.-22     	; 0x563c <__mulsf3_pse+0x50>
    5652:	86 2f       	mov	r24, r22
    5654:	71 2d       	mov	r23, r1
    5656:	60 2d       	mov	r22, r0
    5658:	11 24       	eor	r1, r1
    565a:	9f 57       	subi	r25, 0x7F	; 127
    565c:	50 40       	sbci	r21, 0x00	; 0
    565e:	9a f0       	brmi	.+38     	; 0x5686 <__mulsf3_pse+0x9a>
    5660:	f1 f0       	breq	.+60     	; 0x569e <__mulsf3_pse+0xb2>
    5662:	88 23       	and	r24, r24
    5664:	4a f0       	brmi	.+18     	; 0x5678 <__mulsf3_pse+0x8c>
    5666:	ee 0f       	add	r30, r30
    5668:	ff 1f       	adc	r31, r31
    566a:	bb 1f       	adc	r27, r27
    566c:	66 1f       	adc	r22, r22
    566e:	77 1f       	adc	r23, r23
    5670:	88 1f       	adc	r24, r24
    5672:	91 50       	subi	r25, 0x01	; 1
    5674:	50 40       	sbci	r21, 0x00	; 0
    5676:	a9 f7       	brne	.-22     	; 0x5662 <__mulsf3_pse+0x76>
    5678:	9e 3f       	cpi	r25, 0xFE	; 254
    567a:	51 05       	cpc	r21, r1
    567c:	80 f0       	brcs	.+32     	; 0x569e <__mulsf3_pse+0xb2>
    567e:	0c 94 56 2b 	jmp	0x56ac	; 0x56ac <__fp_inf>
    5682:	0c 94 db 2a 	jmp	0x55b6	; 0x55b6 <__fp_szero>
    5686:	5f 3f       	cpi	r21, 0xFF	; 255
    5688:	e4 f3       	brlt	.-8      	; 0x5682 <__mulsf3_pse+0x96>
    568a:	98 3e       	cpi	r25, 0xE8	; 232
    568c:	d4 f3       	brlt	.-12     	; 0x5682 <__mulsf3_pse+0x96>
    568e:	86 95       	lsr	r24
    5690:	77 95       	ror	r23
    5692:	67 95       	ror	r22
    5694:	b7 95       	ror	r27
    5696:	f7 95       	ror	r31
    5698:	e7 95       	ror	r30
    569a:	9f 5f       	subi	r25, 0xFF	; 255
    569c:	c1 f7       	brne	.-16     	; 0x568e <__mulsf3_pse+0xa2>
    569e:	fe 2b       	or	r31, r30
    56a0:	88 0f       	add	r24, r24
    56a2:	91 1d       	adc	r25, r1
    56a4:	96 95       	lsr	r25
    56a6:	87 95       	ror	r24
    56a8:	97 f9       	bld	r25, 7
    56aa:	08 95       	ret

000056ac <__fp_inf>:
    56ac:	97 f9       	bld	r25, 7
    56ae:	9f 67       	ori	r25, 0x7F	; 127
    56b0:	80 e8       	ldi	r24, 0x80	; 128
    56b2:	70 e0       	ldi	r23, 0x00	; 0
    56b4:	60 e0       	ldi	r22, 0x00	; 0
    56b6:	08 95       	ret

000056b8 <__fp_nan>:
    56b8:	9f ef       	ldi	r25, 0xFF	; 255
    56ba:	80 ec       	ldi	r24, 0xC0	; 192
    56bc:	08 95       	ret

000056be <__fp_pscA>:
    56be:	00 24       	eor	r0, r0
    56c0:	0a 94       	dec	r0
    56c2:	16 16       	cp	r1, r22
    56c4:	17 06       	cpc	r1, r23
    56c6:	18 06       	cpc	r1, r24
    56c8:	09 06       	cpc	r0, r25
    56ca:	08 95       	ret

000056cc <__fp_pscB>:
    56cc:	00 24       	eor	r0, r0
    56ce:	0a 94       	dec	r0
    56d0:	12 16       	cp	r1, r18
    56d2:	13 06       	cpc	r1, r19
    56d4:	14 06       	cpc	r1, r20
    56d6:	05 06       	cpc	r0, r21
    56d8:	08 95       	ret

000056da <__fp_round>:
    56da:	09 2e       	mov	r0, r25
    56dc:	03 94       	inc	r0
    56de:	00 0c       	add	r0, r0
    56e0:	11 f4       	brne	.+4      	; 0x56e6 <__fp_round+0xc>
    56e2:	88 23       	and	r24, r24
    56e4:	52 f0       	brmi	.+20     	; 0x56fa <__fp_round+0x20>
    56e6:	bb 0f       	add	r27, r27
    56e8:	40 f4       	brcc	.+16     	; 0x56fa <__fp_round+0x20>
    56ea:	bf 2b       	or	r27, r31
    56ec:	11 f4       	brne	.+4      	; 0x56f2 <__fp_round+0x18>
    56ee:	60 ff       	sbrs	r22, 0
    56f0:	04 c0       	rjmp	.+8      	; 0x56fa <__fp_round+0x20>
    56f2:	6f 5f       	subi	r22, 0xFF	; 255
    56f4:	7f 4f       	sbci	r23, 0xFF	; 255
    56f6:	8f 4f       	sbci	r24, 0xFF	; 255
    56f8:	9f 4f       	sbci	r25, 0xFF	; 255
    56fa:	08 95       	ret

000056fc <__mulhi3>:
    56fc:	00 24       	eor	r0, r0
    56fe:	55 27       	eor	r21, r21
    5700:	04 c0       	rjmp	.+8      	; 0x570a <__mulhi3+0xe>
    5702:	08 0e       	add	r0, r24
    5704:	59 1f       	adc	r21, r25
    5706:	88 0f       	add	r24, r24
    5708:	99 1f       	adc	r25, r25
    570a:	00 97       	sbiw	r24, 0x00	; 0
    570c:	29 f0       	breq	.+10     	; 0x5718 <__mulhi3+0x1c>
    570e:	76 95       	lsr	r23
    5710:	67 95       	ror	r22
    5712:	b8 f3       	brcs	.-18     	; 0x5702 <__mulhi3+0x6>
    5714:	71 05       	cpc	r23, r1
    5716:	b9 f7       	brne	.-18     	; 0x5706 <__mulhi3+0xa>
    5718:	80 2d       	mov	r24, r0
    571a:	95 2f       	mov	r25, r21
    571c:	08 95       	ret

0000571e <__divmodhi4>:
    571e:	97 fb       	bst	r25, 7
    5720:	07 2e       	mov	r0, r23
    5722:	16 f4       	brtc	.+4      	; 0x5728 <__divmodhi4+0xa>
    5724:	00 94       	com	r0
    5726:	07 d0       	rcall	.+14     	; 0x5736 <__divmodhi4_neg1>
    5728:	77 fd       	sbrc	r23, 7
    572a:	09 d0       	rcall	.+18     	; 0x573e <__divmodhi4_neg2>
    572c:	0e 94 a9 2b 	call	0x5752	; 0x5752 <__udivmodhi4>
    5730:	07 fc       	sbrc	r0, 7
    5732:	05 d0       	rcall	.+10     	; 0x573e <__divmodhi4_neg2>
    5734:	3e f4       	brtc	.+14     	; 0x5744 <__divmodhi4_exit>

00005736 <__divmodhi4_neg1>:
    5736:	90 95       	com	r25
    5738:	81 95       	neg	r24
    573a:	9f 4f       	sbci	r25, 0xFF	; 255
    573c:	08 95       	ret

0000573e <__divmodhi4_neg2>:
    573e:	70 95       	com	r23
    5740:	61 95       	neg	r22
    5742:	7f 4f       	sbci	r23, 0xFF	; 255

00005744 <__divmodhi4_exit>:
    5744:	08 95       	ret

00005746 <__tablejump2__>:
    5746:	ee 0f       	add	r30, r30
    5748:	ff 1f       	adc	r31, r31
    574a:	05 90       	lpm	r0, Z+
    574c:	f4 91       	lpm	r31, Z
    574e:	e0 2d       	mov	r30, r0
    5750:	09 94       	ijmp

00005752 <__udivmodhi4>:
    5752:	aa 1b       	sub	r26, r26
    5754:	bb 1b       	sub	r27, r27
    5756:	51 e1       	ldi	r21, 0x11	; 17
    5758:	07 c0       	rjmp	.+14     	; 0x5768 <__udivmodhi4_ep>

0000575a <__udivmodhi4_loop>:
    575a:	aa 1f       	adc	r26, r26
    575c:	bb 1f       	adc	r27, r27
    575e:	a6 17       	cp	r26, r22
    5760:	b7 07       	cpc	r27, r23
    5762:	10 f0       	brcs	.+4      	; 0x5768 <__udivmodhi4_ep>
    5764:	a6 1b       	sub	r26, r22
    5766:	b7 0b       	sbc	r27, r23

00005768 <__udivmodhi4_ep>:
    5768:	88 1f       	adc	r24, r24
    576a:	99 1f       	adc	r25, r25
    576c:	5a 95       	dec	r21
    576e:	a9 f7       	brne	.-22     	; 0x575a <__udivmodhi4_loop>
    5770:	80 95       	com	r24
    5772:	90 95       	com	r25
    5774:	bc 01       	movw	r22, r24
    5776:	cd 01       	movw	r24, r26
    5778:	08 95       	ret

0000577a <_exit>:
    577a:	f8 94       	cli

0000577c <__stop_program>:
    577c:	ff cf       	rjmp	.-2      	; 0x577c <__stop_program>
